{"version":3,"file":"FormModal.mjs","sources":["../../../../admin/src/components/FormModal/FormModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useStrapiApp, useTracking, useNotification } from '@strapi/admin/strapi-admin';\nimport { Button, Divider, Flex, Modal, Tabs } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport set from 'lodash/set';\nimport { useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { pluginId } from '../../pluginId';\nimport { getTrad, isAllowedContentTypesForRelations } from '../../utils';\nimport { findAttribute } from '../../utils/findAttribute';\nimport { getYupInnerErrors } from '../../utils/getYupInnerErrors';\n// New compos\nimport { AllowedTypesSelect } from '../AllowedTypesSelect';\nimport { IconByType } from '../AttributeIcon';\nimport { AttributeOptions } from '../AttributeOptions/AttributeOptions';\nimport { BooleanDefaultValueSelect } from '../BooleanDefaultValueSelect';\nimport { BooleanRadioGroup } from '../BooleanRadioGroup';\nimport { CheckboxWithNumberField } from '../CheckboxWithNumberField';\nimport { ContentTypeRadioGroup } from '../ContentTypeRadioGroup';\nimport { CustomRadioGroup } from '../CustomRadioGroup';\nimport { useDataManager } from '../DataManager/useDataManager';\nimport { DraftAndPublishToggle } from '../DraftAndPublishToggle';\nimport { FormModalEndActions } from '../FormModalEndActions';\nimport { FormModalHeader } from '../FormModalHeader';\nimport { useFormModalNavigation } from '../FormModalNavigation/useFormModalNavigation';\nimport { FormModalSubHeader } from '../FormModalSubHeader';\nimport { IconPicker } from '../IconPicker/IconPicker';\nimport { PluralName } from '../PluralName';\nimport { Relation } from '../Relation/Relation';\nimport { SelectCategory } from '../SelectCategory';\nimport { SelectComponent } from '../SelectComponent';\nimport { SelectComponents } from '../SelectComponents';\nimport { SelectDateType } from '../SelectDateType';\nimport { SelectNumber } from '../SelectNumber';\nimport { SingularName } from '../SingularName';\nimport { TabForm } from '../TabForm';\nimport { TextareaEnum } from '../TextareaEnum';\n\nimport { forms } from './forms/forms';\nimport { actions, initialState, type State as FormModalState } from './reducer';\nimport { canEditContentType } from './utils/canEditContentType';\nimport { createComponentUid, createUid } from './utils/createUid';\nimport { getAttributesToDisplay } from './utils/getAttributesToDisplay';\nimport { getFormInputNames } from './utils/getFormInputNames';\n\nimport type { ContentType } from '../../types';\nimport type { Internal } from '@strapi/types';\n\nconst FormComponent = styled.form`\n  overflow: auto;\n`;\n\nconst selectState = (state: Record<string, unknown>) =>\n  (state['content-type-builder_formModal'] || initialState) as FormModalState;\n\nexport const FormModal = () => {\n  const {\n    onCloseModal,\n    onNavigateToChooseAttributeModal,\n    onNavigateToAddCompoToDZModal,\n    onNavigateToCreateComponentStep2,\n    actionType,\n    attributeName,\n    attributeType,\n    customFieldUid,\n    dynamicZoneTarget,\n    forTarget,\n    modalType,\n    isOpen,\n    kind,\n    step,\n    targetUid,\n    showBackLink,\n    activeTab,\n    setActiveTab,\n  } = useFormModalNavigation();\n\n  const getPlugin = useStrapiApp('FormModal', (state) => state.getPlugin);\n  const getCustomField = useStrapiApp('FormModal', (state) => state.customFields.get);\n  const customField = getCustomField(customFieldUid);\n\n  const dispatch = useDispatch();\n  const { toggleNotification } = useNotification();\n  const reducerState = useSelector(selectState, shallowEqual);\n\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const ctbPlugin = getPlugin(pluginId);\n  const ctbFormsAPI: any = ctbPlugin?.apis.forms;\n  const inputsFromPlugins = ctbFormsAPI.components.inputs;\n\n  const {\n    addAttribute,\n    editAttribute,\n    addCustomFieldAttribute,\n    addCreatedComponentToDynamicZone,\n    changeDynamicZoneComponents,\n    contentTypes,\n    components,\n    createSchema,\n    createComponentSchema,\n    deleteComponent,\n    deleteContentType,\n    editCustomFieldAttribute,\n    updateSchema,\n    nestedComponents,\n    sortedContentTypesList,\n    updateComponentSchema,\n    updateComponentUid,\n    reservedNames,\n  } = useDataManager();\n\n  const {\n    componentToCreate,\n    formErrors,\n    initialData,\n    isCreatingComponentWhileAddingAField,\n    modifiedData,\n  } = reducerState;\n\n  const type = forTarget === 'component' ? components[targetUid] : contentTypes[targetUid];\n\n  React.useEffect(() => {\n    if (isOpen) {\n      const collectionTypesForRelation = sortedContentTypesList.filter(\n        isAllowedContentTypesForRelations\n      );\n\n      if (actionType === 'edit' && modalType === 'attribute' && forTarget === 'contentType') {\n        trackUsage('willEditFieldOfContentType');\n      }\n\n      // Case:\n      // the user opens the modal chooseAttributes\n      // selects dynamic zone => set the field name\n      // then goes to step 1 (the modal is addComponentToDynamicZone) and finally reloads the app.\n      // In this particular if the user tries to add components to the zone it will pop an error since the dz is unknown\n      const foundDynamicZoneTarget =\n        findAttribute(get(type, 'schema.attributes', []), dynamicZoneTarget) || null;\n\n      // Create content type we need to add the default option draftAndPublish\n      if (modalType === 'contentType' && actionType === 'create') {\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              draftAndPublish: true,\n            },\n          })\n        );\n      }\n\n      // Edit content type\n      if (modalType === 'contentType' && actionType === 'edit') {\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              displayName: type.info.displayName,\n              draftAndPublish: type.options?.draftAndPublish,\n              kind: 'kind' in type && type.kind,\n              pluginOptions: type.pluginOptions,\n              pluralName: 'pluralName' in type.info && type.info.pluralName,\n              singularName: 'singularName' in type.info && type.info.singularName,\n            },\n          })\n        );\n      }\n\n      // Edit component\n      if (modalType === 'component' && actionType === 'edit') {\n        dispatch(\n          actions.setDataToEdit({\n            data: {\n              displayName: type.info.displayName,\n              category: 'category' in type && type.category,\n              icon: type.info.icon,\n            },\n          })\n        );\n      }\n\n      // Special case for the dynamic zone\n      if (modalType === 'addComponentToDynamicZone' && actionType === 'edit') {\n        const attributeToEdit = {\n          ...foundDynamicZoneTarget,\n          // We filter the available components\n          // Because this modal is only used for adding components\n          components: [],\n          name: dynamicZoneTarget,\n          createComponent: false,\n          componentToCreate: { type: 'component' },\n        };\n\n        dispatch(\n          actions.setDynamicZoneDataSchema({\n            attributeToEdit,\n          })\n        );\n      }\n\n      // Set the predefined data structure to create an attribute\n      if (attributeType) {\n        const attributeToEditNotFormatted = findAttribute(\n          get(type, ['attributes'], []),\n          attributeName\n        );\n        const attributeToEdit = {\n          ...attributeToEditNotFormatted,\n          name: attributeName,\n        };\n\n        // We need to set the repeatable key to false when editing a component\n        // The API doesn't send this info\n        if (attributeType === 'component' && actionType === 'edit') {\n          if (!('repeatable' in attributeToEdit) || !attributeToEdit.repeatable) {\n            set(attributeToEdit, 'repeatable', false);\n          }\n        }\n\n        if (modalType === 'customField') {\n          if (actionType === 'edit') {\n            dispatch(\n              actions.setCustomFieldDataSchema({\n                isEditing: true,\n                modifiedDataToSetForEditing: attributeToEdit,\n                uid: type.uid,\n              })\n            );\n          } else {\n            dispatch(\n              actions.setCustomFieldDataSchema({\n                customField: pick(customField, ['type', 'options']),\n                isEditing: false,\n                modifiedDataToSetForEditing: attributeToEdit,\n                uid: type.uid,\n              })\n            );\n          }\n        } else {\n          dispatch(\n            actions.setAttributeDataSchema({\n              attributeType,\n              nameToSetForRelation: get(collectionTypesForRelation, ['0', 'title'], 'error'),\n              targetUid: get(collectionTypesForRelation, ['0', 'uid'], 'error'),\n              isEditing: actionType === 'edit',\n              modifiedDataToSetForEditing: attributeToEdit,\n              step,\n              uid: type.uid,\n            })\n          );\n        }\n      }\n    } else {\n      dispatch(actions.resetProps());\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [actionType, attributeName, attributeType, dynamicZoneTarget, forTarget, isOpen, modalType]);\n\n  const isCreatingContentType = modalType === 'contentType';\n  const isCreatingComponent = modalType === 'component';\n  const isCreatingAttribute = modalType === 'attribute';\n  const isCreatingCustomFieldAttribute = modalType === 'customField';\n  const isComponentAttribute = attributeType === 'component' && isCreatingAttribute;\n  const isCreating = actionType === 'create';\n  const isCreatingComponentFromAView =\n    get(modifiedData, 'createComponent', false) || isCreatingComponentWhileAddingAField;\n  const isInFirstComponentStep = step === '1';\n  const isPickingAttribute = modalType === 'chooseAttribute';\n  const uid = createUid(modifiedData.displayName || '');\n  const attributes = get(type, ['attributes'], null) as {\n    name: string;\n  }[];\n\n  const checkFormValidity = async () => {\n    let schema;\n    const dataToValidate =\n      isCreatingComponentFromAView && step === '1'\n        ? get(modifiedData, 'componentToCreate', {})\n        : modifiedData;\n    // Check form validity for content type\n    if (isCreatingContentType) {\n      schema = forms.contentType.schema(\n        Object.keys(contentTypes),\n        actionType === 'edit',\n        // currentUID\n        (type?.uid ?? null) as Internal.UID.ContentType,\n        reservedNames,\n        ctbFormsAPI,\n        contentTypes\n      );\n\n      // Check form validity for component\n      // This is happening when the user click on the link from the left menu\n    } else if (isCreatingComponent) {\n      schema = forms.component.schema(\n        Object.keys(components) as Internal.UID.Component[],\n        modifiedData.category || '',\n        reservedNames,\n        actionType === 'edit',\n        components,\n        modifiedData.displayName || '',\n        (type?.uid ?? null) as Internal.UID.Component\n        // ctbFormsAPI\n      );\n    } else if (isCreatingCustomFieldAttribute) {\n      schema = forms.customField.schema({\n        schemaAttributes: get(type, ['attributes'], []),\n        attributeType: customField!.type,\n        reservedNames,\n        schemaData: { modifiedData, initialData },\n        ctbFormsAPI,\n        customFieldValidator: customField!.options?.validator,\n      });\n\n      // Check for validity for creating a component\n      // This is happening when the user creates a component \"on the fly\"\n      // Since we temporarily store the component info in another object\n      // The data is set in the componentToCreate key\n    } else if (isComponentAttribute && isCreatingComponentFromAView && isInFirstComponentStep) {\n      schema = forms.component.schema(\n        Object.keys(components) as Internal.UID.Component[],\n        get(modifiedData, 'componentToCreate.category', ''),\n        reservedNames,\n        actionType === 'edit',\n        components,\n        modifiedData.componentToCreate.displayName || ''\n      );\n\n      // Check form validity for creating a 'common attribute'\n      // We need to make sure that it is independent from the step\n    } else if (isCreatingAttribute && !isInFirstComponentStep) {\n      const computedAttrbiuteType = attributeType === 'relation' ? 'relation' : modifiedData.type;\n\n      let alreadyTakenTargetContentTypeAttributes: any[] = [];\n\n      if (computedAttrbiuteType === 'relation') {\n        const targetContentTypeUID = get(modifiedData, ['target'], null);\n\n        const targetContentTypeAttributes = get(\n          contentTypes,\n          [targetContentTypeUID, 'attributes'],\n          []\n        );\n\n        // Create an array with all the targetContentType attributes name\n        // in order to prevent the user from creating a relation with a targetAttribute\n        // that may exist in the other content type\n        alreadyTakenTargetContentTypeAttributes = targetContentTypeAttributes.filter(\n          ({ name: attrName }: { name: string }) => {\n            // Keep all the target content type attributes when creating a relation\n            if (actionType !== 'edit') {\n              return true;\n            }\n\n            // Remove the already created one when editing\n            return attrName !== initialData.targetAttribute;\n          }\n        );\n      }\n      schema = forms.attribute.schema(\n        type,\n        computedAttrbiuteType,\n        reservedNames,\n        alreadyTakenTargetContentTypeAttributes,\n        { modifiedData, initialData },\n        ctbFormsAPI\n      );\n    } else {\n      // The user is either in the addComponentToDynamicZone modal or\n      // in step 1 of the add component (modalType=attribute&attributeType=component) but not creating a component\n      // eslint-disable-next-line no-lonely-if\n      if (isInFirstComponentStep && isCreatingComponentFromAView) {\n        schema = forms.component.schema(\n          Object.keys(components) as Internal.UID.Component[],\n          get(modifiedData, 'componentToCreate.category', ''),\n          reservedNames,\n          actionType === 'edit',\n          components,\n          modifiedData.componentToCreate.displayName || ''\n        );\n      } else {\n        // The form is valid\n        // The case here is being in the addComponentToDynamicZone modal and not creating a component\n        return;\n      }\n    }\n\n    await schema.validate(dataToValidate, { abortEarly: false });\n  };\n\n  const handleChange = React.useCallback(\n    ({\n      target: { name, value, type, ...rest },\n    }: {\n      target: { name: string; value: string; type: string };\n    }) => {\n      const namesThatCanResetToNullValue = [\n        'enumName',\n        'max',\n        'min',\n        'maxLength',\n        'minLength',\n        'regex',\n        'default',\n      ];\n\n      let val;\n\n      if (namesThatCanResetToNullValue.includes(name) && value === '') {\n        val = null;\n      } else {\n        val = value;\n      }\n\n      const clonedErrors = Object.assign({}, formErrors);\n\n      // Reset min error when modifying the max\n      if (name === 'max') {\n        delete clonedErrors.min;\n      }\n\n      // Same here\n      if (name === 'maxLength') {\n        delete clonedErrors.minLength;\n      }\n\n      // Since the onBlur is deactivated we remove the errors directly when changing an input\n      delete clonedErrors[name];\n\n      dispatch(\n        actions.setErrors({\n          errors: clonedErrors,\n        })\n      );\n\n      dispatch(\n        actions.onChange({\n          keys: name.split('.'),\n          value: val,\n        })\n      );\n    },\n    [dispatch, formErrors]\n  );\n\n  const handleSubmit = async (e: React.SyntheticEvent, shouldContinue = isCreating) => {\n    e.preventDefault();\n\n    try {\n      await checkFormValidity();\n\n      dispatch(\n        actions.setErrors({\n          errors: {},\n        })\n      );\n\n      sendButtonAddMoreFieldEvent(shouldContinue);\n\n      const ctTargetUid = targetUid;\n\n      if (isCreatingContentType) {\n        // Create the content type schema\n        if (isCreating) {\n          createSchema({\n            data: {\n              kind,\n              displayName: modifiedData.displayName,\n              draftAndPublish: modifiedData.draftAndPublish,\n              pluginOptions: modifiedData.pluginOptions,\n              singularName: modifiedData.singularName,\n              pluralName: modifiedData.pluralName,\n            },\n            uid,\n          });\n\n          // Redirect the user to the created content type\n          navigate({ pathname: `/plugins/${pluginId}/content-types/${uid}` });\n\n          onCloseModal();\n        } else {\n          // NOTE: we have to assume we have a CT here until we refactor more\n          const contentType = type as ContentType;\n          // We cannot switch from collection type to single when the modal is making relations other than oneWay or manyWay\n          if (canEditContentType(contentType, modifiedData)) {\n            onCloseModal();\n\n            await updateSchema({\n              uid: contentType.uid,\n              data: {\n                displayName: modifiedData.displayName,\n                kind: modifiedData.kind,\n                draftAndPublish: modifiedData.draftAndPublish,\n                pluginOptions: modifiedData.pluginOptions,\n              },\n            });\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatMessage({ id: 'notification.contentType.relations.conflict' }),\n            });\n          }\n\n          return;\n        }\n        // We are creating a component using the component modal from the left menu\n      } else if (modalType === 'component') {\n        if (isCreating) {\n          // Create the component schema\n          const componentUid = createComponentUid(modifiedData.displayName, modifiedData.category);\n          const { category, ...rest } = modifiedData;\n\n          createComponentSchema({\n            data: {\n              displayName: rest.displayName,\n              icon: rest.icon,\n            },\n            uid: componentUid,\n            componentCategory: category,\n          });\n\n          // Redirect the user to the created component\n          navigate({\n            pathname: `/plugins/${pluginId}/component-categories/${category}/${componentUid}`,\n          });\n\n          onCloseModal();\n\n          return;\n        } else {\n          updateComponentSchema({\n            data: {\n              icon: modifiedData.icon,\n              displayName: modifiedData.displayName,\n            },\n            componentUID: targetUid,\n          });\n\n          if (type.status === 'NEW') {\n            const componentUid = createComponentUid(\n              modifiedData.displayName,\n              modifiedData.category\n            );\n\n            updateComponentUid({\n              componentUID: targetUid,\n              newComponentUID: componentUid,\n            });\n\n            navigate({\n              pathname: `/plugins/${pluginId}/component-categories/${modifiedData.category}/${componentUid}`,\n            });\n          }\n\n          // Close the modal\n          onCloseModal();\n\n          return;\n        }\n      } else if (isCreatingCustomFieldAttribute) {\n        const customFieldAttributeUpdate = {\n          attributeToSet: { ...modifiedData, customField: customFieldUid },\n          forTarget,\n          targetUid,\n          name: initialData.name,\n        };\n\n        if (actionType === 'edit') {\n          editCustomFieldAttribute(customFieldAttributeUpdate);\n        } else {\n          addCustomFieldAttribute(customFieldAttributeUpdate);\n        }\n\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid: ctTargetUid,\n          });\n        } else {\n          onCloseModal();\n        }\n\n        return;\n      } else if (isCreatingAttribute && !isCreatingComponentFromAView) {\n        const isDynamicZoneAttribute = attributeType === 'dynamiczone';\n\n        // The user is creating a DZ (he had entered the name of the dz)\n        if (isDynamicZoneAttribute) {\n          if (actionType === 'create') {\n            addAttribute({\n              attributeToSet: modifiedData,\n              forTarget,\n              targetUid,\n            });\n          } else {\n            editAttribute({\n              attributeToSet: modifiedData,\n              forTarget,\n              targetUid,\n              name: initialData.name,\n            });\n          }\n\n          // Adding a component to a dynamiczone is not the same logic as creating a simple field\n          // so the search is different\n          if (isCreating) {\n            // Step 1 of adding a component to a DZ, the user has the option to create a component\n            dispatch(actions.resetPropsAndSetTheFormForAddingACompoToADz());\n\n            setActiveTab('basic');\n            onNavigateToAddCompoToDZModal({ dynamicZoneTarget: modifiedData.name });\n          } else {\n            onCloseModal();\n          }\n\n          return;\n        }\n\n        // Normal fields like boolean relations or dynamic zone\n        if (!isComponentAttribute) {\n          if (actionType === 'create') {\n            addAttribute({\n              attributeToSet: modifiedData,\n              forTarget,\n              targetUid,\n            });\n          } else {\n            editAttribute({\n              attributeToSet: modifiedData,\n              forTarget,\n              targetUid,\n              name: initialData.name,\n            });\n          }\n\n          if (shouldContinue) {\n            onNavigateToChooseAttributeModal({\n              forTarget,\n              targetUid: ctTargetUid,\n            });\n          } else {\n            onCloseModal();\n          }\n\n          return;\n\n          // Adding an existing component\n        }\n        // eslint-disable-next-line no-lonely-if\n        if (isInFirstComponentStep) {\n          // Navigate the user to step 2\n          onNavigateToCreateComponentStep2();\n\n          // Clear the reducer and prepare the modified data\n          // This way we don't have to add some logic to re-run the useEffect\n          // The first step is either needed to create a component or just to navigate\n          // To the modal for adding a \"common field\"\n          dispatch(\n            actions.resetPropsAndSetFormForAddingAnExistingCompo({\n              uid: type.uid,\n            })\n          );\n\n          // We don't want all the props to be reset\n          return;\n\n          // Here we are in step 2\n          // The step 2 is also use to edit an attribute that is a component\n        }\n\n        if (actionType === 'create') {\n          addAttribute({\n            attributeToSet: modifiedData,\n            forTarget,\n            targetUid,\n          });\n        } else {\n          editAttribute({\n            attributeToSet: modifiedData,\n            forTarget,\n            targetUid,\n            name: initialData.name,\n          });\n        }\n\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({\n            forTarget,\n            targetUid,\n          });\n        } else {\n          onCloseModal();\n        }\n\n        // We don't need to end the loop here we want the reducer to be reinitialized\n\n        // Logic for creating a component without clicking on the link in\n        // the left menu\n        // We need to separate the logic otherwise the component would be created\n        // even though the user didn't set any field\n        // We need to prevent the component from being created if the user closes the modal at step 2 without any submission\n      } else if (isCreatingAttribute && isCreatingComponentFromAView) {\n        // Step 1\n        if (isInFirstComponentStep) {\n          // Here the search could be refactored since it is the same as the case from above\n          // Navigate the user to step 2\n\n          trackUsage('willCreateComponentFromAttributesModal');\n\n          // Here we clear the reducer state but we also keep the created component\n          // If we were to create the component before\n          dispatch(\n            actions.resetPropsAndSaveCurrentData({\n              uid: type.uid,\n            })\n          );\n\n          onNavigateToCreateComponentStep2();\n\n          // Terminate because we don't want the reducer to be entirely reset\n          return;\n\n          // Step 2 of creating a component (which is setting the attribute name in the parent's schema)\n        }\n        // We are destructuring because the modifiedData object doesn't have the appropriate format to create a field\n        const { category, ...rest } = componentToCreate;\n        // Create a the component temp UID\n        // This could be refactored but I think it's more understandable to separate the logic\n        const componentUid = createComponentUid(componentToCreate.displayName, category);\n        // Create the component first and add it to the components data\n        createComponentSchema({\n          // Component data\n          data: {\n            icon: rest.icon,\n            displayName: rest.displayName,\n          },\n          uid: componentUid,\n          componentCategory: category,\n        });\n\n        // Add the field to the schema\n        addAttribute({\n          attributeToSet: modifiedData,\n          forTarget,\n          targetUid,\n        });\n\n        dispatch(actions.resetProps());\n\n        // Open modal attribute for adding attr to component\n        if (shouldContinue) {\n          onNavigateToChooseAttributeModal({ forTarget: 'component', targetUid: componentUid });\n        } else {\n          onCloseModal();\n        }\n\n        return;\n      } else {\n        // The modal is addComponentToDynamicZone\n        if (isInFirstComponentStep) {\n          if (isCreatingComponentFromAView) {\n            const { category, type, ...rest } = modifiedData.componentToCreate;\n            const componentUid = createComponentUid(\n              modifiedData.componentToCreate.displayName,\n              category\n            );\n            // Create the component first and add it to the components data\n            createComponentSchema({\n              data: rest,\n              uid: componentUid,\n              componentCategory: category,\n            });\n            // Add the created component to the DZ\n            // We don't want to remove the old ones\n            addCreatedComponentToDynamicZone({\n              forTarget,\n              targetUid,\n              dynamicZoneTarget,\n              componentsToAdd: [componentUid],\n            });\n\n            // The Dynamic Zone and the component is created\n            // Open the modal to add fields to the created component\n            onNavigateToChooseAttributeModal({ forTarget: 'component', targetUid: componentUid });\n          } else {\n            // Add the components to the DZ\n            changeDynamicZoneComponents({\n              forTarget,\n              targetUid,\n              dynamicZoneTarget,\n              newComponents: modifiedData.components,\n            });\n\n            onCloseModal();\n          }\n        } else {\n          console.error('This case is not handled');\n        }\n\n        return;\n      }\n\n      dispatch(actions.resetProps());\n    } catch (err: unknown) {\n      if (yup.ValidationError.isError(err)) {\n        const errors = getYupInnerErrors(err);\n\n        dispatch(\n          actions.setErrors({\n            errors,\n          })\n        );\n      }\n    }\n  };\n\n  const handleConfirmClose = () => {\n    // eslint-disable-next-line no-alert\n    const confirm = window.confirm(\n      formatMessage({\n        id: 'window.confirm.close-modal.file',\n        defaultMessage: 'Are you sure? Your changes will be lost.',\n      })\n    );\n\n    if (confirm) {\n      onCloseModal();\n      dispatch(actions.resetProps());\n    }\n  };\n\n  const handleClosed = () => {\n    // Close the modal\n    if (!isEqual(modifiedData, initialData)) {\n      handleConfirmClose();\n    } else {\n      onCloseModal();\n      // Reset the reducer\n      dispatch(actions.resetProps());\n    }\n  };\n\n  const sendAdvancedTabEvent = (tab: string) => {\n    if (tab !== 'advanced') {\n      return;\n    }\n\n    if (isCreatingContentType) {\n      trackUsage('didSelectContentTypeSettings');\n\n      return;\n    }\n\n    if (forTarget === 'contentType') {\n      trackUsage('didSelectContentTypeFieldSettings');\n    }\n  };\n\n  const sendButtonAddMoreFieldEvent = (shouldContinue: boolean) => {\n    if (\n      modalType === 'attribute' &&\n      forTarget === 'contentType' &&\n      attributeType !== 'dynamiczone' &&\n      shouldContinue\n    ) {\n      trackUsage('willAddMoreFieldToContentType');\n    }\n  };\n\n  const shouldDisableAdvancedTab = () => {\n    if (modalType === 'component') {\n      return true;\n    }\n\n    if (has(modifiedData, 'createComponent')) {\n      return true;\n    }\n\n    return false;\n  };\n\n  // Display data for the attributes picker modal\n  const displayedAttributes = getAttributesToDisplay(\n    forTarget,\n    targetUid,\n    // We need the nested components so we know when to remove the component option\n    nestedComponents\n  );\n\n  if (!modalType) {\n    return null;\n  }\n\n  const formToDisplay = get(forms, [modalType, 'form'], {\n    advanced: () => ({\n      sections: [],\n    }),\n    base: () => ({\n      sections: [],\n    }),\n  });\n\n  const isAddingAComponentToAnotherComponent = forTarget === 'component';\n\n  const genericInputProps = {\n    customInputs: {\n      'allowed-types-select': AllowedTypesSelect,\n      'boolean-radio-group': BooleanRadioGroup,\n      'checkbox-with-number-field': CheckboxWithNumberField,\n      'icon-picker': IconPicker,\n      'content-type-radio-group': ContentTypeRadioGroup,\n      'radio-group': CustomRadioGroup,\n      relation: Relation,\n      'select-category': SelectCategory,\n      'select-component': SelectComponent,\n      'select-components': SelectComponents,\n      'select-default-boolean': BooleanDefaultValueSelect,\n      'select-number': SelectNumber,\n      'select-date': SelectDateType,\n      'toggle-draft-publish': DraftAndPublishToggle,\n      'text-plural': PluralName,\n      'text-singular': SingularName,\n      'textarea-enum': TextareaEnum,\n      ...inputsFromPlugins,\n    },\n    componentToCreate,\n    dynamicZoneTarget,\n    formErrors,\n    isAddingAComponentToAnotherComponent,\n    isCreatingComponentWhileAddingAField,\n    mainBoxHeader: get(type, ['info', 'displayName'], ''),\n    modifiedData,\n    naturePickerType: forTarget,\n    isCreating,\n    targetUid,\n    forTarget,\n  };\n\n  const advancedForm = formToDisplay.advanced({\n    data: modifiedData,\n    type: attributeType,\n    step,\n    actionType,\n    attributes,\n    extensions: ctbFormsAPI,\n    forTarget,\n    contentTypeSchema: type || {},\n    customField,\n  }).sections;\n  const baseForm = formToDisplay.base({\n    data: modifiedData,\n    type: attributeType,\n    step,\n    actionType,\n    attributes,\n    extensions: ctbFormsAPI,\n    forTarget,\n    contentTypeSchema: type || {},\n    customField,\n  }).sections;\n\n  const baseFormInputNames = getFormInputNames(baseForm);\n\n  const advancedFormInputNames = getFormInputNames(advancedForm);\n  const doesBaseFormHasError = Object.keys(formErrors).some((key) =>\n    baseFormInputNames.includes(key)\n  );\n\n  const doesAdvancedFormHasError = Object.keys(formErrors).some((key) =>\n    advancedFormInputNames.includes(key)\n  );\n\n  const schemaKind = get(contentTypes, [targetUid, 'kind']);\n\n  const checkIsEditingFieldName = () =>\n    actionType === 'edit' && attributes.every(({ name }) => name !== modifiedData?.name);\n\n  const handleClickFinish = () => {\n    if (checkIsEditingFieldName()) {\n      trackUsage('didEditFieldNameOnContentType');\n    }\n  };\n\n  return (\n    <Modal.Root open={isOpen} onOpenChange={handleClosed}>\n      <Modal.Content>\n        <FormModalHeader\n          actionType={actionType}\n          attributeName={attributeName}\n          contentTypeKind={kind as IconByType}\n          dynamicZoneTarget={dynamicZoneTarget}\n          modalType={modalType}\n          forTarget={forTarget}\n          targetUid={targetUid}\n          attributeType={attributeType as IconByType}\n          customFieldUid={customFieldUid}\n          showBackLink={showBackLink}\n        />\n        {isPickingAttribute && (\n          <AttributeOptions\n            attributes={displayedAttributes}\n            forTarget={forTarget}\n            kind={schemaKind || 'collectionType'}\n          />\n        )}\n        {!isPickingAttribute && (\n          <FormComponent onSubmit={handleSubmit}>\n            <Modal.Body>\n              <Tabs.Root\n                variant=\"simple\"\n                value={activeTab}\n                onValueChange={(value) => {\n                  setActiveTab(value);\n                  sendAdvancedTabEvent(value);\n                }}\n                hasError={\n                  doesBaseFormHasError ? 'basic' : doesAdvancedFormHasError ? 'advanced' : undefined\n                }\n              >\n                <Flex justifyContent=\"space-between\">\n                  <FormModalSubHeader\n                    actionType={actionType}\n                    forTarget={forTarget}\n                    kind={kind}\n                    step={step}\n                    modalType={modalType}\n                    attributeType={attributeType}\n                    attributeName={attributeName}\n                    customField={customField}\n                  />\n                  <Tabs.List>\n                    <Tabs.Trigger value=\"basic\">\n                      {formatMessage({\n                        id: getTrad('popUpForm.navContainer.base'),\n                        defaultMessage: 'Basic settings',\n                      })}\n                    </Tabs.Trigger>\n                    <Tabs.Trigger value=\"advanced\" disabled={shouldDisableAdvancedTab()}>\n                      {formatMessage({\n                        id: getTrad('popUpForm.navContainer.advanced'),\n                        defaultMessage: 'Advanced settings',\n                      })}\n                    </Tabs.Trigger>\n                  </Tabs.List>\n                </Flex>\n                <Divider marginBottom={6} />\n                <Tabs.Content value=\"basic\">\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <TabForm\n                      form={baseForm}\n                      formErrors={formErrors}\n                      genericInputProps={genericInputProps}\n                      modifiedData={modifiedData}\n                      onChange={handleChange}\n                    />\n                  </Flex>\n                </Tabs.Content>\n                <Tabs.Content value=\"advanced\">\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <TabForm\n                      form={advancedForm}\n                      formErrors={formErrors}\n                      genericInputProps={genericInputProps}\n                      modifiedData={modifiedData}\n                      onChange={handleChange}\n                    />\n                  </Flex>\n                </Tabs.Content>\n              </Tabs.Root>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button\n                type=\"button\"\n                variant=\"tertiary\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  handleClosed();\n                }}\n              >\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n              </Button>\n              {/* TODO: refactor this component. Nuf said. */}\n              <FormModalEndActions\n                deleteContentType={() => deleteContentType(targetUid as Internal.UID.ContentType)}\n                deleteComponent={() => deleteComponent(targetUid as Internal.UID.Component)}\n                isAttributeModal={modalType === 'attribute'}\n                isCustomFieldModal={modalType === 'customField'}\n                isComponentToDzModal={modalType === 'addComponentToDynamicZone'}\n                isComponentAttribute={attributeType === 'component'}\n                isComponentModal={modalType === 'component'}\n                isContentTypeModal={modalType === 'contentType'}\n                isCreatingComponent={actionType === 'create'}\n                isCreatingDz={actionType === 'create'}\n                isCreatingComponentAttribute={modifiedData.createComponent || false}\n                isCreatingComponentInDz={modifiedData.createComponent || false}\n                isCreatingComponentWhileAddingAField={isCreatingComponentWhileAddingAField}\n                isCreatingContentType={actionType === 'create'}\n                isEditingAttribute={actionType === 'edit'}\n                isDzAttribute={attributeType === 'dynamiczone'}\n                isInFirstComponentStep={step === '1'}\n                onSubmitAddComponentAttribute={handleSubmit}\n                onSubmitAddComponentToDz={handleSubmit}\n                onSubmitCreateComponent={handleSubmit}\n                onSubmitCreateContentType={handleSubmit}\n                onSubmitCreateDz={handleSubmit}\n                onSubmitEditAttribute={handleSubmit}\n                onSubmitEditComponent={handleSubmit}\n                onSubmitEditContentType={handleSubmit}\n                onSubmitEditCustomFieldAttribute={handleSubmit}\n                onSubmitEditDz={handleSubmit}\n                onClickFinish={handleClickFinish}\n              />\n            </Modal.Footer>\n          </FormComponent>\n        )}\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n"],"names":["FormComponent","styled","form","selectState","state","initialState","FormModal","onCloseModal","onNavigateToChooseAttributeModal","onNavigateToAddCompoToDZModal","onNavigateToCreateComponentStep2","actionType","attributeName","attributeType","customFieldUid","dynamicZoneTarget","forTarget","modalType","isOpen","kind","step","targetUid","showBackLink","activeTab","setActiveTab","useFormModalNavigation","getPlugin","useStrapiApp","getCustomField","customFields","get","customField","dispatch","useDispatch","toggleNotification","useNotification","reducerState","useSelector","shallowEqual","navigate","useNavigate","trackUsage","useTracking","formatMessage","useIntl","ctbPlugin","pluginId","ctbFormsAPI","apis","forms","inputsFromPlugins","components","inputs","addAttribute","editAttribute","addCustomFieldAttribute","addCreatedComponentToDynamicZone","changeDynamicZoneComponents","contentTypes","createSchema","createComponentSchema","deleteComponent","deleteContentType","editCustomFieldAttribute","updateSchema","nestedComponents","sortedContentTypesList","updateComponentSchema","updateComponentUid","reservedNames","useDataManager","componentToCreate","formErrors","initialData","isCreatingComponentWhileAddingAField","modifiedData","type","React","useEffect","collectionTypesForRelation","filter","isAllowedContentTypesForRelations","foundDynamicZoneTarget","findAttribute","actions","setDataToEdit","data","draftAndPublish","displayName","info","options","pluginOptions","pluralName","singularName","category","icon","attributeToEdit","name","createComponent","setDynamicZoneDataSchema","attributeToEditNotFormatted","repeatable","set","setCustomFieldDataSchema","isEditing","modifiedDataToSetForEditing","uid","pick","setAttributeDataSchema","nameToSetForRelation","resetProps","isCreatingContentType","isCreatingComponent","isCreatingAttribute","isCreatingCustomFieldAttribute","isComponentAttribute","isCreating","isCreatingComponentFromAView","isInFirstComponentStep","isPickingAttribute","createUid","attributes","checkFormValidity","schema","dataToValidate","contentType","Object","keys","component","schemaAttributes","schemaData","customFieldValidator","validator","computedAttrbiuteType","alreadyTakenTargetContentTypeAttributes","targetContentTypeUID","targetContentTypeAttributes","attrName","targetAttribute","attribute","validate","abortEarly","handleChange","useCallback","target","value","rest","namesThatCanResetToNullValue","val","includes","clonedErrors","assign","min","minLength","setErrors","errors","onChange","split","handleSubmit","e","shouldContinue","preventDefault","sendButtonAddMoreFieldEvent","ctTargetUid","pathname","canEditContentType","message","id","componentUid","createComponentUid","componentCategory","componentUID","status","newComponentUID","customFieldAttributeUpdate","attributeToSet","isDynamicZoneAttribute","resetPropsAndSetTheFormForAddingACompoToADz","resetPropsAndSetFormForAddingAnExistingCompo","resetPropsAndSaveCurrentData","componentsToAdd","newComponents","console","error","err","yup","ValidationError","isError","getYupInnerErrors","handleConfirmClose","confirm","window","defaultMessage","handleClosed","isEqual","sendAdvancedTabEvent","tab","shouldDisableAdvancedTab","has","displayedAttributes","getAttributesToDisplay","formToDisplay","advanced","sections","base","isAddingAComponentToAnotherComponent","genericInputProps","customInputs","AllowedTypesSelect","BooleanRadioGroup","CheckboxWithNumberField","IconPicker","ContentTypeRadioGroup","CustomRadioGroup","relation","Relation","SelectCategory","SelectComponent","SelectComponents","BooleanDefaultValueSelect","SelectNumber","SelectDateType","DraftAndPublishToggle","PluralName","SingularName","TextareaEnum","mainBoxHeader","naturePickerType","advancedForm","extensions","contentTypeSchema","baseForm","baseFormInputNames","getFormInputNames","advancedFormInputNames","doesBaseFormHasError","some","key","doesAdvancedFormHasError","schemaKind","checkIsEditingFieldName","every","handleClickFinish","_jsx","Modal","Root","open","onOpenChange","_jsxs","Content","FormModalHeader","contentTypeKind","AttributeOptions","onSubmit","Body","Tabs","variant","onValueChange","hasError","undefined","Flex","justifyContent","FormModalSubHeader","List","Trigger","getTrad","disabled","Divider","marginBottom","direction","alignItems","gap","TabForm","Footer","Button","onClick","FormModalEndActions","isAttributeModal","isCustomFieldModal","isComponentToDzModal","isComponentModal","isContentTypeModal","isCreatingDz","isCreatingComponentAttribute","isCreatingComponentInDz","isEditingAttribute","isDzAttribute","onSubmitAddComponentAttribute","onSubmitAddComponentToDz","onSubmitCreateComponent","onSubmitCreateContentType","onSubmitCreateDz","onSubmitEditAttribute","onSubmitEditComponent","onSubmitEditContentType","onSubmitEditCustomFieldAttribute","onSubmitEditDz","onClickFinish"],"mappings":"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"}