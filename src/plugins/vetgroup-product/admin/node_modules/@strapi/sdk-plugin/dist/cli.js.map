{"version":3,"file":"cli.js","sources":["../src/cli/commands/utils/config.ts","../src/cli/commands/utils/helpers.ts","../src/cli/commands/utils/pkg.ts","../src/cli/commands/plugin/build.ts","../src/cli/commands/plugin/init/files/gitIgnore.ts","../src/cli/commands/plugin/init/action.ts","../src/cli/commands/plugin/init/command.ts","../src/cli/commands/plugin/link-watch.ts","../src/cli/commands/plugin/verify.ts","../src/cli/commands/plugin/watch.ts","../src/cli/commands/index.ts","../src/cli/commands/utils/logger.ts","../src/cli/commands/utils/tsconfig.ts","../src/index.ts"],"sourcesContent":["import type { ConfigBundle } from '@strapi/pack-up';\n\ninterface Options {\n  cwd: string;\n  bundles: ConfigBundle[];\n}\n\nexport function resolveConfig(opts: Options) {\n  const { cwd, bundles } = opts;\n\n  return {\n    unstable_viteConfig: {\n      build: {\n        commonjsOptions: {\n          include: [/node_modules/, `${cwd}/**/*`],\n          extensions: ['.js', '.jsx', '.cjs'],\n        },\n      },\n    },\n    bundles,\n    dist: './dist',\n    /**\n     * ignore the exports map of a plugin, because we're streamlining the\n     * process and ensuring the server package and admin package are built\n     * with the correct runtime and their individual tsconfigs\n     */\n    exports: {},\n  };\n}\n","import chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport type { CLIContext, CommonCLIOptions } from '../../../types';\n\nexport const runAction =\n  (name: string, action: (...args: any[]) => Promise<void>) =>\n  (ctx: CLIContext, ...args: unknown[]) => {\n    const { logger } = ctx;\n    Promise.resolve()\n      .then(() => {\n        return action(...args, ctx);\n      })\n      .catch((error) => {\n        logger.error(error);\n        process.exit(1);\n      });\n  };\n\nexport const dirContainsStrapiProject = (dir: string) => {\n  try {\n    const packageJsonPath = path.join(dir, 'package.json');\n    const pkgJSON = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));\n    return Boolean(\n      pkgJSON.dependencies?.['@strapi/strapi'] || pkgJSON.devDependencies?.['@strapi/strapi']\n    );\n  } catch (err) {\n    return false;\n  }\n};\n\nexport const getPkgManager = (options: CommonCLIOptions, isStrapi: boolean) => {\n  // if we are in a strapi project we return it's package manager\n  if (isStrapi) {\n    // Check if each file exists\n    const hasPackageLock = fs.existsSync(path.join(process.cwd(), 'package-lock.json'));\n    const hasYarnLock = fs.existsSync(path.join(process.cwd(), 'yarn.lock'));\n    const hasPnpmLock = fs.existsSync(path.join(process.cwd(), 'pnpm-lock.yaml'));\n\n    if (hasPackageLock) {\n      return 'npm';\n    }\n    if (hasYarnLock) {\n      return 'yarn';\n    }\n    if (hasPnpmLock) {\n      return 'pnpm';\n    }\n  }\n\n  if (options.useNpm === true) {\n    return 'npm';\n  }\n\n  if (options.usePnpm === true) {\n    return 'pnpm';\n  }\n\n  if (options.useYarn === true) {\n    return 'yarn';\n  }\n\n  const userAgent = process.env.npm_config_user_agent || '';\n\n  if (userAgent.startsWith('yarn')) {\n    return 'yarn';\n  }\n\n  if (userAgent.startsWith('pnpm')) {\n    return 'pnpm';\n  }\n\n  return 'npm';\n};\n\nexport const logInstructions = (\n  pluginName: string,\n  { language, path: pluginPath }: { language: string; path: string }\n) => {\n  const maxLength = `    resolve: './src/plugins/${pluginName}'`.length;\n  const separator = Array(maxLength).fill('â”€').join('');\n\n  const exportInstruction = language === 'js' ? 'module.exports =' : 'export default';\n\n  return `\nYou can now enable your plugin by adding the following in ${chalk.yellow(\n    `./config/plugins.${language}`\n  )}\n${separator}\n${exportInstruction} {\n  ${chalk.gray('// ...')}\n  ${chalk.green(`'${pluginName}'`)}: {\n    enabled: ${chalk.yellow(true)},\n    resolve: '${chalk.yellow(pluginPath)}'\n  },\n  ${chalk.gray('// ...')}\n}\n${separator}\n`;\n};\n\nexport const runInstall = async (packageManager: 'yarn' | 'npm' | 'pnpm', pluginPath: string) => {\n  const { execa: execaPkg } = await import('execa');\n\n  const execa = execaPkg({\n    cwd: pluginPath,\n    verbose: 'full',\n  });\n\n  await execa`${packageManager} install`;\n};\n\nexport const runBuild = async (packageManager: 'yarn' | 'npm' | 'pnpm', pluginPath: string) => {\n  const { execa: execaPkg } = await import('execa');\n\n  const execa = execaPkg({\n    cwd: pluginPath,\n    verbose: 'full',\n  });\n\n  if (packageManager === 'npm') {\n    await execa`${packageManager} run build`;\n    return;\n  }\n  await execa`${packageManager} build`;\n};\n","import chalk from 'chalk';\nimport fs from 'fs/promises';\nimport os from 'os';\nimport pkgUp from 'pkg-up';\nimport * as yup from 'yup';\n\nimport type { Logger } from './logger';\n\ninterface Export {\n  types?: string;\n  source: string;\n  module?: string;\n  import?: string;\n  require?: string;\n  default: string;\n}\n\nconst packageJsonSchema = yup.object({\n  name: yup.string().required(),\n  exports: yup.lazy((value) =>\n    yup\n      .object(\n        typeof value === 'object'\n          ? Object.entries(value).reduce((acc, [key, keyValue]) => {\n              if (typeof keyValue === 'object') {\n                acc[key] = yup\n                  .object({\n                    types: yup.string().optional(),\n                    source: yup.string().required(),\n                    module: yup.string().optional(),\n                    import: yup.string().required(),\n                    require: yup.string().required(),\n                    default: yup.string().required(),\n                  })\n                  .noUnknown(true);\n              } else {\n                acc[key] = yup.string().required();\n              }\n\n              return acc;\n            }, {} as Record<string, yup.SchemaOf<string> | yup.SchemaOf<Export>>)\n          : undefined\n      )\n      .optional()\n  ),\n});\n\n/**\n * @description being a task to load the package.json starting from the current working directory\n * using a shallow find for the package.json  and `fs` to read the file. If no package.json is found,\n * the process will throw with an appropriate error message.\n */\nconst loadPkg = async ({ cwd, logger }: { cwd: string; logger: Logger }): Promise<object> => {\n  const pkgPath = await pkgUp({ cwd });\n\n  if (!pkgPath) {\n    throw new Error('Could not find a package.json in the current directory');\n  }\n\n  const buffer = await fs.readFile(pkgPath);\n\n  const pkg = JSON.parse(buffer.toString());\n\n  logger.debug('Loaded package.json:', os.EOL, pkg);\n\n  return pkg;\n};\n\ntype PackageJson = yup.Asserts<typeof packageJsonSchema>;\n\n/**\n * @description validate the package.json against a standardised schema using `yup`.\n * If the validation fails, the process will throw with an appropriate error message.\n */\nconst validatePkg = async ({ pkg }: { pkg: object }): Promise<PackageJson> => {\n  try {\n    const validatedPkg = await packageJsonSchema.validate(pkg, {\n      strict: true,\n    });\n\n    return validatedPkg;\n  } catch (err) {\n    if (err instanceof yup.ValidationError) {\n      switch (err.type) {\n        case 'required':\n          if (err.path) {\n            throw new Error(\n              `'${err.path}' in 'package.json' is required as type '${chalk.magenta(\n                yup.reach(packageJsonSchema, err.path).type\n              )}'`\n            );\n          }\n          break;\n        /**\n         * This will only be thrown if there are keys in the export map\n         * that we don't expect so we can therefore make some assumptions\n         */\n        case 'noUnknown':\n          if (err.path && err.params && 'unknown' in err.params) {\n            throw new Error(\n              `'${err.path}' in 'package.json' contains the unknown key ${chalk.magenta(\n                err.params.unknown\n              )}, for compatability only the following keys are allowed: ${chalk.magenta(\n                \"['types', 'source', 'import', 'require', 'default']\"\n              )}`\n            );\n          }\n          break;\n        default:\n          if (err.path && err.params && 'type' in err.params && 'value' in err.params) {\n            throw new Error(\n              `'${err.path}' in 'package.json' must be of type '${chalk.magenta(\n                err.params.type\n              )}' (recieved '${chalk.magenta(typeof err.params.value)}')`\n            );\n          }\n      }\n    }\n\n    throw err;\n  }\n};\n\nexport type { PackageJson, Export };\nexport { loadPkg, validatePkg };\n","import { build } from '@strapi/pack-up';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport { createCommand } from 'commander';\n\nimport { resolveConfig } from '../utils/config';\nimport { runAction } from '../utils/helpers';\nimport { loadPkg, validatePkg } from '../utils/pkg';\n\nimport type { CLIContext, StrapiCommand } from '../../../types';\nimport type { Export } from '../utils/pkg';\nimport type { BuildCLIOptions, ConfigBundle } from '@strapi/pack-up';\n\nconst action = async ({ ...opts }: BuildCLIOptions, _cmd: unknown, { logger, cwd }: CLIContext) => {\n  try {\n    /**\n     * ALWAYS set production for using plugin build CLI.\n     */\n    process.env.NODE_ENV = 'production';\n\n    const pkg = await loadPkg({ cwd, logger });\n    const pkgJson = await validatePkg({ pkg });\n\n    if (!pkgJson.exports['./strapi-admin'] && !pkgJson.exports['./strapi-server']) {\n      throw new Error(\n        'You need to have either a strapi-admin or strapi-server export in your package.json'\n      );\n    }\n\n    const bundles: ConfigBundle[] = [];\n\n    if (pkgJson.exports['./strapi-admin']) {\n      const exp = pkgJson.exports['./strapi-admin'] as Export;\n\n      const bundle: ConfigBundle = {\n        source: exp.source,\n        import: exp.import,\n        require: exp.require,\n        runtime: 'web',\n      };\n\n      if (exp.types) {\n        bundle.types = exp.types;\n        // TODO: should this be sliced from the source path...?\n        bundle.tsconfig = './admin/tsconfig.build.json';\n      }\n\n      bundles.push(bundle);\n    }\n\n    if (pkgJson.exports['./strapi-server']) {\n      const exp = pkgJson.exports['./strapi-server'] as Export;\n\n      const bundle: ConfigBundle = {\n        source: exp.source,\n        import: exp.import,\n        require: exp.require,\n        runtime: 'node',\n      };\n\n      if (exp.types) {\n        bundle.types = exp.types;\n        // TODO: should this be sliced from the source path...?\n        bundle.tsconfig = './server/tsconfig.build.json';\n      }\n\n      bundles.push(bundle);\n    }\n\n    await build({\n      cwd,\n      configFile: false,\n      config: resolveConfig({ cwd, bundles }),\n      ...opts,\n    });\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      logger.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n\n/**\n * `$ strapi-plugin build`\n */\nconst command: StrapiCommand = ({ ctx }) => {\n  return createCommand('build')\n    .description('Bundle your strapi plugin for publishing.')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--silent', \"Don't log anything\", false)\n    .option('--sourcemap', 'produce sourcemaps', false)\n    .option('--minify', 'minify the output', false)\n    .action((...args) => runAction('build', action)(ctx, ...args));\n};\n\nexport { command };\n","import { outdent } from 'outdent';\n\nimport type { TemplateFile } from '@strapi/pack-up';\n\nconst gitIgnoreFile: TemplateFile = {\n  name: '.gitignore',\n  contents: outdent`\n    # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n    ############################\n    # OS X\n    ############################\n    \n    .DS_Store\n    .AppleDouble\n    .LSOverride\n    Icon\n    .Spotlight-V100\n    .Trashes\n    ._*\n    \n    \n    ############################\n    # Linux\n    ############################\n    \n    *~\n    \n    \n    ############################\n    # Windows\n    ############################\n    \n    Thumbs.db\n    ehthumbs.db\n    Desktop.ini\n    $RECYCLE.BIN/\n    *.cab\n    *.msi\n    *.msm\n    *.msp\n    \n    \n    ############################\n    # Packages\n    ############################\n    \n    *.7z\n    *.csv\n    *.dat\n    *.dmg\n    *.gz\n    *.iso\n    *.jar\n    *.rar\n    *.tar\n    *.zip\n    *.com\n    *.class\n    *.dll\n    *.exe\n    *.o\n    *.seed\n    *.so\n    *.swo\n    *.swp\n    *.swn\n    *.swm\n    *.out\n    *.pid\n    \n\n    ############################\n    # Logs and databases\n    ############################\n    \n    .tmp\n    *.log\n    *.sql\n    *.sqlite\n    *.sqlite3\n    \n\n    ############################\n    # Misc.\n    ############################\n    \n    *#\n    ssl\n    .idea\n    nbproject\n    .tsbuildinfo\n    .eslintcache\n    .env\n\n\n    ############################\n    # Strapi\n    ############################\n\n    public/uploads/*\n    !public/uploads/.gitkeep\n\n\n    ############################\n    # Build\n    ############################\n\n    dist\n    build\n    \n\n    ############################\n    # Node.js\n    ############################\n    \n    lib-cov\n    lcov.info\n    pids\n    logs\n    results\n    node_modules\n    .node_history\n    \n\n    ############################\n    # Package managers\n    ############################\n    \n    .yarn/*\n    !.yarn/cache\n    !.yarn/unplugged\n    !.yarn/patches\n    !.yarn/releases\n    !.yarn/sdks\n    !.yarn/versions\n    .pnp.*\n    yarn-error.log\n    \n    \n    ############################\n    # Tests\n    ############################\n    \n    coverage\n    `,\n};\n\nexport { gitIgnoreFile };\n","import { definePackageFeature, definePackageOption, defineTemplate, init } from '@strapi/pack-up';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport getLatestVersion from 'get-latest-version';\nimport gitUrlParse from 'git-url-parse';\nimport path from 'node:path';\nimport { outdent } from 'outdent';\n\nimport {\n  dirContainsStrapiProject,\n  logInstructions,\n  getPkgManager,\n  runBuild,\n  runInstall,\n} from '../../utils/helpers';\n\nimport { gitIgnoreFile } from './files/gitIgnore';\n\nimport type { CLIContext, CommonCLIOptions } from '../../../../types';\nimport type { TemplateFile } from '@strapi/pack-up';\n\n// TODO: remove these when release versions are available\nconst USE_RC_VERSIONS: string[] = ['@strapi/design-system', '@strapi/icons'] as const;\n\n// Store results of prompt answers (run by pack-up init)\n// This is a limitation of pack-up; we cannot run the prompt and pass the answers in\nlet promptAnswers: { name: string; answer: string | boolean }[] = [];\n\nexport default async (\n  packagePath: string,\n  { silent, debug, useNpm, usePnpm, useYarn, install }: CommonCLIOptions,\n  { logger, cwd }: CLIContext\n) => {\n  try {\n    // Make sure prompt answers are reset\n    promptAnswers = [];\n\n    const isStrapiProject = dirContainsStrapiProject(cwd);\n\n    // If the user entered a path, we will try to parse the plugin name from it so we can provide it as a suggestion for consistency\n    const parsedPath = path.parse(packagePath);\n    const suggestedPackageName = parsedPath.base;\n    const isPathPackageName = !packagePath.includes('/');\n    const pluginPath =\n      isStrapiProject && isPathPackageName ? `./src/plugins/${packagePath}` : packagePath;\n\n    //\n    const template = getPluginTemplate({ suggestedPackageName });\n\n    /**\n     * Create the package // plugin\n     */\n    await init({\n      path: pluginPath,\n      cwd,\n      silent,\n      debug,\n      template,\n    });\n\n    const packageManager = getPkgManager(\n      {\n        useNpm,\n        usePnpm,\n        useYarn,\n      },\n      isStrapiProject\n    );\n\n    if (install) {\n      await runInstall(packageManager, pluginPath);\n      await runBuild(packageManager, pluginPath);\n    }\n\n    if (isStrapiProject) {\n      const pkgName = promptAnswers.find((option) => option.name === 'pkgName')?.answer;\n      const language = promptAnswers.find((option) => option.name === 'typescript')?.answer\n        ? 'ts'\n        : 'js';\n\n      if (typeof pkgName === 'string' && ['ts', 'js'].includes(language)) {\n        logger.info(logInstructions(pkgName, { language, path: pluginPath }));\n      }\n    }\n\n    logger.info('Plugin generated successfully.');\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      logger.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n\nconst PACKAGE_NAME_REGEXP = /^(?:@(?:[a-z0-9-*~][a-z0-9-*._~]*)\\/)?[a-z0-9-~][a-z0-9-._~]*$/i;\n\ninterface PackageExport {\n  types?: string;\n  require: string;\n  import: string;\n  source: string;\n  default: string;\n}\n\ninterface PluginPackageJson {\n  name?: string;\n  description?: string;\n  version?: string;\n  keywords?: string[];\n  type: 'commonjs';\n  license?: string;\n  repository?: {\n    type: 'git';\n    url: string;\n  };\n  bugs?: {\n    url: string;\n  };\n  homepage?: string;\n  author?: string;\n  exports: {\n    './strapi-admin'?: PackageExport;\n    './strapi-server'?: PackageExport;\n    './package.json': `${string}.json`;\n  };\n  files: string[];\n  scripts: Record<string, string>;\n  dependencies: Record<string, string>;\n  devDependencies: Record<string, string>;\n  peerDependencies: Record<string, string>;\n  strapi: {\n    name?: string;\n    displayName?: string;\n    description?: string;\n    kind: 'plugin';\n  };\n}\n\ntype PluginTemplateOptions = {\n  suggestedPackageName?: string;\n};\n\nconst getPluginTemplate = ({ suggestedPackageName }: PluginTemplateOptions) => {\n  return defineTemplate(async ({ logger, gitConfig, packagePath }) => {\n    let repo: {\n      source?: string;\n      owner?: string;\n      name?: string;\n    };\n\n    const [packageFolder] = packagePath.split(path.sep).slice(-1);\n\n    if (!packagePath?.length || !packageFolder) {\n      throw new Error('Missing package path');\n    }\n\n    return {\n      prompts: [\n        definePackageOption({\n          name: 'pkgName',\n          type: 'text',\n          message: 'plugin name',\n          initial: () => suggestedPackageName ?? repo?.name ?? '',\n          validate(val: unknown) {\n            if (!val || typeof val !== 'string') {\n              return 'package name is required';\n            }\n\n            const match = PACKAGE_NAME_REGEXP.exec(val);\n\n            if (!match) {\n              return 'invalid package name';\n            }\n\n            return true;\n          },\n        }),\n        definePackageOption({\n          name: 'displayName',\n          type: 'text',\n          message: 'plugin display name',\n        }),\n        definePackageOption({\n          name: 'description',\n          type: 'text',\n          message: 'plugin description',\n        }),\n        definePackageOption({\n          name: 'authorName',\n          type: 'text',\n          message: 'plugin author name',\n          initial: gitConfig?.user?.name,\n        }),\n        definePackageOption({\n          name: 'authorEmail',\n          type: 'text',\n          message: 'plugin author email',\n          initial: gitConfig?.user?.email,\n        }),\n        definePackageOption({\n          name: 'repo',\n          type: 'text',\n          message: 'git url',\n          validate(val: unknown) {\n            if (!val) {\n              return true;\n            }\n\n            try {\n              const result = gitUrlParse(val as any);\n\n              repo = { source: result.source, owner: result.owner, name: result.name };\n\n              return true;\n            } catch (err) {\n              return 'invalid git url';\n            }\n          },\n        }),\n        definePackageOption({\n          name: 'license',\n          type: 'text',\n          message: 'plugin license',\n          initial: 'MIT',\n          validate(v) {\n            if (!v) {\n              return 'license is required';\n            }\n\n            return true;\n          },\n        }),\n        definePackageOption({\n          name: 'client-code',\n          type: 'confirm',\n          message: 'register with the admin panel?',\n          initial: true,\n        }),\n        definePackageOption({\n          name: 'server-code',\n          type: 'confirm',\n          message: 'register with the server?',\n          initial: true,\n        }),\n        definePackageFeature({\n          name: 'editorconfig',\n          initial: true,\n          optional: true,\n        }),\n        definePackageFeature({\n          name: 'eslint',\n          initial: true,\n          optional: true,\n        }),\n        definePackageFeature({\n          name: 'prettier',\n          initial: true,\n          optional: true,\n        }),\n        definePackageFeature({\n          name: 'typescript',\n          initial: true,\n          optional: true,\n        }),\n      ],\n      async getFiles(answers = []) {\n        const author: string[] = [];\n\n        const files: TemplateFile[] = [];\n\n        // package.json\n        const pkgJson: PluginPackageJson = {\n          version: '0.0.0',\n          keywords: [],\n          type: 'commonjs',\n          exports: {\n            './package.json': './package.json',\n          },\n          files: ['dist'],\n          scripts: {\n            build: 'strapi-plugin build',\n            watch: 'strapi-plugin watch',\n            'watch:link': 'strapi-plugin watch:link',\n            verify: 'strapi-plugin verify',\n          },\n          dependencies: {},\n          devDependencies: {\n            /**\n             * We set * as a default version, but further down\n             * we try to resolve each package to their latest\n             * version, failing that we leave the fallback of *.\n             */\n            '@strapi/strapi': '*',\n            '@strapi/sdk-plugin': '*',\n            prettier: '*',\n          },\n          peerDependencies: {\n            '@strapi/strapi': '^5.0.0',\n            '@strapi/sdk-plugin': '^5.0.0',\n          },\n          strapi: {\n            kind: 'plugin',\n          },\n        };\n\n        if (Array.isArray(answers)) {\n          for (const ans of answers) {\n            const { name, answer } = ans;\n\n            switch (name) {\n              case 'pkgName': {\n                pkgJson.name = String(answer);\n                pkgJson.strapi.name = String(answer);\n                break;\n              }\n              case 'description': {\n                pkgJson.description = String(answer);\n                pkgJson.strapi.description = String(answer);\n                break;\n              }\n              case 'displayName': {\n                pkgJson.strapi.displayName = String(answer);\n                break;\n              }\n              case 'authorName': {\n                author.push(String(answer));\n                break;\n              }\n              case 'authorEmail': {\n                if (answer) {\n                  author.push(`<${answer}>`);\n                }\n                break;\n              }\n              case 'license': {\n                pkgJson.license = String(answer);\n                break;\n              }\n              case 'client-code': {\n                if (answer) {\n                  pkgJson.exports['./strapi-admin'] = {\n                    source: './admin/src/index.js',\n                    import: './dist/admin/index.mjs',\n                    require: './dist/admin/index.js',\n                    default: './dist/admin/index.js',\n                  };\n\n                  pkgJson.dependencies = {\n                    ...pkgJson.dependencies,\n                    '@strapi/design-system': '*',\n                    '@strapi/icons': '*',\n                    'react-intl': '*',\n                  };\n\n                  pkgJson.devDependencies = {\n                    ...pkgJson.devDependencies,\n                    react: '^17.0.0 || ^18.0.0',\n                    'react-dom': '^17.0.0 || ^18.0.0',\n                    'react-router-dom': '^6.0.0',\n                    'styled-components': '^6.0.0',\n                  };\n\n                  pkgJson.peerDependencies = {\n                    ...pkgJson.peerDependencies,\n                    react: '^17.0.0 || ^18.0.0',\n                    'react-dom': '^17.0.0 || ^18.0.0',\n                    'react-router-dom': '^6.0.0',\n                    'styled-components': '^6.0.0',\n                  };\n                }\n\n                break;\n              }\n              case 'server-code': {\n                if (answer) {\n                  pkgJson.exports['./strapi-server'] = {\n                    source: './server/src/index.js',\n                    import: './dist/server/index.mjs',\n                    require: './dist/server/index.js',\n                    default: './dist/server/index.js',\n                  };\n                }\n\n                break;\n              }\n              case 'typescript': {\n                const isTypescript = Boolean(answer);\n\n                if (isTypescript) {\n                  if (isRecord(pkgJson.exports['./strapi-admin'])) {\n                    pkgJson.exports['./strapi-admin'].source = './admin/src/index.ts';\n\n                    pkgJson.exports['./strapi-admin'] = {\n                      types: './dist/admin/src/index.d.ts',\n                      ...pkgJson.exports['./strapi-admin'],\n                    };\n\n                    pkgJson.scripts = {\n                      ...pkgJson.scripts,\n                      'test:ts:front': 'run -T tsc -p admin/tsconfig.json',\n                    };\n\n                    pkgJson.devDependencies = {\n                      ...pkgJson.devDependencies,\n                      '@types/react': '*',\n                      '@types/react-dom': '*',\n                    };\n\n                    const { adminTsconfigFiles } = await import('./files/typescript');\n\n                    files.push(\n                      adminTsconfigFiles.tsconfigBuildFile,\n                      adminTsconfigFiles.tsconfigFile\n                    );\n                  }\n\n                  if (isRecord(pkgJson.exports['./strapi-server'])) {\n                    pkgJson.exports['./strapi-server'].source = './server/src/index.ts';\n\n                    pkgJson.exports['./strapi-server'] = {\n                      types: './dist/server/src/index.d.ts',\n                      ...pkgJson.exports['./strapi-server'],\n                    };\n\n                    pkgJson.scripts = {\n                      ...pkgJson.scripts,\n                      'test:ts:back': 'run -T tsc -p server/tsconfig.json',\n                    };\n\n                    const { serverTsconfigFiles } = await import('./files/typescript');\n\n                    files.push(\n                      serverTsconfigFiles.tsconfigBuildFile,\n                      serverTsconfigFiles.tsconfigFile\n                    );\n                  }\n\n                  pkgJson.devDependencies = {\n                    ...pkgJson.devDependencies,\n                    '@strapi/typescript-utils': '*',\n                    typescript: '*',\n                  };\n                } else {\n                  if (isRecord(pkgJson.exports['./strapi-admin'])) {\n                    // If the plugin is not typescript, we need to add a jsconfig.json file\n                    // to the frontend code. This configuration ensures we have no\n                    // build errors for the frontend javascript code.\n                    const { adminJsConfigFile } = await import('./files/javascript');\n\n                    files.push(adminJsConfigFile);\n                  }\n\n                  if (isRecord(pkgJson.exports['./strapi-server'])) {\n                    // If the plugin is not typescript, we need to add a jsconfig.json file\n                    // to the frontend code. This configuration ensures we have no\n                    // build errors for the frontend javascript code.\n                    const { serverJsConfigFile } = await import('./files/javascript');\n\n                    files.push(serverJsConfigFile);\n                  }\n                }\n\n                /**\n                 * This is where we add all the source files regardless\n                 * of whether they are typescript or javascript.\n                 */\n                if (isRecord(pkgJson.exports['./strapi-admin'])) {\n                  files.push({\n                    name: isTypescript ? 'admin/src/pluginId.ts' : 'admin/src/pluginId.js',\n                    contents: outdent`\n                    export const PLUGIN_ID = '${pkgJson.name!.replace(/^strapi-plugin-/i, '')}';\n                  `,\n                  });\n\n                  if (isTypescript) {\n                    const { adminTypescriptFiles } = await import('./files/admin');\n\n                    files.push(...adminTypescriptFiles);\n                  } else {\n                    const { adminJavascriptFiles } = await import('./files/admin');\n\n                    files.push(...adminJavascriptFiles);\n                  }\n                }\n\n                if (isRecord(pkgJson.exports['./strapi-server'])) {\n                  if (isTypescript) {\n                    const { serverTypescriptFiles } = await import('./files/server');\n\n                    files.push(...serverTypescriptFiles(packageFolder));\n                  } else {\n                    const { serverJavascriptFiles } = await import('./files/server');\n\n                    files.push(...serverJavascriptFiles(packageFolder));\n                  }\n                }\n\n                break;\n              }\n              case 'eslint': {\n                if (answer) {\n                  const { eslintIgnoreFile } = await import('./files/eslint');\n\n                  files.push(eslintIgnoreFile);\n                }\n\n                break;\n              }\n              case 'prettier': {\n                if (answer) {\n                  const { prettierFile, prettierIgnoreFile } = await import('./files/prettier');\n\n                  files.push(prettierFile, prettierIgnoreFile);\n                }\n                break;\n              }\n              case 'editorconfig': {\n                if (answer) {\n                  const { editorConfigFile } = await import('./files/editorConfig');\n\n                  files.push(editorConfigFile);\n                }\n                break;\n              }\n              default:\n                break;\n            }\n          }\n        }\n\n        if (repo) {\n          pkgJson.repository = {\n            type: 'git',\n            url: `git+ssh://git@${repo.source}/${repo.owner}/${repo.name}.git`,\n          };\n          pkgJson.bugs = {\n            url: `https://${repo.source}/${repo.owner}/${repo.name}/issues`,\n          };\n          pkgJson.homepage = `https://${repo.source}/${repo.owner}/${repo.name}#readme`;\n        }\n\n        pkgJson.author = author.filter(Boolean).join(' ') ?? undefined;\n\n        try {\n          pkgJson.devDependencies = await resolveLatestVersionOfDeps(pkgJson.devDependencies);\n          pkgJson.dependencies = await resolveLatestVersionOfDeps(pkgJson.dependencies);\n          pkgJson.peerDependencies = await resolveLatestVersionOfDeps(pkgJson.peerDependencies);\n        } catch (err) {\n          if (err instanceof Error) {\n            logger.error(err.message);\n          } else {\n            logger.error(err);\n          }\n        }\n\n        files.push({\n          name: 'package.json',\n          contents: outdent`\n            ${JSON.stringify(pkgJson, null, 2)}\n          `,\n        });\n\n        files.push({\n          name: 'README.md',\n          contents: outdent`\n            # ${pkgJson.name}\n\n            ${pkgJson.description ?? ''}\n        `,\n        });\n\n        files.push(gitIgnoreFile);\n\n        // Save prompt answers so we have access to them after init\n        promptAnswers = answers;\n\n        return files;\n      },\n    };\n  });\n};\n\nconst isRecord = (value: unknown): value is Record<string, unknown> =>\n  Boolean(value) && !Array.isArray(value) && typeof value === 'object';\n\nconst resolveLatestVersionOfDeps = async (\n  deps: Record<string, string>\n): Promise<Record<string, string>> => {\n  const latestDeps: Record<string, string> = {};\n\n  for (const [name, version] of Object.entries(deps)) {\n    try {\n      const range = USE_RC_VERSIONS.includes(name) ? 'rc' : version;\n      const latestVersion = await getLatestVersion(name, { range });\n      latestDeps[name] = latestVersion ? `^${latestVersion}` : '*';\n    } catch (err) {\n      latestDeps[name] = '*';\n    }\n  }\n\n  return latestDeps;\n};\n","import action from './action';\n\nimport type { StrapiCommand } from '../../../../types';\n\n/**\n * `$ strapi-plugin init`\n */\nconst command: StrapiCommand = ({ command: commanderCommand, ctx }) => {\n  commanderCommand\n    .command('init')\n    .description('Create a new plugin at a given path')\n    .argument('path', 'path to the plugin')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--silent', \"Don't log anything\", false)\n    // Package manager options\n    .option('--use-npm', 'Use npm as the plugin package manager')\n    .option('--use-yarn', 'Use yarn as the plugin package manager')\n    .option('--use-pnpm', 'Use pnpm as the plugin package manager')\n\n    // dependencies options\n    .option('--no-install', 'Do not install dependencies')\n    .action((path, options) => {\n      return action(path, options, ctx);\n    });\n};\n\nexport default command;\n","import boxen from 'boxen';\nimport chalk from 'chalk';\nimport concurrently from 'concurrently';\nimport fs from 'node:fs/promises';\nimport path from 'node:path';\nimport nodemon from 'nodemon';\nimport { outdent } from 'outdent';\n\nimport { runAction } from '../utils/helpers';\nimport { loadPkg, validatePkg } from '../utils/pkg';\n\nimport type { CLIContext, StrapiCommand } from '../../../types';\n\ninterface ActionOptions {}\n\nconst action = async (_opts: ActionOptions, _cmd: unknown, { cwd, logger }: CLIContext) => {\n  try {\n    const outDir = './dist';\n    const extensions = 'ts,js,png,svg,gif,jpeg,css';\n\n    const folder = path.join(cwd, outDir);\n\n    if (!(await pathExists(folder))) {\n      await fs.mkdir(folder);\n    }\n\n    const pkg = await loadPkg({ cwd, logger });\n    const pkgJson = await validatePkg({ pkg });\n\n    logger.info(\n      outdent`\n          Watching ${outDir} for changes to files with extensions: ${extensions}\n\n          To use this package in Strapi, in a separate shell run:\n          cd /path/to/strapi/project\n\n          Then run one of the commands below based on the package manager used in that project:\n\n          ## yarn\n          ${chalk.greenBright(`yarn dlx yalc add --link ${pkgJson.name} && yarn install`)}\n\n          ## npm\n          ${chalk.greenBright(\n            `npx yalc add ${pkgJson.name} && npx yalc link ${pkgJson.name} && npm install`\n          )}\n        `.trimStart()\n    );\n\n    // @ts-expect-error - invalid types\n    nodemon({\n      watch: [outDir],\n      ext: extensions,\n      exec: 'yalc push --changed',\n    });\n\n    concurrently(['npm run watch']);\n\n    nodemon\n      .on('quit', () => {\n        process.exit();\n      })\n      .on('restart', (files: unknown) => {\n        logger.info('Found changes in files:', chalk.magentaBright(files));\n        logger.info('Pushing new yalc package...');\n      })\n      .on('crash', () => {\n        logger.error(\n          'An error occurred. Make sure yalc is installed globally on your system. Exiting...'\n        );\n\n        process.exit(1);\n      });\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      logger.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n\n/**\n * @internal\n */\nconst pathExists = async (filepath: string) => {\n  try {\n    await fs.access(filepath);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * `$ strapi-plugin watch:link`\n */\nconst command: StrapiCommand = ({ command: commanderCommand, ctx }) => {\n  commanderCommand\n    .command('watch:link')\n    .description('Recompiles your plugin automatically on changes and runs yalc push --publish')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--silent', \"Don't log anything\", false)\n    .action((...args) => runAction('watch:link', action)(ctx, ...args));\n};\n\nexport { command };\n","import { check } from '@strapi/pack-up';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\n\nimport { runAction } from '../utils/helpers';\n\nimport type { StrapiCommand, CLIContext } from '../../../types';\nimport type { CheckOptions } from '@strapi/pack-up';\n\ntype ActionOptions = CheckOptions;\n\nconst action = async (opts: ActionOptions, _cmd: unknown, { cwd, logger }: CLIContext) => {\n  try {\n    await check({\n      cwd,\n      ...opts,\n    });\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      logger.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n\n/**\n * `$ strapi-plugin verify`\n */\nconst command: StrapiCommand = ({ command: commanderCommand, ctx }) => {\n  commanderCommand\n    .command('verify')\n    .description('Verify the output of your plugin before publishing it.')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--silent', \"Don't log anything\", false)\n    .action((...args) => runAction('verify', action)(ctx, ...args));\n};\n\nexport { command };\n","import { watch } from '@strapi/pack-up';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport { createCommand } from 'commander';\n\nimport { resolveConfig } from '../utils/config';\nimport { runAction } from '../utils/helpers';\nimport { loadPkg, validatePkg } from '../utils/pkg';\n\nimport type { StrapiCommand, CLIContext } from '../../../types';\nimport type { Export } from '../utils/pkg';\nimport type { ConfigBundle, WatchCLIOptions } from '@strapi/pack-up';\n\ntype ActionOptions = WatchCLIOptions;\n\nconst action = async (opts: ActionOptions, _cmd: unknown, { cwd, logger }: CLIContext) => {\n  try {\n    const pkg = await loadPkg({ cwd, logger });\n    const pkgJson = await validatePkg({ pkg });\n\n    if (!pkgJson.exports['./strapi-admin'] && !pkgJson.exports['./strapi-server']) {\n      throw new Error(\n        'You need to have either a strapi-admin or strapi-server export in your package.json'\n      );\n    }\n\n    const bundles: ConfigBundle[] = [];\n\n    if (pkgJson.exports['./strapi-admin']) {\n      const exp = pkgJson.exports['./strapi-admin'] as Export;\n\n      const bundle: ConfigBundle = {\n        source: exp.source,\n        import: exp.import,\n        require: exp.require,\n        runtime: 'web',\n      };\n\n      if (exp.types) {\n        bundle.types = exp.types;\n        // TODO: should this be sliced from the source path...?\n        bundle.tsconfig = './admin/tsconfig.build.json';\n      }\n\n      bundles.push(bundle);\n    }\n\n    if (pkgJson.exports['./strapi-server']) {\n      const exp = pkgJson.exports['./strapi-server'] as Export;\n\n      const bundle: ConfigBundle = {\n        source: exp.source,\n        import: exp.import,\n        require: exp.require,\n        runtime: 'node',\n      };\n\n      if (exp.types) {\n        bundle.types = exp.types;\n        // TODO: should this be sliced from the source path...?\n        bundle.tsconfig = './server/tsconfig.build.json';\n      }\n\n      bundles.push(bundle);\n    }\n\n    await watch({\n      cwd,\n      configFile: false,\n      config: resolveConfig({ cwd, bundles }),\n      ...opts,\n    });\n  } catch (err) {\n    logger.error(\n      'There seems to be an unexpected error, try again with --debug for more information \\n'\n    );\n    if (err instanceof Error && err.stack) {\n      logger.log(\n        chalk.red(\n          boxen(err.stack, {\n            padding: 1,\n            align: 'left',\n          })\n        )\n      );\n    }\n    process.exit(1);\n  }\n};\n\n/**\n * `$ strapi-plugin watch`\n */\nconst command: StrapiCommand = ({ ctx }) => {\n  return createCommand('watch')\n    .description('Watch & compile your strapi plugin for local development.')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs', false)\n    .option('--silent', \"Don't log anything\", false)\n    .action((...args) => runAction('watch', action)(ctx, ...args));\n};\n\nexport { command };\n","import { command as buildPluginCommand } from './plugin/build';\nimport { command as initPluginCommand } from './plugin/init';\nimport { command as linkWatchPluginCommand } from './plugin/link-watch';\nimport { command as verifyPluginCommand } from './plugin/verify';\nimport { command as watchPluginCommand } from './plugin/watch';\n\nimport type { StrapiCommand } from '../../types';\n\nexport const commands: StrapiCommand[] = [\n  buildPluginCommand,\n  initPluginCommand,\n  linkWatchPluginCommand,\n  watchPluginCommand,\n  verifyPluginCommand,\n];\n","import chalk from 'chalk';\nimport ora from 'ora';\n\nexport interface LoggerOptions {\n  silent?: boolean;\n  debug?: boolean;\n  timestamp?: boolean;\n}\n\nexport interface Logger {\n  warnings: number;\n  errors: number;\n  debug: (...args: unknown[]) => void;\n  info: (...args: unknown[]) => void;\n  warn: (...args: unknown[]) => void;\n  error: (...args: unknown[]) => void;\n  log: (...args: unknown[]) => void;\n  spinner: (text: string) => Pick<ora.Ora, 'succeed' | 'fail' | 'start' | 'text'>;\n}\n\nconst createLogger = (options: LoggerOptions = {}): Logger => {\n  const { silent = false, debug = false, timestamp = true } = options;\n\n  const state = { errors: 0, warning: 0 };\n\n  return {\n    get warnings() {\n      return state.warning;\n    },\n\n    get errors() {\n      return state.errors;\n    },\n\n    debug(...args) {\n      if (silent || !debug) {\n        return;\n      }\n\n      console.log(\n        chalk.cyan(`[DEBUG]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args\n      );\n    },\n\n    info(...args) {\n      if (silent) {\n        return;\n      }\n\n      console.info(\n        chalk.blue(`[INFO]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args\n      );\n    },\n\n    log(...args) {\n      if (silent) {\n        return;\n      }\n\n      console.info(chalk.blue(`${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`), ...args);\n    },\n\n    warn(...args) {\n      state.warning += 1;\n\n      if (silent) {\n        return;\n      }\n\n      console.warn(\n        chalk.yellow(`[WARN]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args\n      );\n    },\n\n    error(...args) {\n      state.errors += 1;\n\n      if (silent) {\n        return;\n      }\n\n      console.error(\n        chalk.red(`[ERROR]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args\n      );\n    },\n\n    // @ts-expect-error â€“ returning a subpart of ora is fine because the types tell us what is what.\n    spinner(text: string) {\n      if (silent) {\n        return {\n          succeed() {\n            return this;\n          },\n          fail() {\n            return this;\n          },\n          start() {\n            return this;\n          },\n          text: '',\n        };\n      }\n\n      return ora(text);\n    },\n  };\n};\n\nexport { createLogger };\n","import os from 'os';\nimport ts from 'typescript';\n\nimport type { Logger } from './logger';\n\ninterface TsConfig {\n  config: ts.ParsedCommandLine;\n  path: string;\n}\n\n/**\n * @description Load a tsconfig.json file and return the parsed config.\n *\n * @internal\n */\nconst loadTsConfig = ({\n  cwd,\n  path,\n  logger,\n}: {\n  cwd: string;\n  path: string;\n  logger: Logger;\n}): TsConfig | undefined => {\n  const configPath = ts.findConfigFile(cwd, ts.sys.fileExists, path);\n\n  if (!configPath) {\n    return undefined;\n  }\n\n  const configFile = ts.readConfigFile(configPath, ts.sys.readFile);\n\n  const parsedConfig = ts.parseJsonConfigFileContent(configFile.config, ts.sys, cwd);\n\n  logger.debug('Loaded user TS config:', os.EOL, parsedConfig);\n\n  return {\n    config: parsedConfig,\n    path: configPath,\n  };\n};\n\nexport { loadTsConfig };\nexport type { TsConfig };\n","import { Command } from 'commander';\n\nimport { commands as strapiCommands } from './cli/commands';\nimport { createLogger } from './cli/commands/utils/logger';\nimport { loadTsConfig } from './cli/commands/utils/tsconfig';\n\nimport type { CLIContext } from './types';\n\nconst createCLI = async (argv: string[], command = new Command()) => {\n  // Initial program setup\n  command.storeOptionsAsProperties(false).allowUnknownOption(true);\n\n  // Help command\n  command.helpOption('-h, --help', 'Display help for command');\n  command.helpCommand('help [command]', 'Display help for command');\n\n  command.version(\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    require('../package.json').version,\n    '-v, --version',\n    'Output the version number'\n  );\n\n  const cwd = process.cwd();\n\n  const hasDebug = argv.includes('--debug');\n  const hasSilent = argv.includes('--silent');\n\n  const logger = createLogger({ debug: hasDebug, silent: hasSilent, timestamp: false });\n\n  const tsconfig = loadTsConfig({\n    cwd,\n    path: 'tsconfig.json',\n    logger,\n  });\n\n  const ctx = {\n    cwd,\n    logger,\n    tsconfig,\n  } satisfies CLIContext;\n\n  // Load all commands\n  strapiCommands.forEach((commandFactory) => {\n    try {\n      const subCommand = commandFactory({ command, argv, ctx });\n\n      // Add this command to the Commander command object\n      if (subCommand) {\n        command.addCommand(subCommand);\n      }\n    } catch (e) {\n      logger.error('Failed to load command', e);\n    }\n  });\n\n  return command;\n};\n\nconst runCLI = async (argv = process.argv, command = new Command()) => {\n  const commands = await createCLI(argv, command);\n  await commands.parseAsync(argv);\n};\n\nexport { runCLI, createCLI };\n"],"names":["action","path","fs","chalk","yup","pkgUp","os","build","boxen","command","createCommand","outdent","init","defineTemplate","definePackageOption","gitUrlParse","definePackageFeature","getLatestVersion","nodemon","concurrently","check","watch","buildPluginCommand","initPluginCommand","linkWatchPluginCommand","watchPluginCommand","verifyPluginCommand","ora","ts","Command","strapiCommands","commands"],"mappings":"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"}