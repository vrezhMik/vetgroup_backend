{"version":3,"file":"TokenTypeSelect-CoRj9Va3.mjs","sources":["../../../admin/src/pages/Settings/components/Tokens/FormHead.tsx","../../../admin/src/pages/Settings/components/Tokens/TokenBox.tsx","../../../admin/src/utils/locales.ts","../../../admin/src/pages/Settings/pages/ApiTokens/EditView/utils/getDateOfExpiration.ts","../../../admin/src/pages/Settings/utils/forms.ts","../../../admin/src/pages/Settings/components/Tokens/LifeSpanInput.tsx","../../../admin/src/pages/Settings/components/Tokens/TokenDescription.tsx","../../../admin/src/pages/Settings/components/Tokens/TokenName.tsx","../../../admin/src/pages/Settings/components/Tokens/TokenTypeSelect.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, Dialog, Flex } from '@strapi/design-system';\nimport { Check, ArrowClockwise } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useRegenerateTokenMutation } from '../../../../services/transferTokens';\n\nimport type { Data } from '@strapi/types';\n\ninterface RegenerateProps {\n  onRegenerate?: (newKey: string) => void;\n  url: string;\n}\n\nconst Regenerate = ({ onRegenerate, url }: RegenerateProps) => {\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = React.useState(false);\n\n  const [isLoadingConfirmation, setIsLoadingConfirmation] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [regenerateToken] = useRegenerateTokenMutation();\n\n  const regenerateData = async () => {\n    try {\n      const res = await regenerateToken(url);\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n\n        return;\n      }\n\n      if (onRegenerate) {\n        onRegenerate(res.data.accessKey);\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'Something went wrong',\n        }),\n      });\n    } finally {\n      setIsLoadingConfirmation(false);\n    }\n  };\n\n  const handleConfirmRegeneration = async () => {\n    regenerateData();\n    setShowConfirmDialog(false);\n  };\n\n  return (\n    <Dialog.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n      <Dialog.Trigger>\n        <Button\n          startIcon={<ArrowClockwise />}\n          type=\"button\"\n          size=\"S\"\n          variant=\"tertiary\"\n          onClick={() => setShowConfirmDialog(true)}\n          name=\"regenerate\"\n        >\n          {formatMessage({\n            id: 'Settings.tokens.regenerate',\n            defaultMessage: 'Regenerate',\n          })}\n        </Button>\n      </Dialog.Trigger>\n\n      <ConfirmDialog\n        title={formatMessage({\n          id: 'Settings.tokens.RegenerateDialog.title',\n          defaultMessage: 'Regenerate token',\n        })}\n        endAction={\n          <Button\n            startIcon={<ArrowClockwise />}\n            loading={isLoadingConfirmation}\n            onClick={handleConfirmRegeneration}\n          >\n            {formatMessage({\n              id: 'Settings.tokens.Button.regenerate',\n              defaultMessage: 'Regenerate',\n            })}\n          </Button>\n        }\n      >\n        {formatMessage({\n          id: 'Settings.tokens.popUpWarning.message',\n          defaultMessage: 'Are you sure you want to regenerate this token?',\n        })}\n      </ConfirmDialog>\n    </Dialog.Root>\n  );\n};\n\ninterface Token {\n  id: Data.ID;\n  name: string;\n}\n\ninterface FormHeadProps<TToken extends Token | null> {\n  title: MessageDescriptor;\n  token: TToken;\n  canEditInputs: boolean;\n  canRegenerate: boolean;\n  setToken: (token: TToken) => void;\n  isSubmitting: boolean;\n  regenerateUrl: string;\n}\n\nexport const FormHead = <TToken extends Token | null>({\n  title,\n  token,\n  setToken,\n  canEditInputs,\n  canRegenerate,\n  isSubmitting,\n  regenerateUrl,\n}: FormHeadProps<TToken>) => {\n  const { formatMessage } = useIntl();\n  const handleRegenerate = (newKey: string) => {\n    setToken({\n      ...token,\n      accessKey: newKey,\n    });\n  };\n\n  return (\n    <Layouts.Header\n      title={token?.name || formatMessage(title)}\n      primaryAction={\n        canEditInputs ? (\n          <Flex gap={2}>\n            {canRegenerate && token?.id && (\n              <Regenerate\n                onRegenerate={handleRegenerate}\n                url={`${regenerateUrl}${token?.id ?? ''}`}\n              />\n            )}\n            <Button\n              disabled={isSubmitting}\n              loading={isSubmitting}\n              startIcon={<Check />}\n              type=\"submit\"\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          </Flex>\n        ) : (\n          canRegenerate &&\n          token?.id && (\n            <Regenerate\n              onRegenerate={handleRegenerate}\n              url={`${regenerateUrl}${token?.id ?? ''}`}\n            />\n          )\n        )\n      }\n      navigationAction={<BackButton />}\n      ellipsis\n    />\n  );\n};\n","import { IconButton } from '@strapi/design-system';\nimport { Duplicate, Key } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { ContentBox } from '../../../../components/ContentBox';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useClipboard } from '../../../../hooks/useClipboard';\n\ninterface TokenBoxProps {\n  token?: string;\n  tokenType: 'transfer-token' | 'api-token';\n}\n\nexport const TokenBox = ({ token, tokenType }: TokenBoxProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { trackUsage } = useTracking();\n\n  const { copy } = useClipboard();\n\n  const handleClick = (token: TokenBoxProps['token']) => async () => {\n    if (token) {\n      const didCopy = await copy(token);\n\n      if (didCopy) {\n        trackUsage('didCopyTokenKey', {\n          tokenType,\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'Settings.tokens.notification.copied' }),\n        });\n      }\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        token && (\n          <span style={{ alignSelf: 'start' }}>\n            <IconButton\n              label={formatMessage({\n                id: 'app.component.CopyToClipboard.label',\n                defaultMessage: 'Copy to clipboard',\n              })}\n              onClick={handleClick(token)}\n              variant=\"ghost\"\n              type=\"button\"\n              style={{ padding: 0, height: '1.6rem' }}\n            >\n              <Duplicate />\n            </IconButton>\n          </span>\n        )\n      }\n      title={\n        token ||\n        formatMessage({\n          id: 'Settings.tokens.copy.editTitle',\n          defaultMessage: 'This token isn’t accessible anymore.',\n        })\n      }\n      subtitle={\n        token\n          ? formatMessage({\n              id: 'Settings.tokens.copy.lastWarning',\n              defaultMessage: 'Make sure to copy this token, you won’t be able to see it again!',\n            })\n          : formatMessage({\n              id: 'Settings.tokens.copy.editMessage',\n              defaultMessage: 'For security reasons, you can only see your token once.',\n            })\n      }\n      icon={<Key />}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n","import * as locales from 'date-fns/locale';\n\ntype LocaleName = keyof typeof locales;\n\n/**\n * Returns a valid date-fns locale name from a Strapi Admin locale.\n * Defaults to 'enUS' if the locale is not found.\n */\nconst getDateFnsLocaleName = (locale: string): LocaleName => {\n  if (Object.keys(locales).includes(locale)) {\n    return locale as LocaleName;\n  }\n\n  return 'enUS';\n};\n\nexport { getDateFnsLocaleName };\n","import { addDays, format } from 'date-fns';\nimport * as locales from 'date-fns/locale';\n\nimport { getDateFnsLocaleName } from '../../../../../../utils/locales';\n\nexport const getDateOfExpiration = (\n  createdAt: string,\n  duration: number | null,\n  language: string = 'en'\n) => {\n  if (duration && typeof duration === 'number') {\n    const durationInDays = duration / 24 / 60 / 60 / 1000;\n\n    return format(addDays(new Date(createdAt), durationInDays), 'PPP', {\n      locale: locales[getDateFnsLocaleName(language)],\n    });\n  }\n\n  return 'Unlimited';\n};\n","import { MessageDescriptor } from 'react-intl';\n\nconst isErrorMessageMessageDescriptor = (\n  message: string | MessageDescriptor\n): message is MessageDescriptor => {\n  return typeof message === 'object' && message !== null && 'id' in message;\n};\n\nexport { isErrorMessageMessageDescriptor };\n","import { SingleSelectOption, SingleSelect, Typography, Field } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { getDateOfExpiration } from '../../pages/ApiTokens/EditView/utils/getDateOfExpiration';\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\nimport type { ApiToken } from '../../../../../../shared/contracts/api-token';\nimport type { TransferToken } from '../../../../../../shared/contracts/transfer';\n\ninterface LifeSpanInputProps {\n  error?: string | MessageDescriptor;\n  value?: string | number | null;\n  onChange: (event: { target: { name: string; value: string } }) => void;\n  isCreating: boolean;\n  token: Partial<TransferToken> | Partial<ApiToken> | null;\n}\n\nexport const LifeSpanInput = ({\n  token,\n  error,\n  value,\n  onChange,\n  isCreating,\n}: LifeSpanInputProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      <Field.Root\n        error={\n          error\n            ? formatMessage(\n                isErrorMessageMessageDescriptor(error)\n                  ? error\n                  : { id: error, defaultMessage: error }\n              )\n            : undefined\n        }\n        name=\"lifespan\"\n        required\n      >\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.tokens.form.duration',\n            defaultMessage: 'Token duration',\n          })}\n        </Field.Label>\n        <SingleSelect\n          value={value}\n          onChange={(value) => {\n            // @ts-expect-error – DS v2 won't support number types for select\n            onChange({ target: { name: 'lifespan', value } });\n          }}\n          disabled={!isCreating}\n          placeholder=\"Select\"\n        >\n          <SingleSelectOption value=\"604800000\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.7-days',\n              defaultMessage: '7 days',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"2592000000\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.30-days',\n              defaultMessage: '30 days',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"7776000000\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.90-days',\n              defaultMessage: '90 days',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"0\">\n            {formatMessage({\n              id: 'Settings.tokens.duration.unlimited',\n              defaultMessage: 'Unlimited',\n            })}\n          </SingleSelectOption>\n        </SingleSelect>\n        <Field.Error />\n      </Field.Root>\n      <Typography variant=\"pi\" textColor=\"neutral600\">\n        {!isCreating &&\n          `${formatMessage({\n            id: 'Settings.tokens.duration.expiration-date',\n            defaultMessage: 'Expiration date',\n            // @ts-expect-error – TODO: fix this.\n          })}: ${getDateOfExpiration(token?.createdAt, parseInt(value ?? '', 10))}`}\n      </Typography>\n    </>\n  );\n};\n","import { Field, Textarea, TextareaProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenDescriptionProps extends Pick<TextareaProps, 'onChange' | 'value'> {\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n}\n\nexport const TokenDescription = ({\n  error,\n  value,\n  onChange,\n  canEditInputs,\n}: TokenDescriptionProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Field.Root\n      name=\"description\"\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error)\n                ? error\n                : {\n                    id: error,\n                    defaultMessage: error,\n                  }\n            )\n          : undefined\n      }\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'Settings.tokens.form.description',\n          defaultMessage: 'Description',\n        })}\n      </Field.Label>\n      <Textarea onChange={onChange} disabled={!canEditInputs} value={value} />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n","import { Field, TextInput, TextInputProps } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenNameProps extends Pick<TextInputProps, 'onChange' | 'value'> {\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n}\n\nexport const TokenName = ({ error, value, onChange, canEditInputs }: TokenNameProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Field.Root\n      name=\"name\"\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\n            )\n          : undefined\n      }\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'Settings.tokens.form.name',\n          defaultMessage: 'Name',\n        })}\n      </Field.Label>\n      <TextInput onChange={onChange} value={value} disabled={!canEditInputs} />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n","import { SingleSelectOption, SingleSelect, SingleSelectProps, Field } from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\n\nimport { isErrorMessageMessageDescriptor } from '../../utils/forms';\n\ninterface TokenTypeSelectProps extends Pick<SingleSelectProps, 'onChange' | 'value'> {\n  name?: string;\n  options: Array<{\n    label: MessageDescriptor;\n    value: string;\n  }>;\n  error?: string | MessageDescriptor;\n  canEditInputs: boolean;\n  label: MessageDescriptor;\n}\n\nexport const TokenTypeSelect = ({\n  name = 'type',\n  error,\n  value,\n  onChange,\n  canEditInputs,\n  options = [],\n  label,\n}: TokenTypeSelectProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Field.Root\n      error={\n        error\n          ? formatMessage(\n              isErrorMessageMessageDescriptor(error) ? error : { id: error, defaultMessage: error }\n            )\n          : undefined\n      }\n      name={name}\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: label.id,\n          defaultMessage: label.defaultMessage,\n        })}\n      </Field.Label>\n      <SingleSelect\n        value={value}\n        onChange={onChange}\n        placeholder=\"Select\"\n        disabled={!canEditInputs}\n      >\n        {options &&\n          options.map(({ value, label }) => (\n            <SingleSelectOption key={value} value={value}>\n              {formatMessage(label)}\n            </SingleSelectOption>\n          ))}\n      </SingleSelect>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n"],"names":["Regenerate","onRegenerate","url","formatMessage","useIntl","showConfirmDialog","setShowConfirmDialog","React","useState","isLoadingConfirmation","setIsLoadingConfirmation","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","regenerateToken","useRegenerateTokenMutation","regenerateData","res","type","message","error","data","accessKey","id","defaultMessage","handleConfirmRegeneration","_jsxs","Dialog","Root","open","onOpenChange","_jsx","Trigger","Button","startIcon","ArrowClockwise","size","variant","onClick","name","ConfirmDialog","title","endAction","loading","FormHead","token","setToken","canEditInputs","canRegenerate","isSubmitting","regenerateUrl","handleRegenerate","newKey","Layouts","Header","primaryAction","Flex","gap","disabled","Check","navigationAction","BackButton","ellipsis","TokenBox","tokenType","trackUsage","useTracking","copy","useClipboard","handleClick","didCopy","ContentBox","span","style","alignSelf","IconButton","label","padding","height","Duplicate","subtitle","icon","Key","iconBackground","getDateFnsLocaleName","locale","Object","keys","locales","includes","getDateOfExpiration","createdAt","duration","language","durationInDays","format","addDays","Date","isErrorMessageMessageDescriptor","LifeSpanInput","value","onChange","isCreating","_Fragment","Field","undefined","required","Label","SingleSelect","target","placeholder","SingleSelectOption","Error","Typography","textColor","parseInt","TokenDescription","Textarea","TokenName","TextInput","TokenTypeSelect","options","map"],"mappings":"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"}