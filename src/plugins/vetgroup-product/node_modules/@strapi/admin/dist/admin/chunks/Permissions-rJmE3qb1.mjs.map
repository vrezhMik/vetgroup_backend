{"version":3,"file":"Permissions-rJmE3qb1.mjs","sources":["../../../admin/src/pages/Settings/pages/Roles/hooks/usePermissionsDataManager.ts","../../../admin/src/pages/Settings/pages/Roles/utils/difference.ts","../../../admin/src/utils/arrays.ts","../../../admin/src/pages/Settings/pages/Roles/utils/createArrayOfValues.ts","../../../admin/src/pages/Settings/pages/Roles/utils/permissions.ts","../../../admin/src/pages/Settings/pages/Roles/utils/forms.ts","../../../admin/src/pages/Settings/pages/Roles/utils/layouts.ts","../../../admin/src/pages/Settings/pages/Roles/utils/updateConditionsToFalse.ts","../../../admin/src/pages/Settings/pages/Roles/utils/updateValues.ts","../../../admin/src/pages/Settings/pages/Roles/utils/constants.ts","../../../admin/src/pages/Settings/pages/Roles/utils/removeConditionKeyFromData.ts","../../../admin/src/pages/Settings/pages/Roles/utils/getCheckboxState.ts","../../../admin/src/pages/Settings/pages/Roles/components/CollapseLabel.tsx","../../../admin/src/pages/Settings/pages/Roles/components/HiddenAction.tsx","../../../admin/src/pages/Settings/pages/Roles/components/RequiredSign.tsx","../../../admin/src/pages/Settings/pages/Roles/components/RowLabelWithCheckbox.tsx","../../../admin/src/pages/Settings/pages/Roles/components/CollapsePropertyMatrix.tsx","../../../admin/src/pages/Settings/pages/Roles/components/ConditionsButton.tsx","../../../admin/src/pages/Settings/pages/Roles/components/ConditionsModal.tsx","../../../admin/src/pages/Settings/pages/Roles/components/ContentTypeCollapses.tsx","../../../admin/src/pages/Settings/pages/Roles/components/GlobalActions.tsx","../../../admin/src/pages/Settings/pages/Roles/components/ContentTypes.tsx","../../../admin/src/pages/Settings/pages/Roles/components/PluginsAndSettings.tsx","../../../admin/src/pages/Settings/pages/Roles/components/Permissions.tsx"],"sourcesContent":["import { createContext } from '@radix-ui/react-context';\n\nimport { Condition } from '../../../../../../../shared/contracts/permissions';\n\nimport type {\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  State,\n} from '../components/Permissions';\n\n// Note: I had to guess most of these types based on the name and usage, but I actually don't\n// know if they are correct, because the usage is very generic. Feel free to correct them if\n// they create problems.\nexport interface PermissionsDataManagerContextValue extends Pick<State, 'modifiedData'> {\n  availableConditions: Condition[];\n  onChangeCollectionTypeLeftActionRowCheckbox: (\n    pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n    propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n    rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n    value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n  ) => void;\n  onChangeConditions: (conditions: OnChangeConditionsAction['conditions']) => void;\n  onChangeSimpleCheckbox: (event: { target: { name: string; value: boolean } }) => void;\n  onChangeParentCheckbox: (event: { target: { name: string; value: boolean } }) => void;\n  onChangeCollectionTypeGlobalActionCheckbox: (\n    collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n    actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n    value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n  ) => void;\n}\n\nconst [PermissionsDataManagerProvider, usePermissionsDataManagerContext] =\n  createContext<PermissionsDataManagerContextValue>('PermissionsDataManager');\n\nexport const usePermissionsDataManager = () =>\n  usePermissionsDataManagerContext('usePermissionsDataManager');\n\nexport { PermissionsDataManagerProvider };\n","import isEqual from 'lodash/isEqual';\nimport isObject from 'lodash/isObject';\nimport transform from 'lodash/transform';\n\ntype ObjectDiff<T> = {\n  [P in keyof T]?: T[P] extends Record<string, unknown> ? ObjectDiff<T[P]> : T[P];\n};\n\nfunction difference<T extends Record<string, unknown>>(object: T, base: T): ObjectDiff<T> {\n  function changes(object: T, base: T): ObjectDiff<T> {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return transform(object, (result, value: any, key: keyof ObjectDiff<T>) => {\n      if (!isEqual(value, base[key])) {\n        result[key] =\n          isObject(value) && isObject(base[key]) ? changes(value as T, base[key] as T) : value;\n      }\n      return result;\n    });\n  }\n\n  return changes(object, base);\n}\n\nexport { difference };\n","/**\n * @internal\n * @description Mutates a value to be a union of flat values, no arrays allowed.\n */\ntype Flat<T> = T extends string ? T : T extends ArrayLike<any> ? never : T;\n\n/**\n * @internal\n */\ninterface RecursiveArray<T> extends Array<T | RecursiveArray<T>> {}\n/**\n * @internal\n */\ninterface ArrayOfRecursiveArraysOrValues<T> extends ArrayLike<T | RecursiveArray<T>> {}\n\n/**\n * @internal\n *\n * @description Flattens an array recursively.\n */\nconst flattenDeep = <T>(\n  array?: ArrayOfRecursiveArraysOrValues<T> | null | undefined\n): Array<Flat<T>> => {\n  if (Array.isArray(array)) {\n    return array.reduce(\n      (acc, value) => {\n        if (Array.isArray(value)) {\n          acc.push(...flattenDeep(value));\n        } else {\n          acc.push(value);\n        }\n\n        return acc;\n      },\n      [] as Array<Flat<T>>\n    );\n  } else {\n    return [];\n  }\n};\n\nexport { flattenDeep };\nexport type { Flat, RecursiveArray, ArrayOfRecursiveArraysOrValues };\n","import { Flat, flattenDeep } from '../../../../../utils/arrays';\nimport { isObject } from '../../../../../utils/objects';\n\nconst createArrayOfValues = <TData>(obj: unknown): Array<Flat<TData>> => {\n  if (!isObject(obj)) {\n    return [];\n  }\n\n  return flattenDeep(\n    Object.values(obj).map((value) => {\n      if (isObject(value)) {\n        return createArrayOfValues(value);\n      }\n\n      return value;\n    })\n  );\n};\n\nexport { createArrayOfValues };\n","import { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n\nimport type { ConditionForm, Form, PropertyChildForm } from './forms';\nimport type { UpdatePermissions } from '../../../../../../../shared/contracts/roles';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\nimport type { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\n\ntype PermissionApiBody = UpdatePermissions.Request['body']['permissions'];\n\n/**\n * @description Given a users permissions array we find the first one that matches a provided subject & action\n */\nconst findMatchingPermission = (\n  permissions: Permission[],\n  action: string,\n  subject: string | null\n) => permissions.find((perm) => perm.action === action && perm.subject === subject);\n\nconst formatPermissionsForAPI = (\n  modifiedData: PermissionsDataManagerContextValue['modifiedData']\n): PermissionApiBody => {\n  const pluginsPermissions = formatSettingsPermissions(modifiedData.plugins);\n  const settingsPermissions = formatSettingsPermissions(modifiedData.settings);\n  const collectionTypesPermissions = formatContentTypesPermissions(modifiedData.collectionTypes);\n  const singleTypesPermissions = formatContentTypesPermissions(modifiedData.singleTypes);\n\n  return [\n    ...pluginsPermissions,\n    ...settingsPermissions,\n    ...collectionTypesPermissions,\n    ...singleTypesPermissions,\n  ];\n};\n\nconst formatSettingsPermissions = (\n  settingsPermissionsObject:\n    | PermissionsDataManagerContextValue['modifiedData']['plugins']\n    | PermissionsDataManagerContextValue['modifiedData']['settings']\n): PermissionApiBody => {\n  return Object.values(settingsPermissionsObject).reduce<PermissionApiBody>((formAcc, form) => {\n    const currentCategoryPermissions = Object.values(form).reduce<PermissionApiBody>(\n      (childFormAcc, childForm) => {\n        const permissions = Object.entries(childForm).reduce<PermissionApiBody>(\n          (\n            responsesAcc,\n            [\n              actionName,\n              {\n                conditions,\n                properties: { enabled },\n              },\n            ]\n          ) => {\n            if (!enabled) {\n              return responsesAcc;\n            }\n\n            responsesAcc.push({\n              action: actionName,\n              subject: null,\n              conditions: createConditionsArray(conditions),\n              properties: {},\n            });\n\n            return responsesAcc;\n          },\n          []\n        );\n\n        return [...childFormAcc, ...permissions];\n      },\n      []\n    );\n\n    return [...formAcc, ...currentCategoryPermissions];\n  }, []);\n};\n\nconst formatContentTypesPermissions = (contentTypesPermissions: Form): PermissionApiBody => {\n  const permissions = Object.entries(contentTypesPermissions).reduce<PermissionApiBody>(\n    (allPermissions, current) => {\n      const [subject, currentSubjectActions] = current;\n\n      const permissions = Object.entries(currentSubjectActions).reduce<PermissionApiBody>(\n        (acc, current) => {\n          const [actionName, permissions] = current;\n          const shouldCreatePermission = createArrayOfValues(permissions).some((val) => val);\n\n          if (!shouldCreatePermission) {\n            return acc;\n          }\n\n          if (!permissions?.properties?.enabled) {\n            const createdPermissionsArray = Object.entries(permissions.properties).reduce<\n              PermissionApiBody[number]\n            >(\n              (acc, current) => {\n                const [propertyName, propertyValue] = current;\n\n                // @ts-expect-error â€“ `propertyValue` can be boolean or an object, but we don't account for it...\n                acc.properties[propertyName] = createPropertyArray(propertyValue);\n\n                return acc;\n              },\n              {\n                action: actionName,\n                subject,\n                conditions: createConditionsArray(permissions.conditions),\n                properties: {},\n              }\n            );\n\n            return [...acc, createdPermissionsArray];\n          }\n\n          if (!permissions.properties.enabled) {\n            return acc;\n          }\n\n          acc.push({\n            action: actionName,\n            subject,\n            properties: {},\n            conditions: createConditionsArray(permissions.conditions),\n          });\n\n          return acc;\n        },\n        []\n      );\n\n      return [...allPermissions, ...permissions];\n    },\n    []\n  );\n\n  return permissions;\n};\n\nconst createPropertyArray = (propertyValue: PropertyChildForm, prefix = ''): string[] => {\n  return Object.entries(propertyValue).reduce<string[]>((acc, current) => {\n    const [name, value] = current;\n\n    if (isObject(value)) {\n      return [...acc, ...createPropertyArray(value, `${prefix}${name}.`)];\n    }\n\n    if (value && !isObject(value)) {\n      acc.push(`${prefix}${name}`);\n    }\n\n    return acc;\n  }, []);\n};\n\nconst createConditionsArray = (conditions: ConditionForm) =>\n  Object.entries(conditions)\n    .filter(([, conditionValue]) => {\n      return conditionValue;\n    })\n    .map(([conditionName]) => conditionName);\n\nexport { findMatchingPermission, formatPermissionsForAPI };\n","import isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\n\nimport { findMatchingPermission } from './permissions';\n\nimport type { GenericLayout } from './layouts';\nimport type {\n  Condition,\n  SettingPermission,\n  ContentPermission,\n  Subject,\n  SubjectProperty,\n} from '../../../../../../../shared/contracts/permissions';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\n\ntype ConditionForm = Record<string, boolean>;\n\n/**\n * Creates the default condition form: { [conditionId]: false }\n */\nconst createDefaultConditionsForm = (\n  conditions: Condition[],\n  initialConditions: Permission['conditions'] = []\n): ConditionForm =>\n  conditions.reduce<ConditionForm>((acc, current) => {\n    acc[current.id] = initialConditions.indexOf(current.id) !== -1;\n\n    return acc;\n  }, {});\n\ninterface SubCategoryForm {\n  properties: {\n    enabled: boolean;\n  };\n  conditions: ConditionForm;\n}\n\ntype ChildrenForm = Record<\n  string,\n  SubCategoryForm | (Omit<SubCategoryForm, 'properties'> & PropertyForm)\n>;\n\ntype Form = Record<string, ChildrenForm>;\n\nconst createDefaultForm = <TLayout extends Omit<SettingPermission, 'category'>>(\n  layout: GenericLayout<TLayout>[],\n  conditions: Condition[],\n  initialPermissions: Permission[] = []\n) => {\n  return layout.reduce<Record<string, Form>>((acc, { categoryId, childrenForm }) => {\n    const childrenDefaultForm = childrenForm.reduce<Form>((acc, current) => {\n      acc[current.subCategoryId] = current.actions.reduce<ChildrenForm>((acc, current) => {\n        const foundMatchingPermission = findMatchingPermission(\n          initialPermissions,\n          current.action,\n          null\n        );\n\n        acc[current.action] = {\n          properties: {\n            enabled: foundMatchingPermission !== undefined,\n          },\n          conditions: createDefaultConditionsForm(\n            conditions,\n            foundMatchingPermission?.conditions ?? []\n          ),\n        };\n\n        return acc;\n      }, {});\n\n      return acc;\n    }, {});\n\n    acc[categoryId] = childrenDefaultForm;\n\n    return acc;\n  }, {});\n};\n\ninterface PropertyChildForm extends Record<string, boolean | PropertyChildForm> {}\n\ninterface PropertyForm {\n  properties: PropertyChildForm;\n}\n\n/**\n * Creates the default form for all the properties found in a content type's layout\n */\nconst createDefaultPropertiesForm = (\n  properties: string[],\n  subject: Subject,\n  matchingPermission?: Permission\n): PropertyForm => {\n  const recursivelyCreatePropertyForm = (\n    { children = [] }: SubjectProperty,\n    propertyValues: string[],\n    prefix = ''\n  ): PropertyChildForm => {\n    return children.reduce<PropertyChildForm>((acc, current) => {\n      if (current.children) {\n        return {\n          ...acc,\n          [current.value]: recursivelyCreatePropertyForm(\n            current,\n            propertyValues,\n            `${prefix}${current.value}.`\n          ),\n        };\n      }\n\n      const hasProperty = propertyValues.indexOf(`${prefix}${current.value}`) !== -1;\n\n      acc[current.value] = hasProperty;\n\n      return acc;\n    }, {});\n  };\n\n  return properties.reduce<PropertyForm>(\n    (acc, currentPropertyName) => {\n      const foundProperty = subject.properties.find(({ value }) => value === currentPropertyName);\n\n      if (foundProperty) {\n        const matchingPermissionPropertyValues =\n          matchingPermission?.properties[foundProperty.value] ?? [];\n\n        const propertyForm = recursivelyCreatePropertyForm(\n          foundProperty,\n          matchingPermissionPropertyValues\n        );\n\n        acc.properties[currentPropertyName] = propertyForm;\n      }\n\n      return acc;\n    },\n    { properties: {} }\n  );\n};\n\n/**\n * Creates the default for for a content type\n */\nconst createDefaultCTForm = (\n  { subjects, actions = [] }: ContentPermission,\n  conditions: Condition[],\n  initialPermissions: Permission[] = []\n) => {\n  return actions.reduce<Form>((defaultForm, action) => {\n    type SubjectLayouts = Record<string, Subject>;\n\n    const subjectLayouts = action.subjects.reduce<SubjectLayouts>((acc, current) => {\n      const foundLayout = subjects.find(({ uid }) => uid === current) || null;\n\n      if (foundLayout) {\n        acc[current] = foundLayout;\n      }\n\n      return acc;\n    }, {});\n\n    // This can happen when an action is not related to a content type\n    // for instance the D&P permission is applied only with the cts that\n    // have the D&P features enabled\n    if (isEmpty(subjectLayouts)) {\n      return defaultForm;\n    }\n\n    // The object has the following shape: { [ctUID]: { [actionId]: { [property]: { enabled: false } } } }\n    const contentTypesActions = Object.keys(subjectLayouts).reduce<Form>((acc, currentCTUID) => {\n      const { actionId, applyToProperties } = action;\n      const currentSubjectLayout = subjectLayouts[currentCTUID];\n      const properties = currentSubjectLayout.properties.map(({ value }) => value);\n      const doesNothaveProperty = properties.every(\n        (property) => (applyToProperties || []).indexOf(property) === -1\n      );\n\n      const matchingPermission = findMatchingPermission(initialPermissions, actionId, currentCTUID);\n      const conditionsForm = createDefaultConditionsForm(\n        conditions,\n        matchingPermission?.conditions ?? []\n      );\n\n      if (!acc[currentCTUID]) {\n        acc[currentCTUID] = {};\n      }\n\n      if (isEmpty(applyToProperties) || doesNothaveProperty) {\n        acc[currentCTUID][actionId] = {\n          properties: {\n            enabled: matchingPermission !== undefined,\n          },\n          conditions: conditionsForm,\n        };\n\n        return acc;\n      }\n\n      const propertiesForm = createDefaultPropertiesForm(\n        applyToProperties,\n        subjectLayouts[currentCTUID],\n        matchingPermission\n      );\n\n      acc[currentCTUID][actionId] = { ...propertiesForm, conditions: conditionsForm };\n\n      return acc;\n    }, {});\n\n    return merge(defaultForm, contentTypesActions);\n  }, {});\n};\n\nexport { createDefaultConditionsForm, createDefaultForm, createDefaultCTForm };\nexport type { ConditionForm, Form, PropertyForm, SubCategoryForm, ChildrenForm, PropertyChildForm };\n","import groupBy from 'lodash/groupBy';\n\nimport { SettingPermission } from '../../../../../../../shared/contracts/permissions';\n\ninterface GenericLayout<TLayout> {\n  category: string;\n  categoryId: string;\n  childrenForm: Array<{\n    subCategoryName: string;\n    subCategoryId: string;\n    actions: TLayout[];\n  }>;\n}\n\nconst formatLayout = <TLayout extends Omit<SettingPermission, 'category'>>(\n  layout: TLayout[],\n  groupByKey: keyof TLayout\n): GenericLayout<TLayout>[] => {\n  return Object.entries(groupBy(layout, groupByKey)).map(([itemName, item]) => ({\n    category: itemName,\n    categoryId: itemName.split(' ').join('-'),\n    childrenForm: Object.entries(groupBy(item, 'subCategory')).map(\n      ([subCategoryName, actions]) => ({\n        subCategoryName,\n        subCategoryId: subCategoryName.split(' ').join('-'),\n        actions,\n      })\n    ),\n  }));\n};\n\nexport { formatLayout };\nexport type { GenericLayout };\n","import has from 'lodash/has';\nimport omit from 'lodash/omit';\n\nimport { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n/**\n * Changes all the conditions leaf when the properties are all falsy\n */\nconst updateConditionsToFalse = (obj: object): object => {\n  return Object.keys(obj).reduce((acc, current) => {\n    // @ts-expect-error â€“ TODO: type better\n    const currentValue = obj[current];\n\n    if (isObject(currentValue) && !has(currentValue, 'conditions')) {\n      return { ...acc, [current]: updateConditionsToFalse(currentValue) };\n    }\n\n    if (isObject(currentValue) && has(currentValue, 'conditions')) {\n      const isActionEnabled = createArrayOfValues(omit(currentValue, 'conditions')).some(\n        (val) => val\n      );\n\n      if (!isActionEnabled) {\n        // @ts-expect-error â€“ TODO: type better\n        const updatedConditions = Object.keys(currentValue.conditions).reduce((acc1, current) => {\n          // @ts-expect-error â€“ TODO: type better\n          acc1[current] = false;\n\n          return acc1;\n        }, {});\n\n        return { ...acc, [current]: { ...currentValue, conditions: updatedConditions } };\n      }\n    }\n\n    // @ts-expect-error â€“ TODO: type better\n    acc[current] = currentValue;\n\n    return acc;\n  }, {});\n};\n\nexport { updateConditionsToFalse };\n","import { isObject } from '../../../../../utils/objects';\n\n/**\n * Sets all the none object values of an object to the given one\n * It preserves the shape of the object, it only modifies the leafs\n * of an object.\n * This utility is very helpful when dealing with parent<>children checkboxes\n */\nconst updateValues = (obj: object, valueToSet: boolean, isFieldUpdate = false): object => {\n  return Object.keys(obj).reduce((acc, current) => {\n    const currentValue = obj[current as keyof object];\n\n    if (current === 'conditions' && !isFieldUpdate) {\n      // @ts-expect-error â€“ TODO: type better\n      acc[current] = currentValue;\n\n      return acc;\n    }\n\n    if (isObject(currentValue)) {\n      return { ...acc, [current]: updateValues(currentValue, valueToSet, current === 'fields') };\n    }\n\n    // @ts-expect-error â€“ TODO: type better\n    acc[current] = valueToSet;\n\n    return acc;\n  }, {});\n};\n\nexport { updateValues };\n","export const cellWidth = `12rem`;\nexport const firstRowWidth = `20rem`;\nexport const rowHeight = `5.3rem`;\n","type DataWithoutCondition<TData extends { conditions?: unknown }> = Omit<TData, 'conditions'>;\n\nconst removeConditionKeyFromData = <TData extends { conditions?: unknown }>(\n  obj?: TData\n): DataWithoutCondition<TData> | null => {\n  if (!obj) {\n    return null;\n  }\n\n  return Object.entries(obj).reduce((acc, [key, value]) => {\n    if (key !== 'conditions') {\n      // @ts-expect-error â€“ TODO: fix this type error correctly.\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {} as DataWithoutCondition<TData>);\n};\n\nexport { removeConditionKeyFromData };\nexport type { DataWithoutCondition };\n","import { createArrayOfValues } from './createArrayOfValues';\nimport { removeConditionKeyFromData } from './removeConditionKeyFromData';\n\ninterface RecursiveRecordOfBooleans extends Record<string, boolean | RecursiveRecordOfBooleans> {}\n\nconst getCheckboxState = (dataObj: RecursiveRecordOfBooleans) => {\n  const dataWithoutCondition = removeConditionKeyFromData(dataObj);\n\n  const arrayOfValues = createArrayOfValues(dataWithoutCondition);\n\n  if (!arrayOfValues.length) {\n    return { hasAllActionsSelected: false, hasSomeActionsSelected: false };\n  }\n\n  const hasAllActionsSelected = arrayOfValues.every((val) => val);\n  const hasSomeActionsSelected = arrayOfValues.some((val) => val) && !hasAllActionsSelected;\n\n  return { hasAllActionsSelected, hasSomeActionsSelected };\n};\n\nexport { getCheckboxState };\nexport type { RecursiveRecordOfBooleans };\n","import { Flex, FlexComponent } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst CollapseLabel = styled<FlexComponent>(Flex)<{ $isCollapsable: boolean }>`\n  padding-right: ${({ theme }) => theme.spaces[2]};\n  overflow: hidden;\n  flex: 1;\n  ${({ $isCollapsable }) => $isCollapsable && 'cursor: pointer;'}\n`;\n\nexport { CollapseLabel };\n","import { styled } from 'styled-components';\n\nimport { cellWidth } from '../utils/constants';\n\nconst HiddenAction = styled.div`\n  width: ${cellWidth};\n`;\n\nexport { HiddenAction };\n","import { Box } from '@strapi/design-system';\n\nconst RequiredSign = () => (\n  <Box color=\"danger700\" paddingLeft={1}>\n    *\n  </Box>\n);\n\nexport { RequiredSign };\n","import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\nimport { firstRowWidth } from '../utils/constants';\n\nimport { CollapseLabel } from './CollapseLabel';\n\ninterface RowLabelWithCheckboxProps {\n  children: React.ReactNode;\n  checkboxName?: string;\n  isActive?: boolean;\n  isCollapsable?: boolean;\n  isFormDisabled?: boolean;\n  label: string;\n  onChange: PermissionsDataManagerContextValue['onChangeParentCheckbox'];\n  onClick: () => void;\n  someChecked?: boolean;\n  value: boolean;\n}\n\nconst RowLabelWithCheckbox = ({\n  checkboxName = '',\n  children,\n  isActive = false,\n  isCollapsable = false,\n  isFormDisabled = false,\n  label,\n  onChange,\n  onClick,\n  someChecked = false,\n  value,\n}: RowLabelWithCheckboxProps) => {\n  const { formatMessage } = useIntl();\n\n  const collapseLabelProps = {\n    title: label,\n    alignItems: 'center',\n    $isCollapsable: isCollapsable,\n  };\n\n  if (isCollapsable) {\n    Object.assign(collapseLabelProps, {\n      onClick,\n      'aria-expanded': isActive,\n      onKeyDown({ key }: React.KeyboardEvent<HTMLDivElement>) {\n        if (key === 'Enter' || key === ' ') {\n          onClick();\n        }\n      },\n      tabIndex: 0,\n      role: 'button',\n    });\n  }\n\n  return (\n    <Flex alignItems=\"center\" paddingLeft={6} width={firstRowWidth} shrink={0}>\n      <Box paddingRight={2}>\n        <Checkbox\n          name={checkboxName}\n          aria-label={formatMessage(\n            {\n              id: `Settings.permissions.select-all-by-permission`,\n              defaultMessage: 'Select all {label} permissions',\n            },\n            { label }\n          )}\n          disabled={isFormDisabled}\n          // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n          onCheckedChange={(value) =>\n            onChange({\n              target: {\n                name: checkboxName,\n                value: !!value,\n              },\n            })\n          }\n          checked={someChecked ? 'indeterminate' : value}\n        />\n      </Box>\n      <CollapseLabel {...collapseLabelProps}>\n        <Typography ellipsis>{label}</Typography>\n        {children}\n      </CollapseLabel>\n    </Flex>\n  );\n};\n\nexport { RowLabelWithCheckbox };\nexport type { RowLabelWithCheckboxProps };\n","import * as React from 'react';\n\nimport {\n  Checkbox,\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  Typography,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme, css } from 'styled-components';\n\nimport { Action, SubjectProperty } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth, rowHeight } from '../utils/constants';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapseLabel } from './CollapseLabel';\nimport { HiddenAction } from './HiddenAction';\nimport { RequiredSign } from './RequiredSign';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsePropertyMatrix\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapsePropertyMatrixProps\n  extends Pick<\n    ActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'label' | 'pathToData' | 'propertyName'\n  > {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n}\n\ninterface PropertyAction {\n  label: string;\n  actionId: string;\n  isActionRelatedToCurrentProperty: boolean;\n}\n\nconst CollapsePropertyMatrix = ({\n  availableActions = [],\n  childrenForm = [],\n  isFormDisabled,\n  label,\n  pathToData,\n  propertyName,\n}: CollapsePropertyMatrixProps) => {\n  const propertyActions = React.useMemo(\n    () =>\n      availableActions.map((action) => {\n        const isActionRelatedToCurrentProperty =\n          Array.isArray(action.applyToProperties) &&\n          action.applyToProperties.indexOf(propertyName) !== -1 &&\n          action.isDisplayed;\n\n        return { label: action.label, actionId: action.actionId, isActionRelatedToCurrentProperty };\n      }) satisfies PropertyAction[],\n    [availableActions, propertyName]\n  );\n\n  return (\n    <Flex display=\"inline-flex\" direction=\"column\" alignItems=\"stretch\" minWidth={0}>\n      <Header label={label} headers={propertyActions} />\n      <Box>\n        {childrenForm.map(({ children: childrenForm, label, value, required }, i) => (\n          <ActionRow\n            childrenForm={childrenForm}\n            key={value}\n            label={label}\n            isFormDisabled={isFormDisabled}\n            name={value}\n            required={required}\n            propertyActions={propertyActions}\n            pathToData={pathToData}\n            propertyName={propertyName}\n            isOdd={i % 2 === 0}\n          />\n        ))}\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps\n  extends Pick<\n    SubActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'propertyActions' | 'propertyName'\n  > {\n  label: string;\n  name: string;\n  required?: boolean;\n  pathToData: string;\n  isOdd?: boolean;\n}\n\nconst ActionRow = ({\n  childrenForm = [],\n  label,\n  isFormDisabled = false,\n  name,\n  required = false,\n  pathToData,\n  propertyActions,\n  propertyName,\n  isOdd = false,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n  const {\n    modifiedData,\n    onChangeCollectionTypeLeftActionRowCheckbox,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const isActive = rowToOpen === name;\n\n  const recursiveChildren = React.useMemo(() => {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n\n  const isCollapsable = recursiveChildren.length > 0;\n\n  const handleClick = React.useCallback(() => {\n    if (isCollapsable) {\n      setRowToOpen((prev) => {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  const handleChangeLeftRowCheckbox: RowLabelWithCheckboxProps['onChange'] = ({\n    target: { value },\n  }) => {\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = React.useMemo(() => {\n    return getRowLabelCheckboxState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\n\n  return (\n    <>\n      <Wrapper\n        alignItems=\"center\"\n        $isCollapsable={isCollapsable}\n        $isActive={isActive}\n        background={isOdd ? 'neutral100' : 'neutral0'}\n      >\n        <Flex>\n          <RowLabelWithCheckbox\n            onChange={handleChangeLeftRowCheckbox}\n            onClick={handleClick}\n            isCollapsable={isCollapsable}\n            isFormDisabled={isFormDisabled}\n            label={label}\n            someChecked={hasSomeActionsSelected}\n            value={hasAllActionsSelected}\n            isActive={isActive}\n          >\n            {required && <RequiredSign />}\n            <CarretIcon $isActive={isActive} />\n          </RowLabelWithCheckbox>\n          <Flex>\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\n              if (!isActionRelatedToCurrentProperty) {\n                return <HiddenAction key={label} />;\n              }\n\n              const checkboxName = [\n                ...pathToData.split('..'),\n                actionId,\n                'properties',\n                propertyName,\n                name,\n              ];\n\n              if (!isCollapsable) {\n                const checkboxValue = get(modifiedData, checkboxName, false);\n\n                return (\n                  <Flex\n                    key={actionId}\n                    width={cellWidth}\n                    position=\"relative\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                  >\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName.join('..')}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${name} ${label}` }\n                      )}\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName.join('..'),\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={checkboxValue}\n                    />\n                  </Flex>\n                );\n              }\n\n              const data = get(modifiedData, checkboxName, {});\n\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\n\n              return (\n                <Flex\n                  key={label}\n                  width={cellWidth}\n                  position=\"relative\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName.join('..')}\n                    onCheckedChange={(value) => {\n                      onChangeParentCheckbox({\n                        target: {\n                          name: checkboxName.join('..'),\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    aria-label={formatMessage(\n                      {\n                        id: `Settings.permissions.select-by-permission`,\n                        defaultMessage: 'Select {label} permission',\n                      },\n                      { label: `${name} ${label}` }\n                    )}\n                    checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Flex>\n              );\n            })}\n          </Flex>\n        </Flex>\n      </Wrapper>\n      {isActive && (\n        <SubActionRow\n          childrenForm={recursiveChildren}\n          isFormDisabled={isFormDisabled}\n          parentName={name}\n          pathToDataFromActionRow={pathToData}\n          propertyName={propertyName}\n          propertyActions={propertyActions}\n          recursiveLevel={0}\n        />\n      )}\n    </>\n  );\n};\n\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n */\nconst getRowLabelCheckboxState = (\n  propertyActions: PropertyAction[],\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToContentType: string,\n  propertyToCheck: string,\n  targetKey: string\n) => {\n  const actionIds = propertyActions.reduce<string[]>((acc, current) => {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n\n  const data = actionIds.reduce<Record<string, boolean>>((acc, current) => {\n    const mainData = get(\n      modifiedData,\n      [...pathToContentType.split('..'), current, 'properties', propertyToCheck, targetKey],\n      false\n    );\n\n    acc[current] = mainData;\n\n    return acc;\n  }, {});\n\n  return getCheckboxState(data);\n};\n\nconst Wrapper = styled<FlexComponent>(Flex)<{ $isCollapsable?: boolean; $isActive?: boolean }>`\n  height: ${rowHeight};\n  flex: 1;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst CarretIcon = styled(CaretDown)<{ $isActive: boolean }>`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.neutral200};\n  }\n\n  transform: rotate(${({ $isActive }) => ($isActive ? '180' : '0')}deg);\n  margin-left: ${({ theme }) => theme.spaces[2]};\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * SubActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubActionRowProps {\n  childrenForm: SubjectProperty['children'];\n  isFormDisabled?: boolean;\n  parentName: string;\n  pathToDataFromActionRow: string;\n  propertyActions: PropertyAction[];\n  propertyName: string;\n  recursiveLevel: number;\n}\n\nconst SubActionRow = ({\n  childrenForm = [],\n  isFormDisabled,\n  recursiveLevel,\n  pathToDataFromActionRow,\n  propertyActions,\n  parentName,\n  propertyName,\n}: SubActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleSubLevel = (name: string) => {\n    setRowToOpen((prev) => {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  const displayedRecursiveChildren = React.useMemo(() => {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(({ value }) => value === rowToOpen);\n  }, [rowToOpen, childrenForm]);\n\n  return (\n    <Box paddingLeft={`3.2rem`}>\n      <TopTimeline />\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\n        const isVisible = index + 1 < childrenForm.length;\n        const isArrayType = Array.isArray(subChildrenForm);\n        const isActive = rowToOpen === value;\n\n        return (\n          <LeftBorderTimeline key={value} $isVisible={isVisible}>\n            <Flex height={rowHeight}>\n              <StyledBox>\n                <Svg\n                  width=\"20\"\n                  height=\"23\"\n                  viewBox=\"0 0 20 23\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  $color=\"primary200\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n                    fill=\"#D9D8FF\"\n                  />\n                </Svg>\n              </StyledBox>\n              <Flex style={{ flex: 1 }}>\n                <RowStyle $level={recursiveLevel} $isActive={isActive} $isCollapsable={isArrayType}>\n                  <CollapseLabel\n                    alignItems=\"center\"\n                    $isCollapsable={isArrayType}\n                    {...(isArrayType && {\n                      onClick: () => handleClickToggleSubLevel(value),\n                      'aria-expanded': isActive,\n                      onKeyDown: ({ key }: React.KeyboardEvent<HTMLDivElement>) =>\n                        (key === 'Enter' || key === ' ') && handleClickToggleSubLevel(value),\n                      tabIndex: 0,\n                      role: 'button',\n                    })}\n                    title={label}\n                  >\n                    <RowLabel ellipsis>{label}</RowLabel>\n                    {required && <RequiredSign />}\n                    <CarretIcon $isActive={isActive} />\n                  </CollapseLabel>\n                </RowStyle>\n                <Flex style={{ flex: 1 }}>\n                  {propertyActions.map(\n                    ({ actionId, label: propertyLabel, isActionRelatedToCurrentProperty }) => {\n                      if (!isActionRelatedToCurrentProperty) {\n                        return <HiddenAction key={actionId} />;\n                      }\n                      /*\n                       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n                       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n                       */\n                      const checkboxName = [\n                        ...pathToDataFromActionRow.split('..'),\n                        actionId,\n                        'properties',\n                        propertyName,\n                        ...parentName.split('..'),\n                        value,\n                      ];\n\n                      const checkboxValue = get(modifiedData, checkboxName, false);\n\n                      if (!subChildrenForm) {\n                        return (\n                          <Flex\n                            key={propertyLabel}\n                            position=\"relative\"\n                            width={cellWidth}\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Checkbox\n                              disabled={isFormDisabled}\n                              name={checkboxName.join('..')}\n                              aria-label={formatMessage(\n                                {\n                                  id: `Settings.permissions.select-by-permission`,\n                                  defaultMessage: 'Select {label} permission',\n                                },\n                                { label: `${parentName} ${label} ${propertyLabel}` }\n                              )}\n                              onCheckedChange={(value) => {\n                                onChangeSimpleCheckbox({\n                                  target: {\n                                    name: checkboxName.join('..'),\n                                    value: !!value,\n                                  },\n                                });\n                              }}\n                              checked={checkboxValue}\n                            />\n                          </Flex>\n                        );\n                      }\n\n                      const { hasAllActionsSelected, hasSomeActionsSelected } =\n                        getCheckboxState(checkboxValue);\n\n                      return (\n                        <Flex\n                          key={propertyLabel}\n                          position=\"relative\"\n                          width={cellWidth}\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                        >\n                          <Checkbox\n                            key={propertyLabel}\n                            disabled={isFormDisabled}\n                            name={checkboxName.join('..')}\n                            aria-label={formatMessage(\n                              {\n                                id: `Settings.permissions.select-by-permission`,\n                                defaultMessage: 'Select {label} permission',\n                              },\n                              { label: `${parentName} ${label} ${propertyLabel}` }\n                            )}\n                            // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                            onCheckedChange={(value) => {\n                              onChangeParentCheckbox({\n                                target: {\n                                  name: checkboxName.join('..'),\n                                  value: !!value,\n                                },\n                              });\n                            }}\n                            checked={\n                              hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected\n                            }\n                          />\n                        </Flex>\n                      );\n                    }\n                  )}\n                </Flex>\n              </Flex>\n            </Flex>\n            {displayedRecursiveChildren && isActive && (\n              <Box paddingBottom={2}>\n                <SubActionRow\n                  isFormDisabled={isFormDisabled}\n                  parentName={`${parentName}..${value}`}\n                  pathToDataFromActionRow={pathToDataFromActionRow}\n                  propertyActions={propertyActions}\n                  propertyName={propertyName}\n                  recursiveLevel={recursiveLevel + 1}\n                  childrenForm={displayedRecursiveChildren.children}\n                />\n              </Box>\n            )}\n          </LeftBorderTimeline>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst LeftBorderTimeline = styled<BoxComponent>(Box)<{ $isVisible?: boolean }>`\n  border-left: ${({ $isVisible, theme }) =>\n    $isVisible ? `4px solid ${theme.colors.primary200}` : '4px solid transparent'};\n`;\n\nconst RowStyle = styled<FlexComponent>(Flex)<{\n  $level: number;\n  $isCollapsable?: boolean;\n  $isActive?: boolean;\n}>`\n  padding-left: ${({ theme }) => theme.spaces[4]};\n  width: ${({ $level }) => 145 - $level * 36}px;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst RowLabel = styled<TypographyComponent>(Typography)``;\n\nconst TopTimeline = styled.div`\n  padding-top: ${({ theme }) => theme.spaces[2]};\n  margin-top: ${({ theme }) => theme.spaces[2]};\n  width: 0.4rem;\n  background-color: ${({ theme }) => theme.colors.primary200};\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px;\n`;\n\nconst StyledBox = styled<BoxComponent>(Box)`\n  transform: translate(-4px, -12px);\n\n  &:before {\n    content: '';\n    width: 0.4rem;\n    height: 1.2rem;\n    background: ${({ theme }) => theme.colors.primary200};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg<{ $color: keyof DefaultTheme['colors'] }>`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, $color }) => theme.colors[$color]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  headers?: PropertyAction[];\n  label: string;\n}\n\nconst Header = ({ headers = [], label }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex>\n      <Flex width={firstRowWidth} height={rowHeight} shrink={0} alignItems=\"center\" paddingLeft={6}>\n        <Typography variant=\"sigma\" textColor=\"neutral500\">\n          {formatMessage(\n            {\n              id: 'Settings.roles.form.permission.property-label',\n              defaultMessage: '{label} permissions',\n            },\n            { label }\n          )}\n        </Typography>\n      </Flex>\n      {headers.map((header) => {\n        if (!header.isActionRelatedToCurrentProperty) {\n          return <Flex width={cellWidth} shrink={0} key={header.label} />;\n        }\n\n        return (\n          <Flex width={cellWidth} shrink={0} justifyContent=\"center\" key={header.label}>\n            <Typography variant=\"sigma\" textColor=\"neutral500\">\n              {formatMessage({\n                id: `Settings.roles.form.permissions.${header.label.toLowerCase()}`,\n                defaultMessage: header.label,\n              })}\n            </Typography>\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n};\n\nconst activeStyle = (theme: DefaultTheme) => css`\n  color: ${theme.colors.primary600};\n  font-weight: ${theme.fontWeights.bold};\n\n  ${CarretIcon} {\n    path {\n      fill: ${theme.colors.primary600};\n    }\n  }\n`;\n\nexport { CollapsePropertyMatrix };\n","import * as React from 'react';\n\nimport { Box, BoxComponent, Button, ButtonProps } from '@strapi/design-system';\nimport { Cog } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\ninterface ConditionsButtonProps extends Pick<ButtonProps, 'className' | 'onClick' | 'variant'> {\n  hasConditions?: boolean;\n}\n\nconst ConditionsButtonImpl = React.forwardRef<HTMLButtonElement, ConditionsButtonProps>(\n  ({ onClick, className, hasConditions = false, variant = 'tertiary' }, ref) => {\n    const { formatMessage } = useIntl();\n\n    return (\n      <ButtonContainer $hasConditions={hasConditions} className={className}>\n        <Button variant={variant} startIcon={<Cog />} onClick={onClick} ref={ref} type=\"button\">\n          {formatMessage({\n            id: 'global.settings',\n            defaultMessage: 'Settings',\n          })}\n        </Button>\n      </ButtonContainer>\n    );\n  }\n);\n\nconst ButtonContainer = styled<BoxComponent>(Box)<{ $hasConditions?: boolean }>`\n  ${({ $hasConditions, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -3px;\n      left: -10px;\n      width: 6px;\n      height: 6px;\n      border-radius: 2rem;\n      background: ${theme.colors.primary600};\n    }\n  `}\n`;\n\n/**\n * We reference the component directly in other styled-components\n * and as such we need it to have a className already assigned.\n * Therefore we wrapped the implementation in a styled function.\n */\nconst ConditionsButton = styled(ConditionsButtonImpl)``;\n\nexport { ConditionsButton };\nexport type { ConditionsButtonProps };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Modal,\n  MultiSelectNested,\n  MultiSelectNestedProps,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\n\nimport type { HiddenCheckboxAction, VisibleCheckboxAction } from './ContentTypeCollapses';\nimport type { ConditionForm } from '../utils/forms';\n\n/* -------------------------------------------------------------------------------------------------\n * ConditionsModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConditionAction extends Pick<ActionRowProps, 'label'> {\n  actionId: string;\n  isDisplayed: boolean;\n  hasSomeActionsSelected?: boolean;\n  hasAllActionsSelected?: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface ConditionsModalProps extends Pick<ActionRowProps, 'isFormDisabled'> {\n  actions?: Array<ConditionAction | HiddenCheckboxAction | VisibleCheckboxAction>;\n  headerBreadCrumbs?: string[];\n  onClose?: () => void;\n}\n\nconst ConditionsModal = ({\n  actions = [],\n  headerBreadCrumbs = [],\n  isFormDisabled,\n  onClose,\n}: ConditionsModalProps) => {\n  const { formatMessage } = useIntl();\n  const { availableConditions, modifiedData, onChangeConditions } = usePermissionsDataManager();\n\n  const arrayOfOptionsGroupedByCategory = React.useMemo(() => {\n    return Object.entries(groupBy(availableConditions, 'category'));\n  }, [availableConditions]);\n\n  const actionsToDisplay = actions.filter<VisibleCheckboxAction | ConditionAction>(\n    // @ts-expect-error â€“ TODO: fix this type issue\n    ({ isDisplayed, hasSomeActionsSelected, hasAllActionsSelected }) =>\n      isDisplayed && Boolean(hasSomeActionsSelected || hasAllActionsSelected)\n  );\n\n  const [state, setState] = React.useState(\n    createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n  );\n\n  const handleChange = (name: string, values: ConditionForm) => {\n    setState(\n      produce((draft) => {\n        if (!draft[name]) {\n          draft[name] = {};\n        }\n\n        if (!draft[name].default) {\n          draft[name].default = {};\n        }\n\n        draft[name].default = values;\n      })\n    );\n  };\n\n  const handleSubmit = () => {\n    const conditionsWithoutCategory = Object.entries(state).reduce<Record<string, ConditionForm>>(\n      (acc, current) => {\n        const [key, value] = current;\n\n        const merged = Object.values(value).reduce((acc1, current1) => {\n          return { ...acc1, ...current1 };\n        }, {});\n\n        acc[key] = merged;\n\n        return acc;\n      },\n      {}\n    );\n\n    onChangeConditions(conditionsWithoutCategory);\n    onClose && onClose();\n  };\n\n  const onCloseModal = () => {\n    setState(\n      createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n    );\n\n    onClose && onClose();\n  };\n\n  return (\n    <Modal.Content>\n      <Modal.Header>\n        <Breadcrumbs id=\"condition-modal-breadcrumbs\" label={headerBreadCrumbs.join(', ')}>\n          {headerBreadCrumbs.map((label, index, arr) => (\n            <Crumb isCurrent={index === arr.length - 1} key={label}>\n              {upperFirst(\n                formatMessage({\n                  id: label,\n                  defaultMessage: label,\n                })\n              )}\n            </Crumb>\n          ))}\n        </Breadcrumbs>\n      </Modal.Header>\n      <Modal.Body>\n        {actionsToDisplay.length === 0 && (\n          <Typography>\n            {formatMessage({\n              id: 'Settings.permissions.conditions.no-actions',\n              defaultMessage:\n                'You first need to select actions (create, read, update, ...) before defining conditions on them.',\n            })}\n          </Typography>\n        )}\n        <ul>\n          {actionsToDisplay.map(({ actionId, label, pathToConditionsObject }, index) => {\n            const name = pathToConditionsObject.join('..');\n\n            return (\n              <ActionRow\n                key={actionId}\n                arrayOfOptionsGroupedByCategory={arrayOfOptionsGroupedByCategory}\n                label={label}\n                isFormDisabled={isFormDisabled}\n                isGrey={index % 2 === 0}\n                name={name}\n                onChange={handleChange}\n                value={get(state, name, {})}\n              />\n            );\n          })}\n        </ul>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"tertiary\" onClick={() => onCloseModal()}>\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button onClick={handleSubmit}>\n          {formatMessage({\n            id: 'Settings.permissions.conditions.apply',\n            defaultMessage: 'Apply',\n          })}\n        </Button>\n      </Modal.Footer>\n    </Modal.Content>\n  );\n};\n\nconst createDefaultConditionsForm = (\n  actionsToDisplay: Array<ConditionAction | VisibleCheckboxAction>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  arrayOfOptionsGroupedByCategory: ActionRowProps['arrayOfOptionsGroupedByCategory']\n) => {\n  return actionsToDisplay.reduce<Record<string, Record<string, ConditionForm>>>((acc, current) => {\n    const valueFromModifiedData: ConditionForm = get(\n      modifiedData,\n      [...current.pathToConditionsObject, 'conditions'],\n      {}\n    );\n\n    const categoryDefaultForm = arrayOfOptionsGroupedByCategory.reduce<\n      Record<string, ConditionForm>\n    >((acc, current) => {\n      const [categoryName, relatedConditions] = current;\n\n      const conditionsForm = relatedConditions.reduce<ConditionForm>((acc, current) => {\n        acc[current.id] = get(valueFromModifiedData, current.id, false);\n\n        return acc;\n      }, {});\n\n      acc[categoryName] = conditionsForm;\n\n      return acc;\n    }, {});\n\n    acc[current.pathToConditionsObject.join('..')] = categoryDefaultForm;\n\n    return acc;\n  }, {});\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps {\n  arrayOfOptionsGroupedByCategory: Array<\n    [string, PermissionsDataManagerContextValue['availableConditions']]\n  >;\n  isFormDisabled?: boolean;\n  isGrey?: boolean;\n  label: string;\n  name: string;\n  onChange?: (name: string, values: Record<string, boolean>) => void;\n  value: Record<string, ConditionForm>;\n}\n\nconst ActionRow = ({\n  arrayOfOptionsGroupedByCategory,\n  isFormDisabled = false,\n  isGrey = false,\n  label,\n  name,\n  onChange,\n  value,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange: MultiSelectNestedProps['onChange'] = (val) => {\n    if (onChange) {\n      onChange(name, getNewStateFromChangedValues(arrayOfOptionsGroupedByCategory, val));\n    }\n  };\n\n  return (\n    <Flex\n      tag=\"li\"\n      background={isGrey ? 'neutral100' : 'neutral0'}\n      paddingBottom={3}\n      paddingTop={3}\n      justifyContent={'space-evenly'}\n    >\n      <Flex style={{ width: 180 }}>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'Settings.permissions.conditions.can',\n            defaultMessage: 'Can',\n          })}\n          &nbsp;\n        </Typography>\n        <Typography variant=\"sigma\" title={label} textColor=\"primary600\" ellipsis>\n          {formatMessage({\n            id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n            defaultMessage: label,\n          })}\n        </Typography>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          &nbsp;\n          {formatMessage({\n            id: 'Settings.permissions.conditions.when',\n            defaultMessage: 'When',\n          })}\n        </Typography>\n      </Flex>\n      <Box style={{ maxWidth: 430, width: '100%' }}>\n        <MultiSelectNested\n          id={name}\n          customizeContent={(values = []) => `${values.length} currently selected`}\n          onChange={handleChange}\n          value={getSelectedValues(value)}\n          options={getNestedOptions(arrayOfOptionsGroupedByCategory)}\n          disabled={isFormDisabled}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nconst getSelectedValues = (rawValue: Record<string, ConditionForm>): string[] =>\n  Object.values(rawValue)\n    .map((x) =>\n      Object.entries(x)\n        .filter(([, value]) => value)\n        .map(([key]) => key)\n    )\n    .flat();\n\nconst getNestedOptions = (options: ActionRowProps['arrayOfOptionsGroupedByCategory']) =>\n  options.reduce<MultiSelectNestedProps['options']>((acc, [label, children]) => {\n    acc.push({\n      label: capitalise(label),\n      children: children.map((child) => ({\n        label: child.displayName,\n        value: child.id,\n      })),\n    });\n\n    return acc;\n  }, []);\n\nconst getNewStateFromChangedValues = (\n  options: ActionRowProps['arrayOfOptionsGroupedByCategory'],\n  changedValues: string[]\n) =>\n  options\n    .map(([, values]) => values)\n    .flat()\n    .reduce<Record<string, boolean>>(\n      (acc, curr) => ({ [curr.id]: changedValues.includes(curr.id), ...acc }),\n      {}\n    );\n\nexport { ConditionsModal };\nexport type { ConditionsModalProps };\n","import * as React from 'react';\n\nimport { Checkbox, Box, BoxComponent, Flex, FlexComponent, Modal } from '@strapi/design-system';\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme } from 'styled-components';\n\nimport { Action, Subject } from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, rowHeight } from '../utils/constants';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ConditionForm } from '../utils/forms';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapsePropertyMatrix } from './CollapsePropertyMatrix';\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\nimport { HiddenAction } from './HiddenAction';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * ContentTypeCollapses\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ContentTypeCollapsesProps extends Pick<CollapseProps, 'pathToData'> {\n  actions?: Action[];\n  isFormDisabled?: boolean;\n  subjects?: Subject[];\n}\n\nconst ContentTypeCollapses = ({\n  actions = [],\n  isFormDisabled,\n  pathToData,\n  subjects = [],\n}: ContentTypeCollapsesProps) => {\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleCollapse = (collapseName: string) => () => {\n    const nextCollapseToOpen = collapseToOpen === collapseName ? null : collapseName;\n\n    setCollapseToOpen(nextCollapseToOpen);\n  };\n\n  return (\n    <>\n      {subjects.map(({ uid, label, properties }, index) => {\n        const isActive = collapseToOpen === uid;\n        const availableActions = actions.map((action) => ({\n          ...action,\n          isDisplayed: Array.isArray(action.subjects) && action.subjects.indexOf(uid) !== -1,\n        }));\n        return (\n          <Flex\n            key={uid}\n            direction=\"column\"\n            display=\"inline-flex\"\n            alignItems=\"stretch\"\n            minWidth=\"100%\"\n            borderColor={isActive ? 'primary600' : undefined}\n          >\n            <Collapse\n              availableActions={availableActions}\n              isActive={isActive}\n              isGrey={index % 2 === 0}\n              isFormDisabled={isFormDisabled}\n              label={label}\n              onClickToggle={handleClickToggleCollapse(uid)}\n              pathToData={[pathToData, uid].join('..')}\n            />\n            {isActive &&\n              properties.map(({ label: propertyLabel, value, children: childrenForm }) => {\n                return (\n                  <CollapsePropertyMatrix\n                    availableActions={availableActions}\n                    childrenForm={childrenForm}\n                    isFormDisabled={isFormDisabled}\n                    label={propertyLabel}\n                    pathToData={[pathToData, uid].join('..')}\n                    propertyName={value}\n                    key={value}\n                  />\n                );\n              })}\n          </Flex>\n        );\n      })}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Collapse\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapseProps\n  extends Pick<RowLabelWithCheckboxProps, 'isActive' | 'isFormDisabled' | 'label'> {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n  isGrey?: boolean;\n  onClickToggle: RowLabelWithCheckboxProps['onClick'];\n  pathToData: string;\n}\n\nconst Collapse = ({\n  availableActions = [],\n  isActive = false,\n  isGrey = false,\n  isFormDisabled = false,\n  label,\n  onClickToggle,\n  pathToData,\n}: CollapseProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n\n  // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n  const mainData = get(modifiedData, pathToData.split('..'), {});\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<Record<string, ConditionForm>>((acc, current) => {\n      acc[current] = omit(mainData[current], 'conditions');\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n  const checkboxesActions = React.useMemo(() => {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n\n  // @ts-expect-error â€“ hasConditions does not exist on all versions of checkboxesActions.\n  const doesConditionButtonHasConditions = checkboxesActions.some((action) => action.hasConditions);\n\n  return (\n    <BoxWrapper $isActive={isActive}>\n      <Wrapper\n        height={rowHeight}\n        flex={1}\n        alignItems=\"center\"\n        background={isGrey ? 'neutral100' : 'neutral0'}\n      >\n        <RowLabelWithCheckbox\n          isCollapsable\n          isFormDisabled={isFormDisabled}\n          label={capitalise(label)}\n          checkboxName={pathToData}\n          onChange={onChangeParentCheckbox}\n          onClick={onClickToggle}\n          someChecked={hasSomeActionsSelected}\n          value={hasAllActionsSelected}\n          isActive={isActive}\n        >\n          <Chevron paddingLeft={2}>{isActive ? <ChevronUp /> : <ChevronDown />}</Chevron>\n        </RowLabelWithCheckbox>\n\n        <Flex style={{ flex: 1 }}>\n          {checkboxesActions.map(\n            ({ actionId, hasSomeActionsSelected, isDisplayed, ...restAction }) => {\n              if (!isDisplayed) {\n                return <HiddenAction key={actionId} />;\n              }\n\n              const {\n                hasConditions,\n                hasAllActionsSelected,\n                isParentCheckbox,\n                checkboxName,\n                label: permissionLabel,\n              } = restAction as VisibleCheckboxAction;\n\n              if (isParentCheckbox) {\n                return (\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                    {hasConditions && (\n                      <Box\n                        tag=\"span\"\n                        position=\"absolute\"\n                        top=\"-6px\"\n                        left=\"37px\"\n                        width=\"6px\"\n                        height=\"6px\"\n                        borderRadius=\"20px\"\n                        background=\"primary600\"\n                      />\n                    )}\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${permissionLabel} ${label}` }\n                      )}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeParentCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                    />\n                  </Cell>\n                );\n              }\n\n              return (\n                <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                  {hasConditions && (\n                    <Box\n                      tag=\"span\"\n                      position=\"absolute\"\n                      top=\"-6px\"\n                      left=\"37px\"\n                      width=\"6px\"\n                      height=\"6px\"\n                      borderRadius=\"20px\"\n                      background=\"primary600\"\n                    />\n                  )}\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName}\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                    onCheckedChange={(value) => {\n                      onChangeSimpleCheckbox({\n                        target: {\n                          name: checkboxName,\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    checked={hasConditions ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Cell>\n              );\n            }\n          )}\n        </Flex>\n      </Wrapper>\n      <Box bottom=\"10px\" right=\"9px\" position=\"absolute\">\n        <Modal.Root\n          open={isConditionModalOpen}\n          onOpenChange={() => {\n            setIsConditionModalOpen((prev) => !prev);\n          }}\n        >\n          <Modal.Trigger>\n            <ConditionsButton hasConditions={doesConditionButtonHasConditions} />\n          </Modal.Trigger>\n          <ConditionsModal\n            headerBreadCrumbs={[label, 'Settings.permissions.conditions.conditions']}\n            actions={checkboxesActions}\n            isFormDisabled={isFormDisabled}\n            onClose={() => {\n              setIsConditionModalOpen(false);\n            }}\n          />\n        </Modal.Root>\n      </Box>\n    </BoxWrapper>\n  );\n};\n\ninterface VisibleCheckboxAction {\n  actionId: string;\n  hasAllActionsSelected: boolean;\n  hasSomeActionsSelected: boolean;\n  isDisplayed: true;\n  isParentCheckbox: boolean;\n  checkboxName: string;\n  label: string;\n  hasConditions: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface HiddenCheckboxAction {\n  actionId: string;\n  isDisplayed: false;\n  hasAllActionsSelected?: never;\n  hasSomeActionsSelected: boolean;\n}\n\nconst generateCheckboxesActions = (\n  availableActions: Array<Action & { isDisplayed: boolean }>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToData: string\n): Array<VisibleCheckboxAction | HiddenCheckboxAction> => {\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\n    if (!isDisplayed) {\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\n    }\n\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\n    const checkboxNameArray = isEmpty(applyToProperties)\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\n      : baseCheckboxNameArray;\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\n\n    const baseCheckboxAction = {\n      actionId,\n      checkboxName: checkboxNameArray.join('..'),\n      hasConditions: createArrayOfValues(conditionsValue).some((val) => val),\n      isDisplayed,\n      label,\n      pathToConditionsObject: baseCheckboxNameArray,\n    };\n\n    if (isEmpty(applyToProperties)) {\n      const value = get(modifiedData, checkboxNameArray, false);\n\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n      return {\n        ...baseCheckboxAction,\n        hasAllActionsSelected: value,\n        hasSomeActionsSelected: value,\n        isParentCheckbox: false,\n      };\n    }\n\n    const mainData = get(modifiedData, checkboxNameArray, null);\n\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\n\n    return {\n      ...baseCheckboxAction,\n      hasAllActionsSelected,\n      hasSomeActionsSelected,\n      isParentCheckbox: true,\n    };\n  });\n};\n\nconst activeRowStyle = (theme: DefaultTheme, isActive?: boolean): string => `\n  ${Wrapper} {\n    background-color: ${theme.colors.primary100};\n    color: ${theme.colors.primary600};\n    border-radius: ${isActive ? '2px 2px 0 0' : '2px'};\n    font-weight: ${theme.fontWeights.bold};\n  }\n\n  ${Chevron} {\n    display: flex;\n  }\n  ${ConditionsButton} {\n    display: block;\n  }\n\n  &:focus-within {\n    ${() => activeRowStyle(theme, isActive)}\n  }\n`;\n\nconst Wrapper = styled<FlexComponent>(Flex)`\n  border: 1px solid transparent;\n`;\n\nconst BoxWrapper = styled.div<{ $isActive: boolean }>`\n  display: inline-flex;\n  min-width: 100%;\n  position: relative;\n\n  ${ConditionsButton} {\n    display: none;\n  }\n\n  ${({ $isActive, theme }) => $isActive && activeRowStyle(theme, $isActive)}\n\n  &:hover {\n    ${({ theme, $isActive }) => activeRowStyle(theme, $isActive)}\n  }\n`;\n\nconst Cell = styled<FlexComponent>(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst Chevron = styled<BoxComponent>(Box)`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nexport { ContentTypeCollapses };\nexport type { ContentTypeCollapsesProps, HiddenCheckboxAction, VisibleCheckboxAction };\n","import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport { Action } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth } from '../utils/constants';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\ninterface GlobalActionsProps {\n  actions: Action[];\n  isFormDisabled?: boolean;\n  kind: Extract<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n}\n\nconst GlobalActions = ({ actions = [], isFormDisabled, kind }: GlobalActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeCollectionTypeGlobalActionCheckbox } = usePermissionsDataManager();\n\n  const displayedActions = actions.filter(({ subjects }) => subjects && subjects.length);\n\n  const checkboxesState = React.useMemo(() => {\n    const actionsIds = displayedActions.map(({ actionId }) => actionId);\n\n    const data = modifiedData[kind];\n\n    const relatedActionsData = actionsIds.reduce<Record<string, RecursiveRecordOfBooleans>>(\n      (acc, actionId) => {\n        Object.keys(data).forEach((ctUid) => {\n          const actionIdData = get(data, [ctUid, actionId]);\n\n          const actionIdState = { [ctUid]: removeConditionKeyFromData(actionIdData)! };\n\n          if (!acc[actionId]) {\n            acc[actionId] = actionIdState;\n          } else {\n            acc[actionId] = { ...acc[actionId], ...actionIdState };\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const checkboxesState = Object.keys(relatedActionsData).reduce<\n      Record<\n        string,\n        {\n          hasAllActionsSelected: boolean;\n          hasSomeActionsSelected: boolean;\n        }\n      >\n    >((acc, current) => {\n      acc[current] = getCheckboxState(relatedActionsData[current]);\n\n      return acc;\n    }, {});\n\n    return checkboxesState;\n  }, [modifiedData, displayedActions, kind]);\n\n  return (\n    <Box paddingBottom={4} paddingTop={6} style={{ paddingLeft: firstRowWidth }}>\n      <Flex gap={0}>\n        {displayedActions.map(({ label, actionId }) => {\n          return (\n            <Flex\n              shrink={0}\n              width={cellWidth}\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              key={actionId}\n              gap={3}\n            >\n              <Typography variant=\"sigma\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                  defaultMessage: label,\n                })}\n              </Typography>\n              <Checkbox\n                disabled={isFormDisabled}\n                onCheckedChange={(value) => {\n                  onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, !!value);\n                }}\n                name={actionId}\n                aria-label={formatMessage(\n                  {\n                    id: `Settings.permissions.select-all-by-permission`,\n                    defaultMessage: 'Select all {label} permissions',\n                  },\n                  {\n                    label: formatMessage({\n                      id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                      defaultMessage: label,\n                    }),\n                  }\n                )}\n                checked={\n                  get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)\n                    ? 'indeterminate'\n                    : get(checkboxesState, [actionId, 'hasAllActionsSelected'], false)\n                }\n              />\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n};\n\nexport { GlobalActions };\nexport type { GlobalActionsProps };\n","import { Box } from '@strapi/design-system';\n\nimport { ContentPermission } from '../../../../../../../shared/contracts/permissions';\n\nimport { ContentTypeCollapses } from './ContentTypeCollapses';\nimport { GlobalActions, GlobalActionsProps } from './GlobalActions';\n\ninterface ContentTypesProps extends Pick<GlobalActionsProps, 'kind'> {\n  isFormDisabled?: boolean;\n  layout: ContentPermission;\n}\n\nconst ContentTypes = ({\n  isFormDisabled,\n  kind,\n  layout: { actions, subjects },\n}: ContentTypesProps) => {\n  const sortedSubjects = [...subjects].sort((a, b) => a.label.localeCompare(b.label));\n\n  return (\n    <Box background=\"neutral0\">\n      <GlobalActions actions={actions} kind={kind} isFormDisabled={isFormDisabled} />\n      <ContentTypeCollapses\n        actions={actions}\n        isFormDisabled={isFormDisabled}\n        pathToData={kind}\n        subjects={sortedSubjects}\n      />\n    </Box>\n  );\n};\n\nexport { ContentTypes };\n","import * as React from 'react';\n\nimport {\n  Accordion,\n  Box,\n  BoxComponent,\n  Checkbox,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n} from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport {\n  SettingPermission,\n  PluginPermission,\n} from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ChildrenForm, ConditionForm } from '../utils/forms';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\n\nimport type { GenericLayout } from '../utils/layouts';\n\n/* -------------------------------------------------------------------------------------------------\n * PluginsAndSettingsPermissions\n * -----------------------------------------------------------------------------------------------*/\n\ntype Layout = GenericLayout<SettingPermission | PluginPermission>[];\n\ninterface PluginsAndSettingsPermissionsProps extends Pick<RowProps, 'kind' | 'isFormDisabled'> {\n  layout: Layout;\n}\n\nconst PluginsAndSettingsPermissions = ({\n  layout,\n  ...restProps\n}: PluginsAndSettingsPermissionsProps) => {\n  return (\n    <Box padding={6} background=\"neutral0\">\n      <Accordion.Root size=\"M\">\n        {layout.map(({ category, categoryId, childrenForm }, index) => {\n          return (\n            <Row\n              key={category}\n              childrenForm={childrenForm}\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\n              name={category}\n              pathToData={[restProps.kind, categoryId]}\n              {...restProps}\n            />\n          );\n        })}\n      </Accordion.Root>\n    </Box>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Row\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RowProps\n  extends Pick<Layout[number], 'childrenForm'>,\n    Pick<Accordion.HeaderProps, 'variant'> {\n  kind: Exclude<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n  name: string;\n  isFormDisabled?: boolean;\n  pathToData: string[];\n}\n\nconst Row = ({\n  childrenForm,\n  kind,\n  name,\n  isFormDisabled = false,\n  variant,\n  pathToData,\n}: RowProps) => {\n  const { formatMessage } = useIntl();\n\n  const categoryName = name.split('::').pop() ?? '';\n\n  return (\n    <Accordion.Item value={name}>\n      <Accordion.Header variant={variant}>\n        <Accordion.Trigger\n          caretPosition=\"right\"\n          description={`${formatMessage(\n            { id: 'Settings.permissions.category', defaultMessage: categoryName },\n            { category: categoryName }\n          )} ${kind === 'plugins' ? 'plugin' : kind}`}\n        >\n          {capitalise(categoryName)}\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <Accordion.Content>\n        <Box padding={6}>\n          {childrenForm.map(({ actions, subCategoryName, subCategoryId }) => (\n            <SubCategory\n              key={subCategoryName}\n              actions={actions}\n              categoryName={categoryName}\n              isFormDisabled={isFormDisabled}\n              subCategoryName={subCategoryName}\n              pathToData={[...pathToData, subCategoryId]}\n            />\n          ))}\n        </Box>\n      </Accordion.Content>\n    </Accordion.Item>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * SubCategory\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubCategoryProps {\n  actions?: Array<SettingPermission | PluginPermission>;\n  categoryName: string;\n  isFormDisabled?: boolean;\n  subCategoryName: string;\n  pathToData: string[];\n}\n\nconst SubCategory = ({\n  actions = [],\n  categoryName,\n  isFormDisabled,\n  subCategoryName,\n  pathToData,\n}: SubCategoryProps) => {\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n  const { formatMessage } = useIntl();\n\n  const mainData = get(modifiedData, pathToData, {});\n\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<RecursiveRecordOfBooleans>((acc, current) => {\n      acc[current] = removeConditionKeyFromData(mainData[current])!;\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // We need to format the actions so it matches the shape of the ConditionsModal actions props\n  const formattedActions = React.useMemo(() => {\n    return actions.map((action) => {\n      const checkboxName = [...pathToData, action.action, 'properties', 'enabled'];\n      const checkboxValue = get(modifiedData, checkboxName, false);\n      const conditionValue = get(modifiedData, [...pathToData, action.action, 'conditions'], {});\n      const hasConditions = createArrayOfValues(conditionValue).some((val) => val);\n\n      return {\n        ...action,\n        isDisplayed: checkboxValue,\n        checkboxName: checkboxName.join('..'),\n        hasSomeActionsSelected: checkboxValue,\n        value: checkboxValue,\n        hasConditions,\n        label: action.displayName,\n        actionId: action.action,\n        pathToConditionsObject: [...pathToData, action.action],\n      };\n    });\n  }, [actions, modifiedData, pathToData]);\n\n  const datum: ChildrenForm = get(modifiedData, [...pathToData], {});\n\n  const doesButtonHasCondition = createArrayOfValues(\n    Object.entries(datum).reduce<Record<string, ConditionForm>>((acc, current) => {\n      const [catName, { conditions }] = current;\n\n      acc[catName] = conditions;\n\n      return acc;\n    }, {})\n  ).some((val) => val);\n\n  return (\n    <>\n      <Box>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Box paddingRight={4}>\n            <Typography variant=\"sigma\" textColor=\"neutral600\">\n              {subCategoryName}\n            </Typography>\n          </Box>\n          <Border flex={1} />\n          <Box paddingLeft={4}>\n            <Checkbox\n              name={pathToData.join('..')}\n              disabled={isFormDisabled}\n              // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n              onCheckedChange={(value) => {\n                onChangeParentCheckbox({\n                  target: {\n                    name: pathToData.join('..'),\n                    value: !!value,\n                  },\n                });\n              }}\n              checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n            >\n              {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n            </Checkbox>\n          </Box>\n        </Flex>\n        <Flex paddingTop={6} paddingBottom={6}>\n          <Grid.Root gap={2} style={{ flex: 1 }}>\n            {formattedActions.map(({ checkboxName, value, action, displayName, hasConditions }) => {\n              return (\n                <Grid.Item col={3} key={action} direction=\"column\" alignItems=\"start\">\n                  <CheckboxWrapper $disabled={isFormDisabled} $hasConditions={hasConditions}>\n                    <Checkbox\n                      name={checkboxName}\n                      disabled={isFormDisabled}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={value}\n                    >\n                      {displayName}\n                    </Checkbox>\n                  </CheckboxWrapper>\n                </Grid.Item>\n              );\n            })}\n          </Grid.Root>\n          <Modal.Root\n            open={isConditionModalOpen}\n            onOpenChange={() => {\n              setIsConditionModalOpen((prev) => !prev);\n            }}\n          >\n            <Modal.Trigger>\n              <ConditionsButton hasConditions={doesButtonHasCondition} />\n            </Modal.Trigger>\n            <ConditionsModal\n              headerBreadCrumbs={[categoryName, subCategoryName]}\n              actions={formattedActions}\n              isFormDisabled={isFormDisabled}\n              onClose={() => {\n                setIsConditionModalOpen(false);\n              }}\n            />\n          </Modal.Root>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nconst Border = styled<BoxComponent>(Box)`\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\nconst CheckboxWrapper = styled.div<{ $hasConditions?: boolean; $disabled?: boolean }>`\n  position: relative;\n  word-break: keep-all;\n  ${({ $hasConditions, $disabled, theme }) =>\n    $hasConditions &&\n    `\n    &:before {\n      content: '';\n      position: absolute;\n      top: -0.4rem;\n      left: -0.8rem;\n      width: 0.6rem;\n      height: 0.6rem;\n      border-radius: 2rem;\n      background: ${$disabled ? theme.colors.neutral100 : theme.colors.primary600};\n    }\n  `}\n`;\n\nexport { PluginsAndSettingsPermissions };\n","import * as React from 'react';\n\nimport { Tabs } from '@strapi/design-system';\nimport { produce } from 'immer';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport set from 'lodash/set';\nimport { useIntl } from 'react-intl';\n\nimport * as PermissonContracts from '../../../../../../../shared/contracts/permissions';\nimport { Permission } from '../../../../../../../shared/contracts/shared';\nimport { isObject } from '../../../../../utils/objects';\nimport {\n  PermissionsDataManagerContextValue,\n  PermissionsDataManagerProvider,\n} from '../hooks/usePermissionsDataManager';\nimport { difference } from '../utils/difference';\nimport { ConditionForm, Form, createDefaultCTForm, createDefaultForm } from '../utils/forms';\nimport { GenericLayout, formatLayout } from '../utils/layouts';\nimport { formatPermissionsForAPI } from '../utils/permissions';\nimport { updateConditionsToFalse } from '../utils/updateConditionsToFalse';\nimport { updateValues } from '../utils/updateValues';\n\nimport { ContentTypes } from './ContentTypes';\nimport { PluginsAndSettingsPermissions } from './PluginsAndSettings';\n\nconst TAB_LABELS = [\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.collectionTypes',\n    defaultMessage: 'Collection Types',\n    id: 'collectionTypes',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.singleTypes',\n    id: 'singleTypes',\n    defaultMessage: 'Single Types',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.plugins',\n    defaultMessage: 'Plugins',\n    id: 'plugins',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.settings',\n    defaultMessage: 'Settings',\n    id: 'settings',\n  },\n] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * Permissions\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PermissionsAPI {\n  getPermissions: () => {\n    didUpdateConditions: boolean;\n    permissionsToSend: Omit<Permission, 'id' | 'createdAt' | 'updatedAt' | 'actionParameters'>[];\n  };\n  resetForm: () => void;\n  setFormAfterSubmit: () => void;\n}\n\ninterface PermissionsProps {\n  isFormDisabled?: boolean;\n  permissions?: Permission[];\n  layout: PermissonContracts.GetAll.Response['data'];\n}\n\nconst Permissions = React.forwardRef<PermissionsAPI, PermissionsProps>(\n  ({ layout, isFormDisabled, permissions = [] }, api) => {\n    const [{ initialData, layouts, modifiedData }, dispatch] = React.useReducer(\n      reducer,\n      initialState,\n      () => init(layout, permissions)\n    );\n    const { formatMessage } = useIntl();\n\n    React.useImperativeHandle(api, () => {\n      return {\n        getPermissions() {\n          const collectionTypesDiff = difference(\n            initialData.collectionTypes,\n            modifiedData.collectionTypes\n          );\n          const singleTypesDiff = difference(initialData.singleTypes, modifiedData.singleTypes);\n\n          const contentTypesDiff = { ...collectionTypesDiff, ...singleTypesDiff };\n\n          let didUpdateConditions;\n\n          if (isEmpty(contentTypesDiff)) {\n            didUpdateConditions = false;\n          } else {\n            didUpdateConditions = Object.values(contentTypesDiff).some((permission = {}) => {\n              return Object.values(permission).some((permissionValue) =>\n                has(permissionValue, 'conditions')\n              );\n            });\n          }\n\n          return { permissionsToSend: formatPermissionsForAPI(modifiedData), didUpdateConditions };\n        },\n        resetForm() {\n          dispatch({ type: 'RESET_FORM' });\n        },\n        setFormAfterSubmit() {\n          dispatch({ type: 'SET_FORM_AFTER_SUBMIT' });\n        },\n      } satisfies PermissionsAPI;\n    });\n\n    const handleChangeCollectionTypeLeftActionRowCheckbox = (\n      pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n      propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n      rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n      value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX',\n        pathToCollectionType,\n        propertyName,\n        rowName,\n        value,\n      });\n    };\n\n    const handleChangeCollectionTypeGlobalActionCheckbox = (\n      collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n      actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n      value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX',\n        collectionTypeKind,\n        actionId,\n        value,\n      });\n    };\n\n    const handleChangeConditions = (conditions: OnChangeConditionsAction['conditions']) => {\n      dispatch({ type: 'ON_CHANGE_CONDITIONS', conditions });\n    };\n\n    const handleChangeSimpleCheckbox: PermissionsDataManagerContextValue['onChangeSimpleCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_SIMPLE_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    const handleChangeParentCheckbox: PermissionsDataManagerContextValue['onChangeParentCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    return (\n      <PermissionsDataManagerProvider\n        availableConditions={layout.conditions}\n        modifiedData={modifiedData}\n        onChangeConditions={handleChangeConditions}\n        onChangeSimpleCheckbox={handleChangeSimpleCheckbox}\n        onChangeParentCheckbox={handleChangeParentCheckbox}\n        onChangeCollectionTypeLeftActionRowCheckbox={\n          handleChangeCollectionTypeLeftActionRowCheckbox\n        }\n        onChangeCollectionTypeGlobalActionCheckbox={handleChangeCollectionTypeGlobalActionCheckbox}\n      >\n        <Tabs.Root defaultValue={TAB_LABELS[0].id}>\n          <Tabs.List\n            aria-label={formatMessage({\n              id: 'Settings.permissions.users.tabs.label',\n              defaultMessage: 'Tabs Permissions',\n            })}\n          >\n            {TAB_LABELS.map((tabLabel) => (\n              <Tabs.Trigger key={tabLabel.id} value={tabLabel.id}>\n                {formatMessage({ id: tabLabel.labelId, defaultMessage: tabLabel.defaultMessage })}\n              </Tabs.Trigger>\n            ))}\n          </Tabs.List>\n          <Tabs.Content value={TAB_LABELS[0].id}>\n            <ContentTypes\n              layout={layouts.collectionTypes}\n              kind=\"collectionTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[1].id}>\n            <ContentTypes\n              layout={layouts.singleTypes}\n              kind=\"singleTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[2].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.plugins}\n              kind=\"plugins\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[3].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.settings}\n              kind=\"settings\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n        </Tabs.Root>\n      </PermissionsDataManagerProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * reducer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PermissionForms {\n  collectionTypes: Form;\n  plugins: Record<string, Form>;\n  settings: Record<string, Form>;\n  singleTypes: Form;\n}\n\ninterface State {\n  initialData: PermissionForms;\n  modifiedData: PermissionForms;\n  layouts: {\n    collectionTypes: PermissonContracts.ContentPermission;\n    singleTypes: PermissonContracts.ContentPermission;\n    plugins: GenericLayout<PermissonContracts.PluginPermission>[];\n    settings: GenericLayout<PermissonContracts.SettingPermission>[];\n  };\n}\n\nconst initialState = {\n  initialData: {},\n  modifiedData: {},\n  layouts: {},\n};\n\ninterface OnChangeCollectionTypeGlobalActionCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX';\n  collectionTypeKind: keyof PermissionForms;\n  actionId: string;\n  value: boolean;\n}\n\ninterface OnChangeCollectionTypeRowLeftCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX';\n  pathToCollectionType: string;\n  propertyName: string;\n  rowName: string;\n  value: boolean;\n}\n\ninterface OnChangeConditionsAction {\n  type: 'ON_CHANGE_CONDITIONS';\n  conditions: Record<string, ConditionForm>;\n}\n\ninterface OnChangeSimpleCheckboxAction {\n  type: 'ON_CHANGE_SIMPLE_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface OnChangeToggleParentCheckbox {\n  type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface ResetFormAction {\n  type: 'RESET_FORM';\n}\n\ninterface SetFormAfterSubmitAction {\n  type: 'SET_FORM_AFTER_SUBMIT';\n}\n\ntype Action =\n  | OnChangeCollectionTypeGlobalActionCheckboxAction\n  | OnChangeCollectionTypeRowLeftCheckboxAction\n  | OnChangeConditionsAction\n  | OnChangeSimpleCheckboxAction\n  | OnChangeToggleParentCheckbox\n  | ResetFormAction\n  | SetFormAfterSubmitAction;\n\n/* eslint-disable consistent-return */\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      // This action is called when a checkbox in the <GlobalActions />\n      // changes\n      case 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX': {\n        const { collectionTypeKind, actionId, value } = action;\n        const pathToData = ['modifiedData', collectionTypeKind];\n\n        Object.keys(get(state, pathToData)).forEach((collectionType) => {\n          const collectionTypeActionData = get(\n            state,\n            [...pathToData, collectionType, actionId],\n            undefined\n          );\n\n          if (collectionTypeActionData) {\n            let updatedValues = updateValues(collectionTypeActionData, value);\n\n            // We need to remove the applied conditions\n            // @ts-expect-error â€“ TODO: type better\n            if (!value && updatedValues.conditions) {\n              // @ts-expect-error â€“ TODO: type better\n              const updatedConditions = updateValues(updatedValues.conditions, false);\n\n              updatedValues = { ...updatedValues, conditions: updatedConditions };\n            }\n\n            set(draftState, [...pathToData, collectionType, actionId], updatedValues);\n          }\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX': {\n        const { pathToCollectionType, propertyName, rowName, value } = action;\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const pathToModifiedDataCollectionType = pathToCollectionType.split('..');\n\n        const objToUpdate = get(nextModifiedDataState, pathToModifiedDataCollectionType, {});\n\n        Object.keys(objToUpdate).forEach((actionId) => {\n          // When a ct has multiple properties (ex: locales, field)\n          // We need to make sure that we add any new property to the modifiedData\n          // object.\n          if (has(objToUpdate[actionId], `properties.${propertyName}`)) {\n            const objValue = get(objToUpdate, [actionId, 'properties', propertyName, rowName]);\n            const pathToDataToSet = [\n              ...pathToModifiedDataCollectionType,\n              actionId,\n              'properties',\n              propertyName,\n              rowName,\n            ];\n\n            if (!isObject(objValue)) {\n              set(nextModifiedDataState, pathToDataToSet, value);\n            } else {\n              const updatedValue = updateValues(objValue, value);\n\n              set(nextModifiedDataState, pathToDataToSet, updatedValue);\n            }\n          }\n        });\n\n        // When we uncheck a row, we need to check if we also need to disable the conditions\n        if (!value) {\n          // @ts-expect-error â€“ TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      case 'ON_CHANGE_CONDITIONS': {\n        Object.entries(action.conditions).forEach((array) => {\n          const [stringPathToData, conditionsToUpdate] = array;\n\n          set(\n            draftState,\n            ['modifiedData', ...stringPathToData.split('..'), 'conditions'],\n            conditionsToUpdate\n          );\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_SIMPLE_CHECKBOX': {\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n\n        set(nextModifiedDataState, [...action.keys.split('..')], action.value);\n\n        // When we uncheck a single checkbox we need to remove the conditions from the parent\n        if (!action.value) {\n          // @ts-expect-error â€“ TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      /*\n       * Here the idea is to retrieve a specific value of the modifiedObject\n       * then update all the boolean values of the retrieved one\n       * and update the drafState.\n       *\n       * For instance in order to enable create action for all the fields and locales\n       * of the restaurant content type we need to :\n       * 1. Retrieve the modifiedData.collectionTypes.restaurant.create object\n       * 2. Toggle all the end boolean values to the desired one\n       * 3. Update the draftState\n       *\n       * Since the case works well in order to update what we called \"parent\" checkbox. We can\n       * reuse the action when we need to toggle change all the values that depends on this one.\n       * A parent checkbox is a checkbox which value is not a boolean but depends on its children ones, therefore,\n       * a parent checkbox does not have a represented value in the draftState, they are just helpers.\n       *\n       * Given the following data:\n       *\n       * const data = {\n       *  restaurant: {\n       *   create: {\n       *     fields: { name: true },\n       *     locales: { en: false }\n       *   }\n       *  }\n       * }\n       *\n       * The value of the create checkbox for the restaurant will be Æ’alse since not all its children have\n       * truthy values and in order to set its value to true when need to have all the values of its children set to true.\n       *\n       * Similarly, we can reuse the logic for the components attributes\n       *\n       */\n      case 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX': {\n        const { keys, value } = action;\n        const pathToValue = [...keys.split('..')];\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const oldValues = get(nextModifiedDataState, pathToValue, {});\n\n        const updatedValues = updateValues(oldValues, value);\n        set(nextModifiedDataState, pathToValue, updatedValues);\n\n        // When we uncheck a parent checkbox we need to remove the associated conditions\n        if (!value) {\n          // @ts-expect-error â€“ TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, ['modifiedData'], nextModifiedDataState);\n\n        break;\n      }\n      case 'RESET_FORM': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'SET_FORM_AFTER_SUBMIT': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * init (reducer)\n * -----------------------------------------------------------------------------------------------*/\n\nconst init = (\n  layout: PermissionsProps['layout'],\n  permissions: PermissionsProps['permissions']\n): State => {\n  const {\n    conditions,\n    sections: { collectionTypes, singleTypes, plugins, settings },\n  } = layout;\n\n  const layouts = {\n    collectionTypes,\n    singleTypes,\n    plugins: formatLayout(plugins, 'plugin'),\n    settings: formatLayout(settings, 'category'),\n  };\n\n  const defaultForm = {\n    collectionTypes: createDefaultCTForm(collectionTypes, conditions, permissions),\n    singleTypes: createDefaultCTForm(singleTypes, conditions, permissions),\n    plugins: createDefaultForm(layouts.plugins, conditions, permissions),\n    settings: createDefaultForm(layouts.settings, conditions, permissions),\n  };\n\n  return {\n    initialData: defaultForm,\n    modifiedData: defaultForm,\n    layouts,\n  };\n};\n\nexport { Permissions };\nexport type {\n  State,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n};\n"],"names":["PermissionsDataManagerProvider","usePermissionsDataManagerContext","createContext","usePermissionsDataManager","difference","object","base","changes","transform","result","value","key","isEqual","isObject","flattenDeep","array","Array","isArray","reduce","acc","push","createArrayOfValues","obj","Object","values","map","findMatchingPermission","permissions","action","subject","find","perm","formatPermissionsForAPI","modifiedData","pluginsPermissions","formatSettingsPermissions","plugins","settingsPermissions","settings","collectionTypesPermissions","formatContentTypesPermissions","collectionTypes","singleTypesPermissions","singleTypes","settingsPermissionsObject","formAcc","form","currentCategoryPermissions","childFormAcc","childForm","entries","responsesAcc","actionName","conditions","properties","enabled","createConditionsArray","contentTypesPermissions","allPermissions","current","currentSubjectActions","shouldCreatePermission","some","val","createdPermissionsArray","propertyName","propertyValue","createPropertyArray","prefix","name","filter","conditionValue","conditionName","createDefaultConditionsForm","initialConditions","id","indexOf","createDefaultForm","layout","initialPermissions","categoryId","childrenForm","childrenDefaultForm","subCategoryId","actions","foundMatchingPermission","undefined","createDefaultPropertiesForm","matchingPermission","recursivelyCreatePropertyForm","children","propertyValues","hasProperty","currentPropertyName","foundProperty","matchingPermissionPropertyValues","propertyForm","createDefaultCTForm","subjects","defaultForm","subjectLayouts","foundLayout","uid","isEmpty","contentTypesActions","keys","currentCTUID","actionId","applyToProperties","currentSubjectLayout","doesNothaveProperty","every","property","conditionsForm","propertiesForm","merge","formatLayout","groupByKey","groupBy","itemName","item","category","split","join","subCategoryName","updateConditionsToFalse","currentValue","has","isActionEnabled","omit","updatedConditions","acc1","updateValues","valueToSet","isFieldUpdate","cellWidth","firstRowWidth","rowHeight","removeConditionKeyFromData","getCheckboxState","dataObj","dataWithoutCondition","arrayOfValues","length","hasAllActionsSelected","hasSomeActionsSelected","CollapseLabel","styled","Flex","theme","spaces","$isCollapsable","HiddenAction","div","RequiredSign","_jsx","Box","color","paddingLeft","RowLabelWithCheckbox","checkboxName","isActive","isCollapsable","isFormDisabled","label","onChange","onClick","someChecked","formatMessage","useIntl","collapseLabelProps","title","alignItems","assign","onKeyDown","tabIndex","role","_jsxs","width","shrink","paddingRight","Checkbox","aria-label","defaultMessage","disabled","onCheckedChange","target","checked","Typography","ellipsis","CollapsePropertyMatrix","availableActions","pathToData","propertyActions","React","useMemo","isActionRelatedToCurrentProperty","isDisplayed","display","direction","minWidth","Header","headers","required","i","ActionRow","isOdd","rowToOpen","setRowToOpen","useState","onChangeCollectionTypeLeftActionRowCheckbox","onChangeParentCheckbox","onChangeSimpleCheckbox","recursiveChildren","handleClick","useCallback","prev","handleChangeLeftRowCheckbox","getRowLabelCheckboxState","_Fragment","Wrapper","$isActive","background","CarretIcon","checkboxValue","get","position","justifyContent","data","SubActionRow","parentName","pathToDataFromActionRow","recursiveLevel","pathToContentType","propertyToCheck","targetKey","actionIds","mainData","activeStyle","CaretDown","colors","neutral200","handleClickToggleSubLevel","displayedRecursiveChildren","TopTimeline","subChildrenForm","index","isVisible","isArrayType","LeftBorderTimeline","$isVisible","height","StyledBox","Svg","viewBox","fill","xmlns","$color","path","fillRule","clipRule","d","style","flex","RowStyle","$level","RowLabel","propertyLabel","paddingBottom","primary200","svg","variant","textColor","header","toLowerCase","css","primary600","fontWeights","bold","ConditionsButtonImpl","forwardRef","className","hasConditions","ref","ButtonContainer","$hasConditions","Button","startIcon","Cog","type","ConditionsButton","ConditionsModal","headerBreadCrumbs","onClose","availableConditions","onChangeConditions","arrayOfOptionsGroupedByCategory","actionsToDisplay","Boolean","state","setState","handleChange","produce","draft","default","handleSubmit","conditionsWithoutCategory","merged","current1","onCloseModal","Modal","Content","Breadcrumbs","arr","Crumb","isCurrent","upperFirst","Body","ul","pathToConditionsObject","isGrey","Footer","valueFromModifiedData","categoryDefaultForm","categoryName","relatedConditions","getNewStateFromChangedValues","tag","paddingTop","maxWidth","MultiSelectNested","customizeContent","getSelectedValues","options","getNestedOptions","rawValue","x","flat","capitalise","child","displayName","changedValues","curr","includes","ContentTypeCollapses","collapseToOpen","setCollapseToOpen","handleClickToggleCollapse","collapseName","nextCollapseToOpen","borderColor","Collapse","onClickToggle","isConditionModalOpen","setIsConditionModalOpen","checkboxesActions","generateCheckboxesActions","doesConditionButtonHasConditions","BoxWrapper","Chevron","ChevronUp","ChevronDown","restAction","isParentCheckbox","permissionLabel","Cell","top","left","borderRadius","bottom","right","Root","open","onOpenChange","Trigger","baseCheckboxNameArray","checkboxNameArray","conditionsValue","baseCheckboxAction","activeRowStyle","primary100","GlobalActions","kind","onChangeCollectionTypeGlobalActionCheckbox","displayedActions","checkboxesState","actionsIds","relatedActionsData","forEach","ctUid","actionIdData","actionIdState","gap","ContentTypes","sortedSubjects","sort","a","b","localeCompare","PluginsAndSettingsPermissions","restProps","padding","Accordion","size","Row","pop","Item","caretPosition","description","SubCategory","formattedActions","datum","doesButtonHasCondition","catName","Border","Grid","col","CheckboxWrapper","$disabled","neutral150","neutral100","TAB_LABELS","labelId","Permissions","api","initialData","layouts","dispatch","useReducer","reducer","initialState","init","useImperativeHandle","getPermissions","collectionTypesDiff","singleTypesDiff","contentTypesDiff","didUpdateConditions","permission","permissionValue","permissionsToSend","resetForm","setFormAfterSubmit","handleChangeCollectionTypeLeftActionRowCheckbox","pathToCollectionType","rowName","handleChangeCollectionTypeGlobalActionCheckbox","collectionTypeKind","handleChangeConditions","handleChangeSimpleCheckbox","handleChangeParentCheckbox","Tabs","defaultValue","List","tabLabel","draftState","collectionType","collectionTypeActionData","updatedValues","set","nextModifiedDataState","cloneDeep","pathToModifiedDataCollectionType","objToUpdate","objValue","pathToDataToSet","updatedValue","stringPathToData","conditionsToUpdate","pathToValue","oldValues","sections"],"mappings":"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"}