import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import * as React from 'react';
import packageInfo from '@strapi/admin/package.json';
import { Flex, Portal, FocusTrap, IconButton, Box, Button, Typography, LinkButton, VisuallyHidden, Badge, Tooltip, AccessibleIcon, Menu, Avatar, useCollator, Divider, SkipToContent } from '@strapi/design-system';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { useIntl } from 'react-intl';
import { NavLink as NavLink$1, useNavigate, useLocation, Outlet } from 'react-router-dom';
import lt from 'semver/functions/lt';
import valid from 'semver/functions/valid';
import { Cross, ArrowRight, SignOut, Lightning, House, ShoppingCart, Cog } from '@strapi/icons';
import get from 'lodash/get';
import { styled } from 'styled-components';
import { m as useGuidedTour, c as useTracking, w as useConfiguration, u as useAuth, q as useStrapiApp, P as Page, b as useTypedSelector, v as AppInfoProvider } from './Theme-C3oHrQcy.mjs';
import { L as LAYOUT_DATA, V as VerticalDivider, S as STATES, N as Number } from './Ornaments-DlP663hn.mjs';
import { g as getDisplayName, h as hashAdminUserEmail } from './users-B3iOAYG-.mjs';
import { N as NpsSurvey } from './index-GvH7eseL.mjs';
import { produce } from 'immer';
import { P as PrivateRoute } from './PrivateRoute-KL_RhoV8.mjs';
import cloneDeep from 'lodash/cloneDeep';
import { u as useOnce } from './useOnce-EHSWW7FY.mjs';
import { d as useInformationQuery } from './admin-BBS7sDVu.mjs';
import '@radix-ui/react-context';
import '@strapi/icons/symbols';
import 'qs';
import 'lodash/clone';
import 'lodash/toPath';
import 'lodash/isEqual';
import 'axios';
import 'lodash/set';
import 'use-context-selector';
import 'lodash/defaultsDeep';
import 'react-redux';
import '@reduxjs/toolkit';
import 'react-dom/client';
import 'invariant';
import 'lodash/isFunction';
import 'lodash/merge';
import 'lodash/pick';
import 'react-query';
import './useEnterprise-Dy8wMNV5.mjs';
import 'lodash/camelCase';
import 'yup';
import 'fractional-indexing';
import 'lodash/omit';
import 'formik';
import 'lodash/throttle';
import 'lodash/trimEnd';
import '@reduxjs/toolkit/query/react';
import 'lodash/fp/pipe';

/* -------------------------------------------------------------------------------------------------
 * GuidedTourModal
 * -----------------------------------------------------------------------------------------------*/ const GuidedTourModal = ()=>{
    const guidedTour = useGuidedTour('GuidedTourModal', (state)=>state);
    const { currentStep, guidedTourState, setCurrentStep, setStepState, isGuidedTourVisible, setSkipped } = guidedTour;
    const { formatMessage } = useIntl();
    const { trackUsage } = useTracking();
    if (!currentStep || !isGuidedTourVisible) {
        return null;
    }
    const stepData = get(LAYOUT_DATA, currentStep);
    const sectionKeys = Object.keys(guidedTourState);
    const [sectionName, stepName] = currentStep.split('.');
    const sectionIndex = sectionKeys.indexOf(sectionName);
    const stepIndex = Object.keys(guidedTourState[sectionName]).indexOf(stepName);
    const hasSectionAfter = sectionIndex < sectionKeys.length - 1;
    const hasStepAfter = stepIndex < Object.keys(guidedTourState[sectionName]).length - 1;
    const handleCtaClick = ()=>{
        setStepState(currentStep, true);
        if (stepData) {
            trackUsage(stepData.trackingEvent);
        }
        setCurrentStep(null);
    };
    const handleSkip = ()=>{
        setSkipped(true);
        setCurrentStep(null);
        trackUsage('didSkipGuidedtour');
    };
    return /*#__PURE__*/ jsx(Portal, {
        children: /*#__PURE__*/ jsx(ModalWrapper, {
            onClick: handleCtaClick,
            padding: 8,
            justifyContent: "center",
            children: /*#__PURE__*/ jsx(FocusTrap, {
                onEscape: handleCtaClick,
                children: /*#__PURE__*/ jsxs(Flex, {
                    direction: "column",
                    alignItems: "stretch",
                    background: "neutral0",
                    width: `66rem`,
                    shadow: "popupShadow",
                    hasRadius: true,
                    padding: 4,
                    gap: 8,
                    role: "dialog",
                    "aria-modal": true,
                    onClick: (e)=>e.stopPropagation(),
                    children: [
                        /*#__PURE__*/ jsx(Flex, {
                            justifyContent: "flex-end",
                            children: /*#__PURE__*/ jsx(IconButton, {
                                onClick: handleCtaClick,
                                withTooltip: false,
                                label: formatMessage({
                                    id: 'app.utils.close-label',
                                    defaultMessage: 'Close'
                                }),
                                children: /*#__PURE__*/ jsx(Cross, {})
                            })
                        }),
                        /*#__PURE__*/ jsx(Box, {
                            paddingLeft: 7,
                            paddingRight: 7,
                            paddingBottom: !hasStepAfter && !hasSectionAfter ? 8 : 0,
                            children: /*#__PURE__*/ jsx(GuidedTourStepper, {
                                title: stepData && 'title' in stepData ? stepData.title : undefined,
                                cta: stepData && 'cta' in stepData ? stepData.cta : undefined,
                                onCtaClick: handleCtaClick,
                                sectionIndex: sectionIndex,
                                stepIndex: stepIndex,
                                hasSectionAfter: hasSectionAfter,
                                children: stepData && 'content' in stepData && /*#__PURE__*/ jsx(GuidedTourContent, {
                                    ...stepData.content
                                })
                            })
                        }),
                        !(!hasStepAfter && !hasSectionAfter) && /*#__PURE__*/ jsx(Flex, {
                            justifyContent: "flex-end",
                            children: /*#__PURE__*/ jsx(Button, {
                                variant: "tertiary",
                                onClick: handleSkip,
                                children: formatMessage({
                                    id: 'app.components.GuidedTour.skip',
                                    defaultMessage: 'Skip the tour'
                                })
                            })
                        })
                    ]
                })
            })
        })
    });
};
const ModalWrapper = styled(Flex)`
  position: fixed;
  z-index: 4;
  inset: 0;
  /* this is theme.colors.neutral800 with opacity */
  background: ${({ theme })=>`${theme.colors.neutral800}1F`};
`;
const GuidedTourStepper = ({ title, children, cta, onCtaClick, sectionIndex, stepIndex, hasSectionAfter })=>{
    const { formatMessage } = useIntl();
    const hasSectionBefore = sectionIndex > 0;
    const hasStepsBefore = stepIndex > 0;
    const nextSectionIndex = sectionIndex + 1;
    return /*#__PURE__*/ jsxs(Fragment, {
        children: [
            /*#__PURE__*/ jsxs(Flex, {
                alignItems: "stretch",
                children: [
                    /*#__PURE__*/ jsx(Flex, {
                        marginRight: 8,
                        justifyContent: "center",
                        minWidth: `3rem`,
                        children: hasSectionBefore && /*#__PURE__*/ jsx(VerticalDivider, {
                            state: STATES.IS_DONE,
                            minHeight: `2.4rem`
                        })
                    }),
                    /*#__PURE__*/ jsx(Typography, {
                        variant: "sigma",
                        textColor: "primary600",
                        children: formatMessage({
                            id: 'app.components.GuidedTour.title',
                            defaultMessage: '3 steps to get started'
                        })
                    })
                ]
            }),
            /*#__PURE__*/ jsxs(Flex, {
                children: [
                    /*#__PURE__*/ jsx(Flex, {
                        marginRight: 8,
                        minWidth: `3rem`,
                        children: /*#__PURE__*/ jsx(Number, {
                            state: hasStepsBefore ? STATES.IS_DONE : STATES.IS_ACTIVE,
                            paddingTop: 3,
                            paddingBottom: 3,
                            children: sectionIndex + 1
                        })
                    }),
                    title && /*#__PURE__*/ jsx(Typography, {
                        variant: "alpha",
                        fontWeight: "bold",
                        textColor: "neutral800",
                        tag: "h3",
                        id: "title",
                        children: formatMessage(title)
                    })
                ]
            }),
            /*#__PURE__*/ jsxs(Flex, {
                alignItems: "stretch",
                children: [
                    /*#__PURE__*/ jsx(Flex, {
                        marginRight: 8,
                        direction: "column",
                        justifyContent: "center",
                        minWidth: `3rem`,
                        children: hasSectionAfter && /*#__PURE__*/ jsxs(Fragment, {
                            children: [
                                /*#__PURE__*/ jsx(VerticalDivider, {
                                    state: STATES.IS_DONE
                                }),
                                hasStepsBefore && /*#__PURE__*/ jsx(Number, {
                                    state: STATES.IS_ACTIVE,
                                    paddingTop: 3,
                                    children: nextSectionIndex + 1
                                })
                            ]
                        })
                    }),
                    /*#__PURE__*/ jsxs(Box, {
                        children: [
                            children,
                            cta && (cta.target ? /*#__PURE__*/ jsx(LinkButton, {
                                tag: NavLink$1,
                                endIcon: /*#__PURE__*/ jsx(ArrowRight, {}),
                                onClick: onCtaClick,
                                to: cta.target,
                                children: formatMessage(cta.title)
                            }) : /*#__PURE__*/ jsx(Button, {
                                endIcon: /*#__PURE__*/ jsx(ArrowRight, {}),
                                onClick: onCtaClick,
                                children: formatMessage(cta.title)
                            }))
                        ]
                    })
                ]
            }),
            hasStepsBefore && hasSectionAfter && /*#__PURE__*/ jsx(Box, {
                paddingTop: 3,
                children: /*#__PURE__*/ jsx(Flex, {
                    marginRight: 8,
                    justifyContent: "center",
                    width: `3rem`,
                    children: /*#__PURE__*/ jsx(VerticalDivider, {
                        state: STATES.IS_DONE,
                        minHeight: `2.4rem`
                    })
                })
            })
        ]
    });
};
const GuidedTourContent = ({ id, defaultMessage })=>{
    const { formatMessage } = useIntl();
    return /*#__PURE__*/ jsx(Flex, {
        direction: "column",
        alignItems: "stretch",
        gap: 4,
        paddingBottom: 6,
        children: formatMessage({
            id,
            defaultMessage
        }, {
            documentationLink: DocumentationLink,
            b: Bold,
            p: Paragraph,
            light: Light,
            ul: List,
            li: ListItem
        })
    });
};
const DocumentationLink = (children)=>/*#__PURE__*/ jsx(Typography, {
        tag: "a",
        textColor: "primary600",
        target: "_blank",
        rel: "noopener noreferrer",
        href: "https://docs.strapi.io/developer-docs/latest/developer-resources/database-apis-reference/rest-api.html#api-parameters",
        children: children
    });
const Bold = (children)=>/*#__PURE__*/ jsx(Typography, {
        fontWeight: "semiBold",
        children: children
    });
const Paragraph = (children)=>/*#__PURE__*/ jsx(Typography, {
        children: children
    });
const Light = (children)=>/*#__PURE__*/ jsx(Typography, {
        textColor: "neutral600",
        children: children
    });
const List = (children)=>/*#__PURE__*/ jsx(Box, {
        paddingLeft: 6,
        children: /*#__PURE__*/ jsx("ul", {
            children: children
        })
    });
const LiStyled = styled.li`
  list-style: disc;
  &::marker {
    color: ${({ theme })=>theme.colors.neutral800};
  }
`;
const ListItem = (children)=>/*#__PURE__*/ jsx(LiStyled, {
        children: children
    });

const MainNavWrapper = styled(Flex)`
  border-right: 1px solid ${({ theme })=>theme.colors.neutral150};
`;
const MainNav = (props)=>/*#__PURE__*/ jsx(MainNavWrapper, {
        alignItems: "normal",
        tag: "nav",
        background: "neutral0",
        direction: "column",
        height: "100vh",
        position: "sticky",
        top: 0,
        zIndex: 2,
        width: 10,
        ...props
    });

const BrandIconWrapper = styled(Flex)`
  svg,
  img {
    border-radius: ${({ theme })=>theme.borderRadius};
    object-fit: contain;
    height: 2.4rem;
    width: 2.4rem;
  }
`;
const NavBrand = ()=>{
    const { formatMessage } = useIntl();
    const { logos: { menu } } = useConfiguration('LeftMenu');
    return /*#__PURE__*/ jsx(Box, {
        padding: 3,
        children: /*#__PURE__*/ jsxs(BrandIconWrapper, {
            direction: "column",
            justifyContent: "center",
            width: "3.2rem",
            height: "3.2rem",
            children: [
                /*#__PURE__*/ jsx("img", {
                    src: menu.custom?.url || menu.default,
                    alt: formatMessage({
                        id: 'app.components.LeftMenu.logo.alt',
                        defaultMessage: 'Application logo'
                    }),
                    width: "100%",
                    height: "100%"
                }),
                /*#__PURE__*/ jsxs(VisuallyHidden, {
                    children: [
                        /*#__PURE__*/ jsx("span", {
                            children: formatMessage({
                                id: 'app.components.LeftMenu.navbrand.title',
                                defaultMessage: 'Strapi Dashboard'
                            })
                        }),
                        /*#__PURE__*/ jsx("span", {
                            children: formatMessage({
                                id: 'app.components.LeftMenu.navbrand.workplace',
                                defaultMessage: 'Workplace'
                            })
                        })
                    ]
                })
            ]
        })
    });
};

/* -------------------------------------------------------------------------------------------------
 * Link
 * -----------------------------------------------------------------------------------------------*/ const MainNavLinkWrapper = styled(NavLink$1)`
  text-decoration: none;
  display: flex;
  border-radius: ${({ theme })=>theme.borderRadius};
  background: ${({ theme })=>theme.colors.neutral0};
  color: ${({ theme })=>theme.colors.neutral500};
  position: relative;
  width: fit-content;
  padding-block: 0.6rem;
  padding-inline: 0.6rem;

  &:hover {
    svg path {
      fill: ${({ theme })=>theme.colors.neutral600};
    }
    background: ${({ theme })=>theme.colors.neutral100};
  }

  &.active {
    svg path {
      fill: ${({ theme })=>theme.colors.primary600};
    }
    background: ${({ theme })=>theme.colors.primary100};
  }
`;
const LinkImpl = ({ children, ...props })=>{
    return /*#__PURE__*/ jsx(MainNavLinkWrapper, {
        ...props,
        children: children
    });
};
/* -------------------------------------------------------------------------------------------------
 * Tooltip
 * -----------------------------------------------------------------------------------------------*/ const TooltipImpl = ({ children, label, position = 'right' })=>{
    return /*#__PURE__*/ jsx(Tooltip, {
        side: position,
        label: label,
        delayDuration: 0,
        children: /*#__PURE__*/ jsx("span", {
            children: children
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * Icon
 * -----------------------------------------------------------------------------------------------*/ const IconImpl = ({ label, children })=>{
    if (!children) {
        return null;
    }
    return /*#__PURE__*/ jsx(AccessibleIcon, {
        label: label,
        children: children
    });
};
/* -------------------------------------------------------------------------------------------------
 * Badge
 * -----------------------------------------------------------------------------------------------*/ const CustomBadge = styled(Badge)`
  /* override default badge styles to change the border radius of the Base element in the Design System */
  border-radius: ${({ theme })=>theme.spaces[10]};
  height: 2rem;
`;
const BadgeImpl = ({ children, label, ...props })=>{
    if (!children) {
        return null;
    }
    return /*#__PURE__*/ jsx(CustomBadge, {
        position: "absolute",
        top: "-0.8rem",
        left: "1.7rem",
        "aria-label": label,
        active: false,
        ...props,
        children: children
    });
};
/* -------------------------------------------------------------------------------------------------
 * EXPORTS
 * -----------------------------------------------------------------------------------------------*/ const NavLink = {
    Link: LinkImpl,
    Tooltip: TooltipImpl,
    Icon: IconImpl,
    Badge: BadgeImpl
};

const MenuTrigger = styled(Menu.Trigger)`
  height: ${({ theme })=>theme.spaces[7]};
  width: ${({ theme })=>theme.spaces[7]};
  border: none;
  border-radius: 50%;
  // Removes inherited 16px padding
  padding: 0;
  // Prevent empty pixel from appearing below the main nav
  overflow: hidden;
`;
const MenuContent = styled(Menu.Content)`
  left: ${({ theme })=>theme.spaces[3]};
`;
const MenuItem = styled(Menu.Item)`
  & > span {
    width: 100%;
    display: flex;
    align-items: center;
    gap: ${({ theme })=>theme.spaces[3]};
    justify-content: space-between;
  }
`;
const MenuItemDanger = styled(MenuItem)`
  &:hover {
    ${({ theme })=>`
    background: ${theme.colors.danger100};
  `}
  }
`;
const NavUser = ({ children, initials, ...props })=>{
    const { formatMessage } = useIntl();
    const navigate = useNavigate();
    const logout = useAuth('Logout', (state)=>state.logout);
    const handleProfile = ()=>{
        navigate('/me');
    };
    const handleLogout = ()=>{
        logout();
        navigate('/auth/login');
    };
    return /*#__PURE__*/ jsx(Flex, {
        justifyContent: "center",
        padding: 3,
        borderStyle: "solid",
        borderWidth: "1px 0 0 0",
        borderColor: "neutral150",
        ...props,
        children: /*#__PURE__*/ jsxs(Menu.Root, {
            children: [
                /*#__PURE__*/ jsxs(MenuTrigger, {
                    endIcon: null,
                    fullWidth: true,
                    justifyContent: "center",
                    children: [
                        /*#__PURE__*/ jsx(Avatar.Item, {
                            delayMs: 0,
                            fallback: initials
                        }),
                        /*#__PURE__*/ jsx(VisuallyHidden, {
                            tag: "span",
                            children: children
                        })
                    ]
                }),
                /*#__PURE__*/ jsxs(MenuContent, {
                    popoverPlacement: "top-center",
                    zIndex: 3,
                    children: [
                        /*#__PURE__*/ jsx(MenuItem, {
                            onSelect: handleProfile,
                            children: formatMessage({
                                id: 'global.profile',
                                defaultMessage: 'Profile'
                            })
                        }),
                        /*#__PURE__*/ jsxs(MenuItemDanger, {
                            onSelect: handleLogout,
                            color: "danger600",
                            children: [
                                formatMessage({
                                    id: 'app.components.LeftMenu.logout',
                                    defaultMessage: 'Logout'
                                }),
                                /*#__PURE__*/ jsx(SignOut, {})
                            ]
                        })
                    ]
                })
            ]
        })
    });
};

const sortLinks = (links)=>{
    return links.sort((a, b)=>{
        // if no position is defined, we put the link in the position of the external plugins, before the plugins list
        const positionA = a.position ?? 6;
        const positionB = b.position ?? 6;
        if (positionA < positionB) {
            return -1;
        } else {
            return 1;
        }
    });
};
const NavLinkBadgeCounter = styled(NavLink.Badge)`
  span {
    color: ${({ theme })=>theme.colors.neutral0};
  }
`;
const NavLinkBadgeLock = styled(NavLink.Badge)`
  background-color: transparent;
`;
const NavListWrapper = styled(Flex)`
  overflow-y: auto;
`;
const LeftMenu = ({ generalSectionLinks, pluginsSectionLinks })=>{
    const user = useAuth('AuthenticatedApp', (state)=>state.user);
    const { trackUsage } = useTracking();
    const { pathname } = useLocation();
    const userDisplayName = getDisplayName(user);
    const { formatMessage, locale } = useIntl();
    const formatter = useCollator(locale, {
        sensitivity: 'base'
    });
    const initials = userDisplayName.split(' ').map((name)=>name.substring(0, 1)).join('').substring(0, 2);
    const handleClickOnLink = (destination)=>{
        trackUsage('willNavigate', {
            from: pathname,
            to: destination
        });
    };
    const listLinksAlphabeticallySorted = [
        ...pluginsSectionLinks,
        ...generalSectionLinks
    ].sort((a, b)=>formatter.compare(formatMessage(a.intlLabel), formatMessage(b.intlLabel)));
    const listLinks = sortLinks(listLinksAlphabeticallySorted);
    return /*#__PURE__*/ jsxs(MainNav, {
        children: [
            /*#__PURE__*/ jsx(NavBrand, {}),
            /*#__PURE__*/ jsx(Divider, {}),
            /*#__PURE__*/ jsx(NavListWrapper, {
                tag: "ul",
                gap: 3,
                direction: "column",
                flex: 1,
                paddingTop: 3,
                paddingBottom: 3,
                children: listLinks.length > 0 ? listLinks.map((link)=>{
                    const LinkIcon = link.icon;
                    const badgeContentLock = link?.licenseOnly ? /*#__PURE__*/ jsx(Lightning, {
                        fill: "warning500"
                    }) : undefined;
                    const badgeContentNumeric = link.notificationsCount && link.notificationsCount > 0 ? link.notificationsCount.toString() : undefined;
                    const labelValue = formatMessage(link.intlLabel);
                    return /*#__PURE__*/ jsx(Flex, {
                        tag: "li",
                        children: /*#__PURE__*/ jsx(NavLink.Tooltip, {
                            label: labelValue,
                            children: /*#__PURE__*/ jsxs(NavLink.Link, {
                                to: link.to,
                                onClick: ()=>handleClickOnLink(link.to),
                                "aria-label": labelValue,
                                children: [
                                    /*#__PURE__*/ jsx(NavLink.Icon, {
                                        label: labelValue,
                                        children: /*#__PURE__*/ jsx(LinkIcon, {
                                            width: "20",
                                            height: "20",
                                            fill: "neutral500"
                                        })
                                    }),
                                    badgeContentLock ? /*#__PURE__*/ jsx(NavLinkBadgeLock, {
                                        label: "locked",
                                        textColor: "neutral500",
                                        paddingLeft: 0,
                                        paddingRight: 0,
                                        children: badgeContentLock
                                    }) : badgeContentNumeric ? /*#__PURE__*/ jsx(NavLinkBadgeCounter, {
                                        label: badgeContentNumeric,
                                        backgroundColor: "primary600",
                                        width: "2.3rem",
                                        color: "neutral0",
                                        children: badgeContentNumeric
                                    }) : null
                                ]
                            })
                        })
                    }, link.to);
                }) : null
            }),
            /*#__PURE__*/ jsx(NavUser, {
                initials: initials,
                children: userDisplayName
            })
        ]
    });
};

/**
 * TODO: this isn't great, and we really should focus on fixing this.
 */ const PluginsInitializer = ({ children })=>{
    const appPlugins = useStrapiApp('PluginsInitializer', (state)=>state.plugins);
    const [{ plugins }, dispatch] = React.useReducer(reducer, initialState, ()=>init(appPlugins));
    const setPlugin = React.useRef((pluginId)=>{
        dispatch({
            type: 'SET_PLUGIN_READY',
            pluginId
        });
    });
    const hasApluginNotReady = Object.keys(plugins).some((plugin)=>plugins[plugin].isReady === false);
    /**
   *
   * I have spent some time trying to understand what is happening here, and wanted to
   * leave that knowledge for my future me:
   *
   * `initializer` is an undocumented property of the `registerPlugin` API. At the time
   * of writing it seems only to be used by the i18n plugin.
   *
   * How does it work?
   *
   * Every plugin that has an `initializer` component defined, receives the
   * `setPlugin` function as a component prop. In the case of i18n the plugin fetches locales
   * first and calls `setPlugin` with `pluginId` once they are loaded, which then triggers the
   * reducer of the admin app defined above.
   *
   * Once all plugins are set to `isReady: true` the app renders.
   *
   * This API is used to block rendering of the admin app. We should remove that in v5 completely
   * and make sure plugins can inject data into the global store before they are initialized, to avoid
   * having a new prop-callback based communication channel between plugins and the core admin app.
   *
   */ if (hasApluginNotReady) {
        const initializers = Object.keys(plugins).reduce((acc, current)=>{
            const InitializerComponent = plugins[current].initializer;
            if (InitializerComponent) {
                const key = plugins[current].pluginId;
                acc.push(/*#__PURE__*/ jsx(InitializerComponent, {
                    setPlugin: setPlugin.current
                }, key));
            }
            return acc;
        }, []);
        return /*#__PURE__*/ jsxs(Fragment, {
            children: [
                initializers,
                /*#__PURE__*/ jsx(Page.Loading, {})
            ]
        });
    }
    return children;
};
const initialState = {
    plugins: {}
};
const reducer = (state = initialState, action)=>produce(state, (draftState)=>{
        switch(action.type){
            case 'SET_PLUGIN_READY':
                {
                    draftState.plugins[action.pluginId].isReady = true;
                    break;
                }
            default:
                return draftState;
        }
    });
/* -------------------------------------------------------------------------------------------------
 * Init state
 * -----------------------------------------------------------------------------------------------*/ const init = (plugins)=>{
    return {
        plugins
    };
};

const useMenu = (shouldUpdateStrapi)=>{
    const checkUserHasPermissions = useAuth('useMenu', (state)=>state.checkUserHasPermissions);
    const menu = useStrapiApp('useMenu', (state)=>state.menu);
    const permissions = useTypedSelector((state)=>state.admin_app.permissions);
    const [menuWithUserPermissions, setMenuWithUserPermissions] = React.useState({
        generalSectionLinks: [
            {
                icon: House,
                intlLabel: {
                    id: 'global.home',
                    defaultMessage: 'Home'
                },
                to: '/',
                permissions: [],
                position: 0
            },
            {
                icon: ShoppingCart,
                intlLabel: {
                    id: 'global.marketplace',
                    defaultMessage: 'Marketplace'
                },
                to: '/marketplace',
                permissions: permissions.marketplace?.main ?? [],
                position: 7
            },
            {
                icon: Cog,
                intlLabel: {
                    id: 'global.settings',
                    defaultMessage: 'Settings'
                },
                to: '/settings',
                // Permissions of this link are retrieved in the init phase
                // using the settings menu
                permissions: [],
                notificationsCount: 0,
                position: 9
            }
        ],
        pluginsSectionLinks: [],
        isLoading: true
    });
    const generalSectionLinksRef = React.useRef(menuWithUserPermissions.generalSectionLinks);
    React.useEffect(()=>{
        async function applyMenuPermissions() {
            const authorizedPluginSectionLinks = await getPluginSectionLinks(menu, checkUserHasPermissions);
            const authorizedGeneralSectionLinks = await getGeneralLinks(generalSectionLinksRef.current, shouldUpdateStrapi, checkUserHasPermissions);
            setMenuWithUserPermissions((state)=>({
                    ...state,
                    generalSectionLinks: authorizedGeneralSectionLinks,
                    pluginsSectionLinks: authorizedPluginSectionLinks,
                    isLoading: false
                }));
        }
        applyMenuPermissions();
    }, [
        setMenuWithUserPermissions,
        generalSectionLinksRef,
        menu,
        permissions,
        shouldUpdateStrapi,
        checkUserHasPermissions
    ]);
    return menuWithUserPermissions;
};
/* -------------------------------------------------------------------------------------------------
 * Utils
 * -----------------------------------------------------------------------------------------------*/ const getGeneralLinks = async (generalSectionRawLinks, shouldUpdateStrapi = false, checkUserHasPermissions)=>{
    const generalSectionLinksPermissions = await Promise.all(generalSectionRawLinks.map(({ permissions })=>checkUserHasPermissions(permissions)));
    const authorizedGeneralSectionLinks = generalSectionRawLinks.filter((_, index)=>generalSectionLinksPermissions[index].length > 0);
    const settingsLinkIndex = authorizedGeneralSectionLinks.findIndex((obj)=>obj.to === '/settings');
    if (settingsLinkIndex === -1) {
        return [];
    }
    const authorizedGeneralLinksClone = cloneDeep(authorizedGeneralSectionLinks);
    authorizedGeneralLinksClone[settingsLinkIndex].notificationsCount = shouldUpdateStrapi ? 1 : 0;
    return authorizedGeneralLinksClone;
};
const getPluginSectionLinks = async (pluginsSectionRawLinks, checkUserHasPermissions)=>{
    const pluginSectionLinksPermissions = await Promise.all(pluginsSectionRawLinks.map(({ permissions })=>checkUserHasPermissions(permissions)));
    const authorizedPluginSectionLinks = pluginsSectionRawLinks.filter((_, index)=>pluginSectionLinksPermissions[index].length > 0);
    return authorizedPluginSectionLinks;
};

const { version: strapiVersion } = packageInfo;
const AdminLayout = ()=>{
    const setGuidedTourVisibility = useGuidedTour('AdminLayout', (state)=>state.setGuidedTourVisibility);
    const { formatMessage } = useIntl();
    const userInfo = useAuth('AuthenticatedApp', (state)=>state.user);
    const [userId, setUserId] = React.useState();
    const { showReleaseNotification } = useConfiguration('AuthenticatedApp');
    const { data: appInfo, isLoading: isLoadingAppInfo } = useInformationQuery();
    const [tagName, setTagName] = React.useState(strapiVersion);
    React.useEffect(()=>{
        if (showReleaseNotification) {
            fetch('https://api.github.com/repos/strapi/strapi/releases/latest').then(async (res)=>{
                if (!res.ok) {
                    return;
                }
                const response = await res.json();
                if (!response.tag_name) {
                    throw new Error();
                }
                setTagName(response.tag_name);
            }).catch(()=>{
            /**
           * silence is golden & we'll use the strapiVersion as a fallback
           */ });
        }
    }, [
        showReleaseNotification
    ]);
    const userRoles = useAuth('AuthenticatedApp', (state)=>state.user?.roles);
    React.useEffect(()=>{
        if (userRoles) {
            const isUserSuperAdmin = userRoles.find(({ code })=>code === 'strapi-super-admin');
            if (isUserSuperAdmin && appInfo?.autoReload) {
                setGuidedTourVisibility(true);
            }
        }
    }, [
        userRoles,
        appInfo?.autoReload,
        setGuidedTourVisibility
    ]);
    React.useEffect(()=>{
        hashAdminUserEmail(userInfo).then((id)=>{
            if (id) {
                setUserId(id);
            }
        });
    }, [
        userInfo
    ]);
    const { trackUsage } = useTracking();
    const { isLoading: isLoadingMenu, generalSectionLinks, pluginsSectionLinks } = useMenu(checkLatestStrapiVersion(strapiVersion, tagName));
    /**
   * Make sure the event is only send once after accessing the admin panel
   * and not at runtime for example when regenerating the permissions with the ctb
   * or with i18n
   */ useOnce(()=>{
        trackUsage('didAccessAuthenticatedAdministration');
    });
    // We don't need to wait for the release query to be fetched before rendering the plugins
    // however, we need the appInfos and the permissions
    if (isLoadingMenu || isLoadingAppInfo) {
        return /*#__PURE__*/ jsx(Page.Loading, {});
    }
    return /*#__PURE__*/ jsxs(AppInfoProvider, {
        ...appInfo,
        userId: userId,
        latestStrapiReleaseTag: tagName,
        shouldUpdateStrapi: checkLatestStrapiVersion(strapiVersion, tagName),
        children: [
            /*#__PURE__*/ jsx(NpsSurvey, {}),
            /*#__PURE__*/ jsx(PluginsInitializer, {
                children: /*#__PURE__*/ jsx(DndProvider, {
                    backend: HTML5Backend,
                    children: /*#__PURE__*/ jsxs(Box, {
                        background: "neutral100",
                        children: [
                            /*#__PURE__*/ jsx(SkipToContent, {
                                children: formatMessage({
                                    id: 'skipToContent',
                                    defaultMessage: 'Skip to content'
                                })
                            }),
                            /*#__PURE__*/ jsxs(Flex, {
                                alignItems: "flex-start",
                                children: [
                                    /*#__PURE__*/ jsx(LeftMenu, {
                                        generalSectionLinks: generalSectionLinks,
                                        pluginsSectionLinks: pluginsSectionLinks
                                    }),
                                    /*#__PURE__*/ jsxs(Box, {
                                        flex: 1,
                                        children: [
                                            /*#__PURE__*/ jsx(Outlet, {}),
                                            /*#__PURE__*/ jsx(GuidedTourModal, {})
                                        ]
                                    })
                                ]
                            })
                        ]
                    })
                })
            })
        ]
    });
};
const PrivateAdminLayout = ()=>{
    return /*#__PURE__*/ jsx(PrivateRoute, {
        children: /*#__PURE__*/ jsx(AdminLayout, {})
    });
};
const checkLatestStrapiVersion = (currentPackageVersion, latestPublishedVersion = '')=>{
    if (!valid(currentPackageVersion) || !valid(latestPublishedVersion)) {
        return false;
    }
    return lt(currentPackageVersion, latestPublishedVersion);
};

export { AdminLayout, PrivateAdminLayout };
//# sourceMappingURL=AuthenticatedLayout-CL0_UBdl.mjs.map
