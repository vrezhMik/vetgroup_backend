'use strict';

var jsxRuntime = require('react/jsx-runtime');
var reactIntl = require('react-intl');
var reactRouterDom = require('react-router-dom');
var index = require('./index-C8yOprVG.js');
var Theme = require('./Theme-DDlJz91O.js');
var React = require('react');
var sortBy = require('lodash/sortBy');
var reactRedux = require('react-redux');
var selectors = require('./selectors-Bf-6Fmez.js');
var useEnterprise = require('./useEnterprise-IHd3AKd2.js');
var designSystem = require('@strapi/design-system');
var icons = require('@strapi/icons');
var styledComponents = require('styled-components');
require('react-dom/client');
require('invariant');
require('lodash/isFunction');
require('lodash/merge');
require('lodash/pick');
require('immer');
require('react-query');
require('@strapi/icons/symbols');
require('./admin-udBiOv2o.js');
require('lodash/trimEnd');
require('@reduxjs/toolkit/query/react');
require('lodash/fp/pipe');
require('qs');
require('lodash/camelCase');
require('yup');
require('fractional-indexing');
require('lodash/isEqual');
require('lodash/omit');
require('formik');
require('@reduxjs/toolkit');
require('lodash/throttle');
require('@radix-ui/react-context');
require('lodash/clone');
require('lodash/toPath');
require('axios');
require('lodash/get');
require('lodash/set');
require('use-context-selector');
require('lodash/defaultsDeep');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const formatLinks = (menu)=>menu.map((menuSection)=>{
        const formattedLinks = menuSection.links.map((link)=>({
                ...link,
                isDisplayed: false
            }));
        return {
            ...menuSection,
            links: formattedLinks
        };
    });
const useSettingsMenu = ()=>{
    const [{ isLoading, menu }, setData] = React__namespace.useState({
        isLoading: true,
        menu: []
    });
    const checkUserHasPermission = Theme.useAuth('useSettingsMenu', (state)=>state.checkUserHasPermissions);
    const shouldUpdateStrapi = Theme.useAppInfo('useSettingsMenu', (state)=>state.shouldUpdateStrapi);
    const settings = Theme.useStrapiApp('useSettingsMenu', (state)=>state.settings);
    const permissions = reactRedux.useSelector(selectors.selectAdminPermissions);
    /**
   * memoize the return value of this function to avoid re-computing it on every render
   * because it's used in an effect it ends up re-running recursively.
   */ const ceLinks = React__namespace.useMemo(()=>index.SETTINGS_LINKS_CE(), []);
    const { admin: adminLinks, global: globalLinks } = useEnterprise.useEnterprise(ceLinks, async ()=>(await Promise.resolve().then(function () { return require('./index-C8yOprVG.js'); }).then(function (n) { return n.constants; })).SETTINGS_LINKS_EE(), {
        combine (ceLinks, eeLinks) {
            return {
                admin: [
                    ...eeLinks.admin,
                    ...ceLinks.admin
                ],
                global: [
                    ...ceLinks.global,
                    ...eeLinks.global
                ]
            };
        },
        defaultValue: {
            admin: [],
            global: []
        }
    });
    const addPermissions = React__namespace.useCallback((link)=>{
        if (!link.id) {
            throw new Error('The settings menu item must have an id attribute.');
        }
        return {
            ...link,
            permissions: permissions.settings?.[link.id]?.main ?? []
        };
    }, [
        permissions.settings
    ]);
    React__namespace.useEffect(()=>{
        const getData = async ()=>{
            const buildMenuPermissions = (sections)=>Promise.all(sections.reduce((acc, section, sectionIndex)=>{
                    const linksWithPermissions = section.links.map(async (link, linkIndex)=>({
                            hasPermission: (await checkUserHasPermission(link.permissions)).length > 0,
                            sectionIndex,
                            linkIndex
                        }));
                    return [
                        ...acc,
                        ...linksWithPermissions
                    ];
                }, []));
            const menuPermissions = await buildMenuPermissions(sections);
            setData((prev)=>{
                return {
                    ...prev,
                    isLoading: false,
                    menu: sections.map((section, sectionIndex)=>({
                            ...section,
                            links: section.links.map((link, linkIndex)=>{
                                const permission = menuPermissions.find((permission)=>permission.sectionIndex === sectionIndex && permission.linkIndex === linkIndex);
                                return {
                                    ...link,
                                    isDisplayed: Boolean(permission?.hasPermission)
                                };
                            })
                        }))
                };
            });
        };
        const { global, ...otherSections } = settings;
        const sections = formatLinks([
            {
                ...global,
                links: sortBy([
                    ...global.links,
                    ...globalLinks.map(addPermissions)
                ], (link)=>link.id).map((link)=>({
                        ...link,
                        hasNotification: link.id === '000-application-infos' && shouldUpdateStrapi
                    }))
            },
            {
                id: 'permissions',
                intlLabel: {
                    id: 'Settings.permissions',
                    defaultMessage: 'Administration Panel'
                },
                links: adminLinks.map(addPermissions)
            },
            ...Object.values(otherSections)
        ]);
        getData();
    }, [
        adminLinks,
        globalLinks,
        settings,
        shouldUpdateStrapi,
        addPermissions,
        checkUserHasPermission
    ]);
    return {
        isLoading,
        menu: menu.map((menuItem)=>({
                ...menuItem,
                links: menuItem.links.filter((link)=>link.isDisplayed)
            }))
    };
};

const CustomIcon = styledComponents.styled(icons.Lightning)`
  right: 15px;
  position: absolute;
  bottom: 50%;
  transform: translateY(50%);

  path {
    fill: ${({ theme })=>theme.colors.warning500};
  }
`;
const Link = styledComponents.styled(designSystem.SubNavLink)`
  &.active ${CustomIcon} {
    right: 13px;
  }
`;
const SettingsNav = ({ menu })=>{
    const { formatMessage } = reactIntl.useIntl();
    const { trackUsage } = Theme.useTracking();
    const { pathname } = reactRouterDom.useLocation();
    const filteredMenu = menu.filter((section)=>!section.links.every((link)=>link.isDisplayed === false));
    const sections = filteredMenu.map((section)=>{
        return {
            ...section,
            title: section.intlLabel,
            links: section.links.map((link)=>{
                return {
                    ...link,
                    title: link.intlLabel,
                    name: link.id
                };
            })
        };
    });
    const label = formatMessage({
        id: 'global.settings',
        defaultMessage: 'Settings'
    });
    const handleClickOnLink = (destination)=>()=>{
            trackUsage('willNavigate', {
                from: pathname,
                to: destination
            });
        };
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.SubNav, {
        "aria-label": label,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SubNavHeader, {
                label: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SubNavSections, {
                children: sections.map((section)=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.SubNavSection, {
                        label: formatMessage(section.intlLabel),
                        children: section.links.map((link)=>{
                            return /*#__PURE__*/ jsxRuntime.jsxs(Link, {
                                tag: reactRouterDom.NavLink,
                                withBullet: link.hasNotification,
                                to: link.to,
                                onClick: handleClickOnLink(link.to),
                                position: "relative",
                                children: [
                                    formatMessage(link.intlLabel),
                                    link?.licenseOnly && /*#__PURE__*/ jsxRuntime.jsx(CustomIcon, {
                                        width: "1.5rem",
                                        height: "1.5rem"
                                    })
                                ]
                            }, link.id);
                        })
                    }, section.id))
            })
        ]
    });
};

const Layout = ()=>{
    /**
   * This ensures we're capturing the settingId from the URL
   * but also lets any nesting after that pass.
   */ const match = reactRouterDom.useMatch('/settings/:settingId/*');
    const { formatMessage } = reactIntl.useIntl();
    const { isLoading, menu } = useSettingsMenu();
    // Since the useSettingsMenu hook can make API calls in order to check the links permissions
    // We need to add a loading state to prevent redirecting the user while permissions are being checked
    if (isLoading) {
        return /*#__PURE__*/ jsxRuntime.jsx(Theme.Page.Loading, {});
    }
    if (!match?.params.settingId) {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "application-infos"
        });
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(index.Layouts.Root, {
        sideNav: /*#__PURE__*/ jsxRuntime.jsx(SettingsNav, {
            menu: menu
        }),
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Theme.Page.Title, {
                children: formatMessage({
                    id: 'global.settings',
                    defaultMessage: 'Settings'
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Outlet, {})
        ]
    });
};

exports.Layout = Layout;
//# sourceMappingURL=Layout-CAyyOyeo.js.map
