'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var designSystem = require('@strapi/design-system');
var icons = require('@strapi/icons');
var reactIntl = require('react-intl');
var index = require('./index-C8yOprVG.js');
var Theme = require('./Theme-DDlJz91O.js');
var transferTokens = require('./transferTokens-oEFM8kkT.js');
var dateFns = require('date-fns');
var locales = require('date-fns/locale');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);
var locales__namespace = /*#__PURE__*/_interopNamespaceDefault(locales);

const Regenerate = ({ onRegenerate, url })=>{
    const { formatMessage } = reactIntl.useIntl();
    const [showConfirmDialog, setShowConfirmDialog] = React__namespace.useState(false);
    const [isLoadingConfirmation, setIsLoadingConfirmation] = React__namespace.useState(false);
    const { toggleNotification } = Theme.useNotification();
    const { _unstableFormatAPIError: formatAPIError } = Theme.useAPIErrorHandler();
    const [regenerateToken] = transferTokens.useRegenerateTokenMutation();
    const regenerateData = async ()=>{
        try {
            const res = await regenerateToken(url);
            if ('error' in res) {
                toggleNotification({
                    type: 'danger',
                    message: formatAPIError(res.error)
                });
                return;
            }
            if (onRegenerate) {
                onRegenerate(res.data.accessKey);
            }
        } catch (error) {
            toggleNotification({
                type: 'danger',
                message: formatMessage({
                    id: 'notification.error',
                    defaultMessage: 'Something went wrong'
                })
            });
        } finally{
            setIsLoadingConfirmation(false);
        }
    };
    const handleConfirmRegeneration = async ()=>{
        regenerateData();
        setShowConfirmDialog(false);
    };
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Dialog.Root, {
        open: showConfirmDialog,
        onOpenChange: setShowConfirmDialog,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Trigger, {
                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                    startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.ArrowClockwise, {}),
                    type: "button",
                    size: "S",
                    variant: "tertiary",
                    onClick: ()=>setShowConfirmDialog(true),
                    name: "regenerate",
                    children: formatMessage({
                        id: 'Settings.tokens.regenerate',
                        defaultMessage: 'Regenerate'
                    })
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(index.ConfirmDialog, {
                title: formatMessage({
                    id: 'Settings.tokens.RegenerateDialog.title',
                    defaultMessage: 'Regenerate token'
                }),
                endAction: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                    startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.ArrowClockwise, {}),
                    loading: isLoadingConfirmation,
                    onClick: handleConfirmRegeneration,
                    children: formatMessage({
                        id: 'Settings.tokens.Button.regenerate',
                        defaultMessage: 'Regenerate'
                    })
                }),
                children: formatMessage({
                    id: 'Settings.tokens.popUpWarning.message',
                    defaultMessage: 'Are you sure you want to regenerate this token?'
                })
            })
        ]
    });
};
const FormHead = ({ title, token, setToken, canEditInputs, canRegenerate, isSubmitting, regenerateUrl })=>{
    const { formatMessage } = reactIntl.useIntl();
    const handleRegenerate = (newKey)=>{
        setToken({
            ...token,
            accessKey: newKey
        });
    };
    return /*#__PURE__*/ jsxRuntime.jsx(index.Layouts.Header, {
        title: token?.name || formatMessage(title),
        primaryAction: canEditInputs ? /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
            gap: 2,
            children: [
                canRegenerate && token?.id && /*#__PURE__*/ jsxRuntime.jsx(Regenerate, {
                    onRegenerate: handleRegenerate,
                    url: `${regenerateUrl}${token?.id ?? ''}`
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                    disabled: isSubmitting,
                    loading: isSubmitting,
                    startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.Check, {}),
                    type: "submit",
                    size: "S",
                    children: formatMessage({
                        id: 'global.save',
                        defaultMessage: 'Save'
                    })
                })
            ]
        }) : canRegenerate && token?.id && /*#__PURE__*/ jsxRuntime.jsx(Regenerate, {
            onRegenerate: handleRegenerate,
            url: `${regenerateUrl}${token?.id ?? ''}`
        }),
        navigationAction: /*#__PURE__*/ jsxRuntime.jsx(index.BackButton, {}),
        ellipsis: true
    });
};

const TokenBox = ({ token, tokenType })=>{
    const { formatMessage } = reactIntl.useIntl();
    const { toggleNotification } = Theme.useNotification();
    const { trackUsage } = Theme.useTracking();
    const { copy } = index.useClipboard();
    const handleClick = (token)=>async ()=>{
            if (token) {
                const didCopy = await copy(token);
                if (didCopy) {
                    trackUsage('didCopyTokenKey', {
                        tokenType
                    });
                    toggleNotification({
                        type: 'success',
                        message: formatMessage({
                            id: 'Settings.tokens.notification.copied'
                        })
                    });
                }
            }
        };
    return /*#__PURE__*/ jsxRuntime.jsx(index.ContentBox, {
        endAction: token && /*#__PURE__*/ jsxRuntime.jsx("span", {
            style: {
                alignSelf: 'start'
            },
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
                label: formatMessage({
                    id: 'app.component.CopyToClipboard.label',
                    defaultMessage: 'Copy to clipboard'
                }),
                onClick: handleClick(token),
                variant: "ghost",
                type: "button",
                style: {
                    padding: 0,
                    height: '1.6rem'
                },
                children: /*#__PURE__*/ jsxRuntime.jsx(icons.Duplicate, {})
            })
        }),
        title: token || formatMessage({
            id: 'Settings.tokens.copy.editTitle',
            defaultMessage: 'This token isn’t accessible anymore.'
        }),
        subtitle: token ? formatMessage({
            id: 'Settings.tokens.copy.lastWarning',
            defaultMessage: 'Make sure to copy this token, you won’t be able to see it again!'
        }) : formatMessage({
            id: 'Settings.tokens.copy.editMessage',
            defaultMessage: 'For security reasons, you can only see your token once.'
        }),
        icon: /*#__PURE__*/ jsxRuntime.jsx(icons.Key, {}),
        iconBackground: "neutral100"
    });
};

/**
 * Returns a valid date-fns locale name from a Strapi Admin locale.
 * Defaults to 'enUS' if the locale is not found.
 */ const getDateFnsLocaleName = (locale)=>{
    if (Object.keys(locales__namespace).includes(locale)) {
        return locale;
    }
    return 'enUS';
};

const getDateOfExpiration = (createdAt, duration, language = 'en')=>{
    if (duration && typeof duration === 'number') {
        const durationInDays = duration / 24 / 60 / 60 / 1000;
        return dateFns.format(dateFns.addDays(new Date(createdAt), durationInDays), 'PPP', {
            locale: locales__namespace[getDateFnsLocaleName(language)]
        });
    }
    return 'Unlimited';
};

const isErrorMessageMessageDescriptor = (message)=>{
    return typeof message === 'object' && message !== null && 'id' in message;
};

const LifeSpanInput = ({ token, error, value, onChange, isCreating })=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
                error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
                    id: error,
                    defaultMessage: error
                }) : undefined,
                name: "lifespan",
                required: true,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                        children: formatMessage({
                            id: 'Settings.tokens.form.duration',
                            defaultMessage: 'Token duration'
                        })
                    }),
                    /*#__PURE__*/ jsxRuntime.jsxs(designSystem.SingleSelect, {
                        value: value,
                        onChange: (value)=>{
                            // @ts-expect-error – DS v2 won't support number types for select
                            onChange({
                                target: {
                                    name: 'lifespan',
                                    value
                                }
                            });
                        },
                        disabled: !isCreating,
                        placeholder: "Select",
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                                value: "604800000",
                                children: formatMessage({
                                    id: 'Settings.tokens.duration.7-days',
                                    defaultMessage: '7 days'
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                                value: "2592000000",
                                children: formatMessage({
                                    id: 'Settings.tokens.duration.30-days',
                                    defaultMessage: '30 days'
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                                value: "7776000000",
                                children: formatMessage({
                                    id: 'Settings.tokens.duration.90-days',
                                    defaultMessage: '90 days'
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                                value: "0",
                                children: formatMessage({
                                    id: 'Settings.tokens.duration.unlimited',
                                    defaultMessage: 'Unlimited'
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
                ]
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                variant: "pi",
                textColor: "neutral600",
                children: !isCreating && `${formatMessage({
                    id: 'Settings.tokens.duration.expiration-date',
                    defaultMessage: 'Expiration date'
                })}: ${getDateOfExpiration(token?.createdAt, parseInt(value ?? '', 10))}`
            })
        ]
    });
};

const TokenDescription = ({ error, value, onChange, canEditInputs })=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        name: "description",
        error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
            id: error,
            defaultMessage: error
        }) : undefined,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                children: formatMessage({
                    id: 'Settings.tokens.form.description',
                    defaultMessage: 'Description'
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Textarea, {
                onChange: onChange,
                disabled: !canEditInputs,
                value: value
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
};

const TokenName = ({ error, value, onChange, canEditInputs })=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        name: "name",
        error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
            id: error,
            defaultMessage: error
        }) : undefined,
        required: true,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                children: formatMessage({
                    id: 'Settings.tokens.form.name',
                    defaultMessage: 'Name'
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TextInput, {
                onChange: onChange,
                value: value,
                disabled: !canEditInputs
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
};

const TokenTypeSelect = ({ name = 'type', error, value, onChange, canEditInputs, options = [], label })=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: error ? formatMessage(isErrorMessageMessageDescriptor(error) ? error : {
            id: error,
            defaultMessage: error
        }) : undefined,
        name: name,
        required: true,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                children: formatMessage({
                    id: label.id,
                    defaultMessage: label.defaultMessage
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelect, {
                value: value,
                onChange: onChange,
                placeholder: "Select",
                disabled: !canEditInputs,
                children: options && options.map(({ value, label })=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                        value: value,
                        children: formatMessage(label)
                    }, value))
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
};

exports.FormHead = FormHead;
exports.LifeSpanInput = LifeSpanInput;
exports.TokenBox = TokenBox;
exports.TokenDescription = TokenDescription;
exports.TokenName = TokenName;
exports.TokenTypeSelect = TokenTypeSelect;
//# sourceMappingURL=TokenTypeSelect-IOxlxK_x.js.map
