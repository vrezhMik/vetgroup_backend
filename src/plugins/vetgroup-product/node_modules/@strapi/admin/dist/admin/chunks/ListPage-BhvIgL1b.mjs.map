{"version":3,"file":"ListPage-BhvIgL1b.mjs","sources":["../../../admin/src/pages/Settings/pages/Roles/components/RoleRow.tsx","../../../admin/src/pages/Settings/pages/Roles/ListPage.tsx"],"sourcesContent":["import { Box, Flex, IconButton, IconButtonProps, Td, Tr, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\n\ninterface RoleRowProps extends Pick<AdminRole, 'id' | 'name' | 'description' | 'usersCount'> {\n  icons: Array<Required<Pick<IconButtonProps, 'children' | 'label' | 'onClick'>>>;\n  rowIndex: number;\n  canUpdate?: boolean;\n  cursor?: string;\n}\n\nconst RoleRow = ({\n  id,\n  name,\n  description,\n  usersCount,\n  icons,\n  rowIndex,\n  canUpdate,\n  cursor,\n}: RoleRowProps) => {\n  const { formatMessage } = useIntl();\n  const [, editObject] = icons;\n\n  const usersCountText = formatMessage(\n    {\n      id: `Roles.RoleRow.user-count`,\n      defaultMessage: '{number, plural, =0 {#  user} one {#  user} other {# users}}',\n    },\n    { number: usersCount }\n  );\n\n  return (\n    <Tr\n      cursor={cursor}\n      aria-rowindex={rowIndex}\n      key={id}\n      // @ts-expect-error â€“ the prop uses `HTMLButtonElement` but we just specify `HTMLElement`\n      onClick={canUpdate ? editObject.onClick : undefined}\n    >\n      <Td maxWidth={`13rem`}>\n        <Typography ellipsis textColor=\"neutral800\">\n          {name}\n        </Typography>\n      </Td>\n      <Td maxWidth={`25rem`}>\n        <Typography ellipsis textColor=\"neutral800\">\n          {description}\n        </Typography>\n      </Td>\n      <Td>\n        <Typography textColor=\"neutral800\">{usersCountText}</Typography>\n      </Td>\n      <Td>\n        <Flex justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\n          {icons.map((icon, i) => {\n            if (icon) {\n              return (\n                <Box key={icon.label} paddingLeft={i === 0 ? 0 : 1}>\n                  <IconButton {...icon} variant=\"ghost\" />\n                </Box>\n              );\n            }\n\n            return null;\n          })}\n        </Flex>\n      </Td>\n    </Tr>\n  );\n};\n\nexport { RoleRow };\nexport type { RoleRowProps };\n","import * as React from 'react';\n\nimport {\n  Button,\n  Dialog,\n  Table,\n  Tbody,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { Duplicate, Pencil, Plus, Trash } from '@strapi/icons';\nimport { produce } from 'immer';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAdminRoles, AdminRole } from '../../../../hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useFetchClient } from '../../../../hooks/useFetchClient';\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isFetchError } from '../../../../utils/getFetchClient';\n\nimport { RoleRow, RoleRowProps } from './components/RoleRow';\n\nconst ListPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector(selectAdminPermissions);\n  const { formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const [isWarningDeleteAllOpened, setIsWarningDeleteAllOpenend] = React.useState(false);\n  const [{ query }] = useQueryParams<{ _q?: string }>();\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canCreate, canDelete, canRead, canUpdate },\n  } = useRBAC(permissions.settings?.roles);\n\n  const { roles, refetch: refetchRoles } = useAdminRoles(\n    { filters: query?._q ? { name: { $containsi: query._q } } : undefined },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: isLoadingForPermissions || !canRead,\n    }\n  );\n\n  const navigate = useNavigate();\n  const [{ roleToDelete }, dispatch] = React.useReducer(reducer, initialState);\n  const { post } = useFetchClient();\n\n  const handleDeleteData = async () => {\n    try {\n      dispatch({\n        type: 'ON_REMOVE_ROLES',\n      });\n\n      await post('/admin/roles/batch-delete', {\n        ids: [roleToDelete],\n      });\n\n      await refetchRoles();\n\n      dispatch({\n        type: 'RESET_DATA_TO_DELETE',\n      });\n    } catch (error) {\n      if (isFetchError(error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      }\n    }\n  };\n\n  const handleNewRoleClick = () => navigate('new');\n\n  const handleToggleModal = () => setIsWarningDeleteAllOpenend((prev) => !prev);\n\n  const handleClickDelete = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (role.usersCount) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: 'Roles.ListPage.notification.delete-not-allowed' }),\n      });\n    } else {\n      dispatch({\n        type: 'SET_ROLE_TO_DELETE',\n        id: role.id,\n      });\n\n      handleToggleModal();\n    }\n  };\n\n  const handleClickDuplicate = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    navigate(`duplicate/${role.id}`);\n  };\n\n  const rowCount = roles.length + 1;\n  const colCount = 6;\n\n  if (isLoadingForPermissions) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={\n          canCreate ? (\n            <Button onClick={handleNewRoleClick} startIcon={<Plus />} size=\"S\">\n              {formatMessage({\n                id: 'Settings.roles.list.button.add',\n                defaultMessage: 'Add new role',\n              })}\n            </Button>\n          ) : null\n        }\n        title={formatMessage({\n          id: 'global.roles',\n          defaultMessage: 'roles',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.roles.list.description',\n          defaultMessage: 'List of roles',\n        })}\n      />\n      {canRead && (\n        <Layouts.Action\n          startActions={\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                {\n                  target: formatMessage({\n                    id: 'global.roles',\n                    defaultMessage: 'roles',\n                  }),\n                }\n              )}\n            />\n          }\n        />\n      )}\n      {canRead && (\n        <Layouts.Content>\n          <Table\n            colCount={colCount}\n            rowCount={rowCount}\n            footer={\n              canCreate ? (\n                <TFooter cursor=\"pointer\" onClick={handleNewRoleClick} icon={<Plus />}>\n                  {formatMessage({\n                    id: 'Settings.roles.list.button.add',\n                    defaultMessage: 'Add new role',\n                  })}\n                </TFooter>\n              ) : null\n            }\n          >\n            <Thead>\n              <Tr aria-rowindex={1}>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.name',\n                      defaultMessage: 'Name',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.description',\n                      defaultMessage: 'Description',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.users',\n                      defaultMessage: 'Users',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <VisuallyHidden>\n                    {formatMessage({\n                      id: 'global.actions',\n                      defaultMessage: 'Actions',\n                    })}\n                  </VisuallyHidden>\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {roles?.map((role, index) => (\n                <RoleRow\n                  cursor=\"pointer\"\n                  key={role.id}\n                  id={role.id}\n                  name={role.name}\n                  description={role.description}\n                  usersCount={role.usersCount}\n                  icons={\n                    [\n                      canCreate &&\n                        ({\n                          onClick: handleClickDuplicate(role),\n                          label: formatMessage({\n                            id: 'app.utils.duplicate',\n                            defaultMessage: 'Duplicate',\n                          }),\n                          children: <Duplicate />,\n                        } satisfies RoleRowProps['icons'][number]),\n                      canUpdate &&\n                        ({\n                          onClick: () => navigate(role.id.toString()),\n                          label: formatMessage({ id: 'app.utils.edit', defaultMessage: 'Edit' }),\n                          children: <Pencil />,\n                        } satisfies RoleRowProps['icons'][number]),\n                      canDelete &&\n                        ({\n                          onClick: handleClickDelete(role),\n                          label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n                          children: <Trash />,\n                        } satisfies RoleRowProps['icons'][number]),\n                    ].filter(Boolean) as RoleRowProps['icons']\n                  }\n                  rowIndex={index + 2}\n                  canUpdate={canUpdate}\n                />\n              ))}\n            </Tbody>\n          </Table>\n        </Layouts.Content>\n      )}\n      <Dialog.Root open={isWarningDeleteAllOpened} onOpenChange={handleToggleModal}>\n        <ConfirmDialog onConfirm={handleDeleteData} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Reducer\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * TODO: do we actually need this reducer? It's not doing a lot...\n */\n\ninterface State {\n  roleToDelete: null | AdminRole['id'];\n  showModalConfirmButtonLoading: boolean;\n  shouldRefetchData: boolean;\n}\n\nconst initialState = {\n  roleToDelete: null,\n  showModalConfirmButtonLoading: false,\n  shouldRefetchData: false,\n} satisfies State;\n\ninterface SetRoleToDeleteAction extends Pick<AdminRole, 'id'> {\n  type: 'SET_ROLE_TO_DELETE';\n}\n\ninterface ResetDataToDeleteAction {\n  type: 'RESET_DATA_TO_DELETE';\n}\n\ninterface OnRemoveRolesAction {\n  type: 'ON_REMOVE_ROLES';\n}\n\ninterface OnRemoveRolesSucceededAction {\n  type: 'ON_REMOVE_ROLES_SUCCEEDED';\n}\n\ntype Action =\n  | SetRoleToDeleteAction\n  | ResetDataToDeleteAction\n  | OnRemoveRolesAction\n  | OnRemoveRolesSucceededAction;\n\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'ON_REMOVE_ROLES': {\n        draftState.showModalConfirmButtonLoading = true;\n        break;\n      }\n      case 'ON_REMOVE_ROLES_SUCCEEDED': {\n        draftState.shouldRefetchData = true;\n        draftState.roleToDelete = null;\n        break;\n      }\n      case 'RESET_DATA_TO_DELETE': {\n        draftState.shouldRefetchData = false;\n        draftState.roleToDelete = null;\n        draftState.showModalConfirmButtonLoading = false;\n        break;\n      }\n      case 'SET_ROLE_TO_DELETE': {\n        draftState.roleToDelete = action.id;\n\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.roles.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage };\n"],"names":["RoleRow","id","name","description","usersCount","icons","rowIndex","canUpdate","cursor","formatMessage","useIntl","editObject","usersCountText","defaultMessage","number","_jsxs","Tr","aria-rowindex","onClick","undefined","_jsx","Td","maxWidth","Typography","ellipsis","textColor","Flex","justifyContent","e","stopPropagation","map","icon","i","Box","paddingLeft","IconButton","variant","label","ListPage","permissions","useTypedSelector","selectAdminPermissions","formatAPIError","useAPIErrorHandler","toggleNotification","useNotification","isWarningDeleteAllOpened","setIsWarningDeleteAllOpenend","React","useState","query","useQueryParams","isLoading","isLoadingForPermissions","allowedActions","canCreate","canDelete","canRead","useRBAC","settings","roles","refetch","refetchRoles","useAdminRoles","filters","_q","$containsi","refetchOnMountOrArgChange","skip","navigate","useNavigate","roleToDelete","dispatch","useReducer","reducer","initialState","post","useFetchClient","handleDeleteData","type","ids","error","isFetchError","message","handleNewRoleClick","handleToggleModal","prev","handleClickDelete","role","preventDefault","handleClickDuplicate","rowCount","length","colCount","Page","Loading","Main","Title","Layouts","Header","primaryAction","Button","startIcon","Plus","size","title","subtitle","Action","startActions","SearchInput","target","Content","Table","footer","TFooter","Thead","Th","VisuallyHidden","Tbody","index","children","Duplicate","toString","Pencil","Trash","filter","Boolean","Dialog","Root","open","onOpenChange","ConfirmDialog","onConfirm","showModalConfirmButtonLoading","shouldRefetchData","state","action","produce","draftState","ProtectedListPage","admin_app","read","Protect"],"mappings":"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"}