{"version":3,"file":"admin-BBS7sDVu.mjs","sources":["../../../admin/src/utils/getFetchClient.ts","../../../admin/src/utils/baseQuery.ts","../../../admin/src/services/api.ts","../../../admin/src/utils/urls.ts","../../../admin/src/services/admin.ts"],"sourcesContent":["import pipe from 'lodash/fp/pipe';\nimport qs from 'qs';\n\nimport type { errors } from '@strapi/utils';\n\nexport type ApiError =\n  | errors.ApplicationError\n  | errors.ForbiddenError\n  | errors.NotFoundError\n  | errors.NotImplementedError\n  | errors.PaginationError\n  | errors.PayloadTooLargeError\n  | errors.PolicyError\n  | errors.RateLimitError\n  | errors.UnauthorizedError\n  | errors.ValidationError\n  | errors.YupValidationError;\n\nconst STORAGE_KEYS = {\n  TOKEN: 'jwtToken',\n  USER: 'userInfo',\n};\n\ntype FetchResponse<TData = any> = {\n  data: TData;\n  status?: number;\n};\n\ntype FetchOptions = {\n  params?: any;\n  signal?: AbortSignal;\n  headers?: Record<string, string>;\n  validateStatus?: ((status: number) => boolean) | null;\n};\n\ntype FetchConfig = {\n  signal?: AbortSignal;\n};\n\ninterface ErrorResponse {\n  data: {\n    data?: any;\n    error: ApiError & { status?: number };\n  };\n}\n\nclass FetchError extends Error {\n  public name: string;\n  public message: string;\n  public response?: ErrorResponse;\n  public code?: number;\n  public status?: number;\n\n  constructor(message: string, response?: ErrorResponse) {\n    super(message);\n    this.name = 'FetchError';\n    this.message = message;\n    this.response = response;\n    this.code = response?.data?.error?.status;\n    this.status = response?.data?.error?.status;\n\n    // Ensure correct stack trace in error object\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, FetchError);\n    }\n  }\n}\n\nconst isFetchError = (error: unknown): error is FetchError => {\n  return error instanceof FetchError;\n};\n\nconst getToken = () =>\n  JSON.parse(\n    localStorage.getItem(STORAGE_KEYS.TOKEN) ?? sessionStorage.getItem(STORAGE_KEYS.TOKEN) ?? '\"\"'\n  );\n\ntype FetchClient = {\n  get: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\n  put: <TData = any, TSend = any>(\n    url: string,\n    data?: TSend,\n    config?: FetchOptions\n  ) => Promise<FetchResponse<TData>>;\n  post: <TData = any, TSend = any>(\n    url: string,\n    data?: TSend,\n    config?: FetchOptions\n  ) => Promise<FetchResponse<TData>>;\n  del: <TData = any>(url: string, config?: FetchOptions) => Promise<FetchResponse<TData>>;\n};\n\n/**\n * @public\n * @param {FetchConfig} [defaultOptions={}] - Fetch Configs.\n * @returns {FetchClient} A fetch client object with methods for making HTTP requests.\n * @description This is an abstraction around the native fetch exposed by a function. It provides a simple interface to handle API calls\n * to the Strapi backend.\n * @example\n * ```tsx\n * import { getFetchClient } from '@strapi/admin/admin';\n *\n * const myFunct = () => {\n *   const { get } = getFetchClient();\n *   const requestURL = \"/some-endpoint\";\n *\n *   const { data } = await get(requestURL);\n *\n *   return data;\n * };\n * ```\n */\nconst getFetchClient = (defaultOptions: FetchConfig = {}): FetchClient => {\n  const backendURL = window.strapi.backendURL;\n  const defaultHeader = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${getToken()}`,\n  };\n\n  const isFormDataRequest = (body: unknown) => body instanceof FormData;\n  const addPrependingSlash = (url: string) => (url.charAt(0) !== '/' ? `/${url}` : url);\n\n  // This regular expression matches a string that starts with either \"http://\" or \"https://\" or any other protocol name in lower case letters, followed by \"://\" and ends with anything else\n  const hasProtocol = (url: string) => new RegExp('^(?:[a-z+]+:)?//', 'i').test(url);\n\n  // Check if the url has a prepending slash, if not add a slash\n  const normalizeUrl = (url: string) => (hasProtocol(url) ? url : addPrependingSlash(url));\n\n  // Add a response interceptor to return the response\n  const responseInterceptor = async <TData = any>(\n    response: Response,\n    validateStatus?: FetchOptions['validateStatus']\n  ): Promise<FetchResponse<TData>> => {\n    try {\n      const result = await response.json();\n\n      /**\n       * validateStatus allows us to customize when a response should throw an error\n       * In native Fetch API, a response is considered \"not ok\"\n       * when the status code falls in the 200 to 299 (inclusive) range\n       */\n      if (!response.ok && result.error && !validateStatus?.(response.status)) {\n        throw new FetchError(result.error.message, { data: result });\n      }\n\n      if (!response.ok && !validateStatus?.(response.status)) {\n        throw new FetchError('Unknown Server Error');\n      }\n\n      return { data: result };\n    } catch (error) {\n      if (error instanceof SyntaxError && response.ok) {\n        // Making sure that a SyntaxError doesn't throw if it's successful\n        return { data: [], status: response.status } as FetchResponse<any>;\n      } else {\n        throw error;\n      }\n    }\n  };\n\n  const paramsSerializer =\n    <Param = unknown>(params?: Param) =>\n    (url: string) => {\n      if (params) {\n        if (typeof params === 'string') {\n          return `${url}?${params}`;\n        }\n\n        /**\n         * TODO V6: Encoding should be enabled in this step\n         * So the rest of the app doesn't have to worry about it,\n         * It's considered a breaking change because it impacts any API request, including the user's custom code\n         */\n        const serializedParams = qs.stringify(params, { encode: false });\n        return `${url}?${serializedParams}`;\n      }\n      return url;\n    };\n\n  const addBaseUrl = (url: Parameters<typeof fetch>[0]) => {\n    return `${backendURL}${url}`;\n  };\n\n  /**\n   * We use the factory method because the options\n   * are unique to the individual request\n   */\n  const makeCreateRequestUrl = (options?: FetchOptions) =>\n    pipe(normalizeUrl, addBaseUrl, paramsSerializer(options?.params));\n\n  const fetchClient: FetchClient = {\n    get: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n      /**\n       * this applies all our transformations to the URL\n       * - normalizing (making sure it has the correct slash)\n       * - appending our BaseURL which comes from the window.strapi object\n       * - serializing our params with QS\n       */\n      const createRequestUrl = makeCreateRequestUrl(options);\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'GET',\n        headers,\n      });\n\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    post: async <TData, TSend = any>(\n      url: string,\n      data?: TSend,\n      options?: FetchOptions\n    ): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n\n      /**\n       * we have to remove the Content-Type value if it was a formData request\n       * the browser will automatically set the header value\n       */\n      if (isFormDataRequest(data)) {\n        headers.delete('Content-Type');\n      }\n\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'POST',\n        headers,\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\n      });\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    put: async <TData, TSend = any>(\n      url: string,\n      data?: TSend,\n      options?: FetchOptions\n    ): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n\n      /**\n       * we have to remove the Content-Type value if it was a formData request\n       * the browser will automatically set the header value\n       */\n      if (isFormDataRequest(data)) {\n        headers.delete('Content-Type');\n      }\n\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'PUT',\n        headers,\n        body: isFormDataRequest(data) ? (data as FormData) : JSON.stringify(data),\n      });\n\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n    del: async <TData>(url: string, options?: FetchOptions): Promise<FetchResponse<TData>> => {\n      const headers = new Headers({\n        ...defaultHeader,\n        ...options?.headers,\n      });\n\n      const createRequestUrl = makeCreateRequestUrl(options);\n      const response = await fetch(createRequestUrl(url), {\n        signal: options?.signal ?? defaultOptions.signal,\n        method: 'DELETE',\n        headers,\n      });\n      return responseInterceptor<TData>(response, options?.validateStatus);\n    },\n  };\n\n  return fetchClient;\n};\n\nexport { getFetchClient, isFetchError, FetchError };\nexport type { FetchOptions, FetchResponse, FetchConfig, FetchClient, ErrorResponse };\n","import { SerializedError } from '@reduxjs/toolkit';\nimport { BaseQueryFn } from '@reduxjs/toolkit/query';\n\nimport { getFetchClient, type FetchOptions, ApiError, isFetchError } from '../utils/getFetchClient';\n\ninterface QueryArguments {\n  url: string;\n  method?: 'GET' | 'POST' | 'DELETE' | 'PUT';\n  data?: unknown;\n  config?: FetchOptions;\n}\n\ninterface UnknownApiError {\n  name: 'UnknownError';\n  message: string;\n  details?: unknown;\n  status?: number;\n}\n\ntype BaseQueryError = ApiError | UnknownApiError;\n\nconst simpleQuery: BaseQueryFn<string | QueryArguments, unknown, BaseQueryError> = async (\n  query,\n  { signal }\n) => {\n  try {\n    const { get, post, del, put } = getFetchClient();\n\n    if (typeof query === 'string') {\n      const result = await get(query, { signal });\n      return { data: result.data };\n    } else {\n      const { url, method = 'GET', data, config } = query;\n\n      if (method === 'POST') {\n        const result = await post(url, data, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n\n      if (method === 'DELETE') {\n        const result = await del(url, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n\n      if (method === 'PUT') {\n        const result = await put(url, data, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n\n      /**\n       * Default is GET.\n       */\n      const result = await get(url, {\n        ...config,\n        signal,\n      });\n      return { data: result.data };\n    }\n  } catch (err) {\n    // Handle error of type FetchError\n\n    if (isFetchError(err)) {\n      if (\n        typeof err.response?.data === 'object' &&\n        err.response?.data !== null &&\n        'error' in err.response?.data\n      ) {\n        /**\n         * This will most likely be ApiError\n         */\n        return { data: undefined, error: err.response?.data.error as any };\n      } else {\n        return {\n          data: undefined,\n          error: {\n            name: 'UnknownError',\n            message: err.message,\n            details: err.response,\n            status: err.status,\n          } as UnknownApiError,\n        };\n      }\n    }\n\n    const error = err as Error;\n    return {\n      data: undefined,\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      } satisfies SerializedError,\n    };\n  }\n};\n\nconst fetchBaseQuery = () => simpleQuery;\n\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\n  return error.name !== undefined;\n};\n\nexport { fetchBaseQuery, isBaseQueryError };\nexport type { BaseQueryError, UnknownApiError, QueryArguments };\n","import { createApi } from '@reduxjs/toolkit/query/react';\n\nimport { fetchBaseQuery } from '../utils/baseQuery';\n\n/**\n * @public\n * @description This is the redux toolkit api for the admin panel, users\n * should use a combination of `enhanceEndpoints` to add their TagTypes\n * to utilise in their `injectEndpoints` construction for automatic cache\n * re-validation. We specifically do not store any tagTypes by default leaving\n * the API surface as small as possible. None of the data-fetching looks for the\n * StrapiApp are stored here either.\n */\nconst adminApi = createApi({\n  reducerPath: 'adminApi',\n  baseQuery: fetchBaseQuery(),\n  tagTypes: [],\n  endpoints: () => ({}),\n});\n\nexport { adminApi };\n","import trimEnd from 'lodash/trimEnd';\n\nconst prefixFileUrlWithBackendUrl = (fileURL?: string): string | undefined => {\n  return !!fileURL && fileURL.startsWith('/') ? `${window.strapi.backendURL}${fileURL}` : fileURL;\n};\n\n/**\n * @description Creates an absolute URL, if there is no URL or it\n * is relative, we use the `window.location.origin` as a fallback.\n * IF it's an absolute URL, we return it as is.\n */\nconst createAbsoluteUrl = (url?: string): string => {\n  if (!url) {\n    return window.location.origin;\n  }\n  if (url.startsWith('/')) {\n    /**\n     * This will also manage protocol relative URLs which is fine because\n     * as we can see from the test, we still get the expected result.\n     */\n    return trimEnd(new URL(url, window.location.origin).toString(), '/');\n  } else {\n    return url;\n  }\n};\n\nexport { createAbsoluteUrl, prefixFileUrlWithBackendUrl };\n","import {\n  type TelemetryProperties,\n  type Init,\n  type Information,\n  type GetProjectSettings,\n  type UpdateProjectSettings,\n  type Plugins,\n  type GetLicenseLimitInformation,\n} from '../../../shared/contracts/admin';\nimport { prefixFileUrlWithBackendUrl } from '../utils/urls';\n\nimport { adminApi } from './api';\n\ninterface ConfigurationLogo {\n  custom?: {\n    name?: string;\n    url?: string;\n  };\n  default: string;\n}\n\nconst admin = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['ProjectSettings', 'LicenseLimits'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      init: builder.query<Init.Response['data'], void>({\n        query: () => ({\n          url: '/admin/init',\n          method: 'GET',\n        }),\n        transformResponse(res: Init.Response) {\n          return res.data;\n        },\n      }),\n      information: builder.query<Information.Response['data'], void>({\n        query: () => ({\n          url: '/admin/information',\n          method: 'GET',\n        }),\n        transformResponse(res: Information.Response) {\n          return res.data;\n        },\n      }),\n      telemetryProperties: builder.query<TelemetryProperties.Response['data'], void>({\n        query: () => ({\n          url: '/admin/telemetry-properties',\n          method: 'GET',\n          config: {\n            validateStatus: (status: number) => status < 500,\n          },\n        }),\n        transformResponse(res: TelemetryProperties.Response) {\n          return res.data;\n        },\n      }),\n      projectSettings: builder.query<\n        { authLogo?: ConfigurationLogo['custom']; menuLogo?: ConfigurationLogo['custom'] },\n        void\n      >({\n        query: () => ({\n          url: '/admin/project-settings',\n          method: 'GET',\n        }),\n        providesTags: ['ProjectSettings'],\n        transformResponse(data: GetProjectSettings.Response) {\n          return {\n            authLogo: data.authLogo\n              ? {\n                  name: data.authLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.authLogo.url),\n                }\n              : undefined,\n            menuLogo: data.menuLogo\n              ? {\n                  name: data.menuLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.menuLogo.url),\n                }\n              : undefined,\n          };\n        },\n      }),\n      updateProjectSettings: builder.mutation<UpdateProjectSettings.Response, FormData>({\n        query: (data) => ({\n          url: '/admin/project-settings',\n          method: 'POST',\n          data,\n          config: {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          },\n        }),\n        invalidatesTags: ['ProjectSettings'],\n      }),\n      getPlugins: builder.query<Plugins.Response, void>({\n        query: () => ({\n          url: '/admin/plugins',\n          method: 'GET',\n        }),\n      }),\n      getLicenseLimits: builder.query<GetLicenseLimitInformation.Response, void>({\n        query: () => ({\n          url: '/admin/license-limit-information',\n          method: 'GET',\n        }),\n        providesTags: ['LicenseLimits'],\n      }),\n    }),\n    overrideExisting: false,\n  });\n\nconst {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n} = admin;\n\nexport {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n};\n\nexport type { ConfigurationLogo };\n"],"names":["STORAGE_KEYS","TOKEN","USER","FetchError","Error","constructor","message","response","name","code","data","error","status","captureStackTrace","isFetchError","getToken","JSON","parse","localStorage","getItem","sessionStorage","getFetchClient","defaultOptions","backendURL","window","strapi","defaultHeader","Accept","Authorization","isFormDataRequest","body","FormData","addPrependingSlash","url","charAt","hasProtocol","RegExp","test","normalizeUrl","responseInterceptor","validateStatus","result","json","ok","SyntaxError","paramsSerializer","params","serializedParams","qs","stringify","encode","addBaseUrl","makeCreateRequestUrl","options","pipe","fetchClient","get","headers","Headers","createRequestUrl","fetch","signal","method","post","delete","put","del","simpleQuery","query","config","err","undefined","details","stack","fetchBaseQuery","isBaseQueryError","adminApi","createApi","reducerPath","baseQuery","tagTypes","endpoints","prefixFileUrlWithBackendUrl","fileURL","startsWith","createAbsoluteUrl","location","origin","trimEnd","URL","toString","admin","enhanceEndpoints","addTagTypes","injectEndpoints","builder","init","transformResponse","res","information","telemetryProperties","projectSettings","providesTags","authLogo","menuLogo","updateProjectSettings","mutation","invalidatesTags","getPlugins","getLicenseLimits","overrideExisting","useInitQuery","useTelemetryPropertiesQuery","useInformationQuery","useProjectSettingsQuery","useUpdateProjectSettingsMutation","useGetPluginsQuery","useGetLicenseLimitsQuery"],"mappings":"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"}