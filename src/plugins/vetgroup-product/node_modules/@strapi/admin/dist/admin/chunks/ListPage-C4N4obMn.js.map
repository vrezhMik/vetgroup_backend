{"version":3,"file":"ListPage-C4N4obMn.js","sources":["../../../admin/src/pages/Settings/pages/Users/components/CreateActionCE.tsx","../../../admin/src/pages/Settings/pages/Users/components/NewUserForm.tsx","../../../admin/src/pages/Settings/pages/Users/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, ButtonProps } from '@strapi/design-system';\nimport { Mail } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\ninterface CreateActionCEProps extends Pick<ButtonProps, 'onClick'> {}\n\nconst CreateActionCE = React.forwardRef<HTMLButtonElement, CreateActionCEProps>((props, ref) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Button ref={ref} startIcon={<Mail />} size=\"S\" {...props}>\n      {formatMessage({\n        id: 'Settings.permissions.users.create',\n        defaultMessage: 'Invite new user',\n      })}\n    </Button>\n  );\n});\n\nexport { CreateActionCE };\nexport type { CreateActionCEProps };\n","import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Grid,\n  Modal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport * as yup from 'yup';\n\nimport { Form, type FormHelpers } from '../../../../../components/Form';\nimport { InputRenderer } from '../../../../../components/FormInputs/Renderer';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../../hooks/useEnterprise';\nimport { useCreateUserMutation } from '../../../../../services/users';\nimport { FormLayoutInputProps } from '../../../../../types/forms';\nimport { isBaseQueryError } from '../../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../../utils/translatedErrors';\n\nimport { MagicLinkCE } from './MagicLinkCE';\nimport { SelectRoles } from './SelectRoles';\n\nimport type { Data } from '@strapi/types';\n\ninterface ModalFormProps {\n  onToggle: () => void;\n}\n\ntype FormLayout = FormLayoutInputProps[][];\n\nconst ModalForm = ({ onToggle }: ModalFormProps) => {\n  const [currentStep, setStep] = React.useState<keyof typeof STEPPER>('create');\n  const [registrationToken, setRegistrationToken] = React.useState('');\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const roleLayout = useEnterprise<FormLayout, FormLayout, FormLayout>(\n    ROLE_LAYOUT,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).ROLE_LAYOUT,\n    {\n      combine(ceRoles, eeRoles) {\n        return [...ceRoles, ...eeRoles];\n      },\n\n      defaultValue: [],\n    }\n  );\n\n  const initialValues = useEnterprise<InitialData>(\n    FORM_INITIAL_VALUES,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/ModalForm'\n        )\n      ).FORM_INITIAL_VALUES,\n    {\n      combine(ceValues, eeValues) {\n        return {\n          ...ceValues,\n          ...eeValues,\n        };\n      },\n\n      defaultValue: FORM_INITIAL_VALUES,\n    }\n  );\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n\n  const [createUser] = useCreateUserMutation();\n\n  const headerTitle = formatMessage({\n    id: 'Settings.permissions.users.create',\n    defaultMessage: 'Invite new user',\n  });\n\n  const handleSubmit = async (body: InitialData, { setErrors }: FormHelpers<InitialData>) => {\n    const res = await createUser({\n      ...body,\n      roles: body.roles ?? [],\n    });\n\n    if ('data' in res) {\n      // NOTE: when enabling SSO, the user doesn't have to register and the token is undefined\n      if (res.data.registrationToken) {\n        setRegistrationToken(res.data.registrationToken);\n      }\n\n      goNext();\n    } else {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n\n      if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n        setErrors(formatValidationErrors(res.error));\n      }\n    }\n  };\n\n  const goNext = () => {\n    if (next) {\n      setStep(next);\n    } else {\n      onToggle();\n    }\n  };\n\n  const { buttonSubmitLabel, isDisabled, next } = STEPPER[currentStep];\n\n  // block rendering until the EE component is fully loaded\n  if (!MagicLink) {\n    return null;\n  }\n\n  return (\n    <Modal.Root defaultOpen onOpenChange={onToggle}>\n      <Modal.Content>\n        <Modal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={headerTitle}>\n            <Crumb isCurrent>{headerTitle}</Crumb>\n          </Breadcrumbs>\n        </Modal.Header>\n        <Form\n          method={currentStep === 'create' ? 'POST' : 'PUT'}\n          initialValues={initialValues ?? {}}\n          onSubmit={handleSubmit}\n          validationSchema={FORM_SCHEMA}\n        >\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    {currentStep !== 'create' && (\n                      <MagicLink registrationToken={registrationToken} />\n                    )}\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\n                          defaultMessage: 'User details',\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n                          <Grid.Root gap={5}>\n                            {FORM_LAYOUT.map((row) => {\n                              return row.map(({ size, ...field }) => {\n                                return (\n                                  <Grid.Item\n                                    key={field.name}\n                                    col={size}\n                                    direction=\"column\"\n                                    alignItems=\"stretch\"\n                                  >\n                                    <InputRenderer\n                                      {...field}\n                                      disabled={isDisabled}\n                                      label={formatMessage(field.label)}\n                                      placeholder={formatMessage(field.placeholder)}\n                                    />\n                                  </Grid.Item>\n                                );\n                              });\n                            })}\n                          </Grid.Root>\n                        </Flex>\n                      </Box>\n                    </Box>\n                    <Box>\n                      <Typography variant=\"beta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'global.roles',\n                          defaultMessage: \"User's role\",\n                        })}\n                      </Typography>\n                      <Box paddingTop={4}>\n                        <Grid.Root gap={5}>\n                          <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n                            <SelectRoles disabled={isDisabled} />\n                          </Grid.Item>\n                          {roleLayout.map((row) => {\n                            return row.map(({ size, ...field }) => {\n                              return (\n                                <Grid.Item\n                                  key={field.name}\n                                  col={size}\n                                  direction=\"column\"\n                                  alignItems=\"stretch\"\n                                >\n                                  <InputRenderer\n                                    {...field}\n                                    disabled={isDisabled}\n                                    label={formatMessage(field.label)}\n                                    placeholder={\n                                      field.placeholder\n                                        ? formatMessage(field.placeholder)\n                                        : undefined\n                                    }\n                                    hint={field.hint ? formatMessage(field.hint) : undefined}\n                                  />\n                                </Grid.Item>\n                              );\n                            });\n                          })}\n                        </Grid.Root>\n                      </Box>\n                    </Box>\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Button variant=\"tertiary\" onClick={onToggle} type=\"button\">\n                    {formatMessage({\n                      id: 'app.components.Button.cancel',\n                      defaultMessage: 'Cancel',\n                    })}\n                  </Button>\n                  {currentStep === 'create' ? (\n                    <Button type=\"submit\" loading={isSubmitting}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  ) : (\n                    <Button type=\"button\" loading={isSubmitting} onClick={onToggle}>\n                      {formatMessage(buttonSubmitLabel)}\n                    </Button>\n                  )}\n                </Modal.Footer>\n              </>\n            );\n          }}\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\ninterface InitialData {\n  firstname?: string;\n  lastname?: string;\n  email?: string;\n  roles?: Data.ID[];\n  useSSORegistration?: boolean;\n}\n\nconst FORM_INITIAL_VALUES = {\n  firstname: '',\n  lastname: '',\n  email: '',\n  roles: [],\n};\n\nconst ROLE_LAYOUT: FormLayout = [];\n\nconst FORM_LAYOUT = [\n  [\n    {\n      label: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'string' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email' as const,\n      size: 6,\n      required: true,\n    },\n  ],\n] satisfies FormLayout;\n\nconst FORM_SCHEMA = yup.object().shape({\n  firstname: yup\n    .string()\n    .trim()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  lastname: yup.string(),\n  email: yup\n    .string()\n    .email(translatedErrors.email)\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .nullable(),\n  roles: yup\n    .array()\n    .min(1, {\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    }),\n});\n\nconst STEPPER = {\n  create: {\n    buttonSubmitLabel: {\n      id: 'app.containers.Users.ModalForm.footer.button-success',\n      defaultMessage: 'Invite user',\n    },\n    isDisabled: false,\n    next: 'magic-link',\n  },\n  'magic-link': {\n    buttonSubmitLabel: { id: 'global.finish', defaultMessage: 'Finish' },\n    isDisabled: true,\n    next: null,\n  },\n} as const;\n\nexport { ModalForm };\nexport type { InitialData };\n","import * as React from 'react';\n\nimport { Flex, Typography, Status, IconButton, Dialog } from '@strapi/design-system';\nimport { Pencil, Trash } from '@strapi/icons';\nimport * as qs from 'qs';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { NavLink, useLocation, useNavigate } from 'react-router-dom';\n\nimport { SanitizedAdminUser } from '../../../../../../shared/contracts/shared';\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Filters } from '../../../../components/Filters';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { Pagination } from '../../../../components/Pagination';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { Table } from '../../../../components/Table';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { useAdminUsers, useDeleteManyUsersMutation } from '../../../../services/users';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { CreateActionCE } from './components/CreateActionCE';\nimport { ModalForm } from './components/NewUserForm';\n\n/* -------------------------------------------------------------------------------------------------\n * ListPageCE\n * -----------------------------------------------------------------------------------------------*/\n\nconst ListPageCE = () => {\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [isModalOpened, setIsModalOpen] = React.useState(false);\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n  const {\n    allowedActions: { canCreate, canDelete, canRead },\n  } = useRBAC(permissions.settings?.users);\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search } = useLocation();\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = React.useState(false);\n  const [idsToDelete, setIdsToDelete] = React.useState<Array<SanitizedAdminUser['id']>>([]);\n  const { data, isError, isLoading } = useAdminUsers(qs.parse(search, { ignoreQueryPrefix: true }));\n\n  const { pagination, users = [] } = data ?? {};\n\n  const CreateAction = useEnterprise(\n    CreateActionCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/CreateActionEE'\n        )\n      ).CreateActionEE\n  );\n\n  const headers = TABLE_HEADERS.map((header) => ({\n    ...header,\n    label: formatMessage(header.label),\n  }));\n\n  const title = formatMessage({\n    id: 'global.users',\n    defaultMessage: 'Users',\n  });\n\n  const handleToggle = () => {\n    setIsModalOpen((prev) => !prev);\n  };\n\n  const [deleteAll] = useDeleteManyUsersMutation();\n  const handleDeleteAll = async (ids: Array<SanitizedAdminUser['id']>) => {\n    try {\n      const res = await deleteAll({ ids });\n\n      if ('error' in res) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'global.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n  };\n\n  const handleRowClick = (id: SanitizedAdminUser['id']) => () => {\n    if (canRead) {\n      navigate(id.toString());\n    }\n  };\n\n  const handleDeleteClick = (id: SanitizedAdminUser['id']) => async () => {\n    setIdsToDelete([id]);\n    setShowDeleteConfirmation(true);\n  };\n\n  const confirmDelete = async () => {\n    await handleDeleteAll(idsToDelete);\n    setShowDeleteConfirmation(false);\n  };\n\n  // block rendering until the EE component is fully loaded\n  if (!CreateAction) {\n    return null;\n  }\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={canCreate && <CreateAction onClick={handleToggle} />}\n        title={title}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.users.listview.header.subtitle',\n          defaultMessage: 'All the users who have access to the Strapi admin panel',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <>\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                { target: title }\n              )}\n            />\n            <Filters.Root options={FILTERS}>\n              <Filters.Trigger />\n              <Filters.Popover />\n              <Filters.List />\n            </Filters.Root>\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={users} headers={headers}>\n          <Table.ActionBar />\n          <Table.Content>\n            <Table.Head>\n              {canDelete ? <Table.HeaderCheckboxCell /> : null}\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {users.map((user) => (\n                <Table.Row\n                  key={user.id}\n                  onClick={handleRowClick(user.id)}\n                  cursor={canRead ? 'pointer' : 'default'}\n                >\n                  {canDelete ? <Table.CheckboxCell id={user.id} /> : null}\n                  {headers.map(({ cellFormatter, name, ...rest }) => {\n                    return (\n                      <Table.Cell key={name}>\n                        {typeof cellFormatter === 'function' ? (\n                          cellFormatter(user, { name, ...rest })\n                        ) : (\n                          // @ts-expect-error – name === \"roles\" has the data value of `AdminRole[]` but the header has a cellFormatter value so this shouldn't be called.\n                          <Typography textColor=\"neutral800\">{user[name] || '-'}</Typography>\n                        )}\n                      </Table.Cell>\n                    );\n                  })}\n                  {canRead || canDelete ? (\n                    <Table.Cell onClick={(e) => e.stopPropagation()}>\n                      <Flex justifyContent=\"end\">\n                        {canRead ? (\n                          <IconButton\n                            tag={NavLink}\n                            to={user.id.toString()}\n                            label={formatMessage(\n                              { id: 'app.component.table.edit', defaultMessage: 'Edit {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Pencil />\n                          </IconButton>\n                        ) : null}\n                        {canDelete ? (\n                          <IconButton\n                            onClick={handleDeleteClick(user.id)}\n                            label={formatMessage(\n                              { id: 'global.delete-target', defaultMessage: 'Delete {target}' },\n                              { target: getDisplayName(user) }\n                            )}\n                            variant=\"ghost\"\n                          >\n                            <Trash />\n                          </IconButton>\n                        ) : null}\n                      </Flex>\n                    </Table.Cell>\n                  ) : null}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n        <Pagination.Root {...pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {isModalOpened && <ModalForm onToggle={handleToggle} />}\n      <Dialog.Root open={showDeleteConfirmation} onOpenChange={setShowDeleteConfirmation}>\n        <ConfirmDialog onConfirm={confirmDelete} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\nconst TABLE_HEADERS: Array<\n  Omit<Table.Header<SanitizedAdminUser, any>, 'label'> & { label: MessageDescriptor }\n> = [\n  {\n    name: 'firstname',\n    label: {\n      id: 'Settings.permissions.users.firstname',\n      defaultMessage: 'Firstname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'lastname',\n    label: {\n      id: 'Settings.permissions.users.lastname',\n      defaultMessage: 'Lastname',\n    },\n    sortable: true,\n  },\n  {\n    name: 'email',\n    label: { id: 'Settings.permissions.users.email', defaultMessage: 'Email' },\n    sortable: true,\n  },\n  {\n    name: 'roles',\n    label: {\n      id: 'Settings.permissions.users.roles',\n      defaultMessage: 'Roles',\n    },\n    sortable: false,\n    cellFormatter({ roles }) {\n      return (\n        <Typography textColor=\"neutral800\">{roles.map((role) => role.name).join(',\\n')}</Typography>\n      );\n    },\n  },\n  {\n    name: 'username',\n    label: {\n      id: 'Settings.permissions.users.username',\n      defaultMessage: 'Username',\n    },\n    sortable: true,\n  },\n  {\n    name: 'isActive',\n    label: {\n      id: 'Settings.permissions.users.user-status',\n      defaultMessage: 'User status',\n    },\n    sortable: false,\n    cellFormatter({ isActive }) {\n      return (\n        <Flex>\n          <Status\n            size=\"S\"\n            borderWidth={0}\n            background=\"transparent\"\n            color=\"neutral800\"\n            variant={isActive ? 'success' : 'danger'}\n          >\n            <Typography>{isActive ? 'Active' : 'Inactive'}</Typography>\n          </Status>\n        </Flex>\n      );\n    },\n  },\n];\n\nconst FILTERS = [\n  {\n    name: 'firstname',\n    label: 'Firstname',\n    type: 'string',\n  },\n  {\n    name: 'lastname',\n    label: 'Lastname',\n    type: 'string',\n  },\n  {\n    name: 'email',\n    label: 'Email',\n    type: 'email',\n  },\n  {\n    name: 'username',\n    label: 'Username',\n    type: 'string',\n  },\n  {\n    name: 'isActive',\n    label: 'Active user',\n    type: 'boolean',\n  },\n] satisfies Filters.Filter[];\n\n/* -------------------------------------------------------------------------------------------------\n * ListPage\n * -----------------------------------------------------------------------------------------------*/\n\n// component which determines whether this page should render the CE or EE page\nconst ListPage = () => {\n  const UsersListPage = useEnterprise(\n    ListPageCE,\n    async () =>\n      // eslint-disable-next-line import/no-cycle\n      (await import('../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/ListPage'))\n        .UserListPageEE\n  );\n\n  // block rendering until the EE component is fully loaded\n  if (!UsersListPage) {\n    return null;\n  }\n\n  return <UsersListPage />;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage, ListPageCE };\n"],"names":["CreateActionCE","React","forwardRef","props","ref","formatMessage","useIntl","_jsx","Button","startIcon","Mail","size","id","defaultMessage","ModalForm","onToggle","currentStep","setStep","useState","registrationToken","setRegistrationToken","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","roleLayout","useEnterprise","ROLE_LAYOUT","combine","ceRoles","eeRoles","defaultValue","initialValues","FORM_INITIAL_VALUES","ceValues","eeValues","MagicLink","MagicLinkCE","MagicLinkEE","createUser","useCreateUserMutation","headerTitle","handleSubmit","body","setErrors","res","roles","data","goNext","type","message","error","isBaseQueryError","name","next","buttonSubmitLabel","isDisabled","STEPPER","Modal","Root","defaultOpen","onOpenChange","_jsxs","Content","Header","Breadcrumbs","label","Crumb","isCurrent","Form","method","onSubmit","validationSchema","FORM_SCHEMA","isSubmitting","_Fragment","Body","Flex","direction","alignItems","gap","Box","Typography","variant","tag","paddingTop","Grid","FORM_LAYOUT","map","row","field","Item","col","InputRenderer","disabled","placeholder","xs","SelectRoles","undefined","hint","Footer","onClick","loading","firstname","lastname","email","required","yup","object","shape","string","trim","translatedErrors","nullable","array","min","create","ListPageCE","isModalOpened","setIsModalOpen","permissions","useTypedSelector","state","admin_app","allowedActions","canCreate","canDelete","canRead","useRBAC","settings","users","navigate","useNavigate","search","useLocation","showDeleteConfirmation","setShowDeleteConfirmation","idsToDelete","setIdsToDelete","isError","isLoading","useAdminUsers","qs","parse","ignoreQueryPrefix","pagination","CreateAction","CreateActionEE","headers","TABLE_HEADERS","header","title","handleToggle","prev","deleteAll","useDeleteManyUsersMutation","handleDeleteAll","ids","err","handleRowClick","toString","handleDeleteClick","confirmDelete","Page","Error","Main","aria-busy","Title","Layouts","primaryAction","subtitle","Action","startActions","SearchInput","target","Filters","options","FILTERS","Trigger","Popover","List","Table","rows","ActionBar","Head","HeaderCheckboxCell","HeaderCell","Empty","Loading","user","Row","cursor","CheckboxCell","cellFormatter","rest","Cell","textColor","e","stopPropagation","justifyContent","IconButton","NavLink","to","getDisplayName","Pencil","Trash","Pagination","PageSize","Links","Dialog","open","ConfirmDialog","onConfirm","sortable","role","join","isActive","Status","borderWidth","background","color","ListPage","UsersListPage","UserListPageEE","ProtectedListPage","read","Protect"],"mappings":"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"}