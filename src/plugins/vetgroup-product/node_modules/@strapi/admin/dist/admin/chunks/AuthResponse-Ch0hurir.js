'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactIntl = require('react-intl');
var reactRouterDom = require('react-router-dom');
var Theme = require('./Theme-DDlJz91O.js');
require('@radix-ui/react-context');
require('@strapi/design-system');
require('@strapi/icons');
require('@strapi/icons/symbols');
require('qs');
require('./admin-udBiOv2o.js');
require('lodash/trimEnd');
require('@reduxjs/toolkit/query/react');
require('lodash/fp/pipe');
require('lodash/clone');
require('lodash/toPath');
require('lodash/isEqual');
require('axios');
require('immer');
require('lodash/get');
require('lodash/set');
require('use-context-selector');
require('lodash/defaultsDeep');
require('react-redux');
require('styled-components');
require('@reduxjs/toolkit');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const getCookieValue = (name)=>{
    let result = null;
    const cookieArray = document.cookie.split(';');
    cookieArray.forEach((cookie)=>{
        const [key, value] = cookie.split('=').map((item)=>item.trim());
        if (key.trim() === name) {
            result = decodeURIComponent(value);
        }
    });
    return result;
};
const deleteCookie = (name)=>{
    // Set the cookie to expire in the past
    document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
};

const AuthResponse = ()=>{
    const match = reactRouterDom.useMatch('/auth/login/:authResponse');
    const { formatMessage } = reactIntl.useIntl();
    const navigate = reactRouterDom.useNavigate();
    const dispatch = Theme.useTypedDispatch();
    const redirectToOops = React__namespace.useCallback(()=>{
        navigate({
            pathname: '/auth/oops',
            search: `?info=${encodeURIComponent(formatMessage({
                id: 'Auth.form.button.login.providers.error',
                defaultMessage: 'We cannot connect you through the selected provider.'
            }))}`
        });
    }, [
        navigate,
        formatMessage
    ]);
    React__namespace.useEffect(()=>{
        if (match?.params.authResponse === 'error') {
            redirectToOops();
        }
        if (match?.params.authResponse === 'success') {
            const jwtToken = getCookieValue('jwtToken');
            if (jwtToken) {
                dispatch(Theme.login({
                    token: jwtToken
                }));
                deleteCookie('jwtToken');
                navigate('/auth/login');
            } else {
                redirectToOops();
            }
        }
    }, [
        dispatch,
        match,
        redirectToOops,
        navigate
    ]);
    return /*#__PURE__*/ jsxRuntime.jsx(Theme.Page.Loading, {});
};

exports.AuthResponse = AuthResponse;
//# sourceMappingURL=AuthResponse-Ch0hurir.js.map
