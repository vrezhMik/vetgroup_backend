{"version":3,"file":"ListPage-BRHFLTin.js","sources":["../../../ee/admin/src/services/auditLogs.ts","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useFormatTimeStamp.ts","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getActionTypesDefaultMessages.ts","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/Modal.tsx","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/hooks/useAuditLogsData.ts","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/components/ComboboxFilter.tsx","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/utils/getDisplayedFilters.ts","../../../ee/admin/src/pages/SettingsPage/pages/AuditLogs/ListPage.tsx"],"sourcesContent":["import { adminApi } from '../../../../admin/src/services/api';\nimport * as AuditLogs from '../../../../shared/contracts/audit-logs';\n\nconst auditLogsService = adminApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getAuditLogs: builder.query<AuditLogs.GetAll.Response, AuditLogs.GetAll.Request['query']>({\n      query: (params) => ({\n        url: `/admin/audit-logs`,\n        config: {\n          params,\n        },\n      }),\n    }),\n    getAuditLog: builder.query<AuditLogs.Get.Response, AuditLogs.Get.Params['id']>({\n      query: (id) => `/admin/audit-logs/${id}`,\n    }),\n  }),\n  overrideExisting: false,\n});\n\nconst { useGetAuditLogsQuery, useGetAuditLogQuery } = auditLogsService;\n\nexport { useGetAuditLogsQuery, useGetAuditLogQuery };\n","import parseISO from 'date-fns/parseISO';\nimport { useIntl } from 'react-intl';\n\nexport const useFormatTimeStamp = () => {\n  const { formatDate } = useIntl();\n\n  const formatTimeStamp = (value: string) => {\n    const date = parseISO(value);\n\n    const formattedDate = formatDate(date, {\n      dateStyle: 'long',\n    });\n    const formattedTime = formatDate(date, {\n      timeStyle: 'medium',\n      hourCycle: 'h24',\n    });\n\n    return `${formattedDate}, ${formattedTime}`;\n  };\n\n  return formatTimeStamp;\n};\n","export const actionTypes = {\n  'entry.create': 'Create entry{model, select, undefined {} other { ({model})}}',\n  'entry.update': 'Update entry{model, select, undefined {} other { ({model})}}',\n  'entry.delete': 'Delete entry{model, select, undefined {} other { ({model})}}',\n  'entry.publish': 'Publish entry{model, select, undefined {} other { ({model})}}',\n  'entry.unpublish': 'Unpublish entry{model, select, undefined {} other { ({model})}}',\n  'media.create': 'Create media',\n  'media.update': 'Update media',\n  'media.delete': 'Delete media',\n  'media-folder.create': 'Create media folder',\n  'media-folder.update': 'Update media folder',\n  'media-folder.delete': 'Delete media folder',\n  'user.create': 'Create user',\n  'user.update': 'Update user',\n  'user.delete': 'Delete user',\n  'admin.auth.success': 'Admin login',\n  'admin.logout': 'Admin logout',\n  'content-type.create': 'Create content type',\n  'content-type.update': 'Update content type',\n  'content-type.delete': 'Delete content type',\n  'component.create': 'Create component',\n  'component.update': 'Update component',\n  'component.delete': 'Delete component',\n  'role.create': 'Create role',\n  'role.update': 'Update role',\n  'role.delete': 'Delete role',\n  'permission.create': 'Create permission',\n  'permission.update': 'Update permission',\n  'permission.delete': 'Delete permission',\n};\n\nexport const getDefaultMessage = (value: keyof typeof actionTypes) => {\n  return actionTypes[value] || value;\n};\n","import * as React from 'react';\n\nimport {\n  Box,\n  Flex,\n  Grid,\n  JSONInput,\n  Loader,\n  Modal as DSModal,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n  Field,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { AuditLog } from '../../../../../../../../shared/contracts/audit-logs';\nimport { useGetAuditLogQuery } from '../../../../../services/auditLogs';\nimport { useFormatTimeStamp } from '../hooks/useFormatTimeStamp';\nimport { actionTypes, getDefaultMessage } from '../utils/getActionTypesDefaultMessages';\n\ninterface ModalProps {\n  handleClose: () => void;\n  logId: string;\n}\n\nexport const Modal = ({ handleClose, logId }: ModalProps) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { data, error, isLoading } = useGetAuditLogQuery(logId);\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n      handleClose();\n    }\n  }, [error, formatAPIError, handleClose, toggleNotification]);\n\n  const formatTimeStamp = useFormatTimeStamp();\n  const formattedDate = data && 'date' in data ? formatTimeStamp(data.date) : '';\n\n  return (\n    <DSModal.Root defaultOpen onOpenChange={handleClose}>\n      <DSModal.Content>\n        <DSModal.Header>\n          {/**\n           * TODO: this is not semantically correct and should be amended.\n           */}\n          <Breadcrumbs label={formattedDate} id=\"title\">\n            <Crumb isCurrent>{formattedDate}</Crumb>\n          </Breadcrumbs>\n        </DSModal.Header>\n        <DSModal.Body>\n          <ActionBody isLoading={isLoading} data={data as AuditLog} formattedDate={formattedDate} />\n        </DSModal.Body>\n      </DSModal.Content>\n    </DSModal.Root>\n  );\n};\n\ninterface ActionBodyProps {\n  isLoading?: boolean;\n  data: AuditLog;\n  formattedDate: string;\n}\n\nconst ActionBody = ({ isLoading, data, formattedDate }: ActionBodyProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isLoading) {\n    return (\n      <Flex padding={7} justifyContent=\"center\" alignItems=\"center\">\n        {/**\n         * TODO: this will need to be translated.\n         */}\n        <Loader>Loading content...</Loader>\n      </Flex>\n    );\n  }\n\n  const { action, user, payload } = data;\n\n  return (\n    <>\n      <Box marginBottom={3}>\n        <Typography variant=\"delta\" id=\"title\">\n          {formatMessage({\n            id: 'Settings.permissions.auditLogs.details',\n            defaultMessage: 'Log Details',\n          })}\n        </Typography>\n      </Box>\n      <Grid.Root\n        gap={4}\n        gridCols={2}\n        paddingTop={4}\n        paddingBottom={4}\n        paddingLeft={6}\n        paddingRight={6}\n        marginBottom={4}\n        background=\"neutral100\"\n        hasRadius\n      >\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.action',\n            defaultMessage: 'Action',\n          })}\n          actionName={formatMessage(\n            {\n              id: `Settings.permissions.auditLogs.${action}`,\n              defaultMessage: getDefaultMessage(action as keyof typeof actionTypes),\n            },\n            // @ts-expect-error - any\n            { model: payload?.model }\n          )}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.date',\n            defaultMessage: 'Date',\n          })}\n          actionName={formattedDate}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.user',\n            defaultMessage: 'User',\n          })}\n          actionName={user?.displayName || '-'}\n        />\n        <ActionItem\n          actionLabel={formatMessage({\n            id: 'Settings.permissions.auditLogs.userId',\n            defaultMessage: 'User ID',\n          })}\n          actionName={user?.id.toString() || '-'}\n        />\n      </Grid.Root>\n      <Field.Root>\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.permissions.auditLogs.payload',\n            defaultMessage: 'Payload',\n          })}\n        </Field.Label>\n        <Payload value={JSON.stringify(payload, null, 2)} disabled />\n      </Field.Root>\n    </>\n  );\n};\n\nconst Payload = styled(JSONInput)`\n  max-width: 100%;\n  overflow: scroll;\n`;\n\ninterface ActionItemProps {\n  actionLabel: string;\n  actionName: string;\n}\n\nconst ActionItem = ({ actionLabel, actionName }: ActionItemProps) => {\n  return (\n    <Flex direction=\"column\" alignItems=\"baseline\" gap={1}>\n      <Typography textColor=\"neutral600\" variant=\"sigma\">\n        {actionLabel}\n      </Typography>\n      <Typography textColor=\"neutral600\">{actionName}</Typography>\n    </Flex>\n  );\n};\n","import * as React from 'react';\n\nimport { useNotification } from '../../../../../../../../admin/src/features/Notifications';\nimport { useAPIErrorHandler } from '../../../../../../../../admin/src/hooks/useAPIErrorHandler';\nimport { useQueryParams } from '../../../../../../../../admin/src/hooks/useQueryParams';\nimport { useAdminUsers } from '../../../../../../../../admin/src/services/users';\nimport { useGetAuditLogsQuery } from '../../../../../services/auditLogs';\n\nexport const useAuditLogsData = ({\n  canReadAuditLogs,\n  canReadUsers,\n}: {\n  canReadAuditLogs: boolean;\n  canReadUsers: boolean;\n}) => {\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const [{ query }] = useQueryParams();\n\n  const {\n    data,\n    error,\n    isError: isUsersError,\n    isLoading: isLoadingUsers,\n  } = useAdminUsers(\n    {},\n    {\n      skip: !canReadUsers,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, toggleNotification, formatAPIError]);\n\n  const {\n    data: auditLogs,\n    isLoading: isLoadingAuditLogs,\n    isError: isAuditLogsError,\n    error: auditLogsError,\n  } = useGetAuditLogsQuery(query, {\n    refetchOnMountOrArgChange: true,\n    skip: !canReadAuditLogs,\n  });\n\n  React.useEffect(() => {\n    if (auditLogsError) {\n      toggleNotification({ type: 'danger', message: formatAPIError(auditLogsError) });\n    }\n  }, [auditLogsError, toggleNotification, formatAPIError]);\n\n  return {\n    auditLogs,\n    users: data?.users ?? [],\n    isLoading: isLoadingUsers || isLoadingAuditLogs,\n    hasError: isAuditLogsError || isUsersError,\n  };\n};\n","import { Combobox, ComboboxOption } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\nimport { useField } from '../../../../../../../../admin/src/components/Form';\n\nexport const ComboboxFilter = (props: Filters.ValueInputProps) => {\n  const { formatMessage } = useIntl();\n  const field = useField(props.name);\n  const ariaLabel = formatMessage({\n    id: 'Settings.permissions.auditLogs.filter.aria-label',\n    defaultMessage: 'Search and select an option to filter',\n  });\n\n  const handleChange = (value?: string) => {\n    field.onChange(props.name, value);\n  };\n\n  return (\n    <Combobox aria-label={ariaLabel} value={field.value} onChange={handleChange}>\n      {props.options?.map((opt) => {\n        const value = typeof opt === 'string' ? opt : opt.value;\n        const label = typeof opt === 'string' ? opt : opt.label;\n        return (\n          <ComboboxOption key={value} value={value}>\n            {label}\n          </ComboboxOption>\n        );\n      })}\n    </Combobox>\n  );\n};\n","import { IntlShape } from 'react-intl';\n\nimport { Filters } from '../../../../../../../../admin/src/components/Filters';\nimport { getDisplayName } from '../../../../../../../../admin/src/utils/users';\nimport { SanitizedAdminUser } from '../../../../../../../../shared/contracts/shared';\nimport { ComboboxFilter } from '../components/ComboboxFilter';\n\nimport { actionTypes, getDefaultMessage } from './getActionTypesDefaultMessages';\n\nexport const getDisplayedFilters = ({\n  formatMessage,\n  users,\n  canReadUsers,\n}: {\n  formatMessage: IntlShape['formatMessage'];\n  users: SanitizedAdminUser[];\n  canReadUsers: boolean;\n}): Filters.Filter[] => {\n  const operators = [\n    {\n      label: formatMessage({\n        id: 'components.FilterOptions.FILTER_TYPES.$eq',\n        defaultMessage: 'is',\n      }),\n      value: '$eq',\n    },\n    {\n      label: formatMessage({\n        id: 'components.FilterOptions.FILTER_TYPES.$ne',\n        defaultMessage: 'is not',\n      }),\n      value: '$ne',\n    },\n  ] as NonNullable<Filters.Filter['operators']>;\n\n  const filters = [\n    {\n      input: ComboboxFilter,\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.action',\n        defaultMessage: 'Action',\n      }),\n      name: 'action',\n      operators,\n      options: (Object.keys(actionTypes) as (keyof typeof actionTypes)[]).map((action) => ({\n        label: formatMessage(\n          {\n            id: `Settings.permissions.auditLogs.${action}`,\n            defaultMessage: getDefaultMessage(action),\n          },\n          { model: undefined }\n        ),\n        value: action,\n      })),\n      type: 'enumeration',\n    },\n    {\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.date',\n        defaultMessage: 'Date',\n      }),\n      name: 'date',\n      type: 'datetime',\n    },\n  ] satisfies Filters.Filter[];\n\n  if (canReadUsers && users) {\n    return [\n      ...filters,\n      {\n        input: ComboboxFilter,\n        label: formatMessage({\n          id: 'Settings.permissions.auditLogs.user',\n          defaultMessage: 'User',\n        }),\n        mainField: { name: 'id', type: 'integer' },\n        name: 'user',\n        operators,\n        options: users.map((user) => ({\n          label: getDisplayName(user),\n          value: user.id.toString(),\n        })),\n        type: 'relation',\n      } satisfies Filters.Filter,\n    ];\n  }\n\n  return filters;\n};\n","import { Flex, IconButton, Typography } from '@strapi/design-system';\nimport { Eye } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Filters } from '../../../../../../../admin/src/components/Filters';\nimport { Layouts } from '../../../../../../../admin/src/components/Layouts/Layout';\nimport { Page } from '../../../../../../../admin/src/components/PageHelpers';\nimport { Pagination } from '../../../../../../../admin/src/components/Pagination';\nimport { Table } from '../../../../../../../admin/src/components/Table';\nimport { useTypedSelector } from '../../../../../../../admin/src/core/store/hooks';\nimport { useQueryParams } from '../../../../../../../admin/src/hooks/useQueryParams';\nimport { useRBAC } from '../../../../../../../admin/src/hooks/useRBAC';\nimport { AuditLog } from '../../../../../../../shared/contracts/audit-logs';\n\nimport { Modal } from './components/Modal';\nimport { useAuditLogsData } from './hooks/useAuditLogsData';\nimport { useFormatTimeStamp } from './hooks/useFormatTimeStamp';\nimport { getDefaultMessage } from './utils/getActionTypesDefaultMessages';\nimport { getDisplayedFilters } from './utils/getDisplayedFilters';\n\nconst ListPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings);\n\n  const {\n    allowedActions: { canRead: canReadAuditLogs, canReadUsers },\n    isLoading: isLoadingRBAC,\n  } = useRBAC({\n    ...permissions?.auditLogs,\n    readUsers: permissions?.users.read || [],\n  });\n\n  const [{ query }, setQuery] = useQueryParams<{ id?: AuditLog['id'] }>();\n  const {\n    auditLogs,\n    users,\n    isLoading: isLoadingData,\n    hasError,\n  } = useAuditLogsData({\n    canReadAuditLogs,\n    canReadUsers,\n  });\n\n  const formatTimeStamp = useFormatTimeStamp();\n\n  const displayedFilters = getDisplayedFilters({ formatMessage, users, canReadUsers });\n\n  const headers: Table.Header<AuditLog, object>[] = [\n    {\n      name: 'action',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.action',\n        defaultMessage: 'Action',\n      }),\n      sortable: true,\n    },\n    {\n      name: 'date',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.date',\n        defaultMessage: 'Date',\n      }),\n      sortable: true,\n    },\n    {\n      name: 'user',\n      label: formatMessage({\n        id: 'Settings.permissions.auditLogs.user',\n        defaultMessage: 'User',\n      }),\n      sortable: false,\n      // In this case, the passed parameter cannot and shouldn't be something else than User\n      cellFormatter: ({ user }) => (user ? user.displayName : ''),\n    },\n  ];\n\n  if (hasError) {\n    return <Page.Error />;\n  }\n\n  const isLoading = isLoadingData || isLoadingRBAC;\n\n  const { results = [] } = auditLogs ?? {};\n\n  return (\n    <Page.Main aria-busy={isLoading}>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: formatMessage({\n              id: 'global.auditLogs',\n              defaultMessage: 'Audit Logs',\n            }),\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'global.auditLogs',\n          defaultMessage: 'Audit Logs',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.permissions.auditLogs.listview.header.subtitle',\n          defaultMessage: 'Logs of all the activities that happened in your environment',\n        })}\n      />\n      <Layouts.Action\n        startActions={\n          <Filters.Root options={displayedFilters}>\n            <Filters.Trigger />\n            <Filters.Popover />\n            <Filters.List />\n          </Filters.Root>\n        }\n      />\n      <Layouts.Content>\n        <Table.Root rows={results} headers={headers} isLoading={isLoading}>\n          <Table.Content>\n            <Table.Head>\n              {headers.map((header) => (\n                <Table.HeaderCell key={header.name} {...header} />\n              ))}\n            </Table.Head>\n            <Table.Empty />\n            <Table.Loading />\n            <Table.Body>\n              {results.map((log) => (\n                <Table.Row key={log.id} onClick={() => setQuery({ id: log.id })}>\n                  {headers.map((header) => {\n                    const { name, cellFormatter } = header;\n\n                    switch (name) {\n                      case 'action':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {formatMessage(\n                                {\n                                  id: `Settings.permissions.auditLogs.${log.action}`,\n                                  // @ts-expect-error – getDefaultMessage probably doesn't benefit from being so strongly typed unless we just add string at the end.\n                                  defaultMessage: getDefaultMessage(log.action),\n                                },\n                                { model: (log.payload?.model as string) ?? '' }\n                              )}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      case 'date':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {formatTimeStamp(log.date)}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      case 'user':\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {cellFormatter ? cellFormatter(log, header) : '-'}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                      default:\n                        return (\n                          <Table.Cell key={name}>\n                            <Typography textColor=\"neutral800\">\n                              {(log[name as keyof AuditLog] as string) || '-'}\n                            </Typography>\n                          </Table.Cell>\n                        );\n                    }\n                  })}\n                  <Table.Cell onClick={(e) => e.stopPropagation()}>\n                    <Flex justifyContent=\"end\">\n                      <IconButton\n                        onClick={() => setQuery({ id: log.id })}\n                        withTooltip={false}\n                        label={formatMessage(\n                          { id: 'app.component.table.view', defaultMessage: '{target} details' },\n                          { target: `${log.action} action` }\n                        )}\n                        variant=\"ghost\"\n                      >\n                        <Eye />\n                      </IconButton>\n                    </Flex>\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table.Content>\n        </Table.Root>\n\n        <Pagination.Root {...auditLogs?.pagination}>\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Layouts.Content>\n      {query?.id && (\n        <Modal handleClose={() => setQuery({ id: '' }, 'remove')} logId={query.id.toString()} />\n      )}\n    </Page.Main>\n  );\n};\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.auditLogs?.main\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ListPage, ProtectedListPage };\n"],"names":["auditLogsService","adminApi","injectEndpoints","endpoints","builder","getAuditLogs","query","params","url","config","getAuditLog","id","overrideExisting","useGetAuditLogsQuery","useGetAuditLogQuery","useFormatTimeStamp","formatDate","useIntl","formatTimeStamp","value","date","parseISO","formattedDate","dateStyle","formattedTime","timeStyle","hourCycle","actionTypes","getDefaultMessage","Modal","handleClose","logId","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","data","error","isLoading","React","useEffect","type","message","_jsx","DSModal","Root","defaultOpen","onOpenChange","_jsxs","Content","Header","Breadcrumbs","label","Crumb","isCurrent","Body","ActionBody","formatMessage","Flex","padding","justifyContent","alignItems","Loader","action","user","payload","_Fragment","Box","marginBottom","Typography","variant","defaultMessage","Grid","gap","gridCols","paddingTop","paddingBottom","paddingLeft","paddingRight","background","hasRadius","ActionItem","actionLabel","actionName","model","displayName","toString","Field","Label","Payload","JSON","stringify","disabled","styled","JSONInput","direction","textColor","useAuditLogsData","canReadAuditLogs","canReadUsers","useQueryParams","isError","isUsersError","isLoadingUsers","useAdminUsers","skip","refetchOnMountOrArgChange","auditLogs","isLoadingAuditLogs","isAuditLogsError","auditLogsError","users","hasError","ComboboxFilter","props","field","useField","name","ariaLabel","handleChange","onChange","Combobox","aria-label","options","map","opt","ComboboxOption","getDisplayedFilters","operators","filters","input","Object","keys","undefined","mainField","getDisplayName","ListPage","permissions","useTypedSelector","state","admin_app","settings","allowedActions","canRead","isLoadingRBAC","useRBAC","readUsers","read","setQuery","isLoadingData","displayedFilters","headers","sortable","cellFormatter","Page","Error","results","Main","aria-busy","Title","Layouts","title","subtitle","Action","startActions","Filters","Trigger","Popover","List","Table","rows","Head","header","HeaderCell","Empty","Loading","log","Row","onClick","Cell","e","stopPropagation","IconButton","withTooltip","target","Eye","Pagination","pagination","PageSize","Links","ProtectedListPage","main","Protect"],"mappings":"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"}