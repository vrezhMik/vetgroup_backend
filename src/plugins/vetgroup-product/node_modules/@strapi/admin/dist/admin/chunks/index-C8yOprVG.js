'use strict';

var client = require('react-dom/client');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var designSystem = require('@strapi/design-system');
var invariant = require('invariant');
var isFunction = require('lodash/isFunction');
var merge = require('lodash/merge');
var pick = require('lodash/pick');
var reactRouterDom = require('react-router-dom');
var immer = require('immer');
var Theme = require('./Theme-DDlJz91O.js');
var reactRedux = require('react-redux');
var reactQuery = require('react-query');
var icons = require('@strapi/icons');
var reactIntl = require('react-intl');
var styledComponents = require('styled-components');
var symbols = require('@strapi/icons/symbols');
var useEnterprise = require('./useEnterprise-IHd3AKd2.js');
var admin = require('./admin-udBiOv2o.js');
var camelCase = require('lodash/camelCase');
var yup = require('yup');
var fractionalIndexing = require('fractional-indexing');
var isEqual = require('lodash/isEqual');
var omit = require('lodash/omit');
var formik = require('formik');
var toolkit = require('@reduxjs/toolkit');
var throttle = require('lodash/throttle');
var qs = require('qs');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);
var yup__namespace = /*#__PURE__*/_interopNamespaceDefault(yup);

const ADMIN_PERMISSIONS_EE = {
    settings: {
        auditLogs: {
            main: [
                {
                    action: 'admin::audit-logs.read',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::audit-logs.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::audit-logs.update',
                    subject: null
                }
            ]
        },
        'review-workflows': {
            main: [
                {
                    action: 'admin::review-workflows.read',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::review-workflows.read',
                    subject: null
                }
            ],
            create: [
                {
                    action: 'admin::review-workflows.create',
                    subject: null
                }
            ],
            delete: [
                {
                    action: 'admin::review-workflows.delete',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::review-workflows.update',
                    subject: null
                }
            ]
        },
        sso: {
            main: [
                {
                    action: 'admin::provider-login.read',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::provider-login.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::provider-login.update',
                    subject: null
                }
            ]
        },
        releases: {
            read: [
                {
                    action: 'plugin::content-releases.settings.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'plugin::content-releases.settings.update',
                    subject: null
                }
            ]
        }
    }
};
/**
 * Base EE routes, these are relative to the `root` of the app.
 * We use a function to get them so we're not looking at window
 * during build time.
 */ const getEERoutes$1 = ()=>window.strapi.isEE ? [
        {
            path: 'auth/login/:authResponse',
            lazy: async ()=>{
                const { AuthResponse } = await Promise.resolve().then(function () { return require('./AuthResponse-Ch0hurir.js'); });
                return {
                    Component: AuthResponse
                };
            }
        }
    ] : [];
// TODO: the constants.js file is imported before the React application is setup and
// therefore `window.strapi` might not exist at import-time. We should probably define
// which constant is available at which stage of the application lifecycle.
const SETTINGS_LINKS_EE = ()=>({
        global: [
            ...window.strapi.features.isEnabled(window.strapi.features.SSO) ? [
                {
                    intlLabel: {
                        id: 'Settings.sso.title',
                        defaultMessage: 'Single Sign-On'
                    },
                    to: '/settings/single-sign-on',
                    id: 'sso'
                }
            ] : []
        ],
        admin: [
            ...window.strapi.features.isEnabled(window.strapi.features.AUDIT_LOGS) ? [
                {
                    intlLabel: {
                        id: 'global.auditLogs',
                        defaultMessage: 'Audit Logs'
                    },
                    to: '/settings/audit-logs?pageSize=50&page=1&sort=date:DESC',
                    id: 'auditLogs'
                }
            ] : []
        ]
    });

var constants = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ADMIN_PERMISSIONS_EE: ADMIN_PERMISSIONS_EE,
  SETTINGS_LINKS_EE: SETTINGS_LINKS_EE,
  getEERoutes: getEERoutes$1
});

var img = "data:image/svg+xml,%3csvg width='800' height='800' viewBox='0 0 800 800' fill='none' xmlns='http://www.w3.org/2000/svg'%3e %3cpath d='M39 282c0-118 0-176.9 36.6-213.5C112.2 32 171.1 32 288.9 32h221.2c117.8 0 176.7 0 213.3 36.6C760 105.2 760 164.1 760 281.9v221.2c0 117.8 0 176.7-36.6 213.3C686.8 753 627.9 753 510.1 753H288.9c-117.8 0-176.7 0-213.3-36.6C39 679.8 39 620.9 39 503.1V281.9Z' fill='%234945FF'/%3e %3cpath fill-rule='evenodd' clip-rule='evenodd' d='M536.4 250.7H293.7v123.8h123.8v123.7h123.8V255.5c0-2.6-2.2-4.8-4.9-4.8Z' fill='white'/%3e %3cpath fill='white' d='M412.7 374.5h4.8v4.8h-4.8z'/%3e %3cpath d='M293.8 374.5h119c2.6 0 4.8 2.1 4.8 4.8v119h-119a4.8 4.8 0 0 1-4.8-4.9v-119Z' fill='%239593FF'/%3e %3cpath d='M417.5 498.2h123.8L421.6 618a2.4 2.4 0 0 1-4-1.7v-118ZM293.8 374.5h-118a2.4 2.4 0 0 1-1.7-4.1l119.7-119.7v123.8Z' fill='%239593FF'/%3e%3c/svg%3e";

const ADMIN_PERMISSIONS_CE = {
    contentManager: {
        main: [],
        collectionTypesConfigurations: [
            {
                action: 'plugin::content-manager.collection-types.configure-view',
                subject: null
            }
        ],
        componentsConfigurations: [
            {
                action: 'plugin::content-manager.components.configure-layout',
                subject: null
            }
        ],
        singleTypesConfigurations: [
            {
                action: 'plugin::content-manager.single-types.configure-view',
                subject: null
            }
        ]
    },
    marketplace: {
        main: [
            {
                action: 'admin::marketplace.read',
                subject: null
            }
        ],
        read: [
            {
                action: 'admin::marketplace.read',
                subject: null
            }
        ]
    },
    settings: {
        roles: {
            main: [
                {
                    action: 'admin::roles.create',
                    subject: null
                },
                {
                    action: 'admin::roles.update',
                    subject: null
                },
                {
                    action: 'admin::roles.read',
                    subject: null
                },
                {
                    action: 'admin::roles.delete',
                    subject: null
                }
            ],
            create: [
                {
                    action: 'admin::roles.create',
                    subject: null
                }
            ],
            delete: [
                {
                    action: 'admin::roles.delete',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::roles.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::roles.update',
                    subject: null
                }
            ]
        },
        users: {
            main: [
                {
                    action: 'admin::users.create',
                    subject: null
                },
                {
                    action: 'admin::users.read',
                    subject: null
                },
                {
                    action: 'admin::users.update',
                    subject: null
                },
                {
                    action: 'admin::users.delete',
                    subject: null
                }
            ],
            create: [
                {
                    action: 'admin::users.create',
                    subject: null
                }
            ],
            delete: [
                {
                    action: 'admin::users.delete',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::users.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::users.update',
                    subject: null
                }
            ]
        },
        webhooks: {
            main: [
                {
                    action: 'admin::webhooks.create',
                    subject: null
                },
                {
                    action: 'admin::webhooks.read',
                    subject: null
                },
                {
                    action: 'admin::webhooks.update',
                    subject: null
                },
                {
                    action: 'admin::webhooks.delete',
                    subject: null
                }
            ],
            create: [
                {
                    action: 'admin::webhooks.create',
                    subject: null
                }
            ],
            delete: [
                {
                    action: 'admin::webhooks.delete',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::webhooks.read',
                    subject: null
                },
                // NOTE: We need to check with the API
                {
                    action: 'admin::webhooks.update',
                    subject: null
                },
                {
                    action: 'admin::webhooks.delete',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::webhooks.update',
                    subject: null
                }
            ]
        },
        'api-tokens': {
            main: [
                {
                    action: 'admin::api-tokens.access',
                    subject: null
                }
            ],
            create: [
                {
                    action: 'admin::api-tokens.create',
                    subject: null
                }
            ],
            delete: [
                {
                    action: 'admin::api-tokens.delete',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::api-tokens.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::api-tokens.update',
                    subject: null
                }
            ],
            regenerate: [
                {
                    action: 'admin::api-tokens.regenerate',
                    subject: null
                }
            ]
        },
        'transfer-tokens': {
            main: [
                {
                    action: 'admin::transfer.tokens.access',
                    subject: null
                }
            ],
            create: [
                {
                    action: 'admin::transfer.tokens.create',
                    subject: null
                }
            ],
            delete: [
                {
                    action: 'admin::transfer.tokens.delete',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::transfer.tokens.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::transfer.tokens.update',
                    subject: null
                }
            ],
            regenerate: [
                {
                    action: 'admin::transfer.tokens.regenerate',
                    subject: null
                }
            ]
        },
        'project-settings': {
            read: [
                {
                    action: 'admin::project-settings.read',
                    subject: null
                }
            ],
            update: [
                {
                    action: 'admin::project-settings.update',
                    subject: null
                }
            ]
        },
        plugins: {
            main: [
                {
                    action: 'admin::marketplace.read',
                    subject: null
                }
            ],
            read: [
                {
                    action: 'admin::marketplace.read',
                    subject: null
                }
            ]
        }
    }
};
const HOOKS = {
    /**
   * Hook that allows to mutate the displayed headers of the list view table
   * @constant
   * @type {string}
   */ INJECT_COLUMN_IN_TABLE: 'Admin/CM/pages/ListView/inject-column-in-table',
    /**
   * Hook that allows to mutate the CM's collection types links pre-set filters
   * @constant
   * @type {string}
   */ MUTATE_COLLECTION_TYPES_LINKS: 'Admin/CM/pages/App/mutate-collection-types-links',
    /**
   * Hook that allows to mutate the CM's edit view layout
   * @constant
   * @type {string}
   */ MUTATE_EDIT_VIEW_LAYOUT: 'Admin/CM/pages/EditView/mutate-edit-view-layout',
    /**
   * Hook that allows to mutate the CM's single types links pre-set filters
   * @constant
   * @type {string}
   */ MUTATE_SINGLE_TYPES_LINKS: 'Admin/CM/pages/App/mutate-single-types-links'
};
const SETTINGS_LINKS_CE = ()=>({
        global: [
            {
                intlLabel: {
                    id: 'Settings.application.title',
                    defaultMessage: 'Overview'
                },
                to: '/settings/application-infos',
                id: '000-application-infos'
            },
            {
                intlLabel: {
                    id: 'Settings.webhooks.title',
                    defaultMessage: 'Webhooks'
                },
                to: '/settings/webhooks',
                id: 'webhooks'
            },
            {
                intlLabel: {
                    id: 'Settings.apiTokens.title',
                    defaultMessage: 'API Tokens'
                },
                to: '/settings/api-tokens?sort=name:ASC',
                id: 'api-tokens'
            },
            {
                intlLabel: {
                    id: 'Settings.transferTokens.title',
                    defaultMessage: 'Transfer Tokens'
                },
                to: '/settings/transfer-tokens?sort=name:ASC',
                id: 'transfer-tokens'
            },
            {
                intlLabel: {
                    id: 'global.plugins',
                    defaultMessage: 'Plugins'
                },
                to: '/settings/list-plugins',
                id: 'plugins'
            },
            // If the Enterprise/Cloud feature is not enabled and if the config doesn't disable it, we promote the Enterprise/Cloud feature by displaying them in the settings menu.
            // Disable this by adding "promoteEE: false" to your `./config/admin.js` file
            ...!window.strapi.features.isEnabled(window.strapi.features.SSO) && window.strapi?.flags?.promoteEE ? [
                {
                    intlLabel: {
                        id: 'Settings.sso.title',
                        defaultMessage: 'Single Sign-On'
                    },
                    to: '/settings/purchase-single-sign-on',
                    id: 'sso-purchase-page',
                    licenseOnly: true
                }
            ] : [],
            ...!window.strapi.features.isEnabled('cms-content-history') && window.strapi?.flags?.promoteEE ? [
                {
                    intlLabel: {
                        id: 'Settings.content-history.title',
                        defaultMessage: 'Content History'
                    },
                    to: '/settings/purchase-content-history',
                    id: 'content-history-purchase-page',
                    licenseOnly: true
                }
            ] : []
        ],
        admin: [
            {
                intlLabel: {
                    id: 'global.roles',
                    defaultMessage: 'Roles'
                },
                to: '/settings/roles',
                id: 'roles'
            },
            {
                intlLabel: {
                    id: 'global.users',
                    defaultMessage: 'Users'
                },
                // Init the search params directly
                to: '/settings/users?pageSize=10&page=1&sort=firstname',
                id: 'users'
            },
            ...!window.strapi.features.isEnabled(window.strapi.features.AUDIT_LOGS) && window.strapi?.flags?.promoteEE ? [
                {
                    intlLabel: {
                        id: 'global.auditLogs',
                        defaultMessage: 'Audit Logs'
                    },
                    to: '/settings/purchase-audit-logs',
                    id: 'auditLogs-purchase-page',
                    licenseOnly: true
                }
            ] : []
        ]
    });

const ALLOWED_TYPES = [
    'biginteger',
    'boolean',
    'date',
    'datetime',
    'decimal',
    'email',
    'enumeration',
    'float',
    'integer',
    'json',
    'password',
    'richtext',
    'string',
    'text',
    'time',
    'uid'
];
const ALLOWED_ROOT_LEVEL_OPTIONS = [
    'min',
    'minLength',
    'max',
    'maxLength',
    'required',
    'regex',
    'enum',
    'unique',
    'private',
    'default'
];
class CustomFields {
    constructor(){
        this.register = (customFields)=>{
            if (Array.isArray(customFields)) {
                // If several custom fields are passed, register them one by one
                customFields.forEach((customField)=>{
                    this.register(customField);
                });
            } else {
                // Handle individual custom field
                const { name, pluginId, type, intlLabel, intlDescription, components, options } = customFields;
                // Ensure required attributes are provided
                invariant(name, 'A name must be provided');
                invariant(type, 'A type must be provided');
                invariant(intlLabel, 'An intlLabel must be provided');
                invariant(intlDescription, 'An intlDescription must be provided');
                invariant(components, 'A components object must be provided');
                invariant(components.Input, 'An Input component must be provided');
                // Ensure the type is valid
                invariant(ALLOWED_TYPES.includes(type), `Custom field type: '${type}' is not a valid Strapi type or it can't be used with a Custom Field`);
                // Ensure name has no special characters
                const isValidObjectKey = /^(?![0-9])[a-zA-Z0-9$_-]+$/g;
                invariant(isValidObjectKey.test(name), `Custom field name: '${name}' is not a valid object key`);
                // Ensure options have valid name paths
                const allFormOptions = [
                    ...options?.base || [],
                    ...options?.advanced || []
                ];
                if (allFormOptions.length) {
                    const optionPathValidations = allFormOptions.reduce(optionsValidationReducer, []);
                    optionPathValidations.forEach(({ isValidOptionPath, errorMessage })=>{
                        invariant(isValidOptionPath, errorMessage);
                    });
                }
                // When no plugin is specified, default to the global namespace
                const uid = pluginId ? `plugin::${pluginId}.${name}` : `global::${name}`;
                // Ensure the uid is unique
                const uidAlreadyUsed = Object.prototype.hasOwnProperty.call(this.customFields, uid);
                invariant(!uidAlreadyUsed, `Custom field: '${uid}' has already been registered`);
                this.customFields[uid] = customFields;
            }
        };
        this.getAll = ()=>{
            return this.customFields;
        };
        this.get = (uid)=>{
            return this.customFields[uid];
        };
        this.customFields = {};
    }
}
const optionsValidationReducer = (acc, option)=>{
    if ('items' in option) {
        return option.items.reduce(optionsValidationReducer, acc);
    }
    if (!option.name) {
        acc.push({
            isValidOptionPath: false,
            errorMessage: "The 'name' property is required on an options object"
        });
    } else {
        acc.push({
            isValidOptionPath: option.name.startsWith('options') || ALLOWED_ROOT_LEVEL_OPTIONS.includes(option.name),
            errorMessage: `'${option.name}' must be prefixed with 'options.'`
        });
    }
    return acc;
};

class Plugin {
    getInjectedComponents(containerName, blockName) {
        try {
            return this.injectionZones[containerName][blockName] || [];
        } catch (err) {
            console.error('Cannot get injected component', err);
            return [];
        }
    }
    injectComponent(containerName, blockName, component) {
        try {
            this.injectionZones[containerName][blockName].push(component);
        } catch (err) {
            console.error('Cannot inject component', err);
        }
    }
    constructor(pluginConf){
        this[immer.immerable] = true;
        this.apis = pluginConf.apis || {};
        this.initializer = pluginConf.initializer || null;
        this.injectionZones = pluginConf.injectionZones || {};
        this.isReady = pluginConf.isReady !== undefined ? pluginConf.isReady : true;
        this.name = pluginConf.name;
        this.pluginId = pluginConf.id;
    }
}

const [Provider, useHistory] = Theme.createContext('History', {
    history: [],
    currentLocationIndex: 0,
    currentLocation: '',
    canGoBack: false,
    pushState: ()=>{
        throw new Error('You must use the `HistoryProvider` to access the `pushState` function.');
    },
    goBack: ()=>{
        throw new Error('You must use the `HistoryProvider` to access the `goBack` function.');
    }
});
const HistoryProvider = ({ children })=>{
    const location = reactRouterDom.useLocation();
    const navigationType = reactRouterDom.useNavigationType();
    const navigate = reactRouterDom.useNavigate();
    const [state, dispatch] = React__namespace.useReducer(reducer$1, {
        history: [],
        currentLocationIndex: 0,
        currentLocation: '',
        canGoBack: false
    });
    const isGoingBack = React__namespace.useRef(false);
    const pushState = React__namespace.useCallback((path)=>{
        dispatch({
            type: 'PUSH_STATE',
            payload: typeof path === 'string' ? {
                to: path,
                search: ''
            } : path
        });
    }, []);
    const goBack = React__namespace.useCallback(()=>{
        /**
     * Perform the browser back action, dispatch the goBack action to keep the state in sync
     * and set the ref to avoid an infinite loop and incorrect state pushing
     */ navigate(-1);
        dispatch({
            type: 'GO_BACK'
        });
        isGoingBack.current = true;
    }, [
        navigate
    ]);
    /**
   * This is a semi-listener pattern to keep the `canGoBack` state in sync.
   */ const prevIndex = React__namespace.useRef(state.currentLocationIndex);
    React__namespace.useEffect(()=>{
        if (state.currentLocationIndex !== prevIndex.current) {
            dispatch({
                type: 'SET_CAN_GO_BACK',
                payload: state.currentLocationIndex > 1 && state.history.length > 1
            });
            prevIndex.current = state.currentLocationIndex;
        }
    }, [
        prevIndex,
        state.currentLocationIndex,
        state.history.length
    ]);
    /**
   * This effect is responsible for pushing the new state to the history
   * when the user navigates to a new location assuming they're not going back.
   */ React__namespace.useLayoutEffect(()=>{
        if (isGoingBack.current) {
            isGoingBack.current = false;
        } else if (navigationType === 'REPLACE') {
            // Prevent appending to the history when the location changes via a replace:true navigation
            dispatch({
                type: 'REPLACE_STATE',
                payload: {
                    to: location.pathname,
                    search: location.search
                }
            });
        } else {
            // this should only occur on link movements, not back/forward clicks
            dispatch({
                type: 'PUSH_STATE',
                payload: {
                    to: location.pathname,
                    search: location.search
                }
            });
        }
    }, [
        dispatch,
        location.pathname,
        location.search,
        navigationType
    ]);
    return /*#__PURE__*/ jsxRuntime.jsx(Provider, {
        pushState: pushState,
        goBack: goBack,
        ...state,
        children: children
    });
};
const reducer$1 = (state, action)=>immer.produce(state, (draft)=>{
        switch(action.type){
            case 'PUSH_STATE':
                {
                    const path = `${action.payload.to}${action.payload.search}`;
                    if (state.currentLocationIndex === state.history.length) {
                        // add the new place
                        draft.history = [
                            ...state.history,
                            path
                        ];
                    } else {
                        // delete all the history after the current place and then add the new place
                        draft.history = [
                            ...state.history.slice(0, state.currentLocationIndex),
                            path
                        ];
                    }
                    draft.currentLocation = path;
                    draft.currentLocationIndex += 1;
                    break;
                }
            case 'REPLACE_STATE':
                {
                    const path = `${action.payload.to}${action.payload.search}`;
                    draft.history = [
                        ...state.history.slice(0, state.currentLocationIndex - 1),
                        path
                    ];
                    draft.currentLocation = path;
                    break;
                }
            case 'GO_BACK':
                {
                    const newIndex = state.currentLocationIndex - 1;
                    draft.currentLocation = state.history[newIndex - 1];
                    draft.currentLocationIndex = newIndex;
                    break;
                }
            case 'SET_CAN_GO_BACK':
                {
                    draft.canGoBack = action.payload;
                    break;
                }
        }
    });
/**
 * @beta
 * @description The universal back button for the Strapi application. This uses the internal history
 * context to navigate the user back to the previous location. It can be completely disabled in a
 * specific user case. When no history is available, you can provide a fallback destination,
 * otherwise the link will be disabled.
 */ const BackButton = /*#__PURE__*/ React__namespace.forwardRef(({ disabled, fallback = '' }, ref)=>{
    const { formatMessage } = reactIntl.useIntl();
    const navigate = reactRouterDom.useNavigate();
    const canGoBack = useHistory('BackButton', (state)=>state.canGoBack);
    const goBack = useHistory('BackButton', (state)=>state.goBack);
    const history = useHistory('BackButton', (state)=>state.history);
    const currentLocationIndex = useHistory('BackButton', (state)=>state.currentLocationIndex);
    const hasFallback = fallback !== '';
    const shouldBeDisabled = disabled || !canGoBack && !hasFallback;
    const handleClick = (e)=>{
        e.preventDefault();
        if (canGoBack) {
            goBack();
        } else if (hasFallback) {
            navigate(fallback);
        }
    };
    // The link destination from the history. Undefined if there is only 1 location in the history.
    const historyTo = canGoBack ? history.at(currentLocationIndex - 2) : undefined;
    // If no link destination from the history, use the fallback.
    const toWithFallback = historyTo ?? fallback;
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
        ref: ref,
        tag: reactRouterDom.NavLink,
        to: toWithFallback,
        onClick: handleClick,
        disabled: shouldBeDisabled,
        "aria-disabled": shouldBeDisabled,
        startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.ArrowLeft, {}),
        children: formatMessage({
            id: 'global.back',
            defaultMessage: 'Back'
        })
    });
});

const queryClient = new reactQuery.QueryClient({
    defaultOptions: {
        queries: {
            refetchOnWindowFocus: false
        }
    }
});
const Providers = ({ children, strapi, store })=>{
    return /*#__PURE__*/ jsxRuntime.jsx(Theme.StrapiAppProvider, {
        components: strapi.library.components,
        customFields: strapi.customFields,
        fields: strapi.library.fields,
        menu: strapi.router.menu,
        getAdminInjectedComponents: strapi.getAdminInjectedComponents,
        getPlugin: strapi.getPlugin,
        plugins: strapi.plugins,
        rbac: strapi.rbac,
        runHookParallel: strapi.runHookParallel,
        runHookWaterfall: (name, initialValue)=>strapi.runHookWaterfall(name, initialValue, store),
        runHookSeries: strapi.runHookSeries,
        settings: strapi.router.settings,
        children: /*#__PURE__*/ jsxRuntime.jsx(reactRedux.Provider, {
            store: store,
            children: /*#__PURE__*/ jsxRuntime.jsx(reactQuery.QueryClientProvider, {
                client: queryClient,
                children: /*#__PURE__*/ jsxRuntime.jsx(Theme.AuthProvider, {
                    children: /*#__PURE__*/ jsxRuntime.jsx(HistoryProvider, {
                        children: /*#__PURE__*/ jsxRuntime.jsx(Theme.LanguageProvider, {
                            messages: strapi.configurations.translations,
                            children: /*#__PURE__*/ jsxRuntime.jsx(Theme.Theme, {
                                themes: strapi.configurations.themes,
                                children: /*#__PURE__*/ jsxRuntime.jsx(Theme.NotificationsProvider, {
                                    children: /*#__PURE__*/ jsxRuntime.jsx(Theme.TrackingProvider, {
                                        children: /*#__PURE__*/ jsxRuntime.jsx(Theme.GuidedTourProvider, {
                                            children: /*#__PURE__*/ jsxRuntime.jsx(Theme.ConfigurationProvider, {
                                                defaultAuthLogo: strapi.configurations.authLogo,
                                                defaultMenuLogo: strapi.configurations.menuLogo,
                                                showReleaseNotification: strapi.configurations.notifications.releases,
                                                children: children
                                            })
                                        })
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })
    });
};

const App = ({ strapi, store })=>{
    React.useEffect(()=>{
        const language = localStorage.getItem(Theme.LANGUAGE_LOCAL_STORAGE_KEY) || 'en';
        if (language) {
            document.documentElement.lang = language;
        }
    }, []);
    return /*#__PURE__*/ jsxRuntime.jsx(Providers, {
        strapi: strapi,
        store: store,
        children: /*#__PURE__*/ jsxRuntime.jsx(React.Suspense, {
            fallback: /*#__PURE__*/ jsxRuntime.jsx(Theme.Page.Loading, {}),
            children: /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Outlet, {})
        })
    });
};

const useClipboard = ()=>{
    const copy = React.useCallback(async (value)=>{
        try {
            // only strings and numbers casted to strings can be copied to clipboard
            if (typeof value !== 'string' && typeof value !== 'number') {
                throw new Error(`Cannot copy typeof ${typeof value} to clipboard, must be a string or number`);
            } else if (value === '') {
                throw new Error(`Cannot copy empty string to clipboard.`);
            }
            const stringifiedValue = value.toString();
            await navigator.clipboard.writeText(stringifiedValue);
            return true;
        } catch (error) {
            /**
       * Realistically this isn't useful in production as there's nothing the user can do.
       */ if (process.env.NODE_ENV === 'development') {
                console.warn('Copy failed', error);
            }
            return false;
        }
    }, []);
    return {
        copy
    };
};

/**
 * @description this stops the app from going white, and instead shows the error message.
 * But it could be improved for sure.
 */ const ErrorElement = ()=>{
    const error = reactRouterDom.useRouteError();
    const { formatMessage } = reactIntl.useIntl();
    const { copy } = useClipboard();
    if (error instanceof Error) {
        console.error(error);
        const handleClick = async ()=>{
            await copy(`
\`\`\`
${error.stack}
\`\`\`
      `);
        };
        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Main, {
            height: "100%",
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                alignItems: "center",
                height: "100%",
                justifyContent: "center",
                children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                    gap: 7,
                    padding: 7,
                    direction: "column",
                    width: "35%",
                    shadow: "tableShadow",
                    borderColor: "neutral150",
                    background: "neutral0",
                    hasRadius: true,
                    maxWidth: "512px",
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                            direction: "column",
                            gap: 2,
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(icons.WarningCircle, {
                                    width: "32px",
                                    height: "32px",
                                    fill: "danger600"
                                }),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    fontSize: 4,
                                    fontWeight: "bold",
                                    textAlign: "center",
                                    children: formatMessage({
                                        id: 'app.error',
                                        defaultMessage: 'Something went wrong'
                                    })
                                }),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    variant: "omega",
                                    textAlign: "center",
                                    children: formatMessage({
                                        id: 'app.error.message',
                                        defaultMessage: `It seems like there is a bug in your instance, but we've got you covered. Please notify your technical team so they can investigate the source of the problem and report the issue to us by opening a bug report on {link}.`
                                    }, {
                                        link: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                                            isExternal: true,
                                            // hack to get rid of the current endIcon, which should be removable by using `null`.
                                            endIcon: true,
                                            href: "https://github.com/strapi/strapi/issues/new?assignees=&labels=&projects=&template=BUG_REPORT.md",
                                            children: `Strapi's GitHub`
                                        })
                                    })
                                })
                            ]
                        }),
                        /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                            gap: 4,
                            direction: "column",
                            width: "100%",
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(StyledAlert, {
                                    onClose: ()=>{},
                                    width: "100%",
                                    closeLabel: "",
                                    variant: "danger",
                                    children: /*#__PURE__*/ jsxRuntime.jsx(ErrorType, {
                                        children: error.message
                                    })
                                }),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                    onClick: handleClick,
                                    variant: "tertiary",
                                    startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.Duplicate, {}),
                                    children: formatMessage({
                                        id: 'app.error.copy',
                                        defaultMessage: 'Copy to clipboard'
                                    })
                                })
                            ]
                        })
                    ]
                })
            })
        });
    }
    throw error;
};
const StyledAlert = styledComponents.styled(designSystem.Alert)`
  & > div:first-child {
    display: none;
  }

  & > button {
    display: none;
  }
`;
const ErrorType = styledComponents.styled(designSystem.Typography)`
  word-break: break-all;
  color: ${({ theme })=>theme.colors.danger600};
`;

const ActionLayout = ({ startActions, endActions })=>{
    if (!startActions && !endActions) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
        justifyContent: "space-between",
        alignItems: "flex-start",
        paddingBottom: 4,
        paddingLeft: 10,
        paddingRight: 10,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                gap: 2,
                wrap: "wrap",
                children: startActions
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                gap: 2,
                shrink: 0,
                wrap: "wrap",
                children: endActions
            })
        ]
    });
};

const ContentLayout = ({ children })=>{
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
        paddingLeft: 10,
        paddingRight: 10,
        children: children
    });
};

const GridColSize = {
    S: 180,
    M: 250
};
const StyledGrid = styledComponents.styled(designSystem.Box)`
  display: grid;
  grid-template-columns: repeat(
    auto-fit,
    minmax(${({ $size })=>`${GridColSize[$size]}px`}, 1fr)
  );
  grid-gap: ${({ theme })=>theme.spaces[4]};
`;
const GridLayout = ({ size, children })=>{
    return /*#__PURE__*/ jsxRuntime.jsx(StyledGrid, {
        $size: size,
        children: children
    });
};

/**
 * Hook that returns a ref to an element and a boolean indicating if the element is in the viewport
 * or in the element specified in `options.root`.
 */ const useElementOnScreen = (onVisiblityChange, options)=>{
    const containerRef = React__namespace.useRef(null);
    React__namespace.useEffect(()=>{
        const containerEl = containerRef.current;
        const observer = new IntersectionObserver(([entry])=>{
            onVisiblityChange(entry.isIntersecting);
        }, options);
        if (containerEl) {
            observer.observe(containerRef.current);
        }
        return ()=>{
            if (containerEl) {
                observer.disconnect();
            }
        };
    }, [
        containerRef,
        options,
        onVisiblityChange
    ]);
    return containerRef;
};

const BaseHeaderLayout = /*#__PURE__*/ React__namespace.forwardRef(({ navigationAction, primaryAction, secondaryAction, subtitle, title, sticky, width, ...props }, ref)=>{
    const isSubtitleString = typeof subtitle === 'string';
    if (sticky) {
        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
            paddingLeft: 6,
            paddingRight: 6,
            paddingTop: 3,
            paddingBottom: 3,
            position: "fixed",
            top: 0,
            right: 0,
            background: "neutral0",
            shadow: "tableShadow",
            width: `${width}px`,
            zIndex: 1,
            "data-strapi-header-sticky": true,
            children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                justifyContent: "space-between",
                children: [
                    /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                        children: [
                            navigationAction && /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingRight: 3,
                                children: navigationAction
                            }),
                            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Box, {
                                children: [
                                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                        variant: "beta",
                                        tag: "h1",
                                        ...props,
                                        children: title
                                    }),
                                    isSubtitleString ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                        variant: "pi",
                                        textColor: "neutral600",
                                        children: subtitle
                                    }) : subtitle
                                ]
                            }),
                            secondaryAction ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingLeft: 4,
                                children: secondaryAction
                            }) : null
                        ]
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                        children: primaryAction ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                            paddingLeft: 2,
                            children: primaryAction
                        }) : undefined
                    })
                ]
            })
        });
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Box, {
        ref: ref,
        paddingLeft: 10,
        paddingRight: 10,
        paddingBottom: 8,
        paddingTop: navigationAction ? 6 : 8,
        background: "neutral100",
        "data-strapi-header": true,
        children: [
            navigationAction ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                paddingBottom: 2,
                children: navigationAction
            }) : null,
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                justifyContent: "space-between",
                children: [
                    /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                        minWidth: 0,
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                tag: "h1",
                                variant: "alpha",
                                ...props,
                                children: title
                            }),
                            secondaryAction ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingLeft: 4,
                                children: secondaryAction
                            }) : null
                        ]
                    }),
                    primaryAction
                ]
            }),
            isSubtitleString ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                variant: "epsilon",
                textColor: "neutral600",
                tag: "p",
                children: subtitle
            }) : subtitle
        ]
    });
});
const HeaderLayout = (props)=>{
    const baseHeaderLayoutRef = React__namespace.useRef(null);
    const [headerSize, setHeaderSize] = React__namespace.useState(null);
    const [isVisible, setIsVisible] = React__namespace.useState(true);
    const containerRef = useElementOnScreen(setIsVisible, {
        root: null,
        rootMargin: '0px',
        threshold: 0
    });
    useResizeObserver(containerRef, ()=>{
        if (containerRef.current) {
            setHeaderSize(containerRef.current.getBoundingClientRect());
        }
    });
    React__namespace.useEffect(()=>{
        if (baseHeaderLayoutRef.current) {
            setHeaderSize(baseHeaderLayoutRef.current.getBoundingClientRect());
        }
    }, [
        baseHeaderLayoutRef
    ]);
    return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx("div", {
                style: {
                    height: headerSize?.height
                },
                ref: containerRef,
                children: isVisible && /*#__PURE__*/ jsxRuntime.jsx(BaseHeaderLayout, {
                    ref: baseHeaderLayoutRef,
                    ...props
                })
            }),
            !isVisible && /*#__PURE__*/ jsxRuntime.jsx(BaseHeaderLayout, {
                ...props,
                sticky: true,
                width: headerSize?.width
            })
        ]
    });
};
HeaderLayout.displayName = 'HeaderLayout';
/**
 * useResizeObserver: hook that observes the size of an element and calls a callback when it changes.
 */ const useResizeObserver = (sources, onResize)=>{
    const handleResize = designSystem.useCallbackRef(onResize);
    React__namespace.useLayoutEffect(()=>{
        const resizeObs = new ResizeObserver(handleResize);
        if (Array.isArray(sources)) {
            sources.forEach((source)=>{
                if (source.current) {
                    resizeObs.observe(source.current);
                }
            });
        } else if (sources.current) {
            resizeObs.observe(sources.current);
        }
        return ()=>{
            resizeObs.disconnect();
        };
    }, [
        sources,
        handleResize
    ]);
};

const GridContainer = styledComponents.styled(designSystem.Box)`
  display: grid;
  grid-template-columns: ${({ $hasSideNav })=>$hasSideNav ? `auto 1fr` : '1fr'};
`;
const OverflowingItem = styledComponents.styled(designSystem.Box)`
  overflow-x: hidden;
`;
const RootLayout = ({ sideNav, children })=>{
    return /*#__PURE__*/ jsxRuntime.jsxs(GridContainer, {
        $hasSideNav: Boolean(sideNav),
        children: [
            sideNav,
            /*#__PURE__*/ jsxRuntime.jsx(OverflowingItem, {
                paddingBottom: 10,
                children: children
            })
        ]
    });
};
const Layouts = {
    Root: RootLayout,
    Header: HeaderLayout,
    BaseHeader: BaseHeaderLayout,
    Grid: GridLayout,
    Action: ActionLayout,
    Content: ContentLayout
};

const NotFoundPage = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsxs(Theme.Page.Main, {
        labelledBy: "title",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(Layouts.Header, {
                id: "title",
                title: formatMessage({
                    id: 'content-manager.pageNotFound',
                    defaultMessage: 'Page not found'
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(Layouts.Content, {
                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.EmptyStateLayout, {
                    action: /*#__PURE__*/ jsxRuntime.jsx(designSystem.LinkButton, {
                        tag: reactRouterDom.Link,
                        variant: "secondary",
                        endIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.ArrowRight, {}),
                        to: "/",
                        children: formatMessage({
                            id: 'app.components.NotFoundPage.back',
                            defaultMessage: 'Back to homepage'
                        })
                    }),
                    content: formatMessage({
                        id: 'app.page.not.found',
                        defaultMessage: "Oops! We can't seem to find the page you're looging for..."
                    }),
                    hasRadius: true,
                    icon: /*#__PURE__*/ jsxRuntime.jsx(symbols.EmptyPictures, {
                        width: "16rem"
                    }),
                    shadow: "tableShadow"
                })
            })
        ]
    });
};

/**
 * All these routes are relative to the `/admin/settings/*` route
 * as such their path should not start with a `/` or include the `/settings` prefix.
 */ const getEERoutes = ()=>[
        ...window.strapi.features.isEnabled(window.strapi.features.AUDIT_LOGS) ? [
            {
                path: 'audit-logs',
                lazy: async ()=>{
                    const { ProtectedListPage } = await Promise.resolve().then(function () { return require('./ListPage-BRHFLTin.js'); });
                    return {
                        Component: ProtectedListPage
                    };
                }
            }
        ] : [],
        ...window.strapi.features.isEnabled(window.strapi.features.SSO) ? [
            {
                path: 'single-sign-on',
                lazy: async ()=>{
                    const { ProtectedSSO } = await Promise.resolve().then(function () { return require('./SingleSignOnPage-wTeDevXj.js'); });
                    return {
                        Component: ProtectedSSO
                    };
                }
            }
        ] : []
    ];

/**
 * @internal
 * @description We use this just to warn people that they're using the useForm
 * methods outside of a Form component, but we don't want to throw an error
 * because otherwise the DocumentActions list cannot be rendered in our list-view.
 */ const ERR_MSG = 'The Form Component has not been initialised, ensure you are using this hook within a Form component';
const [FormProvider, useForm] = Theme.createContext('Form', {
    disabled: false,
    errors: {},
    initialValues: {},
    isSubmitting: false,
    modified: false,
    addFieldRow: ()=>{
        throw new Error(ERR_MSG);
    },
    moveFieldRow: ()=>{
        throw new Error(ERR_MSG);
    },
    onChange: ()=>{
        throw new Error(ERR_MSG);
    },
    removeFieldRow: ()=>{
        throw new Error(ERR_MSG);
    },
    resetForm: ()=>{
        throw new Error(ERR_MSG);
    },
    setErrors: ()=>{
        throw new Error(ERR_MSG);
    },
    setValues: ()=>{
        throw new Error(ERR_MSG);
    },
    setSubmitting: ()=>{
        throw new Error(ERR_MSG);
    },
    validate: async ()=>{
        throw new Error(ERR_MSG);
    },
    values: {}
});
/**
 * @alpha
 * @description A form component that handles form state, validation and submission.
 * It can additionally handle nested fields and arrays. To access the data you can either
 * use the generic useForm hook or the useField hook when providing the name of your field.
 */ const Form = /*#__PURE__*/ React__namespace.forwardRef(({ disabled = false, method, onSubmit, initialErrors, ...props }, ref)=>{
    const formRef = React__namespace.useRef(null);
    const initialValues = React__namespace.useRef(props.initialValues ?? {});
    const [state, dispatch] = React__namespace.useReducer(reducer, {
        errors: initialErrors ?? {},
        isSubmitting: false,
        values: props.initialValues ?? {}
    });
    React__namespace.useEffect(()=>{
        /**
       * ONLY update the initialValues if the prop has changed.
       */ if (!isEqual(initialValues.current, props.initialValues)) {
            initialValues.current = props.initialValues ?? {};
            dispatch({
                type: 'SET_INITIAL_VALUES',
                payload: props.initialValues ?? {}
            });
        }
    }, [
        props.initialValues
    ]);
    const setErrors = React__namespace.useCallback((errors)=>{
        dispatch({
            type: 'SET_ERRORS',
            payload: errors
        });
    }, []);
    const setValues = React__namespace.useCallback((values)=>{
        dispatch({
            type: 'SET_VALUES',
            payload: values
        });
    }, []);
    React__namespace.useEffect(()=>{
        if (Object.keys(state.errors).length === 0) return;
        /**
       * Small timeout to ensure the form has been
       * rendered before we try to focus on the first
       */ const ref = setTimeout(()=>{
            const [firstError] = formRef.current.querySelectorAll('[data-strapi-field-error]');
            if (firstError) {
                const errorId = firstError.getAttribute('id');
                const formElementInError = formRef.current.querySelector(`[aria-describedby="${errorId}"]`);
                if (formElementInError && formElementInError instanceof HTMLElement) {
                    formElementInError.focus();
                }
            }
        });
        return ()=>clearTimeout(ref);
    }, [
        state.errors
    ]);
    /**
     * Uses the provided validation schema
     */ const validate = React__namespace.useCallback(async (shouldSetErrors = true, options = {})=>{
        setErrors({});
        if (!props.validationSchema && !props.validate) {
            return {
                data: state.values
            };
        }
        try {
            let data;
            if (props.validationSchema) {
                data = await props.validationSchema.validate(state.values, {
                    abortEarly: false
                });
            } else if (props.validate) {
                data = await props.validate(state.values, options);
            } else {
                throw new Error('No validation schema or validate function provided');
            }
            return {
                data
            };
        } catch (err) {
            if (isErrorYupValidationError(err)) {
                const errors = getYupValidationErrors(err);
                if (shouldSetErrors) {
                    setErrors(errors);
                }
                return {
                    errors
                };
            } else {
                // We throw any other errors
                if (process.env.NODE_ENV !== 'production') {
                    console.warn(`Warning: An unhandled error was caught during validation in <Form validationSchema />`, err);
                }
                throw err;
            }
        }
    }, [
        props,
        setErrors,
        state.values
    ]);
    const handleSubmit = async (e)=>{
        e.stopPropagation();
        e.preventDefault();
        if (!onSubmit) {
            return;
        }
        dispatch({
            type: 'SUBMIT_ATTEMPT'
        });
        try {
            const { data, errors } = await validate();
            if (errors) {
                setErrors(errors);
                throw new Error('Submission failed');
            }
            await onSubmit(data, {
                setErrors,
                setValues,
                resetForm
            });
            dispatch({
                type: 'SUBMIT_SUCCESS'
            });
        } catch (err) {
            dispatch({
                type: 'SUBMIT_FAILURE'
            });
            if (err instanceof Error && err.message === 'Submission failed') {
                return;
            }
        }
    };
    const modified = React__namespace.useMemo(()=>!isEqual(initialValues.current, state.values), [
        state.values
    ]);
    const handleChange = designSystem.useCallbackRef((eventOrPath, v)=>{
        if (typeof eventOrPath === 'string') {
            dispatch({
                type: 'SET_FIELD_VALUE',
                payload: {
                    field: eventOrPath,
                    value: v
                }
            });
            return;
        }
        const target = eventOrPath.target || eventOrPath.currentTarget;
        const { type, name, id, value, options, multiple } = target;
        const field = name || id;
        if (!field && process.env.NODE_ENV !== 'production') {
            console.warn(`\`onChange\` was called with an event, but you forgot to pass a \`name\` or \`id'\` attribute to your input. The field to update cannot be determined`);
        }
        /**
       * Because we handle any field from this function, we run through a series
       * of checks to understand how to use the value.
       */ let val;
        if (/number|range/.test(type)) {
            const parsed = parseFloat(value);
            // If the value isn't a number for whatever reason, don't let it through because that will break the API.
            val = isNaN(parsed) ? '' : parsed;
        } else if (/checkbox/.test(type)) {
            // Get & invert the current value of the checkbox.
            val = !Theme.getIn(state.values, field);
        } else if (options && multiple) {
            // This will handle native select elements incl. ones with mulitple options.
            val = Array.from(options).filter((el)=>el.selected).map((el)=>el.value);
        } else {
            // NOTE: reset value to null so it failes required checks.
            // The API only considers a required field invalid if the value is null|undefined, to differentiate from min 1
            if (value === '') {
                val = null;
            } else {
                val = value;
            }
        }
        if (field) {
            dispatch({
                type: 'SET_FIELD_VALUE',
                payload: {
                    field,
                    value: val
                }
            });
        }
    });
    const addFieldRow = React__namespace.useCallback((field, value, addAtIndex)=>{
        dispatch({
            type: 'ADD_FIELD_ROW',
            payload: {
                field,
                value,
                addAtIndex
            }
        });
    }, []);
    const removeFieldRow = React__namespace.useCallback((field, removeAtIndex)=>{
        dispatch({
            type: 'REMOVE_FIELD_ROW',
            payload: {
                field,
                removeAtIndex
            }
        });
    }, []);
    const moveFieldRow = React__namespace.useCallback((field, fromIndex, toIndex)=>{
        dispatch({
            type: 'MOVE_FIELD_ROW',
            payload: {
                field,
                fromIndex,
                toIndex
            }
        });
    }, []);
    const resetForm = React__namespace.useCallback(()=>{
        dispatch({
            type: 'RESET_FORM',
            payload: {
                errors: {},
                isSubmitting: false,
                values: initialValues.current
            }
        });
    }, []);
    const setSubmitting = React__namespace.useCallback((isSubmitting)=>{
        dispatch({
            type: 'SET_ISSUBMITTING',
            payload: isSubmitting
        });
    }, []);
    const composedRefs = designSystem.useComposedRefs(formRef, ref);
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
        tag: "form",
        ref: composedRefs,
        method: method,
        noValidate: true,
        onSubmit: handleSubmit,
        width: props.width,
        height: props.height,
        children: /*#__PURE__*/ jsxRuntime.jsx(FormProvider, {
            disabled: disabled,
            onChange: handleChange,
            initialValues: initialValues.current,
            modified: modified,
            addFieldRow: addFieldRow,
            moveFieldRow: moveFieldRow,
            removeFieldRow: removeFieldRow,
            resetForm: resetForm,
            setErrors: setErrors,
            setValues: setValues,
            setSubmitting: setSubmitting,
            validate: validate,
            ...state,
            children: typeof props.children === 'function' ? props.children({
                modified,
                disabled,
                onChange: handleChange,
                ...state,
                setErrors,
                resetForm
            }) : props.children
        })
    });
}); // we've cast this because we need the generic to infer the type of the form values.
/**
 * @internal
 * @description Checks if the error is a Yup validation error.
 */ const isErrorYupValidationError = (err)=>typeof err === 'object' && err !== null && 'name' in err && typeof err.name === 'string' && err.name === 'ValidationError';
/* -------------------------------------------------------------------------------------------------
 * getYupValidationErrors
 * -----------------------------------------------------------------------------------------------*/ /**
 * @description handy utility to convert a yup validation error into a form
 * error object. To be used elsewhere.
 */ const getYupValidationErrors = (err)=>{
    let errors = {};
    if (err.inner) {
        if (err.inner.length === 0) {
            return Theme.setIn(errors, err.path, err.message);
        }
        for (const error of err.inner){
            if (!Theme.getIn(errors, error.path)) {
                errors = Theme.setIn(errors, error.path, error.message);
            }
        }
    }
    return errors;
};
const reducer = (state, action)=>immer.produce(state, (draft)=>{
        switch(action.type){
            case 'SET_INITIAL_VALUES':
                // @ts-expect-error – TODO: figure out why this fails ts.
                draft.values = action.payload;
                break;
            case 'SET_VALUES':
                // @ts-expect-error – TODO: figure out why this fails ts.
                draft.values = action.payload;
                break;
            case 'SUBMIT_ATTEMPT':
                draft.isSubmitting = true;
                break;
            case 'SUBMIT_FAILURE':
                draft.isSubmitting = false;
                break;
            case 'SUBMIT_SUCCESS':
                draft.isSubmitting = false;
                break;
            case 'SET_FIELD_VALUE':
                draft.values = Theme.setIn(state.values, action.payload.field, action.payload.value);
                break;
            case 'ADD_FIELD_ROW':
                {
                    /**
         * TODO: add check for if the field is an array?
         */ const currentField = Theme.getIn(state.values, action.payload.field, []);
                    let position = action.payload.addAtIndex;
                    if (position === undefined) {
                        position = currentField.length;
                    } else if (position < 0) {
                        position = 0;
                    }
                    const [key] = fractionalIndexing.generateNKeysBetween(position > 0 ? currentField.at(position - 1)?.__temp_key__ : null, currentField.at(position)?.__temp_key__, 1);
                    draft.values = Theme.setIn(state.values, action.payload.field, currentField.toSpliced(position, 0, {
                        ...action.payload.value,
                        __temp_key__: key
                    }));
                    break;
                }
            case 'MOVE_FIELD_ROW':
                {
                    const { field, fromIndex, toIndex } = action.payload;
                    /**
         * TODO: add check for if the field is an array?
         */ const currentField = [
                        ...Theme.getIn(state.values, field, [])
                    ];
                    const currentRow = currentField[fromIndex];
                    const startKey = fromIndex > toIndex ? currentField[toIndex - 1]?.__temp_key__ : currentField[toIndex]?.__temp_key__;
                    const endKey = fromIndex > toIndex ? currentField[toIndex]?.__temp_key__ : currentField[toIndex + 1]?.__temp_key__;
                    const [newKey] = fractionalIndexing.generateNKeysBetween(startKey, endKey, 1);
                    currentField.splice(fromIndex, 1);
                    currentField.splice(toIndex, 0, {
                        ...currentRow,
                        __temp_key__: newKey
                    });
                    draft.values = Theme.setIn(state.values, field, currentField);
                    break;
                }
            case 'REMOVE_FIELD_ROW':
                {
                    /**
         * TODO: add check for if the field is an array?
         */ const currentField = Theme.getIn(state.values, action.payload.field, []);
                    let position = action.payload.removeAtIndex;
                    if (position === undefined) {
                        position = currentField.length - 1;
                    } else if (position < 0) {
                        position = 0;
                    }
                    /**
         * filter out empty values from the array, the setIn function only deletes the value
         * when we pass undefined as opposed to "removing" it from said array.
         */ const newValue = Theme.setIn(currentField, position.toString(), undefined).filter((val)=>val);
                    draft.values = Theme.setIn(state.values, action.payload.field, newValue.length > 0 ? newValue : []);
                    break;
                }
            case 'SET_ERRORS':
                if (!isEqual(state.errors, action.payload)) {
                    // @ts-expect-error – TODO: figure out why this fails a TS check.
                    draft.errors = action.payload;
                }
                break;
            case 'SET_ISSUBMITTING':
                draft.isSubmitting = action.payload;
                break;
            case 'RESET_FORM':
                // @ts-expect-error – TODO: figure out why this fails ts.
                draft.values = action.payload.values;
                // @ts-expect-error – TODO: figure out why this fails ts.
                draft.errors = action.payload.errors;
                draft.isSubmitting = action.payload.isSubmitting;
                break;
        }
    });
function useField(path) {
    const { formatMessage } = reactIntl.useIntl();
    const initialValue = useForm('useField', (state)=>Theme.getIn(state.initialValues, path));
    const value = useForm('useField', (state)=>Theme.getIn(state.values, path));
    const handleChange = useForm('useField', (state)=>state.onChange);
    const rawError = useForm('useField', (state)=>Theme.getIn(state.errors, path));
    const error = useForm('useField', (state)=>{
        const error = Theme.getIn(state.errors, path);
        if (isErrorMessageDescriptor(error)) {
            const { values, ...message } = error;
            return formatMessage(message, values);
        }
        return error;
    });
    return {
        initialValue,
        /**
     * Errors can be a string, or a MessageDescriptor, so we need to handle both cases.
     * If it's anything else, we don't return it.
     */ rawError,
        error: isErrorMessageDescriptor(error) ? formatMessage({
            id: error.id,
            defaultMessage: error.defaultMessage
        }, error.values) : typeof error === 'string' ? error : undefined,
        onChange: handleChange,
        value: value
    };
}
const isErrorMessageDescriptor = (object)=>{
    return typeof object === 'object' && object !== null && !Array.isArray(object) && 'id' in object && 'defaultMessage' in object;
};
/* -------------------------------------------------------------------------------------------------
 * Blocker
 * -----------------------------------------------------------------------------------------------*/ const Blocker = ({ onProceed = ()=>{}, onCancel = ()=>{} })=>{
    const { formatMessage } = reactIntl.useIntl();
    const modified = useForm('Blocker', (state)=>state.modified);
    const isSubmitting = useForm('Blocker', (state)=>state.isSubmitting);
    const blocker = reactRouterDom.useBlocker(({ currentLocation, nextLocation })=>{
        return !isSubmitting && modified && (currentLocation.pathname !== nextLocation.pathname || currentLocation.search !== nextLocation.search);
    });
    if (blocker.state === 'blocked') {
        const handleCancel = (isOpen)=>{
            if (!isOpen) {
                onCancel();
                blocker.reset();
            }
        };
        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Root, {
            open: true,
            onOpenChange: handleCancel,
            children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Dialog.Content, {
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Header, {
                        children: formatMessage({
                            id: 'app.components.ConfirmDialog.title',
                            defaultMessage: 'Confirmation'
                        })
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Body, {
                        icon: /*#__PURE__*/ jsxRuntime.jsx(icons.WarningCircle, {
                            width: "24px",
                            height: "24px",
                            fill: "danger600"
                        }),
                        children: formatMessage({
                            id: 'global.prompt.unsaved',
                            defaultMessage: 'You have unsaved changes, are you sure you want to leave?'
                        })
                    }),
                    /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Dialog.Footer, {
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Cancel, {
                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                    variant: "tertiary",
                                    children: formatMessage({
                                        id: 'app.components.Button.cancel',
                                        defaultMessage: 'Cancel'
                                    })
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                onClick: ()=>{
                                    onProceed();
                                    blocker.proceed();
                                },
                                variant: "danger",
                                children: formatMessage({
                                    id: 'app.components.Button.confirm',
                                    defaultMessage: 'Confirm'
                                })
                            })
                        ]
                    })
                ]
            })
        });
    }
    return null;
};

/**
 * @description Given the name of an input field (this does not need to be the name you pass as a prop to the DOM element),
 * when the query param `field` matches the name the field will be focused & scrolled into the center of the view.
 * Uses a callback ref to set the field to ensure asynchronous rendering of inputs does not cause issues e.g. CodeMirror.EditView
 *
 * @example
 * ```tsx
 * const fieldRef = useFocusInputField('name');
 *
 * return (
 *  <input ref={fieldRef} />
 * );
 * ```
 */ const useFocusInputField = (name)=>{
    const { search: searchString } = reactRouterDom.useLocation();
    const search = React.useMemo(()=>new URLSearchParams(searchString), [
        searchString
    ]);
    /**
   * TODO: remove union and just use `HTMLElement`
   *
   * Realistically, it will only be an `HTMLElement` but `TextInput` in the design-system
   * has an imperativeHandle we can't remove until v2 of the design-system.
   */ const [field, setField] = React.useState(null);
    React.useEffect(()=>{
        if (search.has('field') && search.get('field') === name && field) {
            field.focus();
            field.scrollIntoView({
                block: 'center'
            });
        }
    }, [
        search,
        name,
        field
    ]);
    return setField;
};

const BooleanInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const { formatMessage } = reactIntl.useIntl();
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        maxWidth: "320px",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Toggle, {
                ref: composedRefs,
                checked: field.value === null ? null : field.value || false,
                offLabel: formatMessage({
                    id: 'app.components.ToggleCheckbox.off-label',
                    defaultMessage: 'False'
                }),
                onLabel: formatMessage({
                    id: 'app.components.ToggleCheckbox.on-label',
                    defaultMessage: 'True'
                }),
                onChange: field.onChange,
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedBooleanInput = /*#__PURE__*/ React.memo(BooleanInput);

const CheckboxInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, type: _type, ...props }, ref)=>{
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Checkbox, {
                onCheckedChange: (checked)=>field.onChange(name, !!checked),
                ref: composedRefs,
                checked: field.value,
                ...props,
                children: label || props['aria-label']
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedCheckboxInput = /*#__PURE__*/ React.memo(CheckboxInput);

const DateInput = /*#__PURE__*/ React__namespace.forwardRef(({ name, required, label, hint, labelAction, type: _type, ...props }, ref)=>{
    const { formatMessage } = reactIntl.useIntl();
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    const [lastValidDate, setLastValidDate] = React__namespace.useState(null);
    const value = typeof field.value === 'string' ? new Date(field.value) : field.value;
    const handleDateChange = (date)=>{
        if (!date) {
            field.onChange(name, null);
            setLastValidDate(null);
            return;
        }
        // Convert to UTC midnight
        const utcDate = toUTCMidnight(date);
        // Save as ISO string in UTC format
        field.onChange(name, utcDate.toISOString());
        setLastValidDate(utcDate);
    };
    // Render the DatePicker with UTC date
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.DatePicker, {
                ref: composedRefs,
                clearLabel: formatMessage({
                    id: 'clearLabel',
                    defaultMessage: 'Clear'
                }),
                onChange: handleDateChange,
                onClear: ()=>{
                    field.onChange(name, null);
                    setLastValidDate(null);
                    return;
                },
                onBlur: ()=>{
                    // When the input is blurred, revert to the last valid date if the current value is invalid
                    if (field.value && !value) {
                        field.onChange(name, lastValidDate?.toISOString() ?? null);
                    }
                },
                value: value,
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
// Ensure the conversion to UTC midnight
const toUTCMidnight = (date)=>{
    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
};
const MemoizedDateInput = /*#__PURE__*/ React__namespace.memo(DateInput);

const DateTimeInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const { formatMessage } = reactIntl.useIntl();
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    const value = typeof field.value === 'string' ? new Date(field.value) : field.value;
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.DateTimePicker, {
                ref: composedRefs,
                clearLabel: formatMessage({
                    id: 'clearLabel',
                    defaultMessage: 'Clear'
                }),
                onChange: (date)=>{
                    // Store ISO string in the field, but Date object in the component value
                    field.onChange(name, date ? date.toISOString() : null);
                },
                onClear: ()=>field.onChange(name, null),
                value: value,
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedDateTimeInput = /*#__PURE__*/ React.memo(DateTimeInput);

const EmailInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TextInput, {
                ref: composedRefs,
                autoComplete: "email",
                onChange: field.onChange,
                value: field.value,
                ...props,
                type: "email"
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedEmailInput = /*#__PURE__*/ React.memo(EmailInput);

const EnumerationInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, options = [], ...props }, ref)=>{
    const { formatMessage } = reactIntl.useIntl();
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.SingleSelect, {
                ref: composedRefs,
                onChange: (value)=>{
                    field.onChange(name, value);
                },
                value: field.value,
                ...props,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                        value: "",
                        disabled: required,
                        hidden: required,
                        children: formatMessage({
                            id: 'components.InputSelect.option.placeholder',
                            defaultMessage: 'Choose here'
                        })
                    }),
                    options.map(({ value, label, disabled, hidden })=>{
                        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                            value: value,
                            disabled: disabled,
                            hidden: hidden,
                            children: label ?? value
                        }, value);
                    })
                ]
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedEnumerationInput = /*#__PURE__*/ React.memo(EnumerationInput);

const JsonInput = /*#__PURE__*/ React__namespace.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.JSONInput, {
                ref: composedRefs,
                value: typeof field.value == 'object' ? JSON.stringify(field.value, null, 2) : field.value,
                onChange: (json)=>{
                    // Default to null when the field is not required and there is no input value
                    const value = required && !json.length ? null : json;
                    field.onChange(name, value);
                },
                minHeight: `25.2rem`,
                maxHeight: `50.4rem`,
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedJsonInput = /*#__PURE__*/ React__namespace.memo(JsonInput);

const NumberInputImpl = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, type, ...props }, ref)=>{
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.NumberInput, {
                ref: composedRefs,
                onValueChange: (value)=>{
                    // Convert undefined to null to store it in the form state
                    // See https://github.com/strapi/strapi/issues/22533
                    field.onChange(name, value ?? null);
                },
                step: type === 'float' || type == 'decimal' ? 0.01 : 1,
                value: field.value ?? undefined,
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedNumberInput = /*#__PURE__*/ React.memo(NumberInputImpl);

const PasswordInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const [showPassword, setShowPassword] = React.useState(false);
    const { formatMessage } = reactIntl.useIntl();
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TextInput, {
                ref: composedRefs,
                autoComplete: "password",
                endAction: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Action, {
                    label: formatMessage({
                        id: 'Auth.form.password.show-password',
                        defaultMessage: 'Show password'
                    }),
                    onClick: ()=>{
                        setShowPassword((prev)=>!prev);
                    },
                    children: showPassword ? /*#__PURE__*/ jsxRuntime.jsx(icons.Eye, {
                        fill: "neutral500"
                    }) : /*#__PURE__*/ jsxRuntime.jsx(icons.EyeStriked, {
                        fill: "neutral500"
                    })
                }),
                onChange: field.onChange,
                value: field.value,
                ...props,
                type: showPassword ? 'text' : 'password'
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedPasswordInput = /*#__PURE__*/ React.memo(PasswordInput);

const StringInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TextInput, {
                ref: composedRefs,
                onChange: field.onChange,
                value: field.value ?? '',
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedStringInput = /*#__PURE__*/ React.memo(StringInput);

const TextareaInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Textarea, {
                ref: composedRefs,
                onChange: field.onChange,
                value: field.value ?? '',
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedTextareaInput = /*#__PURE__*/ React.memo(TextareaInput);

const TimeInput = /*#__PURE__*/ React.forwardRef(({ name, required, label, hint, labelAction, ...props }, ref)=>{
    const { formatMessage } = reactIntl.useIntl();
    const field = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: field.error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TimePicker, {
                ref: composedRefs,
                clearLabel: formatMessage({
                    id: 'clearLabel',
                    defaultMessage: 'Clear'
                }),
                onChange: (time)=>{
                    field.onChange(name, `${time}:00.000`);
                },
                onClear: ()=>field.onChange(name, undefined),
                value: field.value ?? '',
                ...props
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedTimeInput = /*#__PURE__*/ React.memo(TimeInput);

/* -------------------------------------------------------------------------------------------------
 * InputRenderer
 * -----------------------------------------------------------------------------------------------*/ /**
 * @internal This needs to be tested before being exposed as a public API.
 * @experimental
 * @description A generic form renderer for Strapi forms. Similar to GenericInputs but with a different API.
 * The entire component is memoized to avoid re-renders in large forms.
 */ const InputRenderer = /*#__PURE__*/ React.memo(/*#__PURE__*/ React.forwardRef((props, forwardRef)=>{
    switch(props.type){
        case 'biginteger':
        case 'timestamp':
        case 'string':
        case 'uid':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedStringInput, {
                ref: forwardRef,
                ...props
            });
        case 'boolean':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedBooleanInput, {
                ref: forwardRef,
                ...props
            });
        case 'checkbox':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedCheckboxInput, {
                ref: forwardRef,
                ...props
            });
        case 'datetime':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedDateTimeInput, {
                ref: forwardRef,
                ...props
            });
        case 'date':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedDateInput, {
                ref: forwardRef,
                ...props
            });
        case 'decimal':
        case 'float':
        case 'integer':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedNumberInput, {
                ref: forwardRef,
                ...props
            });
        case 'json':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedJsonInput, {
                ref: forwardRef,
                ...props
            });
        case 'email':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedEmailInput, {
                ref: forwardRef,
                ...props
            });
        case 'enumeration':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedEnumerationInput, {
                ref: forwardRef,
                ...props
            });
        case 'password':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedPasswordInput, {
                ref: forwardRef,
                ...props
            });
        case 'text':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedTextareaInput, {
                ref: forwardRef,
                ...props
            });
        case 'time':
            return /*#__PURE__*/ jsxRuntime.jsx(MemoizedTimeInput, {
                ref: forwardRef,
                ...props
            });
        default:
            // This is cast because this renderer tackles all the possibilities of the InputProps, but this is for runtime catches.
            return /*#__PURE__*/ jsxRuntime.jsx(NotSupportedField, {
                ref: forwardRef,
                ...props
            });
    }
}));
const NotSupportedField = /*#__PURE__*/ React.forwardRef(({ label, hint, name, required, type, labelAction }, ref)=>{
    const { error } = useField(name);
    const fieldRef = useFocusInputField(name);
    const composedRefs = designSystem.useComposedRefs(ref, fieldRef);
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
        error: error,
        name: name,
        hint: hint,
        required: required,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                action: labelAction,
                children: label
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.TextInput, {
                ref: composedRefs,
                disabled: true,
                placeholder: `Unsupported field type: ${type}`,
                required: required,
                type: "text",
                value: ""
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {}),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Error, {})
        ]
    });
});
const MemoizedInputRenderer = /*#__PURE__*/ React.memo(InputRenderer);

const Img = styledComponents.styled.img`
  height: 7.2rem;
`;
const Logo = ()=>{
    const { logos: { auth } } = Theme.useConfiguration('UnauthenticatedLogo');
    return /*#__PURE__*/ jsxRuntime.jsx(Img, {
        src: auth?.custom?.url || auth.default,
        "aria-hidden": true,
        alt: ""
    });
};

const Wrapper = styledComponents.styled(designSystem.Box)`
  margin: 0 auto;
  width: 552px;
`;
const Column = styledComponents.styled(designSystem.Flex)`
  flex-direction: column;
`;
const LocaleToggle = ()=>{
    const localeNames = Theme.useTypedSelector((state)=>state.admin_app.language.localeNames);
    const dispatch = Theme.useTypedDispatch();
    const { formatMessage, locale } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelect, {
        "aria-label": formatMessage({
            id: 'global.localeToggle.label',
            defaultMessage: 'Select interface language'
        }),
        value: locale,
        onChange: (language)=>{
            dispatch(Theme.setLocale(language));
        },
        children: Object.entries(localeNames).map(([language, name])=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                value: language,
                children: name
            }, language))
    });
};
const LayoutContent = ({ children })=>/*#__PURE__*/ jsxRuntime.jsx(Wrapper, {
        shadow: "tableShadow",
        hasRadius: true,
        paddingTop: 9,
        paddingBottom: 9,
        paddingLeft: 10,
        paddingRight: 10,
        background: "neutral0",
        children: children
    });
const UnauthenticatedLayout = ({ children })=>{
    return /*#__PURE__*/ jsxRuntime.jsxs("div", {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                tag: "header",
                justifyContent: "flex-end",
                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                    paddingTop: 6,
                    paddingRight: 8,
                    children: /*#__PURE__*/ jsxRuntime.jsx(LocaleToggle, {})
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                paddingTop: 2,
                paddingBottom: 11,
                children: children
            })
        ]
    });
};

/**
 * Object containing error messages for input validations.
 * @property {Object} email - Error message for invalid email.
 * @property {string} email.id - Identifier for the error message.
 * @property {string} email.defaultMessage - Default error message for invalid email.
 * @property {Object} json - Error message for invalid JSON format.
 * @property {string} json.id - Identifier for the error message.
 * @property {string} json.defaultMessage - Default error message for invalid JSON format.
 * @property {Object} lowercase - Error message for non-lowercase string.
 * @property {string} lowercase.id - Identifier for the error message.
 * @property {string} lowercase.defaultMessage - Default error message for non-lowercase string.
 * @property {Object} max - Error message for value exceeding maximum.
 * @property {string} max.id - Identifier for the error message.
 * @property {string} max.defaultMessage - Default error message for value exceeding maximum.
 * @property {Object} maxLength - Error message for string length exceeding maximum.
 * @property {string} maxLength.id - Identifier for the error message.
 * @property {string} maxLength.defaultMessage - Default error message for string length exceeding maximum.
 * @property {Object} min - Error message for value less than minimum.
 * @property {string} min.id - Identifier for the error message.
 * @property {string} min.defaultMessage - Default error message for value less than minimum.
 * @property {Object} minLength - Error message for string length less than minimum.
 * @property {string} minLength.id - Identifier for the error message.
 * @property {string} minLength.defaultMessage - Default error message for string length less than minimum.
 * @property {Object} regex - Error message for value not matching regex pattern.
 * @property {string} regex.id - Identifier for the error message.
 * @property {string} regex.defaultMessage - Default error message for value not matching regex pattern.
 * @property {Object} required - Error message for required value.
 * @property {string} required.id - Identifier for the error message.
 * @property {string} required.defaultMessage - Default error message for required value.
 * @property {Object} string - Error message for non-string value.
 * @property {string} string.id - Identifier for the error message.
 * @property {string} string.defaultMessage - Default error message for non-string value.
 * @property {Object} unique - Error message for non-unique value.
 * @property {string} unique.id - Identifier for the error message.
 * @property {string} unique.defaultMessage - Default error message for non-unique value.
 * @property {Object} integer - Error message for non-integer value.
 * @property {string} integer.id - Identifier for the error message.
 * @property {string} integer.defaultMessage - Default error message for non-integer value.
 */ const errorsTrads = {
    email: {
        id: 'components.Input.error.validation.email',
        defaultMessage: 'This is not a valid email.'
    },
    json: {
        id: 'components.Input.error.validation.json',
        defaultMessage: "This doesn't match the JSON format"
    },
    lowercase: {
        id: 'components.Input.error.validation.lowercase',
        defaultMessage: 'The value must be a lowercase string'
    },
    max: {
        id: 'components.Input.error.validation.max',
        defaultMessage: 'The value is too high (max: {max}).'
    },
    maxLength: {
        id: 'components.Input.error.validation.maxLength',
        defaultMessage: 'The value is too long (max: {max}).'
    },
    min: {
        id: 'components.Input.error.validation.min',
        defaultMessage: 'The value is too low (min: {min}).'
    },
    minLength: {
        id: 'components.Input.error.validation.minLength',
        defaultMessage: 'The value is too short (min: {min}).'
    },
    regex: {
        id: 'components.Input.error.validation.regex',
        defaultMessage: 'The value does not match the regex.'
    },
    required: {
        id: 'components.Input.error.validation.required',
        defaultMessage: 'This value is required.'
    },
    string: {
        id: 'components.Input.error.validation.string',
        defaultMessage: 'This is not a valid string.'
    },
    unique: {
        id: 'components.Input.error.validation.unique',
        defaultMessage: 'This value is already used.'
    },
    integer: {
        id: 'component.Input.error.validation.integer',
        defaultMessage: 'The value must be an integer'
    }
};

const LOGIN_SCHEMA = yup__namespace.object().shape({
    email: yup__namespace.string().nullable().email({
        id: errorsTrads.email.id,
        defaultMessage: 'Not a valid email'
    }).required(errorsTrads.required),
    password: yup__namespace.string().required(errorsTrads.required).nullable(),
    rememberMe: yup__namespace.bool().nullable()
});
const Login = ({ children })=>{
    const [apiError, setApiError] = React__namespace.useState();
    const { formatMessage } = reactIntl.useIntl();
    const { search: searchString } = reactRouterDom.useLocation();
    const query = React__namespace.useMemo(()=>new URLSearchParams(searchString), [
        searchString
    ]);
    const navigate = reactRouterDom.useNavigate();
    const { login } = Theme.useAuth('Login', (auth)=>auth);
    const handleLogin = async (body)=>{
        setApiError(undefined);
        const res = await login(body);
        if ('error' in res) {
            const message = res.error.message ?? 'Something went wrong';
            if (camelCase(message).toLowerCase() === 'usernotactive') {
                navigate('/auth/oops');
                return;
            }
            setApiError(message);
        } else {
            const redirectTo = query.get('redirectTo');
            const redirectUrl = redirectTo ? decodeURIComponent(redirectTo) : '/';
            navigate(redirectUrl);
        }
    };
    return /*#__PURE__*/ jsxRuntime.jsx(UnauthenticatedLayout, {
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Main, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsxs(LayoutContent, {
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsxs(Column, {
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(Logo, {}),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                    paddingTop: 6,
                                    paddingBottom: 1,
                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                        variant: "alpha",
                                        tag: "h1",
                                        children: formatMessage({
                                            id: 'Auth.form.welcome.title',
                                            defaultMessage: 'Welcome!'
                                        })
                                    })
                                }),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                    paddingBottom: 7,
                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                        variant: "epsilon",
                                        textColor: "neutral600",
                                        children: formatMessage({
                                            id: 'Auth.form.welcome.subtitle',
                                            defaultMessage: 'Log in to your Strapi account'
                                        })
                                    })
                                }),
                                apiError ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    id: "global-form-error",
                                    role: "alert",
                                    tabIndex: -1,
                                    textColor: "danger600",
                                    children: apiError
                                }) : null
                            ]
                        }),
                        /*#__PURE__*/ jsxRuntime.jsx(Form, {
                            method: "PUT",
                            initialValues: {
                                email: '',
                                password: '',
                                rememberMe: false
                            },
                            onSubmit: (values)=>{
                                handleLogin(values);
                            },
                            validationSchema: LOGIN_SCHEMA,
                            children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                                direction: "column",
                                alignItems: "stretch",
                                gap: 6,
                                children: [
                                    [
                                        {
                                            label: formatMessage({
                                                id: 'Auth.form.email.label',
                                                defaultMessage: 'Email'
                                            }),
                                            name: 'email',
                                            placeholder: formatMessage({
                                                id: 'Auth.form.email.placeholder',
                                                defaultMessage: 'kai@doe.com'
                                            }),
                                            required: true,
                                            type: 'string'
                                        },
                                        {
                                            label: formatMessage({
                                                id: 'global.password',
                                                defaultMessage: 'Password'
                                            }),
                                            name: 'password',
                                            required: true,
                                            type: 'password'
                                        },
                                        {
                                            label: formatMessage({
                                                id: 'Auth.form.rememberMe.label',
                                                defaultMessage: 'Remember me'
                                            }),
                                            name: 'rememberMe',
                                            type: 'checkbox'
                                        }
                                    ].map((field)=>/*#__PURE__*/ jsxRuntime.jsx(MemoizedInputRenderer, {
                                            ...field
                                        }, field.name)),
                                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                        fullWidth: true,
                                        type: "submit",
                                        children: formatMessage({
                                            id: 'Auth.form.button.login',
                                            defaultMessage: 'Login'
                                        })
                                    })
                                ]
                            })
                        }),
                        children
                    ]
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                    justifyContent: "center",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                        paddingTop: 4,
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            isExternal: false,
                            tag: reactRouterDom.NavLink,
                            to: "/auth/forgot-password",
                            children: formatMessage({
                                id: 'Auth.link.forgot-password',
                                defaultMessage: 'Forgot your password?'
                            })
                        })
                    })
                })
            ]
        })
    });
};

const ForgotPassword = ()=>{
    const navigate = reactRouterDom.useNavigate();
    const { formatMessage } = reactIntl.useIntl();
    const { _unstableFormatAPIError: formatAPIError } = Theme.useAPIErrorHandler();
    const [forgotPassword, { error }] = Theme.useForgotPasswordMutation();
    return /*#__PURE__*/ jsxRuntime.jsx(UnauthenticatedLayout, {
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Main, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsxs(LayoutContent, {
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsxs(Column, {
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(Logo, {}),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                    paddingTop: 6,
                                    paddingBottom: 7,
                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                        tag: "h1",
                                        variant: "alpha",
                                        children: formatMessage({
                                            id: 'Auth.form.button.password-recovery',
                                            defaultMessage: 'Password Recovery'
                                        })
                                    })
                                }),
                                error ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    id: "global-form-error",
                                    role: "alert",
                                    tabIndex: -1,
                                    textColor: "danger600",
                                    children: admin.isBaseQueryError(error) ? formatAPIError(error) : formatMessage({
                                        id: 'notification.error',
                                        defaultMessage: 'An error occurred'
                                    })
                                }) : null
                            ]
                        }),
                        /*#__PURE__*/ jsxRuntime.jsx(Form, {
                            method: "POST",
                            initialValues: {
                                email: ''
                            },
                            onSubmit: async (body)=>{
                                const res = await forgotPassword(body);
                                if (!('error' in res)) {
                                    navigate('/auth/forgot-password-success');
                                }
                            },
                            validationSchema: yup__namespace.object().shape({
                                email: yup__namespace.string().email(errorsTrads.email).required({
                                    id: errorsTrads.required.id,
                                    defaultMessage: 'This field is required.'
                                }).nullable()
                            }),
                            children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                                direction: "column",
                                alignItems: "stretch",
                                gap: 6,
                                children: [
                                    [
                                        {
                                            label: formatMessage({
                                                id: 'Auth.form.email.label',
                                                defaultMessage: 'Email'
                                            }),
                                            name: 'email',
                                            placeholder: formatMessage({
                                                id: 'Auth.form.email.placeholder',
                                                defaultMessage: 'kai@doe.com'
                                            }),
                                            required: true,
                                            type: 'string'
                                        }
                                    ].map((field)=>/*#__PURE__*/ jsxRuntime.jsx(MemoizedInputRenderer, {
                                            ...field
                                        }, field.name)),
                                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                        type: "submit",
                                        fullWidth: true,
                                        children: formatMessage({
                                            id: 'Auth.form.button.forgot-password',
                                            defaultMessage: 'Send Email'
                                        })
                                    })
                                ]
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                    justifyContent: "center",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                        paddingTop: 4,
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            tag: reactRouterDom.NavLink,
                            to: "/auth/login",
                            children: formatMessage({
                                id: 'Auth.link.ready',
                                defaultMessage: 'Ready to sign in?'
                            })
                        })
                    })
                })
            ]
        })
    });
};

const ForgotPasswordSuccess = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsx(UnauthenticatedLayout, {
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Main, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsx(LayoutContent, {
                    children: /*#__PURE__*/ jsxRuntime.jsxs(Column, {
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(Logo, {}),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingTop: 6,
                                paddingBottom: 7,
                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    tag: "h1",
                                    variant: "alpha",
                                    children: formatMessage({
                                        id: 'app.containers.AuthPage.ForgotPasswordSuccess.title',
                                        defaultMessage: 'Email sent'
                                    })
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                children: formatMessage({
                                    id: 'app.containers.AuthPage.ForgotPasswordSuccess.text.email',
                                    defaultMessage: 'It can take a few minutes to receive your password recovery link.'
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingTop: 4,
                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    children: formatMessage({
                                        id: 'app.containers.AuthPage.ForgotPasswordSuccess.text.contact-admin',
                                        defaultMessage: 'If you do not receive this link, please contact your administrator.'
                                    })
                                })
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                    justifyContent: "center",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                        paddingTop: 4,
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            tag: reactRouterDom.NavLink,
                            to: "/auth/login",
                            children: formatMessage({
                                id: 'Auth.link.signin',
                                defaultMessage: 'Sign in'
                            })
                        })
                    })
                })
            ]
        })
    });
};

const Oops = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    const { search: searchString } = reactRouterDom.useLocation();
    const query = React__namespace.useMemo(()=>new URLSearchParams(searchString), [
        searchString
    ]);
    const message = query.get('info') || formatMessage({
        id: 'Auth.components.Oops.text',
        defaultMessage: 'Your account has been suspended.'
    });
    return /*#__PURE__*/ jsxRuntime.jsx(UnauthenticatedLayout, {
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Main, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsx(LayoutContent, {
                    children: /*#__PURE__*/ jsxRuntime.jsxs(Column, {
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(Logo, {}),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingTop: 6,
                                paddingBottom: 7,
                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    tag: "h1",
                                    variant: "alpha",
                                    children: formatMessage({
                                        id: 'Auth.components.Oops.title',
                                        defaultMessage: 'Oops...'
                                    })
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                children: message
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                paddingTop: 4,
                                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    children: formatMessage({
                                        id: 'Auth.components.Oops.text.admin',
                                        defaultMessage: 'If this is a mistake, please contact your administrator.'
                                    })
                                })
                            })
                        ]
                    })
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                    justifyContent: "center",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                        paddingTop: 4,
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            tag: reactRouterDom.NavLink,
                            to: "/auth/login",
                            children: formatMessage({
                                id: 'Auth.link.signin',
                                defaultMessage: 'Sign in'
                            })
                        })
                    })
                })
            ]
        })
    });
};

const usePersistentState = (key, defaultValue)=>{
    const [value, setValue] = React.useState(()=>{
        const stickyValue = window.localStorage.getItem(key);
        if (stickyValue !== null) {
            try {
                return JSON.parse(stickyValue);
            } catch  {
                // JSON.parse fails when the stored value is a primitive
                return stickyValue;
            }
        }
        return defaultValue;
    });
    React.useEffect(()=>{
        window.localStorage.setItem(key, JSON.stringify(value));
    }, [
        key,
        value
    ]);
    return [
        value,
        setValue
    ];
};

const FieldWrapper = styledComponents.styled(designSystem.Field.Root)`
  height: 3.2rem;
  width: 3.2rem;

  > label,
  ~ input {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }

  > label {
    color: inherit;
    cursor: pointer;
    padding: ${({ theme })=>theme.spaces[2]};
    text-align: center;
    vertical-align: middle;
  }

  &:hover,
  &:focus-within {
    background-color: ${({ theme })=>theme.colors.neutral0};
  }

  &:active,
  &.selected {
    color: ${({ theme })=>theme.colors.primary700};
    background-color: ${({ theme })=>theme.colors.neutral0};
    border-color: ${({ theme })=>theme.colors.primary700};
  }
`;
const delays = {
    postResponse: 90 * 24 * 60 * 60 * 1000,
    postFirstDismissal: 14 * 24 * 60 * 60 * 1000,
    postSubsequentDismissal: 90 * 24 * 60 * 60 * 1000,
    display: 30 * 60 * 1000
};
const ratingArray = [
    ...Array(11).keys()
];
const checkIfShouldShowSurvey = (settings)=>{
    const { enabled, lastResponseDate, firstDismissalDate, lastDismissalDate } = settings;
    // This function goes through all the cases where we'd want to not show the survey:
    // 1. If the survey is disabled by strapi, abort mission, don't bother checking the other settings.
    // 2. If the survey is disabled by user, abort mission, don't bother checking the other settings.
    // 3. If the user has already responded to the survey, check if enough time has passed since the last response.
    // 4. If the user has dismissed the survey twice or more before, check if enough time has passed since the last dismissal.
    // 5. If the user has only dismissed the survey once before, check if enough time has passed since the first dismissal.
    // If none of these cases check out, then we show the survey.
    // Note that submitting a response resets the dismissal counts.
    // Checks 4 and 5 should not be reversed, since the first dismissal will also exist if the user has dismissed the survey twice or more before.
    // For users who had created an account before the NPS feature was introduced,
    // we assume that they would have enabled the NPS feature if they had the chance.
    // Global strapi disable for NSP.
    if (window.strapi.flags.nps === false) {
        return false;
    }
    // User chose not to enable the NPS feature when signing up
    if (enabled === false) {
        return false;
    }
    // The user has already responded to the survey
    if (lastResponseDate) {
        const timeSinceLastResponse = Date.now() - new Date(lastResponseDate).getTime();
        if (timeSinceLastResponse >= delays.postResponse) {
            return true;
        }
        return false;
    }
    // The user has dismissed the survey twice or more before
    if (lastDismissalDate) {
        const timeSinceLastDismissal = Date.now() - new Date(lastDismissalDate).getTime();
        if (timeSinceLastDismissal >= delays.postSubsequentDismissal) {
            return true;
        }
        return false;
    }
    // The user has only dismissed the survey once before
    if (firstDismissalDate) {
        const timeSinceFirstDismissal = Date.now() - new Date(firstDismissalDate).getTime();
        if (timeSinceFirstDismissal >= delays.postFirstDismissal) {
            return true;
        }
        return false;
    }
    // The user has not interacted with the survey before
    return true;
};
const NpsSurvey = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    const { npsSurveySettings, setNpsSurveySettings } = useNpsSurveySettings();
    const [isFeedbackResponse, setIsFeedbackResponse] = React__namespace.useState(false);
    const { toggleNotification } = Theme.useNotification();
    const currentEnvironment = Theme.useAppInfo('NpsSurvey', (state)=>state.currentEnvironment);
    const strapiVersion = Theme.useAppInfo('NpsSurvey', (state)=>state.strapiVersion);
    // Only check on first render if the survey should be shown
    const [surveyIsShown, setSurveyIsShown] = React__namespace.useState(checkIfShouldShowSurvey(npsSurveySettings));
    // Set a cooldown to show the survey when session begins
    const [displaySurvey, setDisplaySurvey] = React__namespace.useState(false);
    React__namespace.useEffect(()=>{
        const displayTime = setTimeout(()=>{
            setDisplaySurvey(true);
        }, delays.display);
        return ()=>{
            clearTimeout(displayTime);
        };
    }, []);
    const { user } = Theme.useAuth('NpsSurvey', (auth)=>auth);
    if (!displaySurvey) {
        return null;
    }
    if (!surveyIsShown) {
        return null;
    }
    const handleSubmitResponse = async ({ npsSurveyRating, npsSurveyFeedback })=>{
        try {
            const body = {
                email: typeof user === 'object' && user.email ? user.email : '',
                rating: npsSurveyRating,
                comment: npsSurveyFeedback,
                environment: currentEnvironment,
                version: strapiVersion ?? undefined,
                license: window.strapi.projectType,
                isHostedOnStrapiCloud: process.env.STRAPI_HOSTING === 'strapi.cloud'
            };
            const res = await fetch('https://analytics.strapi.io/submit-nps', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(body)
            });
            if (!res.ok) {
                throw new Error('Failed to submit NPS survey');
            }
            setNpsSurveySettings((settings)=>({
                    ...settings,
                    lastResponseDate: new Date().toString(),
                    firstDismissalDate: null,
                    lastDismissalDate: null
                }));
            setIsFeedbackResponse(true);
            // Thank you message displayed in the banner should disappear after few seconds.
            setTimeout(()=>{
                setSurveyIsShown(false);
            }, 3000);
        } catch (err) {
            toggleNotification({
                type: 'danger',
                message: formatMessage({
                    id: 'notification.error',
                    defaultMessage: 'An error occurred'
                })
            });
        }
    };
    const handleDismiss = ()=>{
        setNpsSurveySettings((settings)=>{
            const nextSettings = {
                ...settings,
                lastResponseDate: null
            };
            if (settings.firstDismissalDate) {
                // If the user dismisses the survey for the second time
                nextSettings.lastDismissalDate = new Date().toString();
            } else {
                // If the user dismisses the survey for the first time
                nextSettings.firstDismissalDate = new Date().toString();
            }
            return nextSettings;
        });
        setSurveyIsShown(false);
    };
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Portal, {
        children: /*#__PURE__*/ jsxRuntime.jsx(formik.Formik, {
            initialValues: {
                npsSurveyFeedback: '',
                npsSurveyRating: null
            },
            onSubmit: handleSubmitResponse,
            validationSchema: yup__namespace.object({
                npsSurveyFeedback: yup__namespace.string(),
                npsSurveyRating: yup__namespace.number().required()
            }),
            children: ({ values, handleChange, setFieldValue, isSubmitting })=>/*#__PURE__*/ jsxRuntime.jsx(formik.Form, {
                    name: "npsSurveyForm",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                        hasRadius: true,
                        direction: "column",
                        padding: 4,
                        borderColor: "primary200",
                        background: "neutral0",
                        shadow: "popupShadow",
                        position: "fixed",
                        bottom: 0,
                        left: "50%",
                        transform: "translateX(-50%)",
                        zIndex: "200",
                        width: "50%",
                        children: isFeedbackResponse ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                            fontWeight: "semiBold",
                            children: formatMessage({
                                id: 'app.components.NpsSurvey.feedback-response',
                                defaultMessage: 'Thank you very much for your feedback!'
                            })
                        }) : /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Box, {
                            tag: "fieldset",
                            width: "100%",
                            borderWidth: 0,
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                                    justifyContent: "space-between",
                                    width: "100%",
                                    children: [
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                            marginLeft: "auto",
                                            marginRight: "auto",
                                            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                                fontWeight: "semiBold",
                                                tag: "legend",
                                                children: formatMessage({
                                                    id: 'app.components.NpsSurvey.banner-title',
                                                    defaultMessage: 'How likely are you to recommend Strapi to a friend or colleague?'
                                                })
                                            })
                                        }),
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
                                            onClick: handleDismiss,
                                            withTooltip: false,
                                            label: formatMessage({
                                                id: 'app.components.NpsSurvey.dismiss-survey-label',
                                                defaultMessage: 'Dismiss survey'
                                            }),
                                            children: /*#__PURE__*/ jsxRuntime.jsx(icons.Cross, {})
                                        })
                                    ]
                                }),
                                /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                                    gap: 2,
                                    marginTop: 2,
                                    marginBottom: 2,
                                    justifyContent: "center",
                                    children: [
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                            variant: "pi",
                                            textColor: "neutral600",
                                            children: formatMessage({
                                                id: 'app.components.NpsSurvey.no-recommendation',
                                                defaultMessage: 'Not at all likely'
                                            })
                                        }),
                                        ratingArray.map((number)=>{
                                            return /*#__PURE__*/ jsxRuntime.jsx(FieldWrapper, {
                                                name: "npsSurveyRating",
                                                className: values.npsSurveyRating === number ? 'selected' : undefined,
                                                hasRadius: true,
                                                background: "primary100",
                                                borderColor: "primary200",
                                                color: "primary600",
                                                position: "relative",
                                                cursor: "pointer",
                                                children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Label, {
                                                    children: [
                                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.VisuallyHidden, {
                                                            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Input, {
                                                                type: "radio",
                                                                checked: values.npsSurveyRating === number,
                                                                onChange: (e)=>setFieldValue('npsSurveyRating', parseInt(e.target.value, 10)),
                                                                value: number
                                                            })
                                                        }),
                                                        number
                                                    ]
                                                })
                                            }, number);
                                        }),
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                            variant: "pi",
                                            textColor: "neutral600",
                                            children: formatMessage({
                                                id: 'app.components.NpsSurvey.happy-to-recommend',
                                                defaultMessage: 'Extremely likely'
                                            })
                                        })
                                    ]
                                }),
                                values.npsSurveyRating !== null && /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                                    direction: "column",
                                    children: [
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                            marginTop: 2,
                                            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                                                fontWeight: "semiBold",
                                                fontSize: 2,
                                                children: formatMessage({
                                                    id: 'app.components.NpsSurvey.feedback-question',
                                                    defaultMessage: 'Do you have any suggestion for improvements?'
                                                })
                                            })
                                        }),
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                            width: "62%",
                                            marginTop: 3,
                                            marginBottom: 4,
                                            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Textarea, {
                                                id: "npsSurveyFeedback" // formik element attribute "id" should be same as the values key to work
                                                ,
                                                width: "100%",
                                                onChange: handleChange,
                                                value: values.npsSurveyFeedback
                                            })
                                        }),
                                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                            marginBottom: 2,
                                            type: "submit",
                                            loading: isSubmitting,
                                            children: formatMessage({
                                                id: 'app.components.NpsSurvey.submit-feedback',
                                                defaultMessage: 'Submit Feedback'
                                            })
                                        })
                                    ]
                                })
                            ]
                        })
                    })
                })
        })
    });
};
/**
 * We exported to make it available during admin user registration.
 * Because we only enable the NPS for users who subscribe to the newsletter when signing up
 */ function useNpsSurveySettings() {
    const [npsSurveySettings, setNpsSurveySettings] = usePersistentState('STRAPI_NPS_SURVEY_SETTINGS', {
        enabled: true,
        lastResponseDate: null,
        firstDismissalDate: null,
        lastDismissalDate: null
    });
    /**
   * TODO: should this just be an array so we can alias the `usePersistentState` hook?
   */ return {
        npsSurveySettings,
        setNpsSurveySettings
    };
}

const REGISTER_USER_SCHEMA = yup__namespace.object().shape({
    firstname: yup__namespace.string().trim().required(errorsTrads.required).nullable(),
    lastname: yup__namespace.string().nullable(),
    password: yup__namespace.string().min(8, {
        id: errorsTrads.minLength.id,
        defaultMessage: 'Password must be at least 8 characters',
        values: {
            min: 8
        }
    }).test('max-bytes', {
        id: 'components.Input.error.contain.maxBytes',
        defaultMessage: 'Password must be less than 73 bytes'
    }, function(value) {
        if (!value || typeof value !== 'string') return true; // validated elsewhere
        const byteSize = Theme.getByteSize(value);
        return byteSize <= 72;
    }).matches(/[a-z]/, {
        message: {
            id: 'components.Input.error.contain.lowercase',
            defaultMessage: 'Password must contain at least 1 lowercase letter'
        }
    }).matches(/[A-Z]/, {
        message: {
            id: 'components.Input.error.contain.uppercase',
            defaultMessage: 'Password must contain at least 1 uppercase letter'
        }
    }).matches(/\d/, {
        message: {
            id: 'components.Input.error.contain.number',
            defaultMessage: 'Password must contain at least 1 number'
        }
    }).required({
        id: errorsTrads.required.id,
        defaultMessage: 'Password is required'
    }).nullable(),
    confirmPassword: yup__namespace.string().required({
        id: errorsTrads.required.id,
        defaultMessage: 'Confirm password is required'
    }).oneOf([
        yup__namespace.ref('password'),
        null
    ], {
        id: 'components.Input.error.password.noMatch',
        defaultMessage: 'Passwords must match'
    }).nullable(),
    registrationToken: yup__namespace.string().required({
        id: errorsTrads.required.id,
        defaultMessage: 'Registration token is required'
    })
});
const REGISTER_ADMIN_SCHEMA = yup__namespace.object().shape({
    firstname: yup__namespace.string().trim().required({
        id: errorsTrads.required.id,
        defaultMessage: 'Firstname is required'
    }).nullable(),
    lastname: yup__namespace.string().nullable(),
    password: yup__namespace.string().min(8, {
        id: errorsTrads.minLength.id,
        defaultMessage: 'Password must be at least 8 characters',
        values: {
            min: 8
        }
    }).test('max-bytes', {
        id: 'components.Input.error.contain.maxBytes',
        defaultMessage: 'Password must be less than 73 bytes'
    }, function(value) {
        if (!value) return true;
        return new TextEncoder().encode(value).length <= 72;
    }).matches(/[a-z]/, {
        message: {
            id: 'components.Input.error.contain.lowercase',
            defaultMessage: 'Password must contain at least 1 lowercase letter'
        }
    }).matches(/[A-Z]/, {
        message: {
            id: 'components.Input.error.contain.uppercase',
            defaultMessage: 'Password must contain at least 1 uppercase letter'
        }
    }).matches(/\d/, {
        message: {
            id: 'components.Input.error.contain.number',
            defaultMessage: 'Password must contain at least 1 number'
        }
    }).required({
        id: errorsTrads.required.id,
        defaultMessage: 'Password is required'
    }).nullable(),
    confirmPassword: yup__namespace.string().required({
        id: errorsTrads.required,
        defaultMessage: 'Confirm password is required'
    }).nullable().oneOf([
        yup__namespace.ref('password'),
        null
    ], {
        id: 'components.Input.error.password.noMatch',
        defaultMessage: 'Passwords must match'
    }),
    email: yup__namespace.string().email({
        id: errorsTrads.email.id,
        defaultMessage: 'Not a valid email'
    }).strict().lowercase({
        id: errorsTrads.lowercase.id,
        defaultMessage: 'Email must be lowercase'
    }).required({
        id: errorsTrads.required.id,
        defaultMessage: 'Email is required'
    }).nullable()
});
const Register = ({ hasAdmin })=>{
    const { toggleNotification } = Theme.useNotification();
    const navigate = reactRouterDom.useNavigate();
    const [submitCount, setSubmitCount] = React__namespace.useState(0);
    const [apiError, setApiError] = React__namespace.useState();
    const { trackUsage } = Theme.useTracking();
    const { formatMessage } = reactIntl.useIntl();
    const setSkipped = Theme.useGuidedTour('Register', (state)=>state.setSkipped);
    const { search: searchString } = reactRouterDom.useLocation();
    const query = React__namespace.useMemo(()=>new URLSearchParams(searchString), [
        searchString
    ]);
    const match = reactRouterDom.useMatch('/auth/:authType');
    const { _unstableFormatAPIError: formatAPIError, _unstableFormatValidationErrors: formatValidationErrors } = Theme.useAPIErrorHandler();
    const { setNpsSurveySettings } = useNpsSurveySettings();
    const registrationToken = query.get('registrationToken');
    const { data: userInfo, error } = Theme.useGetRegistrationInfoQuery(registrationToken, {
        skip: !registrationToken
    });
    React__namespace.useEffect(()=>{
        if (error) {
            const message = admin.isBaseQueryError(error) ? formatAPIError(error) : error.message ?? '';
            toggleNotification({
                type: 'danger',
                message
            });
            navigate(`/auth/oops?info=${encodeURIComponent(message)}`);
        }
    }, [
        error,
        formatAPIError,
        navigate,
        toggleNotification
    ]);
    const [registerAdmin] = Theme.useRegisterAdminMutation();
    const [registerUser] = Theme.useRegisterUserMutation();
    const dispatch = Theme.useTypedDispatch();
    const handleRegisterAdmin = async ({ news, ...body }, setFormErrors)=>{
        const res = await registerAdmin(body);
        if ('data' in res) {
            dispatch(Theme.login({
                token: res.data.token
            }));
            const { roles } = res.data.user;
            if (roles) {
                const isUserSuperAdmin = roles.find(({ code })=>code === 'strapi-super-admin');
                if (isUserSuperAdmin) {
                    localStorage.setItem('GUIDED_TOUR_SKIPPED', JSON.stringify(false));
                    setSkipped(false);
                    trackUsage('didLaunchGuidedtour');
                }
            }
            if (news) {
                // Only enable EE survey if user accepted the newsletter
                setNpsSurveySettings((s)=>({
                        ...s,
                        enabled: true
                    }));
                navigate({
                    pathname: '/usecase',
                    search: `?hasAdmin=${true}`
                });
            } else {
                navigate('/');
            }
        } else {
            if (admin.isBaseQueryError(res.error)) {
                trackUsage('didNotCreateFirstAdmin');
                if (res.error.name === 'ValidationError') {
                    setFormErrors(formatValidationErrors(res.error));
                    return;
                }
                setApiError(formatAPIError(res.error));
            }
        }
    };
    const handleRegisterUser = async ({ news, ...body }, setFormErrors)=>{
        const res = await registerUser(body);
        if ('data' in res) {
            dispatch(Theme.login({
                token: res.data.token
            }));
            if (news) {
                // Only enable EE survey if user accepted the newsletter
                setNpsSurveySettings((s)=>({
                        ...s,
                        enabled: true
                    }));
                navigate({
                    pathname: '/usecase',
                    search: `?hasAdmin=${hasAdmin}`
                });
            } else {
                navigate('/');
            }
        } else {
            if (admin.isBaseQueryError(res.error)) {
                trackUsage('didNotCreateFirstAdmin');
                if (res.error.name === 'ValidationError') {
                    setFormErrors(formatValidationErrors(res.error));
                    return;
                }
                setApiError(formatAPIError(res.error));
            }
        }
    };
    if (!match || match.params.authType !== 'register' && match.params.authType !== 'register-admin') {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "/"
        });
    }
    const isAdminRegistration = match.params.authType === 'register-admin';
    const schema = isAdminRegistration ? REGISTER_ADMIN_SCHEMA : REGISTER_USER_SCHEMA;
    return /*#__PURE__*/ jsxRuntime.jsx(UnauthenticatedLayout, {
        children: /*#__PURE__*/ jsxRuntime.jsxs(LayoutContent, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                    direction: "column",
                    alignItems: "center",
                    gap: 3,
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsx(Logo, {}),
                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                            tag: "h1",
                            variant: "alpha",
                            textAlign: "center",
                            children: formatMessage({
                                id: 'Auth.form.welcome.title',
                                defaultMessage: 'Welcome to Strapi!'
                            })
                        }),
                        /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                            variant: "epsilon",
                            textColor: "neutral600",
                            textAlign: "center",
                            children: formatMessage({
                                id: 'Auth.form.register.subtitle',
                                defaultMessage: 'Credentials are only used to authenticate in Strapi. All saved data will be stored in your database.'
                            })
                        }),
                        apiError ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                            id: "global-form-error",
                            role: "alert",
                            tabIndex: -1,
                            textColor: "danger600",
                            children: apiError
                        }) : null
                    ]
                }),
                /*#__PURE__*/ jsxRuntime.jsx(Form, {
                    method: "POST",
                    initialValues: {
                        firstname: userInfo?.firstname || '',
                        lastname: userInfo?.lastname || '',
                        email: userInfo?.email || '',
                        password: '',
                        confirmPassword: '',
                        registrationToken: registrationToken || undefined,
                        news: false
                    },
                    onSubmit: async (data, helpers)=>{
                        const normalizedData = normalizeData(data);
                        try {
                            await schema.validate(normalizedData, {
                                abortEarly: false
                            });
                            if (submitCount > 0 && isAdminRegistration) {
                                trackUsage('didSubmitWithErrorsFirstAdmin', {
                                    count: submitCount.toString()
                                });
                            }
                            if (normalizedData.registrationToken) {
                                handleRegisterUser({
                                    userInfo: omit(normalizedData, [
                                        'registrationToken',
                                        'confirmPassword',
                                        'email',
                                        'news'
                                    ]),
                                    registrationToken: normalizedData.registrationToken,
                                    news: normalizedData.news
                                }, helpers.setErrors);
                            } else {
                                await handleRegisterAdmin(omit(normalizedData, [
                                    'registrationToken',
                                    'confirmPassword'
                                ]), helpers.setErrors);
                            }
                        } catch (err) {
                            if (err instanceof yup.ValidationError) {
                                helpers.setErrors(err.inner.reduce((acc, { message, path })=>{
                                    if (path && typeof message === 'object') {
                                        acc[path] = formatMessage(message);
                                    }
                                    return acc;
                                }, {}));
                            }
                            setSubmitCount(submitCount + 1);
                        }
                    },
                    children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                        direction: "column",
                        alignItems: "stretch",
                        gap: 6,
                        marginTop: 7,
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Root, {
                                gap: 4,
                                children: [
                                    {
                                        label: formatMessage({
                                            id: 'Auth.form.firstname.label',
                                            defaultMessage: 'Firstname'
                                        }),
                                        name: 'firstname',
                                        required: true,
                                        size: 6,
                                        type: 'string'
                                    },
                                    {
                                        label: formatMessage({
                                            id: 'Auth.form.lastname.label',
                                            defaultMessage: 'Lastname'
                                        }),
                                        name: 'lastname',
                                        size: 6,
                                        type: 'string'
                                    },
                                    {
                                        disabled: !isAdminRegistration,
                                        label: formatMessage({
                                            id: 'Auth.form.email.label',
                                            defaultMessage: 'Email'
                                        }),
                                        name: 'email',
                                        required: true,
                                        size: 12,
                                        type: 'email'
                                    },
                                    {
                                        hint: formatMessage({
                                            id: 'Auth.form.password.hint',
                                            defaultMessage: 'Must be at least 8 characters, 1 uppercase, 1 lowercase & 1 number'
                                        }),
                                        label: formatMessage({
                                            id: 'global.password',
                                            defaultMessage: 'Password'
                                        }),
                                        name: 'password',
                                        required: true,
                                        size: 12,
                                        type: 'password'
                                    },
                                    {
                                        label: formatMessage({
                                            id: 'Auth.form.confirmPassword.label',
                                            defaultMessage: 'Confirm Password'
                                        }),
                                        name: 'confirmPassword',
                                        required: true,
                                        size: 12,
                                        type: 'password'
                                    },
                                    {
                                        label: formatMessage({
                                            id: 'Auth.form.register.news.label',
                                            defaultMessage: 'Keep me updated about new features & upcoming improvements (by doing this you accept the {terms} and the {policy}).'
                                        }, {
                                            terms: /*#__PURE__*/ jsxRuntime.jsx(A, {
                                                target: "_blank",
                                                href: "https://strapi.io/terms",
                                                rel: "noreferrer",
                                                children: formatMessage({
                                                    id: 'Auth.privacy-policy-agreement.terms',
                                                    defaultMessage: 'terms'
                                                })
                                            }),
                                            policy: /*#__PURE__*/ jsxRuntime.jsx(A, {
                                                target: "_blank",
                                                href: "https://strapi.io/privacy",
                                                rel: "noreferrer",
                                                children: formatMessage({
                                                    id: 'Auth.privacy-policy-agreement.policy',
                                                    defaultMessage: 'policy'
                                                })
                                            })
                                        }),
                                        name: 'news',
                                        size: 12,
                                        type: 'checkbox'
                                    }
                                ].map(({ size, ...field })=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Item, {
                                        col: size,
                                        direction: "column",
                                        alignItems: "stretch",
                                        children: /*#__PURE__*/ jsxRuntime.jsx(MemoizedInputRenderer, {
                                            ...field
                                        })
                                    }, field.name))
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                fullWidth: true,
                                size: "L",
                                type: "submit",
                                children: formatMessage({
                                    id: 'Auth.form.button.register',
                                    defaultMessage: "Let's start"
                                })
                            })
                        ]
                    })
                }),
                match?.params.authType === 'register' && /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                    paddingTop: 4,
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                        justifyContent: "center",
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            tag: reactRouterDom.NavLink,
                            to: "/auth/login",
                            children: formatMessage({
                                id: 'Auth.link.signin.account',
                                defaultMessage: 'Already have an account?'
                            })
                        })
                    })
                })
            ]
        })
    });
};
/**
 * @description Trims all values but the password & sets lastName to null if it's a falsey value.
 */ function normalizeData(data) {
    return Object.entries(data).reduce((acc, [key, value])=>{
        if (![
            'password',
            'confirmPassword'
        ].includes(key) && typeof value === 'string') {
            acc[key] = value.trim();
            if (key === 'lastname') {
                acc[key] = value || undefined;
            }
        } else {
            acc[key] = value;
        }
        return acc;
    }, {});
}
const A = styledComponents.styled.a`
  color: ${({ theme })=>theme.colors.primary600};
`;

const RESET_PASSWORD_SCHEMA = yup__namespace.object().shape({
    password: yup__namespace.string().min(8, {
        id: errorsTrads.minLength.id,
        defaultMessage: 'Password must be at least 8 characters',
        values: {
            min: 8
        }
    })// bcrypt has a max length of 72 bytes (not characters!)
    .test('required-byte-size', {
        id: 'components.Input.error.contain.maxBytes',
        defaultMessage: 'Password must be less than 73 bytes'
    }, function(value) {
        if (!value || typeof value !== 'string') return true; // validated elsewhere
        const byteSize = Theme.getByteSize(value);
        return byteSize <= 72;
    }).matches(/[a-z]/, {
        message: {
            id: 'components.Input.error.contain.lowercase',
            defaultMessage: 'Password must contain at least 1 lowercase letter'
        }
    }).matches(/[A-Z]/, {
        message: {
            id: 'components.Input.error.contain.uppercase',
            defaultMessage: 'Password must contain at least 1 uppercase letter'
        }
    }).matches(/\d/, {
        message: {
            id: 'components.Input.error.contain.number',
            defaultMessage: 'Password must contain at least 1 number'
        }
    }).required({
        id: errorsTrads.required.id,
        defaultMessage: 'Password is required'
    }).nullable(),
    confirmPassword: yup__namespace.string().required({
        id: errorsTrads.required.id,
        defaultMessage: 'Confirm password is required'
    }).oneOf([
        yup__namespace.ref('password'),
        null
    ], {
        id: 'components.Input.error.password.noMatch',
        defaultMessage: 'Passwords must match'
    }).nullable()
});
const ResetPassword = ()=>{
    const { formatMessage } = reactIntl.useIntl();
    const dispatch = Theme.useTypedDispatch();
    const navigate = reactRouterDom.useNavigate();
    const { search: searchString } = reactRouterDom.useLocation();
    const query = React__namespace.useMemo(()=>new URLSearchParams(searchString), [
        searchString
    ]);
    const { _unstableFormatAPIError: formatAPIError } = Theme.useAPIErrorHandler();
    const [resetPassword, { error }] = Theme.useResetPasswordMutation();
    const handleSubmit = async (body)=>{
        const res = await resetPassword(body);
        if ('data' in res) {
            dispatch(Theme.login({
                token: res.data.token
            }));
            navigate('/');
        }
    };
    /**
   * If someone doesn't have a reset password token
   * then they should just be redirected back to the login page.
   */ if (!query.get('code')) {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "/auth/login"
        });
    }
    return /*#__PURE__*/ jsxRuntime.jsx(UnauthenticatedLayout, {
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Main, {
            children: [
                /*#__PURE__*/ jsxRuntime.jsxs(LayoutContent, {
                    children: [
                        /*#__PURE__*/ jsxRuntime.jsxs(Column, {
                            children: [
                                /*#__PURE__*/ jsxRuntime.jsx(Logo, {}),
                                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                                    paddingTop: 6,
                                    paddingBottom: 7,
                                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                        tag: "h1",
                                        variant: "alpha",
                                        children: formatMessage({
                                            id: 'global.reset-password',
                                            defaultMessage: 'Reset password'
                                        })
                                    })
                                }),
                                error ? /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                                    id: "global-form-error",
                                    role: "alert",
                                    tabIndex: -1,
                                    textColor: "danger600",
                                    children: admin.isBaseQueryError(error) ? formatAPIError(error) : formatMessage({
                                        id: 'notification.error',
                                        defaultMessage: 'An error occurred'
                                    })
                                }) : null
                            ]
                        }),
                        /*#__PURE__*/ jsxRuntime.jsx(Form, {
                            method: "POST",
                            initialValues: {
                                password: '',
                                confirmPassword: ''
                            },
                            onSubmit: (values)=>{
                                // We know query.code is defined because we check for it above.
                                handleSubmit({
                                    password: values.password,
                                    resetPasswordToken: query.get('code')
                                });
                            },
                            validationSchema: RESET_PASSWORD_SCHEMA,
                            children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                                direction: "column",
                                alignItems: "stretch",
                                gap: 6,
                                children: [
                                    [
                                        {
                                            hint: formatMessage({
                                                id: 'Auth.form.password.hint',
                                                defaultMessage: 'Password must contain at least 8 characters, 1 uppercase, 1 lowercase and 1 number'
                                            }),
                                            label: formatMessage({
                                                id: 'global.password',
                                                defaultMessage: 'Password'
                                            }),
                                            name: 'password',
                                            required: true,
                                            type: 'password'
                                        },
                                        {
                                            label: formatMessage({
                                                id: 'Auth.form.confirmPassword.label',
                                                defaultMessage: 'Confirm Password'
                                            }),
                                            name: 'confirmPassword',
                                            required: true,
                                            type: 'password'
                                        }
                                    ].map((field)=>/*#__PURE__*/ jsxRuntime.jsx(MemoizedInputRenderer, {
                                            ...field
                                        }, field.name)),
                                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                        fullWidth: true,
                                        type: "submit",
                                        children: formatMessage({
                                            id: 'global.change-password',
                                            defaultMessage: 'Change password'
                                        })
                                    })
                                ]
                            })
                        })
                    ]
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                    justifyContent: "center",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
                        paddingTop: 4,
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            tag: reactRouterDom.NavLink,
                            to: "/auth/login",
                            children: formatMessage({
                                id: 'Auth.link.ready',
                                defaultMessage: 'Ready to sign in?'
                            })
                        })
                    })
                })
            ]
        })
    });
};

const FORMS = {
    'forgot-password': ForgotPassword,
    'forgot-password-success': ForgotPasswordSuccess,
    // the `Component` attribute is set after all forms and CE/EE components are loaded, but since we
    // are here outside of a React component we can not use the hook directly
    login: ()=>null,
    oops: Oops,
    register: Register,
    'register-admin': Register,
    'reset-password': ResetPassword,
    providers: ()=>null
};

/* -------------------------------------------------------------------------------------------------
 * AuthPage
 * -----------------------------------------------------------------------------------------------*/ const AuthPage = ()=>{
    const { search } = reactRouterDom.useLocation();
    const match = reactRouterDom.useMatch('/auth/:authType');
    const authType = match?.params.authType;
    const { data } = admin.useInitQuery();
    const { hasAdmin } = data ?? {};
    const Login$1 = useEnterprise.useEnterprise(Login, async ()=>(await Promise.resolve().then(function () { return require('./Login-hloLe5XK.js'); })).LoginEE);
    const forms = useEnterprise.useEnterprise(FORMS, async ()=>(await Promise.resolve().then(function () { return require('./constants-0YGy0gYA.js'); })).FORMS, {
        combine (ceForms, eeForms) {
            return {
                ...ceForms,
                ...eeForms
            };
        },
        defaultValue: FORMS
    });
    const { token } = Theme.useAuth('AuthPage', (auth)=>auth);
    if (!authType || !forms) {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "/"
        });
    }
    const Component = forms[authType];
    // Redirect the user to the login page if
    // the endpoint does not exists
    if (!Component) {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "/"
        });
    }
    // User is already logged in
    if (authType !== 'register-admin' && authType !== 'register' && token) {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "/"
        });
    }
    // there is already an admin user oo
    if (hasAdmin && authType === 'register-admin' && token) {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: "/"
        });
    }
    // Redirect the user to the register-admin if it is the first user
    if (!hasAdmin && authType !== 'register-admin') {
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.Navigate, {
            to: {
                pathname: '/auth/register-admin',
                // Forward the `?redirectTo` from /auth/login
                // /abc => /auth/login?redirectTo=%2Fabc => /auth/register-admin?redirectTo=%2Fabc
                search
            }
        });
    }
    if (Login$1 && authType === 'login') {
        // Assign the component to render for the login form
        return /*#__PURE__*/ jsxRuntime.jsx(Login$1, {});
    } else if (authType === 'login' && !Login$1) {
        // block rendering until the Login EE component is fully loaded
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsx(Component, {
        hasAdmin: hasAdmin
    });
};

const ROUTES_CE = [
    {
        lazy: async ()=>{
            const { ProtectedListPage } = await Promise.resolve().then(function () { return require('./ListPage-CR3gWQmI.js'); });
            return {
                Component: ProtectedListPage
            };
        },
        path: 'roles'
    },
    {
        lazy: async ()=>{
            const { ProtectedCreatePage } = await Promise.resolve().then(function () { return require('./CreatePage-CqSV9MB5.js'); });
            return {
                Component: ProtectedCreatePage
            };
        },
        path: 'roles/duplicate/:id'
    },
    {
        lazy: async ()=>{
            const { ProtectedCreatePage } = await Promise.resolve().then(function () { return require('./CreatePage-CqSV9MB5.js'); });
            return {
                Component: ProtectedCreatePage
            };
        },
        path: 'roles/new'
    },
    {
        lazy: async ()=>{
            const { ProtectedEditPage } = await Promise.resolve().then(function () { return require('./EditPage-Bat1IRtF.js'); });
            return {
                Component: ProtectedEditPage
            };
        },
        path: 'roles/:id'
    },
    {
        lazy: async ()=>{
            const { ProtectedListPage } = await Promise.resolve().then(function () { return require('./ListPage-C4N4obMn.js'); });
            return {
                Component: ProtectedListPage
            };
        },
        path: 'users'
    },
    {
        lazy: async ()=>{
            const { ProtectedEditPage } = await Promise.resolve().then(function () { return require('./EditPage-AnRHZtV7.js'); });
            return {
                Component: ProtectedEditPage
            };
        },
        path: 'users/:id'
    },
    {
        lazy: async ()=>{
            const { ProtectedCreatePage } = await Promise.resolve().then(function () { return require('./CreatePage-mgsGoMQ_.js'); });
            return {
                Component: ProtectedCreatePage
            };
        },
        path: 'webhooks/create'
    },
    {
        lazy: async ()=>{
            const { ProtectedEditPage } = await Promise.resolve().then(function () { return require('./EditPage-BLnONQN3.js'); }).then(function (n) { return n.EditPage$1; });
            return {
                Component: ProtectedEditPage
            };
        },
        path: 'webhooks/:id'
    },
    {
        lazy: async ()=>{
            const { ProtectedListPage } = await Promise.resolve().then(function () { return require('./ListPage-FbAWImY8.js'); });
            return {
                Component: ProtectedListPage
            };
        },
        path: 'webhooks'
    },
    {
        lazy: async ()=>{
            const { ProtectedListView } = await Promise.resolve().then(function () { return require('./ListView-BBs2mFq6.js'); });
            return {
                Component: ProtectedListView
            };
        },
        path: 'api-tokens'
    },
    {
        lazy: async ()=>{
            const { ProtectedCreateView } = await Promise.resolve().then(function () { return require('./CreateView-C5_kzu5H.js'); });
            return {
                Component: ProtectedCreateView
            };
        },
        path: 'api-tokens/create'
    },
    {
        lazy: async ()=>{
            const { ProtectedEditView } = await Promise.resolve().then(function () { return require('./EditViewPage-Bq2noMTc.js'); });
            return {
                Component: ProtectedEditView
            };
        },
        path: 'api-tokens/:id'
    },
    {
        lazy: async ()=>{
            const { ProtectedCreateView } = await Promise.resolve().then(function () { return require('./CreateView-Bpvngla6.js'); });
            return {
                Component: ProtectedCreateView
            };
        },
        path: 'transfer-tokens/create'
    },
    {
        lazy: async ()=>{
            const { ProtectedListView } = await Promise.resolve().then(function () { return require('./ListView-BkQJW5jW.js'); });
            return {
                Component: ProtectedListView
            };
        },
        path: 'transfer-tokens'
    },
    {
        lazy: async ()=>{
            const { ProtectedEditView } = await Promise.resolve().then(function () { return require('./EditView-Car7CCTB.js'); });
            return {
                Component: ProtectedEditView
            };
        },
        path: 'transfer-tokens/:id'
    },
    {
        lazy: async ()=>{
            const { ProtectedInstalledPlugins } = await Promise.resolve().then(function () { return require('./InstalledPlugins-VDXZwrwZ.js'); });
            return {
                Component: ProtectedInstalledPlugins
            };
        },
        path: 'list-plugins'
    },
    {
        lazy: async ()=>{
            const { PurchaseAuditLogs } = await Promise.resolve().then(function () { return require('./PurchaseAuditLogs-Dw17LVYG.js'); });
            return {
                Component: PurchaseAuditLogs
            };
        },
        path: 'purchase-audit-logs'
    },
    {
        lazy: async ()=>{
            const { PurchaseSingleSignOn } = await Promise.resolve().then(function () { return require('./PurchaseSingleSignOn-CRoPGzCa.js'); });
            return {
                Component: PurchaseSingleSignOn
            };
        },
        path: 'purchase-single-sign-on'
    },
    {
        lazy: async ()=>{
            const { PurchaseContentHistory } = await Promise.resolve().then(function () { return require('./PurchaseContentHistory-CM89tUxA.js'); });
            return {
                Component: PurchaseContentHistory
            };
        },
        path: 'purchase-content-history'
    }
];

/**
 * These are routes we don't want to be able to be changed by plugins.
 */ const getImmutableRoutes = ()=>[
        {
            path: 'usecase',
            lazy: async ()=>{
                const { PrivateUseCasePage } = await Promise.resolve().then(function () { return require('./UseCasePage-Dw0DiWBY.js'); });
                return {
                    Component: PrivateUseCasePage
                };
            }
        },
        // this needs to go before auth/:authType because otherwise it won't match the route
        ...getEERoutes$1(),
        {
            path: 'auth/:authType',
            element: /*#__PURE__*/ jsxRuntime.jsx(AuthPage, {})
        }
    ];
const getInitialRoutes = ()=>[
        {
            index: true,
            lazy: async ()=>{
                const { HomePage } = await Promise.resolve().then(function () { return require('./HomePage-B2jqgtwx.js'); });
                return {
                    Component: HomePage
                };
            }
        },
        {
            path: 'me',
            lazy: async ()=>{
                const { ProfilePage } = await Promise.resolve().then(function () { return require('./ProfilePage-BjUSSawk.js'); });
                return {
                    Component: ProfilePage
                };
            }
        },
        {
            path: 'marketplace',
            lazy: async ()=>{
                const { ProtectedMarketplacePage } = await Promise.resolve().then(function () { return require('./MarketplacePage-DVBrQNte.js'); });
                return {
                    Component: ProtectedMarketplacePage
                };
            }
        },
        {
            path: 'settings/*',
            lazy: async ()=>{
                const { Layout } = await Promise.resolve().then(function () { return require('./Layout-CAyyOyeo.js'); });
                return {
                    Component: Layout
                };
            },
            children: [
                {
                    path: 'application-infos',
                    lazy: async ()=>{
                        const { ApplicationInfoPage } = await Promise.resolve().then(function () { return require('./ApplicationInfoPage-DSDdk_YN.js'); });
                        return {
                            Component: ApplicationInfoPage
                        };
                    }
                },
                // ...Object.values(this.settings).flatMap(({ links }) =>
                //   links.map(({ to, Component }) => ({
                //     path: `${to}/*`,
                //     element: (
                //       <React.Suspense fallback={<Page.Loading />}>
                //         <Component />
                //       </React.Suspense>
                //     ),
                //   }))
                // ),
                ...[
                    ...getEERoutes(),
                    ...ROUTES_CE
                ].filter((route, index, refArray)=>refArray.findIndex((obj)=>obj.path === route.path) === index)
            ]
        }
    ];

class Router {
    get routes() {
        return this._routes;
    }
    get menu() {
        return this._menu;
    }
    get settings() {
        return this._settings;
    }
    /**
   * @internal This method is used internally by Strapi to create the router.
   * It should not be used by plugins, doing so will likely break the application.
   */ createRouter(strapi, { memory, ...opts } = {}) {
        const routes = [
            {
                path: '/*',
                errorElement: /*#__PURE__*/ jsxRuntime.jsx(reactRedux.Provider, {
                    store: strapi.store,
                    children: /*#__PURE__*/ jsxRuntime.jsx(Theme.LanguageProvider, {
                        messages: strapi.configurations.translations,
                        children: /*#__PURE__*/ jsxRuntime.jsx(Theme.Theme, {
                            themes: strapi.configurations.themes,
                            children: /*#__PURE__*/ jsxRuntime.jsx(ErrorElement, {})
                        })
                    })
                }),
                element: /*#__PURE__*/ jsxRuntime.jsx(App, {
                    strapi: strapi,
                    store: strapi.store
                }),
                children: [
                    ...getImmutableRoutes(),
                    {
                        path: '/*',
                        lazy: async ()=>{
                            const { PrivateAdminLayout } = await Promise.resolve().then(function () { return require('./AuthenticatedLayout-B67MSNKW.js'); });
                            return {
                                Component: PrivateAdminLayout
                            };
                        },
                        children: [
                            ...this.routes,
                            {
                                path: '*',
                                element: /*#__PURE__*/ jsxRuntime.jsx(NotFoundPage, {})
                            }
                        ]
                    }
                ]
            }
        ];
        if (memory) {
            this.router = reactRouterDom.createMemoryRouter(routes, opts);
        } else {
            this.router = reactRouterDom.createBrowserRouter(routes, opts);
        }
        return this.router;
    }
    addSettingsLink(section, link) {
        if (typeof section === 'object' && 'links' in section) {
            /**
       * Someone has passed an entire pre-configured section object
       */ invariant(section.id, 'section.id should be defined');
            invariant(section.intlLabel?.id && section.intlLabel?.defaultMessage, 'section.intlLabel should be defined');
            invariant(this.settings[section.id] === undefined, 'A similar section already exists');
            invariant(Array.isArray(section.links), 'TypeError expected links to be an array');
            this.settings[section.id] = {
                ...section,
                links: []
            };
            section.links.forEach((link)=>{
                this.createSettingsLink(section.id, link);
            });
        } else if (typeof section === 'object' && link) {
            /**
       * we need to create the section first
       */ invariant(section.id, 'section.id should be defined');
            invariant(section.intlLabel?.id && section.intlLabel?.defaultMessage, 'section.intlLabel should be defined');
            invariant(this.settings[section.id] === undefined, 'A similar section already exists');
            this.settings[section.id] = {
                ...section,
                links: []
            };
            if (Array.isArray(link)) {
                link.forEach((l)=>this.createSettingsLink(section.id, l));
            } else {
                this.createSettingsLink(section.id, link);
            }
        } else if (typeof section === 'string' && link) {
            if (Array.isArray(link)) {
                link.forEach((l)=>this.createSettingsLink(section, l));
            } else {
                this.createSettingsLink(section, link);
            }
        } else {
            throw new Error('Invalid arguments provided to addSettingsLink, at minimum a sectionId and link are required.');
        }
    }
    /**
   * @alpha
   * @description Adds a route or an array of routes to the router.
   * Otherwise, pass a function that receives the current routes and
   * returns the new routes in a reducer like fashion.
   */ addRoute(route) {
        if (Array.isArray(route)) {
            this._routes = [
                ...this._routes,
                ...route
            ];
        } else if (typeof route === 'object' && route !== null) {
            this._routes.push(route);
        } else if (typeof route === 'function') {
            this._routes = route(this._routes);
        } else {
            throw new Error(`Expected the \`route\` passed to \`addRoute\` to be an array or a function, but received ${getPrintableType(route)}`);
        }
    }
    constructor(initialRoutes){
        this._routes = [];
        this.router = null;
        this._menu = [];
        this._settings = {
            global: {
                id: 'global',
                intlLabel: {
                    id: 'Settings.global',
                    defaultMessage: 'Global Settings'
                },
                links: []
            }
        };
        this.addMenuLink = (link)=>{
            invariant(link.to, `[${link.intlLabel.defaultMessage}]: link.to should be defined`);
            invariant(typeof link.to === 'string', `[${link.intlLabel.defaultMessage}]: Expected link.to to be a string instead received ${typeof link.to}`);
            invariant(link.intlLabel?.id && link.intlLabel?.defaultMessage, `[${link.intlLabel.defaultMessage}]: link.intlLabel.id & link.intlLabel.defaultMessage should be defined`);
            invariant(!link.Component || link.Component && typeof link.Component === 'function', `[${link.intlLabel.defaultMessage}]: link.Component must be a function returning a Promise that returns a default component. Please use: \`Component: () => import(path)\` instead.`);
            if (!link.Component || link.Component && typeof link.Component === 'function' && // @ts-expect-error – shh
            link.Component[Symbol.toStringTag] === 'AsyncFunction') {
                console.warn(`
      [${link.intlLabel.defaultMessage}]: [deprecated] addMenuLink() was called with an async Component from the plugin "${link.intlLabel.defaultMessage}". This will be removed in the future. Please use: \`Component: () => import(path)\` ensuring you return a default export instead.
      `.trim());
            }
            if (link.to.startsWith('/')) {
                console.warn(`[${link.intlLabel.defaultMessage}]: the \`to\` property of your menu link is an absolute path, it should be relative to the root of the application. This has been corrected for you but will be removed in a future version of Strapi.`);
                link.to = link.to.slice(1);
            }
            const { Component, ...restLink } = link;
            if (Component) {
                this._routes.push({
                    path: `${link.to}/*`,
                    lazy: async ()=>{
                        const mod = await Component();
                        if ('default' in mod) {
                            return {
                                Component: mod.default
                            };
                        } else {
                            return {
                                Component: mod
                            };
                        }
                    }
                });
            }
            this.menu.push(restLink);
        };
        this.createSettingsLink = (sectionId, link)=>{
            invariant(this._settings[sectionId], 'The section does not exist');
            invariant(link.id, `[${link.intlLabel.defaultMessage}]: link.id should be defined`);
            invariant(link.intlLabel?.id && link.intlLabel?.defaultMessage, `[${link.intlLabel.defaultMessage}]: link.intlLabel.id & link.intlLabel.defaultMessage`);
            invariant(link.to, `[${link.intlLabel.defaultMessage}]: link.to should be defined`);
            invariant(!link.Component || link.Component && typeof link.Component === 'function', `[${link.intlLabel.defaultMessage}]: link.Component must be a function returning a Promise. Please use: \`Component: () => import(path)\` instead.`);
            if (!link.Component || link.Component && typeof link.Component === 'function' && // @ts-expect-error – shh
            link.Component[Symbol.toStringTag] === 'AsyncFunction') {
                console.warn(`
      [${link.intlLabel.defaultMessage}]: [deprecated] addSettingsLink() was called with an async Component from the plugin "${link.intlLabel.defaultMessage}". This will be removed in the future. Please use: \`Component: () => import(path)\` ensuring you return a default export instead.
      `.trim());
            }
            if (link.to.startsWith('/')) {
                console.warn(`[${link.intlLabel.defaultMessage}]: the \`to\` property of your settings link is an absolute path. It should be relative to \`/settings\`. This has been corrected for you but will be removed in a future version of Strapi.`);
                link.to = link.to.slice(1);
            }
            if (link.to.split('/')[0] === 'settings') {
                console.warn(`[${link.intlLabel.defaultMessage}]: the \`to\` property of your settings link has \`settings\` as the first part of it's path. It should be relative to \`settings\` and therefore, not include it. This has been corrected for you but will be removed in a future version of Strapi.`);
                link.to = link.to.split('/').slice(1).join('/');
            }
            const { Component, ...restLink } = link;
            const settingsIndex = this._routes.findIndex((route)=>route.path === 'settings/*');
            /**
     * This shouldn't happen unless someone has removed the settings section completely.
     * Print a warning if this is the case though.
     */ if (!settingsIndex) {
                console.warn('A third party plugin has removed the settings section, the settings link cannot be added.');
                return;
            } else if (!this._routes[settingsIndex].children) {
                this._routes[settingsIndex].children = [];
            }
            if (Component) {
                this._routes[settingsIndex].children.push({
                    path: `${link.to}/*`,
                    lazy: async ()=>{
                        const mod = await Component();
                        if ('default' in mod) {
                            return {
                                Component: mod.default
                            };
                        } else {
                            return {
                                Component: mod
                            };
                        }
                    }
                });
            }
            this._settings[sectionId].links.push(restLink);
        };
        this._routes = initialRoutes;
    }
}
/* -------------------------------------------------------------------------------------------------
 * getPrintableType
 * -----------------------------------------------------------------------------------------------*/ /**
 * @internal
 * @description Gets the human-friendly printable type name for the given value, for instance it will yield
 * `array` instead of `object`, as the native `typeof` operator would do.
 */ const getPrintableType = (value)=>{
    const nativeType = typeof value;
    if (nativeType === 'object') {
        if (value === null) return 'null';
        if (Array.isArray(value)) return 'array';
        if (value instanceof Object && value.constructor.name !== 'Object') {
            return value.constructor.name;
        }
    }
    return nativeType;
};

/**
 * @description Static reducers are ones we know, they live in the admin package.
 */ const staticReducers = {
    [admin.adminApi.reducerPath]: admin.adminApi.reducer,
    admin_app: Theme.reducer
};
const injectReducerStoreEnhancer = (appReducers)=>(next)=>(...args)=>{
            const store = next(...args);
            const asyncReducers = {};
            return {
                ...store,
                asyncReducers,
                injectReducer: (key, asyncReducer)=>{
                    asyncReducers[key] = asyncReducer;
                    store.replaceReducer(// @ts-expect-error we dynamically add reducers which makes the types uncomfortable.
                    toolkit.combineReducers({
                        ...appReducers,
                        ...asyncReducers
                    }));
                }
            };
        };
/**
 * @description This is the main store configuration function, injected Reducers use our legacy app.addReducer API,
 * which we're trying to phase out. App Middlewares could potentially be improved...?
 */ const configureStoreImpl = (preloadedState = {}, appMiddlewares = [], injectedReducers = {})=>{
    const coreReducers = {
        ...staticReducers,
        ...injectedReducers
    };
    const defaultMiddlewareOptions = {};
    // These are already disabled in 'production' env but we also need to disable it in test environments
    // However, we want to leave them on for development so any issues can still be caught
    if (process.env.NODE_ENV === 'test') {
        defaultMiddlewareOptions.serializableCheck = false;
        defaultMiddlewareOptions.immutableCheck = false;
    }
    const store = toolkit.configureStore({
        preloadedState: {
            admin_app: preloadedState.admin_app
        },
        reducer: coreReducers,
        devTools: process.env.NODE_ENV !== 'production',
        middleware: (getDefaultMiddleware)=>[
                ...getDefaultMiddleware(defaultMiddlewareOptions),
                rtkQueryUnauthorizedMiddleware,
                admin.adminApi.middleware,
                ...appMiddlewares.map((m)=>m())
            ],
        enhancers: [
            injectReducerStoreEnhancer(coreReducers)
        ]
    });
    return store;
};
const rtkQueryUnauthorizedMiddleware = ({ dispatch })=>(next)=>(action)=>{
            // isRejectedWithValue Or isRejected
            if (toolkit.isRejected(action) && action.payload?.status === 401) {
                dispatch(Theme.logout());
                window.location.href = '/admin/auth/login';
                return;
            }
            return next(action);
        };

const getBasename = ()=>(process.env.ADMIN_PATH ?? '').replace(window.location.origin, '');

/* eslint-disable no-await-in-loop */ /* eslint-disable no-restricted-syntax */ const createHook = ()=>{
    const _handlers = [];
    return {
        register (fn) {
            _handlers.push(fn);
        },
        delete (handler) {
            _handlers.splice(_handlers.indexOf(handler), 1);
        },
        runWaterfall (args, store) {
            return _handlers.reduce((acc, fn)=>fn(acc, store), args);
        },
        async runWaterfallAsync (args, store) {
            let result = args;
            for (const fn of _handlers){
                result = await fn(result, store);
            }
            return result;
        },
        runSeries (...args) {
            return _handlers.map((fn)=>fn(...args));
        },
        async runSeriesAsync (...args) {
            const result = [];
            for (const fn of _handlers){
                result.push(await fn(...args));
            }
            return result;
        },
        runParallel (...args) {
            return Promise.all(_handlers.map((fn)=>{
                return fn(...args);
            }));
        }
    };
};

const languageNativeNames = {
    ar: 'العربية',
    ca: 'Català',
    cs: 'Čeština',
    de: 'Deutsch',
    dk: 'Dansk',
    en: 'English',
    'en-GB': 'English (United Kingdom)',
    es: 'Español',
    eu: 'Euskara',
    uz: 'O`zbekcha',
    ro: 'Română',
    fr: 'Français',
    gu: 'Gujarati',
    he: 'עברית',
    hu: 'Magyar',
    id: 'Indonesian',
    it: 'Italiano',
    ja: '日本語',
    ko: '한국어',
    ml: 'Malayalam',
    ms: 'Melayu',
    nl: 'Nederlands',
    no: 'Norwegian',
    pl: 'Polski',
    'pt-BR': 'Português (Brasil)',
    pt: 'Português (Portugal)',
    ru: 'Русский',
    sk: 'Slovenčina',
    sv: 'Swedish',
    th: 'ไทย',
    tr: 'Türkçe',
    uk: 'Українська',
    vi: 'Tiếng Việt',
    'zh-Hans': '中文 (简体)',
    zh: '中文 (繁體)',
    sa: 'संस्कृत',
    hi: 'हिन्दी'
};

function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case './translations/ar.json': return Promise.resolve().then(function () { return require('./ar-CKlv64GT.js'); });
    case './translations/ca.json': return Promise.resolve().then(function () { return require('./ca-Dro6RjTq.js'); });
    case './translations/cs.json': return Promise.resolve().then(function () { return require('./cs-CrhAArjW.js'); });
    case './translations/de.json': return Promise.resolve().then(function () { return require('./de--2g6Hiwv.js'); });
    case './translations/dk.json': return Promise.resolve().then(function () { return require('./dk-DlX9Yc-Z.js'); });
    case './translations/en.json': return Promise.resolve().then(function () { return require('./en-Cxu6LXdV.js'); });
    case './translations/es.json': return Promise.resolve().then(function () { return require('./es-qJwzbuzj.js'); });
    case './translations/eu.json': return Promise.resolve().then(function () { return require('./eu-DLuO9QFa.js'); });
    case './translations/fr.json': return Promise.resolve().then(function () { return require('./fr-l9CvkceZ.js'); });
    case './translations/gu.json': return Promise.resolve().then(function () { return require('./gu-BfN4U3Q0.js'); });
    case './translations/he.json': return Promise.resolve().then(function () { return require('./he-DQnlLpI2.js'); });
    case './translations/hi.json': return Promise.resolve().then(function () { return require('./hi-CAYgw5fw.js'); });
    case './translations/hu.json': return Promise.resolve().then(function () { return require('./hu-CmA0pIab.js'); });
    case './translations/id.json': return Promise.resolve().then(function () { return require('./id-C69myNeZ.js'); });
    case './translations/it.json': return Promise.resolve().then(function () { return require('./it-Bn9y0UG-.js'); });
    case './translations/ja.json': return Promise.resolve().then(function () { return require('./ja-DDL7fKfX.js'); });
    case './translations/ko.json': return Promise.resolve().then(function () { return require('./ko-C_d9Ja0b.js'); });
    case './translations/ml.json': return Promise.resolve().then(function () { return require('./ml-BN6g97vL.js'); });
    case './translations/ms.json': return Promise.resolve().then(function () { return require('./ms-DSUp9TXl.js'); });
    case './translations/nl.json': return Promise.resolve().then(function () { return require('./nl-Bc4mZOba.js'); });
    case './translations/no.json': return Promise.resolve().then(function () { return require('./no-D0VN_ZtA.js'); });
    case './translations/pl.json': return Promise.resolve().then(function () { return require('./pl-D7HFG_xo.js'); });
    case './translations/pt-BR.json': return Promise.resolve().then(function () { return require('./pt-BR-B3KKuF2p.js'); });
    case './translations/pt.json': return Promise.resolve().then(function () { return require('./pt-DCyoSDGa.js'); });
    case './translations/ru.json': return Promise.resolve().then(function () { return require('./ru-Dj1oAKC7.js'); });
    case './translations/sa.json': return Promise.resolve().then(function () { return require('./sa-ftcoOyFZ.js'); });
    case './translations/sk.json': return Promise.resolve().then(function () { return require('./sk-BkoiGl_d.js'); });
    case './translations/sv.json': return Promise.resolve().then(function () { return require('./sv-CYpSsbq3.js'); });
    case './translations/th.json': return Promise.resolve().then(function () { return require('./th-D1Raa9T5.js'); });
    case './translations/tr.json': return Promise.resolve().then(function () { return require('./tr-KY2E7HZC.js'); });
    case './translations/uk.json': return Promise.resolve().then(function () { return require('./uk-WdcESeZB.js'); });
    case './translations/vi.json': return Promise.resolve().then(function () { return require('./vi-BsRo_l_e.js'); });
    case './translations/zh-Hans.json': return Promise.resolve().then(function () { return require('./zh-Hans-Bv055w0d.js'); });
    case './translations/zh.json': return Promise.resolve().then(function () { return require('./zh-B_FImn9T.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }

function __variableDynamicImportRuntime0__(path) {
  switch (path) {
    case './translations/en-GB.js': return Promise.resolve().then(function () { return require('./en-GB-BJWpG5H_.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
const { INJECT_COLUMN_IN_TABLE, MUTATE_COLLECTION_TYPES_LINKS, MUTATE_EDIT_VIEW_LAYOUT, MUTATE_SINGLE_TYPES_LINKS } = HOOKS;
class StrapiApp {
    async bootstrap(customBootstrap) {
        Object.keys(this.appPlugins).forEach((plugin)=>{
            const bootstrap = this.appPlugins[plugin].bootstrap;
            if (bootstrap) {
                bootstrap({
                    addSettingsLink: this.addSettingsLink,
                    addSettingsLinks: this.addSettingsLinks,
                    getPlugin: this.getPlugin,
                    registerHook: this.registerHook
                });
            }
        });
        if (isFunction(customBootstrap)) {
            customBootstrap({
                addComponents: this.addComponents,
                addFields: this.addFields,
                addMenuLink: this.addMenuLink,
                addReducers: this.addReducers,
                addSettingsLink: this.addSettingsLink,
                addSettingsLinks: this.addSettingsLinks,
                getPlugin: this.getPlugin,
                registerHook: this.registerHook
            });
        }
    }
    async register(customRegister) {
        Object.keys(this.appPlugins).forEach((plugin)=>{
            this.appPlugins[plugin].register(this);
        });
        if (isFunction(customRegister)) {
            customRegister(this);
        }
    }
    async loadAdminTrads() {
        const adminLocales = await Promise.all(this.configurations.locales.map(async (locale)=>{
            try {
                const { default: data } = await __variableDynamicImportRuntime0__(`./translations/${locale}.js`);
                return {
                    data,
                    locale
                };
            } catch  {
                try {
                    const { default: data } = await __variableDynamicImportRuntime1__(`./translations/${locale}.json`);
                    return {
                        data,
                        locale
                    };
                } catch  {
                    return {
                        data: null,
                        locale
                    };
                }
            }
        }));
        return adminLocales.reduce((acc, current)=>{
            if (current.data) {
                acc[current.locale] = current.data;
            }
            return acc;
        }, {});
    }
    /**
   * Load the application's translations and merged the custom translations
   * with the default ones.
   */ async loadTrads(customTranslations = {}) {
        const adminTranslations = await this.loadAdminTrads();
        const arrayOfPromises = Object.keys(this.appPlugins).map((plugin)=>{
            const registerTrads = this.appPlugins[plugin].registerTrads;
            if (registerTrads) {
                return registerTrads({
                    locales: this.configurations.locales
                });
            }
            return null;
        }).filter((a)=>a);
        const pluginsTrads = await Promise.all(arrayOfPromises);
        const mergedTrads = pluginsTrads.reduce((acc, currentPluginTrads)=>{
            const pluginTrads = currentPluginTrads.reduce((acc1, current)=>{
                acc1[current.locale] = current.data;
                return acc1;
            }, {});
            Object.keys(pluginTrads).forEach((locale)=>{
                acc[locale] = {
                    ...acc[locale],
                    ...pluginTrads[locale]
                };
            });
            return acc;
        }, {});
        const translations = this.configurations.locales.reduce((acc, current)=>{
            acc[current] = {
                ...adminTranslations[current],
                ...mergedTrads[current] || {},
                ...customTranslations[current] ?? {}
            };
            return acc;
        }, {});
        this.configurations.translations = translations;
        return Promise.resolve();
    }
    render() {
        const localeNames = pick(languageNativeNames, this.configurations.locales || []);
        const locale = localStorage.getItem(Theme.LANGUAGE_LOCAL_STORAGE_KEY) || 'en';
        this.store = configureStoreImpl({
            admin_app: {
                permissions: merge({}, ADMIN_PERMISSIONS_CE, ADMIN_PERMISSIONS_EE),
                theme: {
                    availableThemes: [],
                    currentTheme: localStorage.getItem(Theme.THEME_LOCAL_STORAGE_KEY) || 'system'
                },
                language: {
                    locale: localeNames[locale] ? locale : 'en',
                    localeNames
                },
                token: Theme.getStoredToken()
            }
        }, this.middlewares, this.reducers);
        const router = this.router.createRouter(this, {
            basename: getBasename()
        });
        return /*#__PURE__*/ jsxRuntime.jsx(reactRouterDom.RouterProvider, {
            router: router
        });
    }
    constructor({ config, appPlugins } = {}){
        this.plugins = {};
        this.hooksDict = {};
        this.admin = {
            injectionZones: {}
        };
        this.translations = {};
        this.configurations = {
            authLogo: img,
            head: {
                favicon: ''
            },
            locales: [
                'en'
            ],
            menuLogo: img,
            notifications: {
                releases: true
            },
            themes: {
                light: designSystem.lightTheme,
                dark: designSystem.darkTheme
            },
            translations: {},
            tutorials: true
        };
        /**
   * APIs
   */ this.rbac = new Theme.RBAC();
        this.library = {
            components: {},
            fields: {}
        };
        this.middlewares = [];
        this.reducers = {};
        this.store = null;
        this.customFields = new CustomFields();
        this.addComponents = (components)=>{
            if (Array.isArray(components)) {
                components.map((comp)=>{
                    invariant(comp.Component, 'A Component must be provided');
                    invariant(comp.name, 'A type must be provided');
                    this.library.components[comp.name] = comp.Component;
                });
            } else {
                invariant(components.Component, 'A Component must be provided');
                invariant(components.name, 'A type must be provided');
                this.library.components[components.name] = components.Component;
            }
        };
        this.addFields = (fields)=>{
            if (Array.isArray(fields)) {
                fields.map((field)=>{
                    invariant(field.Component, 'A Component must be provided');
                    invariant(field.type, 'A type must be provided');
                    this.library.fields[field.type] = field.Component;
                });
            } else {
                invariant(fields.Component, 'A Component must be provided');
                invariant(fields.type, 'A type must be provided');
                this.library.fields[fields.type] = fields.Component;
            }
        };
        this.addMiddlewares = (middlewares)=>{
            middlewares.forEach((middleware)=>{
                this.middlewares.push(middleware);
            });
        };
        this.addRBACMiddleware = (m)=>{
            if (Array.isArray(m)) {
                this.rbac.use(m);
            } else {
                this.rbac.use(m);
            }
        };
        this.addReducers = (reducers)=>{
            /**
     * TODO: when we upgrade to redux-toolkit@2 and we can also dynamically add middleware,
     * we'll deprecate these two APIs in favour of their hook counterparts.
     */ Object.entries(reducers).forEach(([name, reducer])=>{
                this.reducers[name] = reducer;
            });
        };
        this.addMenuLink = (link)=>this.router.addMenuLink(link);
        /**
   * @deprecated use `addSettingsLink` instead, it internally supports
   * adding multiple links at once.
   */ this.addSettingsLinks = (sectionId, links)=>{
            invariant(Array.isArray(links), 'TypeError expected links to be an array');
            this.router.addSettingsLink(sectionId, links);
        };
        /**
   * @deprecated use `addSettingsLink` instead, you can pass a section object to
   * create the section and links at the same time.
   */ this.createSettingSection = (section, links)=>this.router.addSettingsLink(section, links);
        this.addSettingsLink = (sectionId, link)=>{
            this.router.addSettingsLink(sectionId, link);
        };
        this.createCustomConfigurations = (customConfig)=>{
            if (customConfig.locales) {
                this.configurations.locales = [
                    'en',
                    ...customConfig.locales?.filter((loc)=>loc !== 'en') || []
                ];
            }
            if (customConfig.auth?.logo) {
                this.configurations.authLogo = customConfig.auth.logo;
            }
            if (customConfig.menu?.logo) {
                this.configurations.menuLogo = customConfig.menu.logo;
            }
            if (customConfig.head?.favicon) {
                this.configurations.head.favicon = customConfig.head.favicon;
            }
            if (customConfig.theme) {
                const darkTheme = customConfig.theme.dark;
                const lightTheme = customConfig.theme.light;
                if (!darkTheme && !lightTheme) {
                    console.warn(`[deprecated] In future versions, Strapi will stop supporting this theme customization syntax. The theme configuration accepts a light and a dark key to customize each theme separately. See https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#theme-extension.`.trim());
                    merge(this.configurations.themes.light, customConfig.theme);
                }
                if (lightTheme) merge(this.configurations.themes.light, lightTheme);
                if (darkTheme) merge(this.configurations.themes.dark, darkTheme);
            }
            if (customConfig.notifications?.releases !== undefined) {
                this.configurations.notifications.releases = customConfig.notifications.releases;
            }
            if (customConfig.tutorials !== undefined) {
                this.configurations.tutorials = customConfig.tutorials;
            }
        };
        this.createHook = (name)=>{
            this.hooksDict[name] = createHook();
        };
        this.getAdminInjectedComponents = (moduleName, containerName, blockName)=>{
            try {
                // @ts-expect-error – we have a catch block so if you don't pass it correctly we still return an array.
                return this.admin.injectionZones[moduleName][containerName][blockName] || [];
            } catch (err) {
                console.error('Cannot get injected component', err);
                return [];
            }
        };
        this.getPlugin = (pluginId)=>this.plugins[pluginId];
        this.registerHook = (name, fn)=>{
            invariant(this.hooksDict[name], `The hook ${name} is not defined. You are trying to register a hook that does not exist in the application.`);
            this.hooksDict[name].register(fn);
        };
        this.registerPlugin = (pluginConf)=>{
            const plugin = new Plugin(pluginConf);
            this.plugins[plugin.pluginId] = plugin;
        };
        this.runHookSeries = (name, asynchronous = false)=>asynchronous ? this.hooksDict[name].runSeriesAsync() : this.hooksDict[name].runSeries();
        this.runHookWaterfall = (name, initialValue, store)=>{
            return this.hooksDict[name].runWaterfall(initialValue, store);
        };
        this.runHookParallel = (name)=>this.hooksDict[name].runParallel();
        this.appPlugins = appPlugins || {};
        this.createCustomConfigurations(config ?? {});
        this.createHook(INJECT_COLUMN_IN_TABLE);
        this.createHook(MUTATE_COLLECTION_TYPES_LINKS);
        this.createHook(MUTATE_SINGLE_TYPES_LINKS);
        this.createHook(MUTATE_EDIT_VIEW_LAYOUT);
        this.router = new Router(getInitialRoutes());
    }
}

const renderAdmin = async (mountNode, { plugins, customisations, features })=>{
    if (!mountNode) {
        throw new Error('[@strapi/admin]: Could not find the root element to mount the admin app');
    }
    window.strapi = {
        /**
     * This ENV variable is passed from the strapi instance, by default no url is set
     * in the config and therefore the instance returns you an empty string so URLs are relative.
     *
     * To ensure that the backendURL is always set, we use the window.location.origin as a fallback.
     */ backendURL: admin.createAbsoluteUrl(process.env.STRAPI_ADMIN_BACKEND_URL),
        isEE: false,
        telemetryDisabled: process.env.STRAPI_TELEMETRY_DISABLED === 'true',
        future: {
            isEnabled: (name)=>{
                return features?.future?.[name] === true;
            }
        },
        // @ts-expect-error – there's pollution from the global scope of Node.
        features: {
            SSO: 'sso',
            AUDIT_LOGS: 'audit-logs',
            REVIEW_WORKFLOWS: 'review-workflows',
            /**
       * If we don't get the license then we know it's not EE
       * so no feature is enabled.
       */ isEnabled: ()=>false
        },
        projectType: 'Community',
        flags: {
            nps: false,
            promoteEE: true
        }
    };
    const { get } = admin.getFetchClient();
    try {
        const { data: { data: { isEE, features, flags } } } = await get('/admin/project-type');
        window.strapi.isEE = isEE;
        window.strapi.flags = flags;
        window.strapi.features = {
            ...window.strapi.features,
            isEnabled: (featureName)=>features.some((feature)=>feature.name === featureName)
        };
        window.strapi.projectType = isEE ? 'Enterprise' : 'Community';
    } catch (err) {
        /**
     * If this fails, we simply don't activate any EE features.
     * Should we warn clearer in the UI?
     */ console.error(err);
    }
    const app = new StrapiApp({
        config: customisations?.config,
        appPlugins: plugins
    });
    await app.register(customisations?.register);
    await app.bootstrap(customisations?.bootstrap);
    await app.loadTrads(customisations?.config?.translations);
    client.createRoot(mountNode).render(app.render());
    if (typeof module !== 'undefined' && module && 'hot' in module && typeof module.hot === 'object' && module.hot !== null && 'accept' in module.hot && typeof module.hot.accept === 'function') {
        module.hot.accept();
    }
    if (typeof undefined?.accept === 'function') {
        undefined.accept();
    }
};

/**
 * @beta
 * @public
 * @description A simple confirm dialog that out of the box can be used to confirm an action.
 * The component can additionally be customised if required e.g. the footer actions can be
 * completely replaced, but cannot be removed. Passing a string as the children prop will render
 * the string as the body of the dialog. If you need more control over the body, you can pass a
 * custom component as the children prop.
 * @example
 * ```tsx
 * import { Dialog } from '@strapi/design-system';
 *
 * const DeleteAction = ({ id }) => {
 *  const [isOpen, setIsOpen] = React.useState(false);
 *
 *  const [delete] = useDeleteMutation()
 *  const handleConfirm = async () => {
 *    await delete(id)
 *    setIsOpen(false)
 *  }
 *
 *  return (
 *    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>
 *      <Dialog.Trigger>
 *        <Button>Delete</Button>
 *      </Dialog.Trigger>
 *      <ConfirmDialog onConfirm={handleConfirm} />
 *    </Dialog.Root>
 *  )
 * }
 * ```
 */ const ConfirmDialog = ({ children, icon = /*#__PURE__*/ jsxRuntime.jsx(StyledWarning, {}), onConfirm, variant = 'danger-light', startAction, endAction, title })=>{
    const { formatMessage } = reactIntl.useIntl();
    const [isConfirming, setIsConfirming] = React__namespace.useState(false);
    const content = children || formatMessage({
        id: 'app.confirm.body',
        defaultMessage: 'Are you sure?'
    });
    const handleConfirm = async (e)=>{
        if (!onConfirm) {
            return;
        }
        try {
            setIsConfirming(true);
            await onConfirm(e);
        } finally{
            setIsConfirming(false);
        }
    };
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Dialog.Content, {
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Header, {
                children: title || formatMessage({
                    id: 'app.components.ConfirmDialog.title',
                    defaultMessage: 'Confirmation'
                })
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Body, {
                icon: icon,
                children: content
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Dialog.Footer, {
                children: [
                    startAction || /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Cancel, {
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                            fullWidth: true,
                            variant: "tertiary",
                            onClick: (e)=>{
                                e.stopPropagation();
                            },
                            children: formatMessage({
                                id: 'app.components.Button.cancel',
                                defaultMessage: 'Cancel'
                            })
                        })
                    }),
                    endAction || /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Action, {
                        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                            fullWidth: true,
                            onClick: handleConfirm,
                            variant: variant,
                            loading: isConfirming,
                            children: formatMessage({
                                id: 'app.components.Button.confirm',
                                defaultMessage: 'Confirm'
                            })
                        })
                    })
                ]
            })
        ]
    });
};
const StyledWarning = styledComponents.styled(icons.WarningCircle)`
  width: 24px;
  height: 24px;

  path {
    fill: ${({ theme })=>theme.colors.danger600};
  }
`;

const useIsMounted = ()=>{
    const isMounted = React__namespace.useRef(false);
    React__namespace.useLayoutEffect(()=>{
        isMounted.current = true;
        return ()=>{
            isMounted.current = false;
        };
    }, []);
    return isMounted;
};

/**
 * @internal
 * @description Return a function that re-renders this component, if still mounted
 * @warning DO NOT USE EXCEPT SPECIAL CASES.
 */ const useForceUpdate = ()=>{
    const [tick, update] = React__namespace.useState();
    const isMounted = useIsMounted();
    const forceUpdate = React__namespace.useCallback(()=>{
        if (isMounted.current) {
            update(Math.random());
        }
    }, [
        isMounted,
        update
    ]);
    return [
        tick,
        forceUpdate
    ];
};

/**
 * @internal
 * @description Create a throttled version of a callback
 * @example
 * ```tsx
 * // First create a callback using React’s `useCallback` hook
 * const myCallback = useCallback(() => {
 *   // this is not throttled
 * }, [])
 *
 * // Then make a throttled version using the `useThrottledCallback` hook
 * const myThrottledCallback = useThrottledCallback(myCallback, 100)
 *
 * // Call the throttled callback
 * <Button onClick={myThrottledCallback} />
 * ```
 */ const useThrottledCallback = (callback, wait, options)=>{
    const throttledCallback = React.useMemo(()=>throttle(callback, wait, options), [
        callback,
        options,
        wait
    ]);
    return throttledCallback;
};

/* -------------------------------------------------------------------------------------------------
 * requestIdleCallbackShim
 * -----------------------------------------------------------------------------------------------*/ const requestIdleCallbackShim = (callback)=>{
    const start = Date.now();
    return setTimeout(()=>{
        callback({
            didTimeout: false,
            timeRemaining () {
                return Math.max(0, Date.now() - start);
            }
        });
    }, 1);
};
const _requestIdleCallback = typeof requestIdleCallback === 'undefined' ? requestIdleCallbackShim : requestIdleCallback;
/* -------------------------------------------------------------------------------------------------
 * cancelIdleCallbackShim
 * -----------------------------------------------------------------------------------------------*/ const cancelIdleCallbackShim = (handle)=>{
    return clearTimeout(handle);
};
const _cancelIdleCallback = typeof cancelIdleCallback === 'undefined' ? cancelIdleCallbackShim : cancelIdleCallback;

/**
 * @internal
 *
 * @description This component takes an array of DescriptionComponents, which are react components that return objects as opposed to JSX.
 * We render these in their own isolated memoized component and use an update function to push the data back out to the parent.
 * Saving it in a ref, and then "forcing" an update of the parent component to render the children of this component with the new data.
 *
 * The DescriptionCompoonents can take props and use react hooks hence why we render them as if they were a component. The update
 * function is throttled and managed to avoid erroneous updates where we could wait a single tick to update the entire UI, which
 * creates less "popping" from functions being called in rapid succession.
 */ const DescriptionComponentRenderer = ({ children, props, descriptions })=>{
    const statesRef = React__namespace.useRef({});
    const [tick, forceUpdate] = useForceUpdate();
    const requestHandle = React__namespace.useRef(null);
    const requestUpdate = React__namespace.useCallback(()=>{
        if (requestHandle.current) {
            _cancelIdleCallback(requestHandle.current);
        }
        requestHandle.current = _requestIdleCallback(()=>{
            requestHandle.current = null;
            forceUpdate();
        });
    }, [
        forceUpdate
    ]);
    /**
   * This will avoid us calling too many react updates in a short space of time.
   */ const throttledRequestUpdate = useThrottledCallback(requestUpdate, 60, {
        trailing: true
    });
    const update = React__namespace.useCallback((id, description)=>{
        if (description === null) {
            delete statesRef.current[id];
        } else {
            const current = statesRef.current[id];
            statesRef.current[id] = {
                ...current,
                value: {
                    ...description,
                    id
                }
            };
        }
        throttledRequestUpdate();
    }, [
        throttledRequestUpdate
    ]);
    const ids = React__namespace.useMemo(()=>descriptions.map((description)=>getCompId(description)), [
        descriptions
    ]);
    const states = React__namespace.useMemo(()=>ids.map((id)=>statesRef.current[id]?.value).filter((state)=>state !== null && state !== undefined), /**
     * we leave tick in the deps to ensure the memo is recalculated when the `update` function  is called.
     * the `ids` will most likely be stable unless we get new actions, but we can't respond to the Description
     * Component changing the ref data in any other way.
     */ // eslint-disable-next-line react-hooks/exhaustive-deps
    [
        ids,
        tick
    ]);
    return /*#__PURE__*/ jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [
            descriptions.map((description)=>{
                const key = getCompId(description);
                return /*#__PURE__*/ jsxRuntime.jsx(Description, {
                    id: key,
                    description: description,
                    props: props,
                    update: update
                }, key);
            }),
            children(states)
        ]
    });
};
/**
 * Descriptions are objects, but to create the object, we allow users to create components,
 * this means they can use react hooks in them. It also means we need to render them
 * within a component, however because they return an object of data we can't add that
 * to the react tree, instead we push it back out to the parent.
 */ const Description = /*#__PURE__*/ React__namespace.memo(({ description, id, props, update })=>{
    const comp = description(props);
    useShallowCompareEffect(()=>{
        update(id, comp);
        return ()=>{
            update(id, null);
        };
    }, comp);
    return null;
}, (prev, next)=>isEqual(prev.props, next.props));
/* -------------------------------------------------------------------------------------------------
 * Helpers
 * -----------------------------------------------------------------------------------------------*/ const ids = new WeakMap();
let counter = 0;
function getCompId(comp) {
    const cachedId = ids.get(comp);
    if (cachedId) return cachedId;
    const id = `${comp.name || comp.displayName || '<anonymous>'}-${counter++}`;
    ids.set(comp, id);
    return id;
}
const useShallowCompareMemoize = (value)=>{
    const ref = React__namespace.useRef(undefined);
    if (!isEqual(value, ref.current)) {
        ref.current = value;
    }
    return [
        ref.current
    ];
};
const useShallowCompareEffect = (callback, dependencies)=>{
    // eslint-disable-next-line react-hooks/exhaustive-deps -- the linter isn't able to see that deps are properly handled here
    React__namespace.useEffect(callback, useShallowCompareMemoize(dependencies));
};

/**
 * @description these are shared by everyone
 */ const BASE_FILTERS = [
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$eq',
            defaultMessage: 'is'
        },
        value: '$eq'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$ne',
            defaultMessage: 'is not'
        },
        value: '$ne'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$null',
            defaultMessage: 'is null'
        },
        value: '$null'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$notNull',
            defaultMessage: 'is not null'
        },
        value: '$notNull'
    }
];
/**
 * @description typically performed on attributes that are numerical incl. dates.
 */ const NUMERIC_FILTERS = [
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$gt',
            defaultMessage: 'is greater than'
        },
        value: '$gt'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$gte',
            defaultMessage: 'is greater than or equal to'
        },
        value: '$gte'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$lt',
            defaultMessage: 'is less than'
        },
        value: '$lt'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$lte',
            defaultMessage: 'is less than or equal to'
        },
        value: '$lte'
    }
];
const IS_SENSITIVE_FILTERS = [
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$eqi',
            defaultMessage: 'is (case insensitive)'
        },
        value: '$eqi'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$nei',
            defaultMessage: 'is not (case insensitive)'
        },
        value: '$nei'
    }
];
/**
 * @description typically performed on attributes that are strings for partial looking.
 */ const CONTAINS_FILTERS = [
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$contains',
            defaultMessage: 'contains'
        },
        value: '$contains'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$containsi',
            defaultMessage: 'contains (case insensitive)'
        },
        value: '$containsi'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$notContains',
            defaultMessage: 'not contains'
        },
        value: '$notContains'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$notContainsi',
            defaultMessage: 'not contains (case insensitive)'
        },
        value: '$notContainsi'
    }
];
/**
 * @description only used on string attributes.
 */ const STRING_PARSE_FILTERS = [
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$startsWith',
            defaultMessage: 'starts with'
        },
        value: '$startsWith'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$startsWithi',
            defaultMessage: 'starts with (case insensitive)'
        },
        value: '$startsWithi'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$endsWith',
            defaultMessage: 'ends with'
        },
        value: '$endsWith'
    },
    {
        label: {
            id: 'components.FilterOptions.FILTER_TYPES.$endsWithi',
            defaultMessage: 'ends with (case insensitive)'
        },
        value: '$endsWithi'
    }
];
const FILTERS_WITH_NO_VALUE = [
    '$null',
    '$notNull'
];

function useControllableState({ prop, defaultProp, onChange = ()=>{} }) {
    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({
        defaultProp,
        onChange
    });
    const isControlled = prop !== undefined;
    const value = isControlled ? prop : uncontrolledProp;
    const handleChange = designSystem.useCallbackRef(onChange);
    const setValue = React__namespace.useCallback((nextValue)=>{
        if (isControlled) {
            const setter = nextValue;
            const value = typeof nextValue === 'function' ? setter(prop) : nextValue;
            if (value !== prop) handleChange(value);
        } else {
            setUncontrolledProp(nextValue);
        }
    }, [
        isControlled,
        prop,
        setUncontrolledProp,
        handleChange
    ]);
    return [
        value,
        setValue
    ];
}
function useUncontrolledState({ defaultProp, onChange }) {
    const uncontrolledState = React__namespace.useState(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = React__namespace.useRef(value);
    const handleChange = designSystem.useCallbackRef(onChange);
    React__namespace.useEffect(()=>{
        if (prevValueRef.current !== value) {
            handleChange(value);
            prevValueRef.current = value;
        }
    }, [
        value,
        prevValueRef,
        handleChange
    ]);
    return uncontrolledState;
}

const [FiltersProvider, useFilters] = Theme.createContext('Filters');
const Root$2 = ({ children, disabled = false, onChange, options = [], onOpenChange, open: openProp, defaultOpen, ...restProps })=>{
    const handleChange = (data)=>{
        if (onChange) {
            onChange(data);
        }
    };
    const [open = false, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
    });
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Popover.Root, {
        open: open,
        onOpenChange: setOpen,
        ...restProps,
        children: /*#__PURE__*/ jsxRuntime.jsx(FiltersProvider, {
            setOpen: setOpen,
            disabled: disabled,
            onChange: handleChange,
            options: options,
            children: children
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * Trigger
 * -----------------------------------------------------------------------------------------------*/ const Trigger = /*#__PURE__*/ React__namespace.forwardRef(({ label }, forwardedRef)=>{
    const { formatMessage } = reactIntl.useIntl();
    const disabled = useFilters('Trigger', ({ disabled })=>disabled);
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Popover.Trigger, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
            variant: "tertiary",
            ref: forwardedRef,
            startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.Filter, {}),
            size: "S",
            disabled: disabled,
            children: label || formatMessage({
                id: 'app.utils.filters',
                defaultMessage: 'Filters'
            })
        })
    });
});
/* -------------------------------------------------------------------------------------------------
 * Popover
 * -----------------------------------------------------------------------------------------------*/ const PopoverImpl = ()=>{
    const [{ query }, setQuery] = Theme.useQueryParams();
    const { formatMessage } = reactIntl.useIntl();
    const options = useFilters('Popover', ({ options })=>options);
    const onChange = useFilters('Popover', ({ onChange })=>onChange);
    const setOpen = useFilters('Popover', ({ setOpen })=>setOpen);
    if (options.length === 0) {
        return null;
    }
    const handleSubmit = (data)=>{
        const value = FILTERS_WITH_NO_VALUE.includes(data.filter) ? 'true' : encodeURIComponent(data.value ?? '');
        if (!value) {
            return;
        }
        if (onChange) {
            onChange(data);
        }
        /**
     * There will ALWAYS be an option because we use the options to create the form data.
     */ const fieldOptions = options.find((filter)=>filter.name === data.name);
        /**
     * If the filter is a relation, we need to nest the filter object,
     * we filter based on the mainField of the relation, if there is no mainField, we use the id.
     * At the end, we pass the operator & value. This value _could_ look like:
     * ```json
     * {
     *  "$eq": "1",
     * }
     * ```
     */ const operatorValuePairing = {
            [data.filter]: value
        };
        const newFilterQuery = {
            ...query.filters,
            $and: [
                ...query.filters?.$and ?? [],
                {
                    [data.name]: fieldOptions.type === 'relation' ? {
                        [fieldOptions.mainField?.name ?? 'id']: operatorValuePairing
                    } : operatorValuePairing
                }
            ]
        };
        setQuery({
            filters: newFilterQuery,
            page: 1
        });
        setOpen(false);
    };
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Popover.Content, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
            padding: 3,
            children: /*#__PURE__*/ jsxRuntime.jsx(Form, {
                method: "POST",
                initialValues: {
                    name: options[0]?.name,
                    filter: BASE_FILTERS[0].value
                },
                onSubmit: handleSubmit,
                children: ({ values: formValues, modified, isSubmitting })=>{
                    const filter = options.find((filter)=>filter.name === formValues.name);
                    const Input = filter?.input || MemoizedInputRenderer;
                    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                        direction: "column",
                        alignItems: "stretch",
                        gap: 2,
                        style: {
                            minWidth: 184
                        },
                        children: [
                            [
                                {
                                    ['aria-label']: formatMessage({
                                        id: 'app.utils.select-field',
                                        defaultMessage: 'Select field'
                                    }),
                                    name: 'name',
                                    options: options.map((filter)=>({
                                            label: filter.label,
                                            value: filter.name
                                        })),
                                    placholder: formatMessage({
                                        id: 'app.utils.select-field',
                                        defaultMessage: 'Select field'
                                    }),
                                    type: 'enumeration'
                                },
                                {
                                    ['aria-label']: formatMessage({
                                        id: 'app.utils.select-filter',
                                        defaultMessage: 'Select filter'
                                    }),
                                    name: 'filter',
                                    options: filter?.operators || getFilterList(filter).map((opt)=>({
                                            label: formatMessage(opt.label),
                                            value: opt.value
                                        })),
                                    placeholder: formatMessage({
                                        id: 'app.utils.select-filter',
                                        defaultMessage: 'Select filter'
                                    }),
                                    type: 'enumeration'
                                }
                            ].map((field)=>/*#__PURE__*/ jsxRuntime.jsx(MemoizedInputRenderer, {
                                    ...field
                                }, field.name)),
                            filter && formValues.filter && formValues.filter !== '$null' && formValues.filter !== '$notNull' ? /*#__PURE__*/ jsxRuntime.jsx(Input, {
                                ...filter,
                                label: null,
                                "aria-label": filter.label,
                                name: "value",
                                // @ts-expect-error – if type is `custom` then `Input` will be a custom component.
                                type: filter.mainField?.type ?? filter.type
                            }) : null,
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                                disabled: !modified || isSubmitting,
                                size: "L",
                                variant: "secondary",
                                startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.Plus, {}),
                                type: "submit",
                                fullWidth: true,
                                children: formatMessage({
                                    id: 'app.utils.add-filter',
                                    defaultMessage: 'Add filter'
                                })
                            })
                        ]
                    });
                }
            })
        })
    });
};
/**
 * Depending on the selected field find the possible filters to apply
 */ const getFilterList = (filter)=>{
    if (!filter) {
        return [];
    }
    const type = filter.mainField?.type ? filter.mainField.type : filter.type;
    switch(type){
        case 'email':
        case 'text':
        case 'string':
            {
                return [
                    ...BASE_FILTERS,
                    ...IS_SENSITIVE_FILTERS,
                    ...CONTAINS_FILTERS,
                    ...STRING_PARSE_FILTERS
                ];
            }
        case 'float':
        case 'integer':
        case 'biginteger':
        case 'decimal':
            {
                return [
                    ...BASE_FILTERS,
                    ...NUMERIC_FILTERS
                ];
            }
        case 'time':
        case 'date':
            {
                return [
                    ...BASE_FILTERS,
                    ...NUMERIC_FILTERS,
                    ...CONTAINS_FILTERS
                ];
            }
        case 'datetime':
            {
                return [
                    ...BASE_FILTERS,
                    ...NUMERIC_FILTERS
                ];
            }
        case 'enumeration':
            {
                return BASE_FILTERS;
            }
        default:
            return [
                ...BASE_FILTERS,
                ...IS_SENSITIVE_FILTERS
            ];
    }
};
/* -------------------------------------------------------------------------------------------------
 * List
 * -----------------------------------------------------------------------------------------------*/ const List = ()=>{
    const [{ query }, setQuery] = Theme.useQueryParams();
    const options = useFilters('List', ({ options })=>options);
    const handleClick = (data)=>{
        /**
     * Check the name, operator and value to see if it already exists in the query
     * if it does, remove it.
     */ const nextFilters = (query?.filters?.$and ?? []).filter((filter)=>{
            const [attributeName] = Object.keys(filter);
            if (attributeName !== data.name) {
                return true;
            }
            const { type, mainField } = options.find(({ name })=>name === attributeName);
            if (type === 'relation') {
                const filterObj = filter[attributeName][mainField?.name ?? 'id'];
                if (typeof filterObj === 'object') {
                    const [operator] = Object.keys(filterObj);
                    const value = filterObj[operator];
                    return !(operator === data.filter && value === data.value);
                }
                return true;
            } else {
                const filterObj = filter[attributeName];
                const [operator] = Object.keys(filterObj);
                const value = filterObj[operator];
                return !(operator === data.filter && value === data.value);
            }
        });
        setQuery({
            filters: {
                $and: nextFilters
            },
            page: 1
        });
    };
    if (!query?.filters?.$and?.length) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsx(jsxRuntime.Fragment, {
        children: query?.filters?.$and?.map((queryFilter)=>{
            const [attributeName] = Object.keys(queryFilter);
            const filter = options.find(({ name })=>name === attributeName);
            const filterObj = queryFilter[attributeName];
            if (!filter || typeof filterObj !== 'object' || filterObj === null) {
                return null;
            }
            if (filter.type === 'relation') {
                const modelFilter = filterObj[filter.mainField?.name ?? 'id'];
                if (typeof modelFilter === 'object') {
                    const [operator] = Object.keys(modelFilter);
                    const value = modelFilter[operator];
                    return /*#__PURE__*/ jsxRuntime.jsx(AttributeTag, {
                        ...filter,
                        onClick: handleClick,
                        operator: operator,
                        value: value
                    }, `${attributeName}-${operator}-${value}`);
                }
                return null;
            } else {
                const [operator] = Object.keys(filterObj);
                const value = filterObj[operator];
                /**
           * Something has gone wrong here, because the attribute is not a relation
           * but we have a nested filter object.
           */ if (typeof value === 'object') {
                    return null;
                }
                return /*#__PURE__*/ jsxRuntime.jsx(AttributeTag, {
                    ...filter,
                    onClick: handleClick,
                    operator: operator,
                    value: value
                }, `${attributeName}-${operator}-${value}`);
            }
        })
    });
};
const AttributeTag = ({ input, label, mainField, name, onClick, operator, options, value, ...filter })=>{
    const { formatMessage, formatDate, formatTime, formatNumber } = reactIntl.useIntl();
    const handleClick = ()=>{
        onClick({
            name,
            value,
            filter: operator
        });
    };
    const type = mainField?.type ? mainField.type : filter.type;
    let formattedValue = value;
    switch(type){
        case 'date':
            formattedValue = formatDate(value, {
                dateStyle: 'full'
            });
            break;
        case 'datetime':
            formattedValue = formatDate(value, {
                dateStyle: 'full',
                timeStyle: 'short'
            });
            break;
        case 'time':
            const [hour, minute] = value.split(':');
            const date = new Date();
            date.setHours(Number(hour));
            date.setMinutes(Number(minute));
            formattedValue = formatTime(date, {
                hour: 'numeric',
                minute: 'numeric'
            });
            break;
        case 'float':
        case 'integer':
        case 'biginteger':
        case 'decimal':
            formattedValue = formatNumber(Number(value));
            break;
    }
    // Handle custom input
    if (input && options) {
        // If the custom input has an options array, find the option with a customValue matching the query value
        const selectedOption = options.find((option)=>{
            return (typeof option === 'string' ? option : option.value) === value;
        });
        formattedValue = selectedOption ? typeof selectedOption === 'string' ? selectedOption : selectedOption.label ?? selectedOption.value : value;
    }
    const content = `${label} ${formatMessage({
        id: `components.FilterOptions.FILTER_TYPES.${operator}`,
        defaultMessage: operator
    })} ${operator !== '$null' && operator !== '$notNull' ? formattedValue : ''}`;
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tag, {
        padding: 1,
        onClick: handleClick,
        icon: /*#__PURE__*/ jsxRuntime.jsx(icons.Cross, {}),
        children: content
    });
};
/* -------------------------------------------------------------------------------------------------
 * EXPORTS
 * -----------------------------------------------------------------------------------------------*/ const Filters = {
    List,
    Popover: PopoverImpl,
    Root: Root$2,
    Trigger
};

const [PaginationProvider, usePagination] = Theme.createContext('Pagination');
/**
 * @description The root component for the composable pagination component.
 * It's advised to spread the entire pagination option object into this component.
 *
 * @example
 * ```tsx
 * const MyComponent = () => {
 *  return (
 *    <Pagination.Root {...response.pagination}>
 *      <Pagination.PageSize />
 *      <Pagination.Links />
 *    </Pagination.Root>
 *  );
 * };
 * ```
 */ const Root$1 = /*#__PURE__*/ React__namespace.forwardRef(({ children, defaultPageSize = 10, pageCount = 0, defaultPage = 1, onPageSizeChange, total = 0 }, forwardedRef)=>{
    const [{ query }, setQuery] = Theme.useQueryParams({
        pageSize: defaultPageSize.toString(),
        page: defaultPage.toString()
    });
    const setPageSize = (pageSize)=>{
        setQuery({
            pageSize,
            page: '1'
        });
        if (onPageSizeChange) {
            onPageSizeChange(pageSize);
        }
    };
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
        ref: forwardedRef,
        paddingTop: 4,
        paddingBottom: 4,
        alignItems: "flex-end",
        justifyContent: "space-between",
        children: /*#__PURE__*/ jsxRuntime.jsx(PaginationProvider, {
            currentQuery: query,
            page: query.page,
            pageSize: query.pageSize,
            pageCount: pageCount.toString(),
            setPageSize: setPageSize,
            total: total,
            children: children
        })
    });
});
/* -------------------------------------------------------------------------------------------------
 * PageSize
 * -----------------------------------------------------------------------------------------------*/ /**
 * @description The page size component is responsible for rendering the select input that allows
 * the user to change the number of items displayed per page.
 * If the total number of items is less than the minimum option, this component will not render.
 */ const PageSize = ({ options = [
    '10',
    '20',
    '50',
    '100'
] })=>{
    const { formatMessage } = reactIntl.useIntl();
    const pageSize = usePagination('PageSize', (state)=>state.pageSize);
    const totalCount = usePagination('PageSize', (state)=>state.total);
    const setPageSize = usePagination('PageSize', (state)=>state.setPageSize);
    const handleChange = (value)=>{
        setPageSize(value);
    };
    const minimumOption = parseInt(options[0], 10);
    if (minimumOption >= totalCount) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
        gap: 2,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelect, {
                size: "S",
                "aria-label": formatMessage({
                    id: 'components.PageFooter.select',
                    defaultMessage: 'Entries per page'
                }),
                // @ts-expect-error from the DS V2 this won't be needed because we're only returning strings.
                onChange: handleChange,
                value: pageSize,
                children: options.map((option)=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                        value: option,
                        children: option
                    }, option))
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                textColor: "neutral600",
                tag: "span",
                children: formatMessage({
                    id: 'components.PageFooter.select',
                    defaultMessage: 'Entries per page'
                })
            })
        ]
    });
};
/* -------------------------------------------------------------------------------------------------
 * Links
 * -----------------------------------------------------------------------------------------------*/ /**
 * The component works as follows
 * `1` , 2, 3, ... 10
 * 1, `2`, 3, ... 10
 * 1, 2, `3`, 4, ... 10
 * 1, 2, 3, `4`, 5, ... 10
 * 1, ..,4, `5`, 6, ... 10
 *
 * 1, ...., 8, 9, `10`
 * 1, ...., 8, `9`, 10
 * 1, ...., 7, `8`, 9, 10
 * 1, ... 6, `7`, 8, 9, 10
 */ /**
 * @description The links component is responsible for rendering the pagination links.
 * If the total number of pages is less than or equal to 1, this component will not render.
 */ const Links = ({ boundaryCount = 1, siblingCount = 1 })=>{
    const { formatMessage } = reactIntl.useIntl();
    const query = usePagination('Links', (state)=>state.currentQuery);
    const currentPage = usePagination('Links', (state)=>state.page);
    const totalPages = usePagination('Links', (state)=>state.pageCount);
    const pageCount = parseInt(totalPages, 10);
    const activePage = parseInt(currentPage, 10);
    const range = (start, end)=>{
        const length = end - start + 1;
        return Array.from({
            length
        }, (_, i)=>start + i);
    };
    const startPages = range(1, Math.min(boundaryCount, pageCount));
    const endPages = range(Math.max(pageCount - boundaryCount + 1, boundaryCount + 1), pageCount);
    const siblingsStart = Math.max(Math.min(// Natural start
    activePage - siblingCount, // Lower boundary when page is high
    pageCount - boundaryCount - siblingCount * 2 - 1), // Greater than startPages
    boundaryCount + 2);
    const siblingsEnd = Math.min(Math.max(// Natural end
    activePage + siblingCount, // Upper boundary when page is low
    boundaryCount + siblingCount * 2 + 2), // Less than endPages
    endPages.length > 0 ? endPages[0] - 2 : pageCount - 1);
    const items = [
        ...startPages,
        // Start ellipsis
        // eslint-disable-next-line no-nested-ternary
        ...siblingsStart > boundaryCount + 2 ? [
            'start-ellipsis'
        ] : boundaryCount + 1 < pageCount - boundaryCount ? [
            boundaryCount + 1
        ] : [],
        // Sibling pages
        ...range(siblingsStart, siblingsEnd),
        // End ellipsis
        // eslint-disable-next-line no-nested-ternary
        ...siblingsEnd < pageCount - boundaryCount - 1 ? [
            'end-ellipsis'
        ] : pageCount - boundaryCount > boundaryCount ? [
            pageCount - boundaryCount
        ] : [],
        ...endPages
    ];
    if (pageCount <= 1) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Pagination, {
        activePage: activePage,
        pageCount: pageCount,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.PreviousLink, {
                tag: reactRouterDom.Link,
                to: {
                    search: qs.stringify({
                        ...query,
                        page: activePage - 1
                    })
                },
                children: formatMessage({
                    id: 'components.pagination.go-to-previous',
                    defaultMessage: 'Go to previous page'
                })
            }),
            items.map((item)=>{
                if (typeof item === 'number') {
                    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.PageLink, {
                        tag: reactRouterDom.Link,
                        number: item,
                        to: {
                            search: qs.stringify({
                                ...query,
                                page: item
                            })
                        },
                        children: formatMessage({
                            id: 'components.pagination.go-to',
                            defaultMessage: 'Go to page {page}'
                        }, {
                            page: item
                        })
                    }, item);
                }
                return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dots, {}, item);
            }),
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.NextLink, {
                tag: reactRouterDom.Link,
                to: {
                    search: qs.stringify({
                        ...query,
                        page: activePage + 1
                    })
                },
                children: formatMessage({
                    id: 'components.pagination.go-to-next',
                    defaultMessage: 'Go to next page'
                })
            })
        ]
    });
};
/* -------------------------------------------------------------------------------------------------
 * EXPORTS
 * -----------------------------------------------------------------------------------------------*/ const Pagination = {
    Root: Root$1,
    Links,
    PageSize
};

const SearchInput = ({ disabled, label, placeholder, trackedEvent, trackedEventDetails })=>{
    const inputRef = React__namespace.useRef(null);
    const iconButtonRef = React__namespace.useRef(null);
    const [{ query }, setQuery] = Theme.useQueryParams();
    const [value, setValue] = React__namespace.useState(query?._q || '');
    const [isOpen, setIsOpen] = React__namespace.useState(!!value);
    const { formatMessage } = reactIntl.useIntl();
    const { trackUsage } = Theme.useTracking();
    const handleToggle = ()=>setIsOpen((prev)=>!prev);
    React__namespace.useLayoutEffect(()=>{
        if (isOpen && inputRef.current) {
            inputRef.current.focus();
        }
    }, [
        isOpen
    ]);
    const handleClear = ()=>{
        setValue('');
        setQuery({
            _q: ''
        }, 'remove');
    };
    const handleSubmit = (e)=>{
        e.preventDefault();
        // Ensure value is a string
        if (value) {
            if (trackedEvent) {
                trackUsage(trackedEvent, trackedEventDetails);
            }
            setQuery({
                _q: encodeURIComponent(value),
                page: 1
            });
        } else {
            handleToggle();
            setQuery({
                _q: ''
            }, 'remove');
        }
    };
    if (isOpen) {
        return /*#__PURE__*/ jsxRuntime.jsx(designSystem.SearchForm, {
            onSubmit: handleSubmit,
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Searchbar, {
                ref: inputRef,
                name: "search",
                onChange: (e)=>setValue(e.target.value),
                value: value,
                clearLabel: formatMessage({
                    id: 'clearLabel',
                    defaultMessage: 'Clear'
                }),
                onClear: handleClear,
                placeholder: placeholder,
                children: label
            })
        });
    }
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
        ref: iconButtonRef,
        disabled: disabled,
        label: formatMessage({
            id: 'global.search',
            defaultMessage: 'Search'
        }),
        onClick: handleToggle,
        children: /*#__PURE__*/ jsxRuntime.jsx(icons.Search, {})
    });
};

const [TableProvider, useTable] = Theme.createContext('Table');
const Root = ({ children, defaultSelectedRows, footer, headers = [], isLoading = false, onSelectedRowsChange, rows = [], selectedRows: selectedRowsProps })=>{
    const [selectedRows = [], setSelectedRows] = useControllableState({
        prop: selectedRowsProps,
        defaultProp: defaultSelectedRows,
        onChange: onSelectedRowsChange
    });
    const [hasHeaderCheckbox, setHasHeaderCheckbox] = React__namespace.useState(false);
    const rowCount = rows.length + 1;
    const colCount = hasHeaderCheckbox ? headers.length + 1 : headers.length;
    const selectRow = (row)=>{
        if (Array.isArray(row)) {
            setSelectedRows(row);
        } else {
            setSelectedRows((prev = [])=>{
                const currentRowIndex = prev.findIndex((r)=>r.id === row.id);
                if (currentRowIndex > -1) {
                    return prev.toSpliced(currentRowIndex, 1);
                }
                return [
                    ...prev,
                    row
                ];
            });
        }
    };
    return /*#__PURE__*/ jsxRuntime.jsx(TableProvider, {
        colCount: colCount,
        hasHeaderCheckbox: hasHeaderCheckbox,
        setHasHeaderCheckbox: setHasHeaderCheckbox,
        footer: footer,
        headers: headers,
        isLoading: isLoading,
        rowCount: rowCount,
        rows: rows,
        selectedRows: selectedRows,
        selectRow: selectRow,
        children: children
    });
};
/* -------------------------------------------------------------------------------------------------
 * Content
 * -----------------------------------------------------------------------------------------------*/ const Content = ({ children })=>{
    const rowCount = useTable('Content', (state)=>state.rowCount);
    const colCount = useTable('Content', (state)=>state.colCount);
    const footer = useTable('Content', (state)=>state.footer);
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Table, {
        rowCount: rowCount,
        colCount: colCount,
        footer: footer,
        children: children
    });
};
/* -------------------------------------------------------------------------------------------------
 * Head
 * -----------------------------------------------------------------------------------------------*/ const Head = ({ children })=>{
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Thead, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tr, {
            children: children
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * HeaderCell
 * -----------------------------------------------------------------------------------------------*/ /**
 * @description A header cell in your table, internally will set the query params for sorting to
 * be passed to your data-fetching function.
 */ const HeaderCell = ({ name, label, sortable })=>{
    const [{ query }, setQuery] = Theme.useQueryParams();
    const sort = query?.sort ?? '';
    const [sortBy, sortOrder] = sort.split(':');
    const { formatMessage } = reactIntl.useIntl();
    const isSorted = sortBy === name;
    const sortLabel = formatMessage({
        id: 'components.TableHeader.sort',
        defaultMessage: 'Sort on {label}'
    }, {
        label
    });
    const handleClickSort = ()=>{
        if (sortable) {
            setQuery({
                sort: `${name}:${isSorted && sortOrder === 'ASC' ? 'DESC' : 'ASC'}`
            });
        }
    };
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Th, {
        action: isSorted && sortable && /*#__PURE__*/ jsxRuntime.jsx(designSystem.IconButton, {
            label: sortLabel,
            onClick: handleClickSort,
            variant: "ghost",
            children: /*#__PURE__*/ jsxRuntime.jsx(SortIcon, {
                $isUp: sortOrder === 'ASC'
            })
        }),
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tooltip, {
            label: sortable ? sortLabel : label,
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                textColor: "neutral600",
                tag: !isSorted && sortable ? 'button' : 'span',
                onClick: handleClickSort,
                variant: "sigma",
                children: label
            })
        })
    });
};
const SortIcon = styledComponents.styled(icons.CaretDown)`
  transform: ${({ $isUp })=>`rotate(${$isUp ? '180' : '0'}deg)`};
`;
/* -------------------------------------------------------------------------------------------------
 * ActionBar
 * -----------------------------------------------------------------------------------------------*/ const ActionBar = ({ children })=>{
    const { formatMessage } = reactIntl.useIntl();
    const selectedRows = useTable('ActionBar', (state)=>state.selectedRows);
    if (selectedRows.length === 0) return null;
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
        gap: 2,
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                variant: "omega",
                textColor: "neutral500",
                children: formatMessage({
                    id: 'content-manager.components.TableDelete.label',
                    defaultMessage: '{number, plural, one {# row} other {# rows}} selected'
                }, {
                    number: selectedRows.length
                })
            }),
            children
        ]
    });
};
/* -------------------------------------------------------------------------------------------------
 * HeaderCheckboxCell
 * -----------------------------------------------------------------------------------------------*/ const HeaderCheckboxCell = ()=>{
    const rows = useTable('HeaderCheckboxCell', (state)=>state.rows);
    const selectedRows = useTable('HeaderCheckboxCell', (state)=>state.selectedRows);
    const selectRow = useTable('HeaderCheckboxCell', (state)=>state.selectRow);
    const setHasHeaderCheckbox = useTable('HeaderCheckboxCell', (state)=>state.setHasHeaderCheckbox);
    const { formatMessage } = reactIntl.useIntl();
    const areAllEntriesSelected = selectedRows.length === rows.length && rows.length > 0;
    const isIndeterminate = !areAllEntriesSelected && selectedRows.length > 0;
    React__namespace.useEffect(()=>{
        setHasHeaderCheckbox(true);
        return ()=>setHasHeaderCheckbox(false);
    }, [
        setHasHeaderCheckbox
    ]);
    const handleSelectAll = ()=>{
        if (!areAllEntriesSelected) {
            selectRow(rows);
        } else {
            selectRow([]);
        }
    };
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Th, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Checkbox, {
            "aria-label": formatMessage({
                id: 'global.select-all-entries',
                defaultMessage: 'Select all entries'
            }),
            disabled: rows.length === 0,
            checked: isIndeterminate ? 'indeterminate' : areAllEntriesSelected,
            onCheckedChange: handleSelectAll
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * Empty
 * -----------------------------------------------------------------------------------------------*/ const Empty = (props)=>{
    const { formatMessage } = reactIntl.useIntl();
    const rows = useTable('Empty', (state)=>state.rows);
    const isLoading = useTable('Empty', (state)=>state.isLoading);
    const colCount = useTable('Empty', (state)=>state.colCount);
    /**
   * If we're loading or we have some data, we don't show the empty state.
   */ if (rows.length > 0 || isLoading) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tbody, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tr, {
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Td, {
                colSpan: colCount,
                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.EmptyStateLayout, {
                    content: formatMessage({
                        id: 'app.components.EmptyStateLayout.content-document',
                        defaultMessage: 'No content found'
                    }),
                    hasRadius: true,
                    icon: /*#__PURE__*/ jsxRuntime.jsx(symbols.EmptyDocuments, {
                        width: "16rem"
                    }),
                    ...props
                })
            })
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * LoadingBody
 * -----------------------------------------------------------------------------------------------*/ const Loading = ({ children = 'Loading content' })=>{
    const isLoading = useTable('Loading', (state)=>state.isLoading);
    const colCount = useTable('Loading', (state)=>state.colCount);
    if (!isLoading) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tbody, {
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tr, {
            children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Td, {
                colSpan: colCount,
                children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Flex, {
                    justifyContent: "center",
                    padding: 11,
                    background: "neutral0",
                    children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Loader, {
                        children: children
                    })
                })
            })
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * Body
 * -----------------------------------------------------------------------------------------------*/ const Body = ({ children })=>{
    const isLoading = useTable('Body', (state)=>state.isLoading);
    const rows = useTable('Body', (state)=>state.rows);
    if (isLoading || rows.length === 0) {
        return null;
    }
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tbody, {
        children: children
    });
};
/* -------------------------------------------------------------------------------------------------
 * Row
 * -----------------------------------------------------------------------------------------------*/ const Row = (props)=>{
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Tr, {
        ...props
    });
};
/* -------------------------------------------------------------------------------------------------
 * Cell
 * -----------------------------------------------------------------------------------------------*/ const Cell = (props)=>{
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Td, {
        ...props
    });
};
/* -------------------------------------------------------------------------------------------------
 * Row
 * -----------------------------------------------------------------------------------------------*/ const CheckboxCell = ({ id, ...props })=>{
    const rows = useTable('CheckboxCell', (state)=>state.rows);
    const selectedRows = useTable('CheckboxCell', (state)=>state.selectedRows);
    const selectRow = useTable('CheckboxCell', (state)=>state.selectRow);
    const { formatMessage } = reactIntl.useIntl();
    const handleSelectRow = ()=>{
        selectRow(rows.find((row)=>row.id === id));
    };
    const isChecked = selectedRows.findIndex((row)=>row.id === id) > -1;
    return /*#__PURE__*/ jsxRuntime.jsx(Cell, {
        ...props,
        onClick: (e)=>e.stopPropagation(),
        children: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Checkbox, {
            "aria-label": formatMessage({
                id: 'app.component.table.select.one-entry',
                defaultMessage: `Select {target}`
            }, {
                target: id
            }),
            disabled: rows.length === 0,
            checked: isChecked,
            onCheckedChange: handleSelectRow
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * Exports
 * -----------------------------------------------------------------------------------------------*/ /**
 * @alpha we may move this component to the design-system.
 * @public
 * @description A generic table component composition. Internally handles the state of the table
 * such as selected rows, loading state, and more assuming the correct pieces are put togther.
 * @example
 * ```tsx
 * interace Data {
 *  id: string;
 *  name: string;
 *  email: string;
 * }
 *
 * const ListView = () => {
 *  const { data, isLoading } = useGetData<Data>();
 *
 *  const headers: Table.Header<Data>[] = [
 *    {
 *      label: 'Name',
 *      name: 'name',
 *      sortable: true,
 *    },
 *    {
 *      label: 'Email',
 *      name: 'email',
 *      sortable: true,
 *    },
 *  ];
 *
 *  return (
 *    <Table.Root rows={data} headers={headers} isLoading={isLoading}>
 *      <Table.Content>
 *        <Table.Head>
 *          {headers.map((head) => (
 *            <Table.HeaderCell key={head.name} {...head} />
 *          ))}
 *        </Table.Head>
 *        <Table.Body>
 *          <Table.Loading />
 *          <Table.Empty />
 *          {data.map((row) => (
 *            <Table.Row key={row.id}>
 *              <Table.Cell>{row.name}</Table.Cell>
 *              <Table.Cell>{row.email}</Table.Cell>
 *            </Table.Row>
 *          ))}
 *        </Table.Body>
 *      </Table.Content>
 *    </Table.Root>
 *  );
 * };
 * ```
 */ const Table = {
    Root,
    Content,
    ActionBar,
    Head,
    HeaderCell,
    HeaderCheckboxCell,
    Body,
    CheckboxCell,
    Cell,
    Row,
    Loading,
    Empty
};

const ContentBox = ({ title, subtitle, icon, iconBackground, endAction, titleEllipsis = false })=>{
    if (title && title.length > 70 && titleEllipsis) {
        title = `${title.substring(0, 70)}...`;
    }
    return /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
        shadow: "tableShadow",
        hasRadius: true,
        padding: 6,
        background: "neutral0",
        children: [
            /*#__PURE__*/ jsxRuntime.jsx(IconWrapper, {
                background: iconBackground,
                hasRadius: true,
                padding: 3,
                children: icon
            }),
            /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                direction: "column",
                alignItems: "stretch",
                gap: endAction ? 0 : 1,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Flex, {
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(TypographyWordBreak, {
                                fontWeight: "semiBold",
                                variant: "pi",
                                children: title
                            }),
                            endAction
                        ]
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Typography, {
                        textColor: "neutral600",
                        children: subtitle
                    })
                ]
            })
        ]
    });
};
const IconWrapper = styledComponents.styled(designSystem.Flex)`
  margin-right: ${({ theme })=>theme.spaces[6]};

  svg {
    width: 3.2rem;
    height: 3.2rem;
  }
`;
const TypographyWordBreak = styledComponents.styled(designSystem.Typography)`
  color: ${({ theme })=>theme.colors.neutral800};
  word-break: break-all;
`;

/**
 * @public
 * @description Inject a new reducer into the global redux-store.
 * @example
 * ```tsx
 * import { reducer } from './local-store';
 *
 * const MyPlugin = () => {
 *  useInjectReducer("plugin", reducer);
 * }
 * ```
 */ function useInjectReducer(namespace, reducer) {
    const store = Theme.useTypedStore();
    React.useEffect(()=>{
        store.injectReducer(namespace, reducer);
    }, [
        store,
        namespace,
        reducer
    ]);
}

/**
 * @public
 * @description This is an abstraction around the native fetch exposed by a hook. It provides a simple interface to handle API calls
 * to the Strapi backend.
 * It handles request cancellations inside the hook with an {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController} AbortController.
 * This is typically triggered when the component is unmounted so all the requests that it is currently making are aborted.
 * The expected URL style includes either a protocol (such as HTTP or HTTPS) or a relative URL. The URLs with domain and path but not protocol are not allowed (ex: `www.example.com`).
 * @example
 * ```tsx
 * import * as React from 'react';
 * import { useFetchClient } from '@strapi/admin/admin';
 *
 * const MyComponent = () => {
 *   const [items, setItems] = React.useState([]);
 *   const { get } = useFetchClient();
 *   const requestURL = "/some-endpoint";
 *
 *   const handleGetData = async () => {
 *     const { data } = await get(requestURL);
 *     setItems(data.items);
 *   };
 *
 *   return (
 *    <div>
 *      <div>
 *       {
 *         items && items.map(item => <h2 key={item.uuid}>{item.name}</h2>))
 *       }
 *     </div>
 *    </div>
 *   );
 * };
 * ```
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController} AbortController.
 */ const useFetchClient = ()=>{
    const controller = React__namespace.useRef(null);
    if (controller.current === null) {
        controller.current = new AbortController();
    }
    React__namespace.useEffect(()=>{
        return ()=>{
            controller.current.abort();
        };
    }, []);
    return React__namespace.useMemo(()=>admin.getFetchClient({
            signal: controller.current.signal
        }), []);
};

const usersService = admin.adminApi.enhanceEndpoints({
    addTagTypes: [
        'LicenseLimits',
        'User',
        'Role',
        'RolePermissions'
    ]
}).injectEndpoints({
    endpoints: (builder)=>({
            /**
       * users
       */ createUser: builder.mutation({
                query: (body)=>({
                        url: '/admin/users',
                        method: 'POST',
                        data: body
                    }),
                transformResponse: (response)=>response.data,
                invalidatesTags: [
                    'LicenseLimits',
                    {
                        type: 'User',
                        id: 'LIST'
                    }
                ]
            }),
            updateUser: builder.mutation({
                query: ({ id, ...body })=>({
                        url: `/admin/users/${id}`,
                        method: 'PUT',
                        data: body
                    }),
                invalidatesTags: (_res, _err, { id })=>[
                        {
                            type: 'User',
                            id
                        },
                        {
                            type: 'User',
                            id: 'LIST'
                        }
                    ]
            }),
            getUsers: builder.query({
                query: ({ id, ...params } = {})=>({
                        url: `/admin/users/${id ?? ''}`,
                        method: 'GET',
                        config: {
                            params
                        }
                    }),
                transformResponse: (res)=>{
                    let users = [];
                    if (res.data) {
                        if ('results' in res.data) {
                            if (Array.isArray(res.data.results)) {
                                users = res.data.results;
                            }
                        } else {
                            users = [
                                res.data
                            ];
                        }
                    }
                    return {
                        users,
                        pagination: 'pagination' in res.data ? res.data.pagination : null
                    };
                },
                providesTags: (res, _err, arg)=>{
                    if (typeof arg === 'object' && 'id' in arg) {
                        return [
                            {
                                type: 'User',
                                id: arg.id
                            }
                        ];
                    } else {
                        return [
                            ...res?.users.map(({ id })=>({
                                    type: 'User',
                                    id
                                })) ?? [],
                            {
                                type: 'User',
                                id: 'LIST'
                            }
                        ];
                    }
                }
            }),
            deleteManyUsers: builder.mutation({
                query: (body)=>({
                        url: '/admin/users/batch-delete',
                        method: 'POST',
                        data: body
                    }),
                transformResponse: (res)=>res.data,
                invalidatesTags: [
                    'LicenseLimits',
                    {
                        type: 'User',
                        id: 'LIST'
                    }
                ]
            }),
            /**
       * roles
       */ createRole: builder.mutation({
                query: (body)=>({
                        url: '/admin/roles',
                        method: 'POST',
                        data: body
                    }),
                transformResponse: (res)=>res.data,
                invalidatesTags: [
                    {
                        type: 'Role',
                        id: 'LIST'
                    }
                ]
            }),
            getRoles: builder.query({
                query: ({ id, ...params } = {})=>({
                        url: `/admin/roles/${id ?? ''}`,
                        method: 'GET',
                        config: {
                            params
                        }
                    }),
                transformResponse: (res)=>{
                    let roles = [];
                    if (res.data) {
                        if (Array.isArray(res.data)) {
                            roles = res.data;
                        } else {
                            roles = [
                                res.data
                            ];
                        }
                    }
                    return roles;
                },
                providesTags: (res, _err, arg)=>{
                    if (typeof arg === 'object' && 'id' in arg) {
                        return [
                            {
                                type: 'Role',
                                id: arg.id
                            }
                        ];
                    } else {
                        return [
                            ...res?.map(({ id })=>({
                                    type: 'Role',
                                    id
                                })) ?? [],
                            {
                                type: 'Role',
                                id: 'LIST'
                            }
                        ];
                    }
                }
            }),
            updateRole: builder.mutation({
                query: ({ id, ...body })=>({
                        url: `/admin/roles/${id}`,
                        method: 'PUT',
                        data: body
                    }),
                transformResponse: (res)=>res.data,
                invalidatesTags: (_res, _err, { id })=>[
                        {
                            type: 'Role',
                            id
                        }
                    ]
            }),
            getRolePermissions: builder.query({
                query: ({ id, ...params })=>({
                        url: `/admin/roles/${id}/permissions`,
                        method: 'GET',
                        config: {
                            params
                        }
                    }),
                transformResponse: (res)=>res.data,
                providesTags: (_res, _err, { id })=>[
                        {
                            type: 'RolePermissions',
                            id
                        }
                    ]
            }),
            updateRolePermissions: builder.mutation({
                query: ({ id, ...body })=>({
                        url: `/admin/roles/${id}/permissions`,
                        method: 'PUT',
                        data: body
                    }),
                transformResponse: (res)=>res.data,
                invalidatesTags: (_res, _err, { id })=>[
                        {
                            type: 'RolePermissions',
                            id
                        }
                    ]
            }),
            /**
       * Permissions
       */ getRolePermissionLayout: builder.query({
                query: (params)=>({
                        url: '/admin/permissions',
                        method: 'GET',
                        config: {
                            params
                        }
                    }),
                transformResponse: (res)=>res.data
            })
        }),
    overrideExisting: false
});
const { useCreateUserMutation, useGetUsersQuery, useUpdateUserMutation, useDeleteManyUsersMutation, useGetRolesQuery, useCreateRoleMutation, useUpdateRoleMutation, useGetRolePermissionsQuery, useGetRolePermissionLayoutQuery, useUpdateRolePermissionsMutation } = usersService;
const useAdminUsers = useGetUsersQuery;

exports.BackButton = BackButton;
exports.Blocker = Blocker;
exports.Column = Column;
exports.ConfirmDialog = ConfirmDialog;
exports.ContentBox = ContentBox;
exports.DescriptionComponentRenderer = DescriptionComponentRenderer;
exports.Filters = Filters;
exports.Form = Form;
exports.LayoutContent = LayoutContent;
exports.Layouts = Layouts;
exports.Login = Login;
exports.Logo = Logo;
exports.MemoizedInputRenderer = MemoizedInputRenderer;
exports.MemoizedStringInput = MemoizedStringInput;
exports.NpsSurvey = NpsSurvey;
exports.Pagination = Pagination;
exports.SETTINGS_LINKS_CE = SETTINGS_LINKS_CE;
exports.SearchInput = SearchInput;
exports.Table = Table;
exports.UnauthenticatedLayout = UnauthenticatedLayout;
exports.constants = constants;
exports.errorsTrads = errorsTrads;
exports.getBasename = getBasename;
exports.getYupValidationErrors = getYupValidationErrors;
exports.img = img;
exports.renderAdmin = renderAdmin;
exports.useAdminUsers = useAdminUsers;
exports.useClipboard = useClipboard;
exports.useCreateRoleMutation = useCreateRoleMutation;
exports.useCreateUserMutation = useCreateUserMutation;
exports.useDeleteManyUsersMutation = useDeleteManyUsersMutation;
exports.useElementOnScreen = useElementOnScreen;
exports.useFetchClient = useFetchClient;
exports.useField = useField;
exports.useFocusInputField = useFocusInputField;
exports.useForm = useForm;
exports.useGetRolePermissionLayoutQuery = useGetRolePermissionLayoutQuery;
exports.useGetRolePermissionsQuery = useGetRolePermissionsQuery;
exports.useGetRolesQuery = useGetRolesQuery;
exports.useHistory = useHistory;
exports.useInjectReducer = useInjectReducer;
exports.useTable = useTable;
exports.useUpdateRoleMutation = useUpdateRoleMutation;
exports.useUpdateRolePermissionsMutation = useUpdateRolePermissionsMutation;
exports.useUpdateUserMutation = useUpdateUserMutation;
//# sourceMappingURL=index-C8yOprVG.js.map
