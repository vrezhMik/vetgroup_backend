{"version":3,"file":"EditPage-BZ6HhmWA.mjs","sources":["../../../admin/src/pages/Settings/pages/Roles/components/RoleForm.tsx","../../../admin/src/pages/Settings/pages/Roles/EditPage.tsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  Field,\n  Flex,\n  Grid,\n  Textarea,\n  TextInput,\n  Typography,\n} from '@strapi/design-system';\nimport { FormikProps } from 'formik';\nimport { useIntl } from 'react-intl';\n\nimport type { AdminRole } from '../../../../../hooks/useAdminRoles';\nimport type { EditRoleFormValues } from '../EditPage';\n\ninterface RoleFormProps extends Pick<FormikProps<EditRoleFormValues>, 'values' | 'errors'> {\n  onBlur: FormikProps<EditRoleFormValues>['handleBlur'];\n  onChange: FormikProps<EditRoleFormValues>['handleChange'];\n  disabled?: boolean;\n  role: AdminRole;\n}\n\nconst RoleForm = ({ disabled, role, values, errors, onChange, onBlur }: RoleFormProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n        <Flex justifyContent=\"space-between\">\n          <Box>\n            <Box>\n              <Typography fontWeight=\"bold\">\n                {role\n                  ? role.name\n                  : formatMessage({\n                      id: 'global.details',\n                      defaultMessage: 'Details',\n                    })}\n              </Typography>\n            </Box>\n            <Box>\n              <Typography textColor=\"neutral500\" variant=\"pi\">\n                {role\n                  ? role.description\n                  : formatMessage({\n                      id: 'Settings.roles.form.description',\n                      defaultMessage: 'Name and description of the role',\n                    })}\n              </Typography>\n            </Box>\n          </Box>\n          <Button disabled variant=\"secondary\">\n            {formatMessage(\n              {\n                id: 'Settings.roles.form.button.users-with-role',\n                defaultMessage:\n                  '{number, plural, =0 {# users} one {# user} other {# users}} with this role',\n              },\n              { number: role.usersCount }\n            )}\n          </Button>\n        </Flex>\n        <Grid.Root gap={4}>\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n            <Field.Root\n              name=\"name\"\n              error={errors.name && formatMessage({ id: errors.name })}\n              required\n            >\n              <Field.Label>\n                {formatMessage({\n                  id: 'global.name',\n                  defaultMessage: 'Name',\n                })}\n              </Field.Label>\n              <TextInput\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={values.name || ''}\n              />\n              <Field.Error />\n            </Field.Root>\n          </Grid.Item>\n          <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n            <Field.Root\n              name=\"description\"\n              error={errors.description && formatMessage({ id: errors.description })}\n            >\n              <Field.Label>\n                {formatMessage({\n                  id: 'global.description',\n                  defaultMessage: 'Description',\n                })}\n              </Field.Label>\n              <Textarea\n                disabled={disabled}\n                onChange={onChange}\n                onBlur={onBlur}\n                value={values.description}\n              />\n              <Field.Error />\n            </Field.Root>\n          </Grid.Item>\n        </Grid.Root>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { RoleForm };\nexport type { RoleFormProps };\n","import * as React from 'react';\n\nimport { Box, Button, Flex, Main } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { Formik, FormikHelpers } from 'formik';\nimport { useIntl } from 'react-intl';\nimport { Navigate, useMatch } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useTracking } from '../../../../features/Tracking';\nimport { useAdminRoles } from '../../../../hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport {\n  useGetRolePermissionLayoutQuery,\n  useGetRolePermissionsQuery,\n  useUpdateRoleMutation,\n  useUpdateRolePermissionsMutation,\n} from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\n\nimport { Permissions, PermissionsAPI } from './components/Permissions';\nimport { RoleForm } from './components/RoleForm';\n\nconst EDIT_ROLE_SCHEMA = yup.object().shape({\n  name: yup.string().required(translatedErrors.required.id),\n  description: yup.string().optional(),\n});\n\n/**\n * TODO: be nice if we could just infer this from the schema\n */\ninterface EditRoleFormValues {\n  name: string;\n  description: string;\n}\n\nconst EditPage = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/roles/:id');\n  const id = match?.params.id;\n  const permissionsRef = React.useRef<PermissionsAPI>(null);\n  const { trackUsage } = useTracking();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const { isLoading: isLoadingPermissionsLayout, data: permissionsLayout } =\n    useGetRolePermissionLayoutQuery({\n      /**\n       * Role here is a query param so if there's no role we pass an empty string\n       * which returns us a default layout.\n       */\n      role: id ?? '',\n    });\n\n  const {\n    roles,\n    isLoading: isRoleLoading,\n    refetch: refetchRole,\n  } = useAdminRoles(\n    { id },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const role = roles[0] ?? {};\n\n  const { data: permissions, isLoading: isLoadingPermissions } = useGetRolePermissionsQuery(\n    {\n      id: id!,\n    },\n    {\n      skip: !id,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [updateRole] = useUpdateRoleMutation();\n  const [updateRolePermissions] = useUpdateRolePermissionsMutation();\n\n  if (!id) {\n    return <Navigate to=\"/settings/roles\" />;\n  }\n\n  const handleEditRoleSubmit = async (\n    data: EditRoleFormValues,\n    formik: FormikHelpers<EditRoleFormValues>\n  ) => {\n    try {\n      const { permissionsToSend, didUpdateConditions } =\n        permissionsRef.current?.getPermissions() ?? {};\n\n      const res = await updateRole({\n        id,\n        ...data,\n      });\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          formik.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n\n        return;\n      }\n\n      if (role.code !== 'strapi-super-admin' && permissionsToSend) {\n        const updateRes = await updateRolePermissions({\n          id: res.data.id,\n          permissions: permissionsToSend,\n        });\n\n        if ('error' in updateRes) {\n          if (isBaseQueryError(updateRes.error) && updateRes.error.name === 'ValidationError') {\n            formik.setErrors(formatValidationErrors(updateRes.error));\n          } else {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(updateRes.error),\n            });\n          }\n\n          return;\n        }\n\n        if (didUpdateConditions) {\n          trackUsage('didUpdateConditions');\n        }\n      }\n\n      permissionsRef.current?.setFormAfterSubmit();\n\n      await refetchRole();\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved' }),\n      });\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const isFormDisabled = !isRoleLoading && role.code === 'strapi-super-admin';\n\n  if (isLoadingPermissionsLayout || isRoleLoading || isLoadingPermissions || !permissionsLayout) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Formik\n        enableReinitialize\n        initialValues={\n          {\n            name: role.name ?? '',\n            description: role.description ?? '',\n          } satisfies EditRoleFormValues\n        }\n        onSubmit={handleEditRoleSubmit}\n        validationSchema={EDIT_ROLE_SCHEMA}\n        validateOnChange={false}\n      >\n        {({ handleSubmit, values, errors, handleChange, handleBlur, isSubmitting }) => (\n          <form onSubmit={handleSubmit}>\n            <Layouts.Header\n              primaryAction={\n                <Flex gap={2}>\n                  <Button\n                    type=\"submit\"\n                    startIcon={<Check />}\n                    disabled={role.code === 'strapi-super-admin'}\n                    loading={isSubmitting}\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                </Flex>\n              }\n              title={formatMessage({\n                id: 'Settings.roles.edit.title',\n                defaultMessage: 'Edit a role',\n              })}\n              subtitle={formatMessage({\n                id: 'Settings.roles.create.description',\n                defaultMessage: 'Define the rights given to the role',\n              })}\n              navigationAction={<BackButton fallback=\"../roles\" />}\n            />\n            <Layouts.Content>\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                <RoleForm\n                  disabled={isFormDisabled}\n                  errors={errors}\n                  values={values}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  role={role}\n                />\n                <Box shadow=\"filterShadow\" hasRadius>\n                  <Permissions\n                    isFormDisabled={isFormDisabled}\n                    permissions={permissions}\n                    ref={permissionsRef}\n                    layout={permissionsLayout}\n                  />\n                </Box>\n              </Flex>\n            </Layouts.Content>\n          </form>\n        )}\n      </Formik>\n    </Main>\n  );\n};\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.roles.update\n  );\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { EditPage, ProtectedEditPage };\nexport type { EditRoleFormValues };\n"],"names":["RoleForm","disabled","role","values","errors","onChange","onBlur","formatMessage","useIntl","_jsx","Box","background","padding","shadow","hasRadius","_jsxs","Flex","direction","alignItems","gap","justifyContent","Typography","fontWeight","name","id","defaultMessage","textColor","variant","description","Button","number","usersCount","Grid","Root","Item","col","Field","error","required","Label","TextInput","value","Error","Textarea","EDIT_ROLE_SCHEMA","yup","object","shape","string","translatedErrors","optional","EditPage","toggleNotification","useNotification","match","useMatch","params","permissionsRef","React","useRef","trackUsage","useTracking","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","isLoading","isLoadingPermissionsLayout","data","permissionsLayout","useGetRolePermissionLayoutQuery","roles","isRoleLoading","refetch","refetchRole","useAdminRoles","refetchOnMountOrArgChange","permissions","isLoadingPermissions","useGetRolePermissionsQuery","skip","updateRole","useUpdateRoleMutation","updateRolePermissions","useUpdateRolePermissionsMutation","Navigate","to","handleEditRoleSubmit","formik","permissionsToSend","didUpdateConditions","current","getPermissions","res","isBaseQueryError","setErrors","type","message","code","updateRes","setFormAfterSubmit","isFormDisabled","Page","Loading","Main","Title","Formik","enableReinitialize","initialValues","onSubmit","validationSchema","validateOnChange","handleSubmit","handleChange","handleBlur","isSubmitting","form","Layouts","Header","primaryAction","startIcon","Check","loading","title","subtitle","navigationAction","BackButton","fallback","Content","Permissions","ref","layout","ProtectedEditPage","useTypedSelector","state","admin_app","settings","update","Protect"],"mappings":"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"}