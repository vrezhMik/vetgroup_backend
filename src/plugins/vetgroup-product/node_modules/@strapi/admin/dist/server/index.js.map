{"version":3,"file":"index.js","sources":["../../server/src/utils/index.js","../../server/src/config/admin-actions.ts","../../server/src/config/admin-conditions.ts","../../server/src/bootstrap.ts","../../server/src/routes/serve-admin-panel.ts","../../server/src/strategies/admin.ts","../../server/src/services/constants.ts","../../server/src/strategies/api-token.ts","../../server/src/register.ts","../../server/src/destroy.ts","../../server/src/config/email-templates/forgot-password.ts","../../server/src/config/index.ts","../../server/src/policies/isAuthenticatedAdmin.ts","../../server/src/validation/policies/hasPermissions.ts","../../server/src/policies/hasPermissions.ts","../../server/src/policies/isTelemetryEnabled.ts","../../server/src/policies/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/authentication.ts","../../server/src/routes/permissions.ts","../../server/src/routes/users.ts","../../server/src/routes/roles.ts","../../server/src/routes/webhooks.ts","../../server/src/routes/api-tokens.ts","../../server/src/routes/content-api.ts","../../server/src/strategies/data-transfer.ts","../../server/src/routes/transfer.ts","../../server/src/routes/homepage.ts","../../server/src/routes/index.ts","../../server/src/services/auth.ts","../../server/src/domain/user.ts","../../server/src/domain/action/index.ts","../../server/src/validation/common-functions/check-fields-are-correctly-nested.ts","../../server/src/validation/common-functions/check-fields-dont-have-duplicates.ts","../../server/src/validation/common-validators.ts","../../server/src/services/user.ts","../../server/src/domain/permission/index.ts","../../server/src/validation/permission.ts","../../server/src/services/role.ts","../../server/src/services/passport/local-strategy.ts","../../server/src/services/passport.ts","../../server/src/services/metrics.ts","../../server/src/services/token.ts","../../server/src/validation/action-provider.ts","../../server/src/domain/action/provider.ts","../../server/src/domain/condition/index.ts","../../server/src/domain/condition/provider.ts","../../server/src/services/permission/permissions-manager/sanitize.ts","../../server/src/services/permission/permissions-manager/validate.ts","../../server/src/services/permission/permissions-manager/query-builders.ts","../../server/src/services/permission/permissions-manager/index.ts","../../server/src/services/permission/engine.ts","../../server/src/services/permission/sections-builder/section.ts","../../server/src/services/permission/sections-builder/builder.ts","../../server/src/services/permission/sections-builder/utils.ts","../../server/src/services/permission/sections-builder/handlers.ts","../../server/src/services/permission/sections-builder/index.ts","../../server/src/services/permission/queries.ts","../../server/src/services/permission.ts","../../server/src/services/content-type.ts","../../server/src/services/condition.ts","../../server/src/services/action.ts","../../server/src/services/api-token.ts","../../server/src/services/transfer/permission.ts","../../server/src/services/transfer/token.ts","../../server/src/services/transfer/utils.ts","../../server/src/services/project-settings.ts","../../server/src/services/homepage.ts","../../server/src/services/index.ts","../../server/src/validation/project-settings.ts","../../server/src/controllers/admin.ts","../../server/src/validation/api-tokens.ts","../../server/src/controllers/api-token.ts","../../server/src/validation/user.ts","../../server/src/controllers/authenticated-user.ts","../../server/src/validation/authentication/register.ts","../../server/src/validation/authentication/forgot-password.ts","../../server/src/validation/authentication/reset-password.ts","../../server/src/validation/authentication/renew-token.ts","../../server/src/controllers/authentication.ts","../../server/src/controllers/formatters/conditions.ts","../../server/src/controllers/permission.ts","../../server/src/validation/role.ts","../../server/src/controllers/role.ts","../../server/src/controllers/transfer/runner.ts","../../server/src/validation/transfer/token.ts","../../server/src/controllers/transfer/token.ts","../../server/src/controllers/transfer/index.ts","../../server/src/controllers/user.ts","../../server/src/controllers/webhooks.ts","../../server/src/controllers/content-api.ts","../../server/src/controllers/homepage.ts","../../server/src/controllers/index.ts","../../server/src/content-types/Permission.ts","../../server/src/content-types/User.ts","../../server/src/content-types/Role.ts","../../server/src/content-types/api-token.ts","../../server/src/content-types/api-token-permission.ts","../../server/src/content-types/transfer-token.ts","../../server/src/content-types/transfer-token-permission.ts","../../server/src/content-types/index.ts","../../server/src/middlewares/rateLimit.ts","../../server/src/middlewares/data-transfer.ts","../../server/src/middlewares/index.ts","../../ee/server/src/register.ts","../../ee/server/src/utils/index.ts","../../ee/server/src/config/admin-actions.ts","../../ee/server/src/bootstrap.ts","../../ee/server/src/destroy.ts","../../ee/server/src/content-types/index.ts","../../ee/server/src/utils/sso-lock.ts","../../ee/server/src/services/auth.ts","../../ee/server/src/services/passport/provider-registry.ts","../../ee/server/src/services/passport/sso.ts","../../ee/server/src/services/passport.ts","../../ee/server/src/services/role.ts","../../ee/server/src/services/user.ts","../../ee/server/src/services/metrics.ts","../../ee/server/src/services/seat-enforcement.ts","../../ee/server/src/services/persist-tables.ts","../../ee/server/src/services/index.ts","../../ee/server/src/validation/authentication.ts","../../ee/server/src/controllers/authentication-utils/constants.ts","../../ee/server/src/controllers/authentication-utils/utils.ts","../../ee/server/src/controllers/authentication-utils/middlewares.ts","../../ee/server/src/controllers/authentication.ts","../../ee/server/src/validation/role.ts","../../ee/server/src/controllers/role.ts","../../ee/server/src/validation/user.ts","../../ee/server/src/controllers/user.ts","../../ee/server/src/controllers/admin.ts","../../ee/server/src/controllers/index.ts","../../ee/server/src/routes/utils.ts","../../ee/server/src/routes/sso.ts","../../ee/server/src/routes/license-limit.ts","../../ee/server/src/routes/index.ts","../../ee/server/src/audit-logs/routes/audit-logs.ts","../../ee/server/src/audit-logs/validation/audit-logs.ts","../../ee/server/src/audit-logs/controllers/audit-logs.ts","../../ee/server/src/audit-logs/services/audit-logs.ts","../../ee/server/src/audit-logs/services/lifecycles.ts","../../ee/server/src/audit-logs/content-types/audit-log.ts","../../ee/server/src/index.ts","../../server/src/index.ts"],"sourcesContent":["const getService = (name) => {\n  return strapi.service(`admin::${name}`);\n};\n\nexport { getService };\n","export const actions = [\n  {\n    uid: 'marketplace.read',\n    displayName: 'Access the marketplace',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'plugins and marketplace',\n    subCategory: 'marketplace',\n  },\n  {\n    uid: 'webhooks.create',\n    displayName: 'Create',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'webhooks',\n  },\n  {\n    uid: 'webhooks.read',\n    displayName: 'Read',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'webhooks',\n  },\n  {\n    uid: 'webhooks.update',\n    displayName: 'Update',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'webhooks',\n  },\n  {\n    uid: 'webhooks.delete',\n    displayName: 'Delete',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'webhooks',\n  },\n  {\n    uid: 'users.create',\n    displayName: 'Create (invite)',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'users',\n  },\n  {\n    uid: 'users.read',\n    displayName: 'Read',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'users',\n    aliases: [\n      {\n        actionId: 'plugin::content-manager.explorer.read',\n        subjects: ['admin::user'],\n      },\n    ],\n  },\n  {\n    uid: 'users.update',\n    displayName: 'Update',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'users',\n  },\n  {\n    uid: 'users.delete',\n    displayName: 'Delete',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'users',\n  },\n  {\n    uid: 'roles.create',\n    displayName: 'Create',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'roles',\n  },\n  {\n    uid: 'roles.read',\n    displayName: 'Read',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'roles',\n    aliases: [\n      {\n        actionId: 'plugin::content-manager.explorer.read',\n        subjects: ['admin::role'],\n      },\n    ],\n  },\n  {\n    uid: 'roles.update',\n    displayName: 'Update',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'roles',\n  },\n  {\n    uid: 'roles.delete',\n    displayName: 'Delete',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'users and roles',\n    subCategory: 'roles',\n  },\n  {\n    uid: 'api-tokens.access',\n    displayName: 'Access the API tokens settings page',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'api tokens',\n    subCategory: 'api Tokens',\n  },\n  {\n    uid: 'api-tokens.create',\n    displayName: 'Create (generate)',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'api tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'api-tokens.read',\n    displayName: 'Read',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'api tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'api-tokens.update',\n    displayName: 'Update',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'api tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'api-tokens.regenerate',\n    displayName: 'Regenerate',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'api tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'api-tokens.delete',\n    displayName: 'Delete (revoke)',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'api tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'project-settings.update',\n    displayName: 'Update the project level settings',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'project',\n  },\n  {\n    uid: 'project-settings.read',\n    displayName: 'Read the project level settings',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'project',\n  },\n  {\n    uid: 'transfer.tokens.access',\n    displayName: 'Access the transfer tokens settings page',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'transfer tokens',\n    subCategory: 'transfer tokens',\n  },\n  {\n    uid: 'transfer.tokens.create',\n    displayName: 'Create (generate)',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'transfer tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'transfer.tokens.read',\n    displayName: 'Read',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'transfer tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'transfer.tokens.update',\n    displayName: 'Update',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'transfer tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'transfer.tokens.regenerate',\n    displayName: 'Regenerate',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'transfer tokens',\n    subCategory: 'general',\n  },\n  {\n    uid: 'transfer.tokens.delete',\n    displayName: 'Delete (revoke)',\n    pluginName: 'admin',\n    section: 'settings',\n    category: 'transfer tokens',\n    subCategory: 'general',\n  },\n];\n\nexport default {\n  actions,\n};\n","// TODO: TS User and role type\ntype User = any;\ntype Role = any;\n\nexport const conditions = [\n  {\n    displayName: 'Is creator',\n    name: 'is-creator',\n    plugin: 'admin',\n    handler: (user: User) => ({ 'createdBy.id': user.id }),\n  },\n  {\n    displayName: 'Has same role as creator',\n    name: 'has-same-role-as-creator',\n    plugin: 'admin',\n    handler: (user: User) => ({\n      'createdBy.roles': {\n        $elemMatch: {\n          id: {\n            $in: user.roles.map((r: Role) => r.id),\n          },\n        },\n      },\n    }),\n  },\n];\n\nexport default {\n  conditions,\n};\n","import { merge, map, difference, uniq } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\nimport { async } from '@strapi/utils';\nimport { getService } from './utils';\nimport adminActions from './config/admin-actions';\nimport adminConditions from './config/admin-conditions';\n\nconst defaultAdminAuthSettings = {\n  providers: {\n    autoRegister: false,\n    defaultRole: null,\n    ssoLockedRoles: null,\n  },\n};\n\nconst registerPermissionActions = async () => {\n  await getService('permission').actionProvider.registerMany(adminActions.actions);\n};\n\nconst registerAdminConditions = async () => {\n  await getService('permission').conditionProvider.registerMany(adminConditions.conditions);\n};\n\nconst registerModelHooks = () => {\n  const { sendDidChangeInterfaceLanguage } = getService('metrics');\n\n  strapi.db.lifecycles.subscribe({\n    models: ['admin::user'],\n    afterCreate: sendDidChangeInterfaceLanguage,\n    afterDelete: sendDidChangeInterfaceLanguage,\n    afterUpdate({ params }) {\n      if (params.data.preferedLanguage) {\n        sendDidChangeInterfaceLanguage();\n      }\n    },\n  });\n};\n\nconst syncAuthSettings = async () => {\n  const adminStore = await strapi.store({ type: 'core', name: 'admin' });\n  const adminAuthSettings = await adminStore.get({ key: 'auth' });\n  const newAuthSettings = merge(defaultAdminAuthSettings, adminAuthSettings);\n\n  const roleExists = await getService('role').exists({\n    id: newAuthSettings.providers.defaultRole,\n  });\n\n  // Reset the default SSO role if it has been deleted manually\n  if (!roleExists) {\n    newAuthSettings.providers.defaultRole = null;\n  }\n\n  await adminStore.set({ key: 'auth', value: newAuthSettings });\n};\n\nconst syncAPITokensPermissions = async () => {\n  const validPermissions = strapi.contentAPI.permissions.providers.action.keys();\n  const permissionsInDB = await async.pipe(\n    strapi.db.query('admin::api-token-permission').findMany,\n    map('action')\n  )();\n\n  const unknownPermissions = uniq(difference(permissionsInDB, validPermissions));\n\n  if (unknownPermissions.length > 0) {\n    await strapi.db\n      .query('admin::api-token-permission')\n      .deleteMany({ where: { action: { $in: unknownPermissions } } });\n  }\n};\n\n/**\n * Ensures the creation of default API tokens during the app creation.\n *\n * Checks the database for existing users and API tokens:\n * - If there are no users and no API tokens, it creates two default API tokens:\n *   1. A \"Read Only\" API token with permissions for accessing resources.\n *   2. A \"Full Access\" API token with permissions for accessing and modifying resources.\n *\n * @sideEffects Creates new API tokens in the database if conditions are met.\n */\n\nconst createDefaultAPITokensIfNeeded = async () => {\n  const userService = getService('user');\n  const apiTokenService = getService('api-token');\n\n  const usersCount = await userService.count();\n  const apiTokenCount = await apiTokenService.count();\n\n  if (usersCount === 0 && apiTokenCount === 0) {\n    await apiTokenService.create({\n      name: 'Read Only',\n      description:\n        'A default API token with read-only permissions, only used for accessing resources',\n      type: 'read-only',\n      lifespan: null,\n    });\n\n    await apiTokenService.create({\n      name: 'Full Access',\n      description:\n        'A default API token with full access permissions, used for accessing or modifying resources',\n      type: 'full-access',\n      lifespan: null,\n    });\n  }\n};\n\nexport default async ({ strapi }: { strapi: Core.Strapi }) => {\n  await registerAdminConditions();\n  await registerPermissionActions();\n  registerModelHooks();\n\n  const permissionService = getService('permission');\n  const userService = getService('user');\n  const roleService = getService('role');\n  const apiTokenService = getService('api-token');\n  const transferService = getService('transfer');\n  const tokenService = getService('token');\n\n  await roleService.createRolesIfNoneExist();\n  await roleService.resetSuperAdminPermissions();\n  await roleService.displayWarningIfNoSuperAdmin();\n\n  await permissionService.cleanPermissionsInDatabase();\n\n  await userService.displayWarningIfUsersDontHaveRole();\n\n  await syncAuthSettings();\n  await syncAPITokensPermissions();\n\n  await getService('metrics').sendUpdateProjectInformation(strapi);\n  getService('metrics').startCron(strapi);\n\n  apiTokenService.checkSaltIsDefined();\n  transferService.token.checkSaltIsDefined();\n  tokenService.checkSecretIsDefined();\n\n  await createDefaultAPITokensIfNeeded();\n};\n","import type { Context, Next } from 'koa';\nimport { resolve, join, extname, basename } from 'path';\nimport fse from 'fs-extra';\nimport koaStatic from 'koa-static';\nimport type { Core } from '@strapi/types';\n\nconst registerAdminPanelRoute = ({ strapi }: { strapi: Core.Strapi }) => {\n  let buildDir = resolve(strapi.dirs.dist.root, 'build');\n\n  if (!fse.pathExistsSync(buildDir)) {\n    buildDir = resolve(__dirname, '../../build');\n  }\n\n  const serveAdminMiddleware = async (ctx: Context, next: Next) => {\n    await next();\n\n    if (ctx.method !== 'HEAD' && ctx.method !== 'GET') {\n      return;\n    }\n\n    if (ctx.body != null || ctx.status !== 404) {\n      return;\n    }\n\n    ctx.type = 'html';\n    ctx.body = fse.createReadStream(join(buildDir, 'index.html'));\n  };\n\n  strapi.server.routes([\n    {\n      method: 'GET',\n      path: `${strapi.config.admin.path}/:path*`,\n      handler: [\n        serveAdminMiddleware,\n        serveStatic(buildDir, {\n          maxage: 31536000,\n          defer: false,\n          index: 'index.html',\n          setHeaders(res: any, path: any) {\n            const ext = extname(path);\n            // publicly cache static files to avoid unnecessary network & disk access\n            if (ext !== '.html') {\n              res.setHeader('cache-control', 'public, max-age=31536000, immutable');\n            }\n          },\n        }),\n      ],\n      config: { auth: false },\n    },\n  ]);\n};\n\n// serveStatic is not supposed to be used to serve a folder that have sub-folders\nconst serveStatic = (filesDir: any, koaStaticOptions = {}) => {\n  const serve = koaStatic(filesDir, koaStaticOptions);\n\n  return async (ctx: Context, next: Next) => {\n    const prev = ctx.path;\n    const newPath = basename(ctx.path);\n\n    ctx.path = newPath;\n    await serve(ctx, async () => {\n      ctx.path = prev;\n      await next();\n      ctx.path = newPath;\n    });\n    ctx.path = prev;\n  };\n};\n\nexport default registerAdminPanelRoute;\n","import type { Context } from 'koa';\nimport { getService } from '../utils';\n\n/** @type {import('.').AuthenticateFunction} */\nexport const authenticate = async (ctx: Context) => {\n  const { authorization } = ctx.request.header;\n\n  if (!authorization) {\n    return { authenticated: false };\n  }\n\n  const parts = authorization.split(/\\s+/);\n\n  if (parts[0].toLowerCase() !== 'bearer' || parts.length !== 2) {\n    return { authenticated: false };\n  }\n\n  const token = parts[1];\n  const { payload, isValid } = getService('token').decodeJwtToken(token);\n\n  if (!isValid) {\n    return { authenticated: false };\n  }\n\n  const user = await strapi.db\n    .query('admin::user')\n    .findOne({ where: { id: payload.id }, populate: ['roles'] });\n\n  if (!user || !(user.isActive === true)) {\n    return { authenticated: false };\n  }\n\n  const userAbility = await getService('permission').engine.generateUserAbility(user);\n\n  // TODO: use the ability from ctx.state.auth instead of\n  // ctx.state.userAbility, and remove the assign below\n  ctx.state.userAbility = userAbility;\n  ctx.state.user = user;\n\n  return {\n    authenticated: true,\n    credentials: user,\n    ability: userAbility,\n  };\n};\n\nexport const name = 'admin';\n\n/** @type {import('.').AuthStrategy} */\nexport default {\n  name,\n  authenticate,\n};\n","const DAY_IN_MS = 24 * 60 * 60 * 1000;\n\nconst constants = {\n  CONTENT_TYPE_SECTION: 'contentTypes',\n  SUPER_ADMIN_CODE: 'strapi-super-admin',\n  EDITOR_CODE: 'strapi-editor',\n  AUTHOR_CODE: 'strapi-author',\n  READ_ACTION: 'plugin::content-manager.explorer.read',\n  CREATE_ACTION: 'plugin::content-manager.explorer.create',\n  UPDATE_ACTION: 'plugin::content-manager.explorer.update',\n  DELETE_ACTION: 'plugin::content-manager.explorer.delete',\n  PUBLISH_ACTION: 'plugin::content-manager.explorer.publish',\n  API_TOKEN_TYPE: {\n    READ_ONLY: 'read-only',\n    FULL_ACCESS: 'full-access',\n    CUSTOM: 'custom',\n  },\n  // The front-end only displays these values\n  API_TOKEN_LIFESPANS: {\n    UNLIMITED: null,\n    DAYS_7: 7 * DAY_IN_MS,\n    DAYS_30: 30 * DAY_IN_MS,\n    DAYS_90: 90 * DAY_IN_MS,\n  },\n  TRANSFER_TOKEN_TYPE: {\n    PUSH: 'push',\n    PULL: 'pull',\n  },\n  TRANSFER_TOKEN_LIFESPANS: {\n    UNLIMITED: null,\n    DAYS_7: 7 * DAY_IN_MS,\n    DAYS_30: 30 * DAY_IN_MS,\n    DAYS_90: 90 * DAY_IN_MS,\n  },\n};\n\nexport default constants;\n","import type { Context } from 'koa';\nimport { castArray, isNil } from 'lodash/fp';\nimport { differenceInHours, parseISO } from 'date-fns';\nimport { errors } from '@strapi/utils';\nimport constants from '../services/constants';\nimport { getService } from '../utils';\nimport '@strapi/types';\n\nconst { UnauthorizedError, ForbiddenError } = errors;\n\nconst isReadScope = (scope: any) => scope.endsWith('find') || scope.endsWith('findOne');\n\nconst extractToken = (ctx: Context) => {\n  if (ctx.request && ctx.request.header && ctx.request.header.authorization) {\n    const parts = ctx.request.header.authorization.split(/\\s+/);\n\n    if (parts[0].toLowerCase() !== 'bearer' || parts.length !== 2) {\n      return null;\n    }\n\n    return parts[1];\n  }\n\n  return null;\n};\n\n/**\n * Authenticate the validity of the token\n */\nexport const authenticate = async (ctx: Context) => {\n  const apiTokenService = getService('api-token');\n  const token = extractToken(ctx);\n\n  if (!token) {\n    return { authenticated: false };\n  }\n\n  const apiToken = await apiTokenService.getBy({\n    accessKey: apiTokenService.hash(token),\n  });\n\n  // token not found\n  if (!apiToken) {\n    return { authenticated: false };\n  }\n\n  const currentDate = new Date();\n\n  if (!isNil(apiToken.expiresAt)) {\n    const expirationDate = new Date(apiToken.expiresAt);\n    // token has expired\n    if (expirationDate < currentDate) {\n      return { authenticated: false, error: new UnauthorizedError('Token expired') };\n    }\n  }\n\n  // update lastUsedAt if the token has not been used in the last hour\n  // @ts-expect-error - FIXME: verify lastUsedAt is defined\n  const hoursSinceLastUsed = differenceInHours(currentDate, parseISO(apiToken.lastUsedAt));\n  if (hoursSinceLastUsed >= 1) {\n    await strapi.db.query('admin::api-token').update({\n      where: { id: apiToken.id },\n      data: { lastUsedAt: currentDate },\n    });\n  }\n\n  if (apiToken.type === constants.API_TOKEN_TYPE.CUSTOM) {\n    const ability = await strapi.contentAPI.permissions.engine.generateAbility(\n      apiToken.permissions.map((action: any) => ({ action }))\n    );\n\n    return { authenticated: true, ability, credentials: apiToken };\n  }\n\n  return { authenticated: true, credentials: apiToken };\n};\n\n/**\n * Verify the token has the required abilities for the requested scope\n *\n *  @type {import('.').VerifyFunction}\n */\nexport const verify = (auth: any, config: any) => {\n  const { credentials: apiToken, ability } = auth;\n\n  if (!apiToken) {\n    throw new UnauthorizedError('Token not found');\n  }\n\n  const currentDate = new Date();\n\n  if (!isNil(apiToken.expiresAt)) {\n    const expirationDate = new Date(apiToken.expiresAt);\n    // token has expired\n    if (expirationDate < currentDate) {\n      throw new UnauthorizedError('Token expired');\n    }\n  }\n\n  // Full access\n  if (apiToken.type === constants.API_TOKEN_TYPE.FULL_ACCESS) {\n    return;\n  }\n\n  // Read only\n  if (apiToken.type === constants.API_TOKEN_TYPE.READ_ONLY) {\n    /**\n     * If you don't have `full-access` you can only access `find` and `findOne`\n     * scopes. If the route has no scope, then you can't get access to it.\n     */\n    const scopes = castArray(config.scope);\n\n    if (config.scope && scopes.every(isReadScope)) {\n      return;\n    }\n  }\n\n  // Custom\n  else if (apiToken.type === constants.API_TOKEN_TYPE.CUSTOM) {\n    if (!ability) {\n      throw new ForbiddenError();\n    }\n\n    const scopes = castArray(config.scope);\n\n    const isAllowed = scopes.every((scope) => ability.can(scope));\n\n    if (isAllowed) {\n      return;\n    }\n  }\n\n  throw new ForbiddenError();\n};\n\nexport const name = 'api-token';\n\nexport default {\n  name: 'api-token',\n  authenticate,\n  verify,\n};\n","import type { Core } from '@strapi/types';\nimport registerAdminPanelRoute from './routes/serve-admin-panel';\nimport adminAuthStrategy from './strategies/admin';\nimport apiTokenAuthStrategy from './strategies/api-token';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const passportMiddleware = strapi.service('admin::passport').init();\n\n  strapi.server.api('admin').use(passportMiddleware);\n  strapi.get('auth').register('admin', adminAuthStrategy);\n  strapi.get('auth').register('content-api', apiTokenAuthStrategy);\n\n  if (strapi.config.get('admin.serveAdminPanel')) {\n    registerAdminPanelRoute({ strapi });\n  }\n};\n","import { getService } from './utils';\n\nexport default async () => {\n  const { conditionProvider, actionProvider } = getService('permission');\n\n  await conditionProvider.clear();\n  await actionProvider.clear();\n};\n","const subject = `Reset password`;\n\nconst html = `<p>We heard that you lost your password. Sorry about that!</p>\n\n<p>But don’t worry! You can use the following link to reset your password:</p>\n\n<p><%= url %></p>\n\n<p>Thanks.</p>`;\n\nconst text = `We heard that you lost your password. Sorry about that!\n\nBut don’t worry! You can use the following link to reset your password:\n\n<%= url %>\n\nThanks.`;\n\nexport default { subject, text, html };\n","import forgotPasswordTemplate from './email-templates/forgot-password';\n\nexport const forgotPassword = {\n  emailTemplate: forgotPasswordTemplate,\n};\n\nexport default {\n  forgotPassword,\n};\n","export default (policyCtx: any) => {\n  return Boolean(policyCtx.state.isAuthenticated);\n};\n","import _ from 'lodash';\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nconst hasPermissionsSchema = yup.object({\n  actions: yup.array().of(\n    // @ts-expect-error yup types\n    yup.lazy((val) => {\n      if (_.isArray(val)) {\n        return yup.array().of(yup.string()).min(1).max(2);\n      }\n\n      if (_.isString(val)) {\n        return yup.string().required();\n      }\n\n      return yup.object().shape({\n        action: yup.string().required(),\n        subject: yup.string(),\n      });\n    })\n  ),\n});\n\nexport const validateHasPermissionsInput = validateYupSchema(hasPermissionsSchema);\n\nexport default {\n  validateHasPermissionsInput,\n};\n","import _ from 'lodash';\nimport { policy } from '@strapi/utils';\nimport { validateHasPermissionsInput } from '../validation/policies/hasPermissions';\n\nconst { createPolicy } = policy;\n\nconst inputModifiers = [\n  {\n    check: _.isString,\n    transform: (action: any) => ({ action }),\n  },\n  {\n    check: _.isArray,\n    transform: (arr: any) => ({ action: arr[0], subject: arr[1] }),\n  },\n  {\n    // Has to be after the isArray check since _.isObject also matches arrays\n    check: _.isObject,\n    transform: (perm: any) => perm,\n  },\n];\n\nexport default createPolicy({\n  name: 'admin::hasPermissions',\n  validator: validateHasPermissionsInput,\n  handler(ctx, config) {\n    const { actions } = config;\n    const { userAbility: ability } = ctx.state;\n\n    const permissions = actions.map((action: any) =>\n      inputModifiers.find((modifier) => modifier.check(action))?.transform(action)\n    );\n\n    const isAuthorized = permissions.every(({ action, subject }: any) =>\n      ability.can(action, subject)\n    );\n\n    return isAuthorized;\n  },\n});\n","import { policy } from '@strapi/utils';\n\n// TODO: TS - Try to make { policy: { createPolicy } } from '@strapi/utils'; work\nconst { createPolicy } = policy;\n\n/**\n * This policy is used for routes dealing with telemetry and analytics content.\n * It will fails when the telemetry has been disabled on the server.\n */\nexport default createPolicy({\n  name: 'admin::isTelemetryEnabled',\n  handler(_ctx, _config, { strapi }) {\n    if (strapi.telemetry.isDisabled) {\n      return false;\n    }\n  },\n});\n","import isAuthenticatedAdmin from './isAuthenticatedAdmin';\nimport hasPermissions from './hasPermissions';\nimport isTelemetryEnabled from './isTelemetryEnabled';\n\nexport default { isAuthenticatedAdmin, hasPermissions, isTelemetryEnabled };\n","export default [\n  {\n    method: 'GET',\n    path: '/init',\n    handler: 'admin.init',\n    config: { auth: false },\n  },\n  {\n    method: 'GET',\n    path: '/project-settings',\n    handler: 'admin.getProjectSettings',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['admin::project-settings.read'] },\n        },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/project-settings',\n    handler: 'admin.updateProjectSettings',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['admin::project-settings.update'] },\n        },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/project-type',\n    handler: 'admin.getProjectType',\n    config: { auth: false },\n  },\n  {\n    method: 'GET',\n    path: '/information',\n    handler: 'admin.information',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/telemetry-properties',\n    handler: 'admin.telemetryProperties',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/plugins',\n    handler: 'admin.plugins',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::marketplace.read'] } },\n      ],\n    },\n  },\n];\n","export default [\n  {\n    method: 'POST',\n    path: '/login',\n    handler: 'authentication.login',\n    config: {\n      auth: false,\n      middlewares: ['admin::rateLimit'],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/renew-token',\n    handler: 'authentication.renewToken',\n    config: { auth: false },\n  },\n  {\n    method: 'POST',\n    path: '/register-admin',\n    handler: 'authentication.registerAdmin',\n    config: { auth: false },\n  },\n  {\n    method: 'GET',\n    path: '/registration-info',\n    handler: 'authentication.registrationInfo',\n    config: { auth: false },\n  },\n  {\n    method: 'POST',\n    path: '/register',\n    handler: 'authentication.register',\n    config: { auth: false },\n  },\n  {\n    method: 'POST',\n    path: '/forgot-password',\n    handler: 'authentication.forgotPassword',\n    config: {\n      auth: false,\n      middlewares: ['plugin::email.rateLimit'],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/reset-password',\n    handler: 'authentication.resetPassword',\n    config: { auth: false },\n  },\n  {\n    method: 'POST',\n    path: '/logout',\n    handler: 'authentication.logout',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n];\n","export default [\n  {\n    method: 'GET',\n    path: '/permissions',\n    handler: 'permission.getAll',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/permissions/check',\n    handler: 'permission.check',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n];\n","export default [\n  {\n    method: 'GET',\n    path: '/users/me',\n    handler: 'authenticated-user.getMe',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/users/me',\n    handler: 'authenticated-user.updateMe',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/users/me/permissions',\n    handler: 'authenticated-user.getOwnPermissions',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/users',\n    handler: 'user.create',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::users.create'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/users',\n    handler: 'user.find',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::users.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/users/:id',\n    handler: 'user.findOne',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::users.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/users/:id',\n    handler: 'user.update',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::users.update'] } },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/users/:id',\n    handler: 'user.deleteOne',\n    config: {\n      policies: [{ name: 'admin::hasPermissions', config: { actions: ['admin::users.delete'] } }],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/users/batch-delete',\n    handler: 'user.deleteMany',\n    config: {\n      policies: [{ name: 'admin::hasPermissions', config: { actions: ['admin::users.delete'] } }],\n    },\n  },\n];\n","export default [\n  {\n    method: 'GET',\n    path: '/roles/:id/permissions',\n    handler: 'role.getPermissions',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::roles.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/roles/:id/permissions',\n    handler: 'role.updatePermissions',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::roles.update'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/roles/:id',\n    handler: 'role.findOne',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::roles.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/roles',\n    handler: 'role.findAll',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::roles.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/roles',\n    handler: 'role.create',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        {\n          name: 'admin::hasPermissions',\n          config: {\n            actions: ['admin::roles.create'],\n          },\n        },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/roles/:id',\n    handler: 'role.update',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::roles.update'] } },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/roles/:id',\n    handler: 'role.deleteOne',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        {\n          name: 'admin::hasPermissions',\n          config: {\n            actions: ['admin::roles.delete'],\n          },\n        },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/roles/batch-delete',\n    handler: 'role.deleteMany',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        {\n          name: 'admin::hasPermissions',\n          config: {\n            actions: ['admin::roles.delete'],\n          },\n        },\n      ],\n    },\n  },\n];\n","export default [\n  {\n    method: 'GET',\n    path: '/webhooks',\n    handler: 'webhooks.listWebhooks',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/webhooks',\n    handler: 'webhooks.createWebhook',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.create'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/webhooks/:id',\n    handler: 'webhooks.getWebhook',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/webhooks/:id',\n    handler: 'webhooks.updateWebhook',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.update'] } },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/webhooks/:id',\n    handler: 'webhooks.deleteWebhook',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.delete'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/webhooks/batch-delete',\n    handler: 'webhooks.deleteWebhooks',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.delete'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/webhooks/:id/trigger',\n    handler: 'webhooks.triggerWebhook',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::webhooks.update'] } },\n      ],\n    },\n  },\n];\n","export default [\n  {\n    method: 'POST',\n    path: '/api-tokens',\n    handler: 'api-token.create',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::api-tokens.create'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/api-tokens',\n    handler: 'api-token.list',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::api-tokens.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/api-tokens/:id',\n    handler: 'api-token.revoke',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::api-tokens.delete'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/api-tokens/:id',\n    handler: 'api-token.get',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::api-tokens.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/api-tokens/:id',\n    handler: 'api-token.update',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::api-tokens.update'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/api-tokens/:id/regenerate',\n    handler: 'api-token.regenerate',\n    config: {\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::api-tokens.regenerate'] } },\n      ],\n    },\n  },\n];\n","export default [\n  {\n    method: 'GET',\n    path: '/content-api/permissions',\n    handler: 'content-api.getPermissions',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/content-api/routes',\n    handler: 'content-api.getRoutes',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n];\n","import type { Context } from 'koa';\nimport { differenceInHours, parseISO } from 'date-fns';\nimport { errors } from '@strapi/utils';\nimport { castArray, isNil } from 'lodash/fp';\n\nimport { getService } from '../utils';\n\nconst { UnauthorizedError, ForbiddenError } = errors;\n\nconst extractToken = (ctx: Context) => {\n  if (ctx.request && ctx.request.header && ctx.request.header.authorization) {\n    const parts = ctx.request.header.authorization.split(/\\s+/);\n\n    if (parts[0].toLowerCase() !== 'bearer' || parts.length !== 2) {\n      return null;\n    }\n\n    return parts[1];\n  }\n\n  return null;\n};\n\n/**\n * Authenticate the validity of the token\n *\n *  @type {import('.').AuthenticateFunction}\n */\nexport const authenticate = async (ctx: Context) => {\n  const { token: tokenService } = getService('transfer');\n  const token = extractToken(ctx);\n\n  if (!token) {\n    return { authenticated: false };\n  }\n\n  const transferToken = await tokenService.getBy({ accessKey: tokenService.hash(token) });\n\n  // Check if the token exists\n  if (!transferToken) {\n    return { authenticated: false };\n  }\n\n  // Check if the token has expired\n  const currentDate = new Date();\n\n  if (!isNil(transferToken.expiresAt)) {\n    const expirationDate = new Date(transferToken.expiresAt);\n\n    if (expirationDate < currentDate) {\n      return { authenticated: false, error: new UnauthorizedError('Token expired') };\n    }\n  }\n\n  // Update token metadata if the token has not been used in the last hour\n  // @ts-expect-error - FIXME: verify lastUsedAt is defined\n  const hoursSinceLastUsed = differenceInHours(currentDate, parseISO(transferToken.lastUsedAt));\n  if (hoursSinceLastUsed >= 1) {\n    await strapi.db.query('admin::api-token').update({\n      where: { id: transferToken.id },\n      data: { lastUsedAt: currentDate },\n    });\n  }\n\n  // Generate an ability based on the token permissions\n  const ability = await getService('transfer').permission.engine.generateAbility(\n    transferToken.permissions.map((action: any) => ({ action }))\n  );\n\n  return { authenticated: true, ability, credentials: transferToken };\n};\n\n/**\n * Verify the token has the required abilities for the requested scope\n *\n *  @type {import('.').VerifyFunction}\n */\nexport const verify = async (auth: any, config: any = {}) => {\n  const { credentials: transferToken, ability } = auth;\n\n  if (!transferToken) {\n    throw new UnauthorizedError('Token not found');\n  }\n\n  const currentDate = new Date();\n\n  if (!isNil(transferToken.expiresAt)) {\n    const expirationDate = new Date(transferToken.expiresAt);\n    // token has expired\n    if (expirationDate < currentDate) {\n      throw new UnauthorizedError('Token expired');\n    }\n  }\n\n  if (!ability) {\n    throw new ForbiddenError();\n  }\n\n  const scopes = castArray(config.scope ?? []);\n\n  const isAllowed = scopes.every((scope) => ability.can(scope));\n\n  if (!isAllowed) {\n    throw new ForbiddenError();\n  }\n};\n\nexport const name = 'data-transfer';\n\n/** @type {import('.').AuthStrategy} */\nexport default {\n  name,\n  authenticate,\n  verify,\n};\n","import dataTransferAuthStrategy from '../strategies/data-transfer';\n\nexport default [\n  // Transfer Push\n  {\n    method: 'GET',\n    path: '/transfer/runner/push',\n    handler: 'transfer.runner-push',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      auth: { strategies: [dataTransferAuthStrategy], scope: ['push'] },\n    },\n  },\n  // Transfer Pull\n  {\n    method: 'GET',\n    path: '/transfer/runner/pull',\n    handler: 'transfer.runner-pull',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      auth: { strategies: [dataTransferAuthStrategy], scope: ['pull'] },\n    },\n  },\n  // Transfer Tokens\n  {\n    method: 'POST',\n    path: '/transfer/tokens',\n    handler: 'transfer.token-create',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::transfer.tokens.create'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/transfer/tokens',\n    handler: 'transfer.token-list',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::transfer.tokens.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'DELETE',\n    path: '/transfer/tokens/:id',\n    handler: 'transfer.token-revoke',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::transfer.tokens.delete'] } },\n      ],\n    },\n  },\n  {\n    method: 'GET',\n    path: '/transfer/tokens/:id',\n    handler: 'transfer.token-getById',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::transfer.tokens.read'] } },\n      ],\n    },\n  },\n  {\n    method: 'PUT',\n    path: '/transfer/tokens/:id',\n    handler: 'transfer.token-update',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        { name: 'admin::hasPermissions', config: { actions: ['admin::transfer.tokens.update'] } },\n      ],\n    },\n  },\n  {\n    method: 'POST',\n    path: '/transfer/tokens/:id/regenerate',\n    handler: 'transfer.token-regenerate',\n    config: {\n      middlewares: ['admin::data-transfer'],\n      policies: [\n        'admin::isAuthenticatedAdmin',\n        {\n          name: 'admin::hasPermissions',\n          config: { actions: ['admin::transfer.tokens.regenerate'] },\n        },\n      ],\n    },\n  },\n];\n","import type { Plugin } from '@strapi/types';\n\nconst info = { pluginName: 'admin', type: 'admin' };\n\nexport default [\n  {\n    method: 'GET',\n    info,\n    path: '/homepage/recent-documents',\n    handler: 'homepage.getRecentDocuments',\n    config: {\n      policies: ['admin::isAuthenticatedAdmin'],\n    },\n  },\n] satisfies Plugin.LoadedPlugin['routes'][string]['routes'];\n","import admin from './admin';\nimport authentication from './authentication';\nimport permissions from './permissions';\nimport users from './users';\nimport roles from './roles';\nimport webhooks from './webhooks';\nimport apiTokens from './api-tokens';\nimport contentApi from './content-api';\nimport transfer from './transfer';\nimport homepage from './homepage';\n\nconst routes = {\n  admin: {\n    type: 'admin',\n    routes: [\n      ...admin,\n      ...authentication,\n      ...permissions,\n      ...users,\n      ...roles,\n      ...webhooks,\n      ...apiTokens,\n      ...contentApi,\n      ...transfer,\n      ...homepage,\n    ],\n  },\n};\n\nexport default routes;\n","import bcrypt from 'bcryptjs';\nimport _ from 'lodash';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport type { AdminUser } from '../../../shared/contracts/shared';\nimport '@strapi/types';\n\nconst { ApplicationError } = errors;\n\n/**\n * hashes a password\n * @param password - password to hash\n * @returns hashed password\n */\nconst hashPassword = (password: string) => bcrypt.hash(password, 10);\n\n/**\n * Validate a password\n * @param password\n * @param hash\n * @returns {Promise<boolean>} is the password valid\n */\nconst validatePassword = (password: string, hash: string) => bcrypt.compare(password, hash);\n\n/**\n * Check login credentials\n * @param email the users email address\n * @param password the users password\n */\nconst checkCredentials = async ({ email, password }: { email: string; password: string }) => {\n  const user: AdminUser = await strapi.db.query('admin::user').findOne({ where: { email } });\n\n  if (!user || !user.password) {\n    return [null, false, { message: 'Invalid credentials' }];\n  }\n\n  const isValid = await validatePassword(password, user.password);\n\n  if (!isValid) {\n    return [null, false, { message: 'Invalid credentials' }];\n  }\n\n  if (!(user.isActive === true)) {\n    return [null, false, { message: 'User not active' }];\n  }\n\n  return [null, user];\n};\n\n/**\n * Send an email to the user if it exists or do nothing\n * @param email user email for which to reset the password\n */\nconst forgotPassword = async ({ email } = {} as { email: string }) => {\n  const user: AdminUser = await strapi.db\n    .query('admin::user')\n    .findOne({ where: { email, isActive: true } });\n  if (!user) {\n    return;\n  }\n\n  const resetPasswordToken = getService('token').createToken();\n  await getService('user').updateById(user.id, { resetPasswordToken });\n\n  // Send an email to the admin.\n  const url = `${strapi.config.get(\n    'admin.absoluteUrl'\n  )}/auth/reset-password?code=${resetPasswordToken}`;\n\n  return strapi\n    .plugin('email')\n    .service('email')\n    .sendTemplatedEmail(\n      {\n        to: user.email,\n        from: strapi.config.get('admin.forgotPassword.from'),\n        replyTo: strapi.config.get('admin.forgotPassword.replyTo'),\n      },\n      strapi.config.get('admin.forgotPassword.emailTemplate'),\n      {\n        url,\n        user: _.pick(user, ['email', 'firstname', 'lastname', 'username']),\n      }\n    )\n    .catch((err: unknown) => {\n      // log error server side but do not disclose it to the user to avoid leaking informations\n      strapi.log.error(err);\n    });\n};\n\n/**\n * Reset a user password\n * @param resetPasswordToken token generated to request a password reset\n * @param password new user password\n */\nconst resetPassword = async (\n  { resetPasswordToken, password } = {} as { resetPasswordToken: string; password: string }\n) => {\n  const matchingUser: AdminUser | undefined = await strapi.db\n    .query('admin::user')\n    .findOne({ where: { resetPasswordToken, isActive: true } });\n\n  if (!matchingUser) {\n    throw new ApplicationError();\n  }\n\n  return getService('user').updateById(matchingUser.id, {\n    password,\n    resetPasswordToken: null,\n  });\n};\n\nexport default { checkCredentials, validatePassword, hashPassword, forgotPassword, resetPassword };\n","import constants from '../services/constants';\n\nimport type {\n  AdminUser,\n  AdminRole,\n  AdminUserCreationPayload,\n} from '../../../shared/contracts/shared';\n\nconst { SUPER_ADMIN_CODE } = constants;\n\n/**\n * Create a new user model by merging default and specified attributes\n * @param attributes A partial user object\n */\nexport function createUser(attributes: Partial<AdminUserCreationPayload>) {\n  return {\n    roles: [],\n    isActive: false,\n    username: null,\n    ...attributes,\n  };\n}\n\nexport const hasSuperAdminRole = (user: AdminUser) => {\n  return user.roles.filter((role: AdminRole) => role.code === SUPER_ADMIN_CODE).length > 0;\n};\n\nexport const ADMIN_USER_ALLOWED_FIELDS = ['id', 'firstname', 'lastname', 'username'];\n\nexport default {\n  createUser,\n  hasSuperAdminRole,\n  ADMIN_USER_ALLOWED_FIELDS,\n};\n","import type { Utils } from '@strapi/types';\n\nimport { curry, pipe, merge, set, pick, omit, includes, isArray, prop } from 'lodash/fp';\n\nexport interface ActionAlias {\n  /**\n   * The action ID to alias\n   */\n  actionId: string;\n\n  /**\n   * An optional array of subject to restrict the alias usage\n   */\n  subjects?: string[];\n}\n\nexport type Action = {\n  /**\n   * The unique identifier of the action\n   */\n  actionId: string;\n\n  /**\n   * The section linked to the action - These can be 'contentTypes' | 'plugins' | 'settings' | 'internal'\n   */\n  section: string;\n\n  /**\n   * The human readable name of an action\n   */\n  displayName: string;\n\n  /**\n   * The main category of an action\n   */\n  category: string;\n\n  /**\n   * The secondary category of an action (only for settings and plugins section)\n   */\n  subCategory?: string;\n\n  /**\n   * The plugin that provides the action\n   */\n  pluginName?: string;\n\n  /**\n   * A list of subjects on which the action can be applied\n   */\n  subjects?: string[];\n\n  /**\n   * The options of an action\n   */\n  options: {\n    /**\n     * The list of properties that can be associated with an action\n     */\n    applyToProperties: string[] | null;\n  };\n\n  /**\n   * An optional array of @see {@link ActionAlias}.\n   *\n   * It represents the possible aliases for the current action.\n   *\n   * Aliases are unidirectional.\n   *\n   * Note: This is an internal property and probably shouldn't be used outside Strapi core features.\n   *       Its behavior might change at any time without notice.\n   *\n   * @internal\n   */\n  aliases?: ActionAlias[];\n};\n\n/**\n * Set of attributes used to create a new {@link Action} object\n * @typedef {Action, { uid: string }} CreateActionPayload\n */\nexport type CreateActionPayload = Utils.Intersect<\n  [\n    Utils.Object.PartialBy<\n      // Action Id is computed from the uid value\n      Omit<Action, 'actionId'>,\n      // Options is filled with default values\n      'options'\n    >,\n    { uid: string },\n  ]\n>;\n\n/**\n * Return the default attributes of a new {@link Action}\n * @return Partial<Action>\n */\nconst getDefaultActionAttributes = (): Partial<Action> => ({\n  options: {\n    applyToProperties: null,\n  },\n});\n\n/**\n * Get the list of all the valid attributes of an {@link Action}\n */\nconst actionFields = [\n  'section',\n  'displayName',\n  'category',\n  'subCategory',\n  'pluginName',\n  'subjects',\n  'options',\n  'actionId',\n  'aliases',\n] as const;\n\n/**\n * Remove unwanted attributes from an {@link Action}\n */\nconst sanitizeActionAttributes = pick(actionFields) as (\n  action: Action | CreateActionPayload\n) => Action;\n\n/**\n * Create and return an identifier for an {@link CreateActionPayload}.\n * The format is based on the action's source ({@link CreateActionPayload.pluginName} or 'application') and {@link CreateActionPayload.uid}.\n * @param {CreateActionPayload} attributes\n * @return {string}\n */\n// TODO: TS - Use Common.UID\nconst computeActionId = (attributes: CreateActionPayload): string => {\n  const { pluginName, uid } = attributes;\n\n  if (!pluginName) {\n    return `api::${uid}`;\n  }\n\n  if (pluginName === 'admin') {\n    return `admin::${uid}`;\n  }\n\n  return `plugin::${pluginName}.${uid}`;\n};\n\n/**\n * Assign an actionId attribute to an {@link CreateActionPayload} object\n */\nconst assignActionId = (attrs: CreateActionPayload) =>\n  set('actionId', computeActionId(attrs), attrs);\n\n/**\n * Transform an action by adding or removing the {@link Action.subCategory} attribute\n * @param {Action} action - The action to process\n * @return {Action}\n */\nconst assignOrOmitSubCategory = (action: Action): Action => {\n  const shouldHaveSubCategory = ['settings', 'plugins'].includes(action.section);\n\n  return shouldHaveSubCategory\n    ? set('subCategory', action.subCategory || 'general', action)\n    : omit('subCategory', action);\n};\n\n/**\n * Check if a property can be applied to an {@link Action}\n */\nconst appliesToProperty = curry((property: string, action: Action): boolean => {\n  return pipe(prop('options.applyToProperties'), includes(property))(action);\n});\n\n/**\n * Check if an action applies to a subject\n */\nconst appliesToSubject = curry((subject: string, action: Action): boolean => {\n  return isArray(action.subjects) && includes(subject, action.subjects);\n});\n\n/**\n * Transform the given attributes into a domain representation of an Action\n */\nconst create: (payload: CreateActionPayload) => Action = pipe(\n  // Create and assign an action identifier to the action\n  // (need to be done before the sanitizeActionAttributes since we need the uid here)\n  assignActionId,\n  // Add or remove the sub category field based on the pluginName attribute\n  assignOrOmitSubCategory,\n  // Remove unwanted attributes from the payload\n  sanitizeActionAttributes,\n  // Complete the action creation by adding default values for some attributes\n  merge(getDefaultActionAttributes())\n);\n\nexport default {\n  actionFields,\n  appliesToProperty,\n  appliesToSubject,\n  assignActionId,\n  assignOrOmitSubCategory,\n  create,\n  computeActionId,\n  getDefaultActionAttributes,\n  sanitizeActionAttributes,\n};\n","import _ from 'lodash';\n\nconst checkFieldsAreCorrectlyNested = (fields: unknown) => {\n  if (_.isNil(fields)) {\n    // Only check if the fields exist\n    return true;\n  }\n  if (!Array.isArray(fields)) {\n    return false;\n  }\n\n  let failed = false;\n  for (let indexA = 0; indexA < fields.length; indexA += 1) {\n    failed = fields\n      .slice(indexA + 1)\n      .some(\n        (fieldB) =>\n          fieldB.startsWith(`${fields[indexA]}.`) || fields[indexA].startsWith(`${fieldB}.`)\n      );\n    if (failed) break;\n  }\n\n  return !failed;\n};\n\nexport default checkFieldsAreCorrectlyNested;\n","import _ from 'lodash';\n\nconst checkFieldsDontHaveDuplicates = (fields: unknown) => {\n  if (_.isNil(fields)) {\n    // Only check if the fields exist\n    return true;\n  }\n  if (!Array.isArray(fields)) {\n    return false;\n  }\n\n  return _.uniq(fields).length === fields.length;\n};\n\nexport default checkFieldsDontHaveDuplicates;\n","import { yup } from '@strapi/utils';\nimport _ from 'lodash';\nimport { isEmpty, has, isNil, isArray } from 'lodash/fp';\nimport { getService } from '../utils';\nimport actionDomain, { type Action } from '../domain/action';\nimport { checkFieldsAreCorrectlyNested, checkFieldsDontHaveDuplicates } from './common-functions';\nimport actions from '../domain/action/index';\n\nconst { actionFields } = actions;\n\nconst getActionFromProvider = (actionId: string) => {\n  return getService('permission').actionProvider.get(actionId);\n};\n\nexport const email = yup.string().email().lowercase();\n\nexport const firstname = yup.string().trim().min(1);\n\nexport const lastname = yup.string();\n\nexport const username = yup.string().min(1);\n\nexport const password = yup\n  .string()\n  .min(8)\n  .test('required-byte-size', '${path} must be less than 73 bytes', function (value) {\n    if (!value) return true;\n    const byteSize = new TextEncoder().encode(value).length;\n    return byteSize <= 72;\n  })\n  .matches(/[a-z]/, '${path} must contain at least one lowercase character')\n  .matches(/[A-Z]/, '${path} must contain at least one uppercase character')\n  .matches(/\\d/, '${path} must contain at least one number');\n\nexport const roles = yup.array(yup.strapiID()).min(1);\n\nconst isAPluginName = yup\n  .string()\n  .test('is-a-plugin-name', 'is not a plugin name', function (value) {\n    return [undefined, 'admin', ...Object.keys(strapi.plugins)].includes(value)\n      ? true\n      : this.createError({ path: this.path, message: `${this.path} is not an existing plugin` });\n  });\n\nexport const arrayOfConditionNames = yup\n  .array()\n  .of(yup.string())\n  .test('is-an-array-of-conditions', 'is not a plugin name', function (value) {\n    const ids = strapi.service('admin::permission').conditionProvider.keys();\n    return _.isUndefined(value) || _.difference(value, ids).length === 0\n      ? true\n      : this.createError({ path: this.path, message: `contains conditions that don't exist` });\n  });\n\nexport const permissionsAreEquals = (a: any, b: any) =>\n  a.action === b.action && (a.subject === b.subject || (_.isNil(a.subject) && _.isNil(b.subject)));\n\nconst checkNoDuplicatedPermissions = (permissions: unknown) =>\n  !Array.isArray(permissions) ||\n  permissions.every((permA, i) =>\n    permissions.slice(i + 1).every((permB) => !permissionsAreEquals(permA, permB))\n  );\n\nconst checkNilFields = (action: Action) =>\n  function (fields: typeof actionFields) {\n    // If the parent has no action field, then we ignore this test\n    if (isNil(action)) {\n      return true;\n    }\n\n    return actionDomain.appliesToProperty('fields', action) || isNil(fields);\n  };\n\nconst fieldsPropertyValidation = (action: Action) =>\n  yup\n    .array()\n    .of(yup.string())\n    .nullable()\n    .test(\n      'field-nested',\n      'Fields format are incorrect (bad nesting).',\n      checkFieldsAreCorrectlyNested\n    )\n    .test(\n      'field-nested',\n      'Fields format are incorrect (duplicates).',\n      checkFieldsDontHaveDuplicates\n    )\n    .test(\n      'fields-restriction',\n      'The permission at ${path} must have fields set to null or undefined',\n      // @ts-expect-error yup types\n      checkNilFields(action)\n    );\n\nexport const permission = yup\n  .object()\n  .shape({\n    action: yup\n      .string()\n      .required()\n      .test('action-validity', 'action is not an existing permission action', function (actionId) {\n        // If the action field is Nil, ignore the test and let the required check handle the error\n        if (isNil(actionId)) {\n          return true;\n        }\n\n        return !!getActionFromProvider(actionId);\n      }),\n    actionParameters: yup.object().nullable(),\n    subject: yup\n      .string()\n      .nullable()\n      .test('subject-validity', 'Invalid subject submitted', function (subject) {\n        // @ts-expect-error yup types\n        const action = getActionFromProvider(this.options.parent.action);\n\n        if (!action) {\n          return true;\n        }\n\n        if (isNil(action.subjects)) {\n          return isNil(subject);\n        }\n\n        if (isArray(action.subjects) && !isNil(subject)) {\n          return action.subjects.includes(subject);\n        }\n\n        return false;\n      }),\n    properties: yup\n      .object()\n      .test('properties-structure', 'Invalid property set at ${path}', function (properties) {\n        // @ts-expect-error yup types\n        const action = getActionFromProvider(this.options.parent.action) as any;\n        const hasNoProperties = isEmpty(properties) || isNil(properties);\n\n        if (!has('options.applyToProperties', action)) {\n          return hasNoProperties;\n        }\n\n        if (hasNoProperties) {\n          return true;\n        }\n\n        const { applyToProperties } = action.options;\n\n        if (!isArray(applyToProperties)) {\n          return false;\n        }\n\n        return Object.keys(properties).every((property) => applyToProperties.includes(property));\n      })\n      .test(\n        'fields-property',\n        'Invalid fields property at ${path}',\n        async function (properties = {}) {\n          // @ts-expect-error yup types\n          const action = getActionFromProvider(this.options.parent.action) as any;\n\n          if (!action || !properties) {\n            return true;\n          }\n\n          if (!actionDomain.appliesToProperty('fields', action)) {\n            return true;\n          }\n\n          try {\n            await fieldsPropertyValidation(action).validate(properties.fields, {\n              strict: true,\n              abortEarly: false,\n            });\n            return true;\n          } catch (e: any) {\n            // Propagate fieldsPropertyValidation error with updated path\n            throw this.createError({\n              message: e.message,\n              path: `${this.path}.fields`,\n            });\n          }\n        }\n      ),\n    conditions: yup.array().of(yup.string()),\n  })\n  .noUnknown();\n\nexport const updatePermissions = yup\n  .object()\n  .shape({\n    permissions: yup\n      .array()\n      .required()\n      .of(permission)\n      .test(\n        'duplicated-permissions',\n        'Some permissions are duplicated (same action and subject)',\n        checkNoDuplicatedPermissions\n      ),\n  })\n  .required()\n  .noUnknown();\n\nexport default {\n  email,\n  firstname,\n  lastname,\n  username,\n  password,\n  roles,\n  isAPluginName,\n  arrayOfConditionNames,\n  permission,\n  updatePermissions,\n};\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport _ from 'lodash';\nimport { defaults } from 'lodash/fp';\nimport { arrays, errors } from '@strapi/utils';\nimport type { Data } from '@strapi/types';\nimport { createUser, hasSuperAdminRole } from '../domain/user';\nimport type {\n  AdminUser,\n  AdminRole,\n  AdminUserCreationPayload,\n  SanitizedAdminUser,\n  SanitizedAdminRole,\n  AdminUserUpdatePayload,\n  // eslint-disable-next-line node/no-unpublished-import\n} from '../../../shared/contracts/shared';\nimport { password as passwordValidator } from '../validation/common-validators';\nimport { getService } from '../utils';\nimport constants from './constants';\n\nconst { SUPER_ADMIN_CODE } = constants;\n\nconst { ValidationError } = errors;\nconst sanitizeUserRoles = (role: AdminRole): SanitizedAdminRole =>\n  _.pick(role, ['id', 'name', 'description', 'code']);\n\n/**\n * Remove private user fields\n * @param  user - user to sanitize\n */\nconst sanitizeUser = (user: AdminUser): SanitizedAdminUser => {\n  return {\n    ..._.omit(user, ['password', 'resetPasswordToken', 'registrationToken', 'roles']),\n    roles: user.roles && user.roles.map(sanitizeUserRoles),\n  };\n};\n\n/**\n * Create and save a user in database\n * @param attributes A partial user object\n */\nconst create = async (\n  // isActive is added in the controller, it's not sent by the API.\n  attributes: Partial<AdminUserCreationPayload> & { isActive?: true }\n): Promise<AdminUser> => {\n  const userInfo = {\n    registrationToken: getService('token').createToken(),\n    ...attributes,\n  };\n\n  if (_.has(attributes, 'password')) {\n    userInfo.password = await getService('auth').hashPassword(attributes.password!);\n  }\n\n  const user = createUser(userInfo);\n\n  const createdUser = await strapi.db\n    .query('admin::user')\n    .create({ data: user, populate: ['roles'] });\n\n  getService('metrics').sendDidInviteUser();\n\n  strapi.eventHub.emit('user.create', { user: sanitizeUser(createdUser) });\n\n  return createdUser;\n};\n\n/**\n * Update a user in database\n * @param id query params to find the user to update\n * @param attributes A partial user object\n */\nconst updateById = async (\n  id: Data.ID,\n  attributes: Partial<AdminUserUpdatePayload>\n): Promise<AdminUser> => {\n  // Check at least one super admin remains\n  if (_.has(attributes, 'roles')) {\n    const lastAdminUser = await isLastSuperAdminUser(id);\n    const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n    const willRemoveSuperAdminRole = !arrays.includesString(attributes.roles!, superAdminRole.id);\n\n    if (lastAdminUser && willRemoveSuperAdminRole) {\n      throw new ValidationError('You must have at least one user with super admin role.');\n    }\n  }\n\n  // cannot disable last super admin\n  if (attributes.isActive === false) {\n    const lastAdminUser = await isLastSuperAdminUser(id);\n    if (lastAdminUser) {\n      throw new ValidationError('You must have at least one user with super admin role.');\n    }\n  }\n\n  // hash password if a new one is sent\n  if (_.has(attributes, 'password')) {\n    const hashedPassword = await getService('auth').hashPassword(attributes.password!);\n\n    const updatedUser = await strapi.db.query('admin::user').update({\n      where: { id },\n      data: {\n        ...attributes,\n        password: hashedPassword,\n      },\n      populate: ['roles'],\n    });\n\n    strapi.eventHub.emit('user.update', { user: sanitizeUser(updatedUser) });\n\n    return updatedUser;\n  }\n\n  const updatedUser = await strapi.db.query('admin::user').update({\n    where: { id },\n    data: attributes,\n    populate: ['roles'],\n  });\n\n  if (updatedUser) {\n    strapi.eventHub.emit('user.update', { user: sanitizeUser(updatedUser) });\n  }\n\n  return updatedUser;\n};\n\n/**\n * Reset a user password by email. (Used in admin:reset CLI)\n * @param email - user email\n * @param password - new password\n */\nconst resetPasswordByEmail = async (email: string, password: string) => {\n  const user = await strapi.db\n    .query('admin::user')\n    .findOne({ where: { email }, populate: ['roles'] });\n\n  if (!user) {\n    throw new Error(`User not found for email: ${email}`);\n  }\n\n  try {\n    await passwordValidator.validate(password);\n  } catch (error) {\n    throw new ValidationError(\n      'Invalid password. Expected a minimum of 8 characters with at least one number and one uppercase letter'\n    );\n  }\n\n  await updateById(user.id, { password });\n};\n\n/**\n * Check if a user is the last super admin\n * @param userId user's id to look for\n */\nconst isLastSuperAdminUser = async (userId: Data.ID): Promise<boolean> => {\n  const user = (await findOne(userId)) as AdminUser | null;\n  if (!user) return false;\n\n  const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n\n  return superAdminRole.usersCount === 1 && hasSuperAdminRole(user);\n};\n\n/**\n * Check if a user with specific attributes exists in the database\n * @param attributes A partial user object\n */\nconst exists = async (attributes = {} as unknown): Promise<boolean> => {\n  return (await strapi.db.query('admin::user').count({ where: attributes })) > 0;\n};\n\n/**\n * Returns a user registration info\n * @param registrationToken - a user registration token\n * @returns - Returns user email, firstname and lastname\n */\nconst findRegistrationInfo = async (\n  registrationToken: string\n): Promise<Pick<AdminUser, 'email' | 'firstname' | 'lastname'> | undefined> => {\n  const user = await strapi.db.query('admin::user').findOne({ where: { registrationToken } });\n\n  if (!user) {\n    return undefined;\n  }\n\n  return _.pick(user, ['email', 'firstname', 'lastname']);\n};\n\n/**\n * Registers a user based on a registrationToken and some informations to update\n * @param params\n * @param params.registrationToken registration token\n * @param params.userInfo user info\n */\nconst register = async ({\n  registrationToken,\n  userInfo,\n}: {\n  registrationToken: string;\n  userInfo: Partial<AdminUser>;\n}) => {\n  const matchingUser = await strapi.db\n    .query('admin::user')\n    .findOne({ where: { registrationToken } });\n\n  if (!matchingUser) {\n    throw new ValidationError('Invalid registration info');\n  }\n\n  return getService('user').updateById(matchingUser.id, {\n    password: userInfo.password,\n    firstname: userInfo.firstname,\n    lastname: userInfo.lastname,\n    registrationToken: null,\n    isActive: true,\n  });\n};\n\n/**\n * Find one user\n */\nconst findOne = async (id: Data.ID, populate = ['roles']) => {\n  return strapi.db.query('admin::user').findOne({ where: { id }, populate });\n};\n\n/**\n * Find one user by its email\n * @param email\n * @param populate\n * @returns\n */\nconst findOneByEmail = async (email: string, populate = []) => {\n  return strapi.db.query('admin::user').findOne({\n    where: { email: { $eqi: email } },\n    populate,\n  });\n};\n\n/** Find many users (paginated)\n * @param params\n */\nconst findPage = async (params = {}): Promise<unknown> => {\n  const query = strapi\n    .get('query-params')\n    .transform('admin::user', defaults({ populate: ['roles'] }, params));\n\n  return strapi.db.query('admin::user').findPage(query);\n};\n\n/** Delete a user\n * @param id id of the user to delete\n */\nconst deleteById = async (id: Data.ID): Promise<AdminUser | null> => {\n  // Check at least one super admin remains\n  const userToDelete: AdminUser | null = await strapi.db.query('admin::user').findOne({\n    where: { id },\n    populate: ['roles'],\n  });\n\n  if (!userToDelete) {\n    return null;\n  }\n\n  if (userToDelete) {\n    if (userToDelete.roles.some((r) => r.code === SUPER_ADMIN_CODE)) {\n      const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n      if (superAdminRole.usersCount === 1) {\n        throw new ValidationError('You must have at least one user with super admin role.');\n      }\n    }\n  }\n\n  const deletedUser = await strapi.db\n    .query('admin::user')\n    .delete({ where: { id }, populate: ['roles'] });\n\n  strapi.eventHub.emit('user.delete', { user: sanitizeUser(deletedUser) });\n\n  return deletedUser;\n};\n\n/** Delete a user\n * @param ids ids of the users to delete\n */\nconst deleteByIds = async (ids: (string | number)[]): Promise<AdminUser[]> => {\n  // Check at least one super admin remains\n  const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n  const nbOfSuperAdminToDelete = await strapi.db.query('admin::user').count({\n    where: {\n      id: ids,\n      roles: { id: superAdminRole.id },\n    },\n  });\n\n  if (superAdminRole.usersCount === nbOfSuperAdminToDelete) {\n    throw new ValidationError('You must have at least one user with super admin role.');\n  }\n\n  const deletedUsers = [] as AdminUser[];\n  for (const id of ids) {\n    const deletedUser = await strapi.db.query('admin::user').delete({\n      where: { id },\n      populate: ['roles'],\n    });\n\n    deletedUsers.push(deletedUser);\n  }\n\n  strapi.eventHub.emit('user.delete', {\n    users: deletedUsers.map((deletedUser) => sanitizeUser(deletedUser)),\n  });\n\n  return deletedUsers;\n};\n\n/** Count the users that don't have any associated roles\n */\nconst countUsersWithoutRole = async (): Promise<number> => {\n  return strapi.db.query('admin::user').count({\n    where: {\n      roles: {\n        id: { $null: true },\n      },\n    },\n  });\n};\n\n/**\n * Count the number of users based on search params\n * @param params params used for the query\n */\nconst count = async (where = {}): Promise<number> => {\n  return strapi.db.query('admin::user').count({ where });\n};\n\n/**\n * Assign some roles to several users\n */\nconst assignARoleToAll = async (roleId: Data.ID): Promise<void> => {\n  const users = await strapi.db.query('admin::user').findMany({\n    select: ['id'],\n    where: {\n      roles: { id: { $null: true } },\n    },\n  });\n\n  await Promise.all(\n    users.map((user) => {\n      return strapi.db.query('admin::user').update({\n        where: { id: user.id },\n        data: { roles: [roleId] },\n      });\n    })\n  );\n};\n\n/** Display a warning if some users don't have at least one role\n */\nconst displayWarningIfUsersDontHaveRole = async (): Promise<void> => {\n  const count = await countUsersWithoutRole();\n\n  if (count > 0) {\n    strapi.log.warn(`Some users (${count}) don't have any role.`);\n  }\n};\n\n/** Returns an array of interface languages currently used by users\n */\nconst getLanguagesInUse = async (): Promise<string[]> => {\n  const users = await strapi.db.query('admin::user').findMany({ select: ['preferedLanguage'] });\n\n  return users.map((user) => user.preferedLanguage || 'en');\n};\n\nexport default {\n  create,\n  updateById,\n  exists,\n  findRegistrationInfo,\n  register,\n  sanitizeUser,\n  findOne,\n  findOneByEmail,\n  findPage,\n  deleteById,\n  deleteByIds,\n  countUsersWithoutRole,\n  count,\n  assignARoleToAll,\n  displayWarningIfUsersDontHaveRole,\n  resetPasswordByEmail,\n  getLanguagesInUse,\n};\n","import type { Utils } from '@strapi/types';\n\nimport { providerFactory } from '@strapi/utils';\nimport {\n  pipe,\n  set,\n  pick,\n  eq,\n  omit,\n  remove,\n  get,\n  uniq,\n  isArray,\n  map,\n  curry,\n  merge,\n} from 'lodash/fp';\nimport { Permission } from '../../../../shared/contracts/shared';\nimport { SanitizedPermission } from '../../../../shared/contracts/roles';\n\nexport type CreatePermissionPayload = Utils.Object.PartialBy<\n  Permission,\n  'actionParameters' | 'conditions' | 'properties' | 'subject' | 'id' | 'createdAt' | 'updatedAt'\n>;\n\ntype Provider = ReturnType<typeof providerFactory>;\n\nexport const permissionFields = [\n  'id',\n  'action',\n  'actionParameters',\n  'subject',\n  'properties',\n  'conditions',\n  'role',\n];\nexport const sanitizedPermissionFields = [\n  'id',\n  'action',\n  'actionParameters',\n  'subject',\n  'properties',\n  'conditions',\n] as const;\n\nexport const sanitizePermissionFields: (p: Permission) => SanitizedPermission =\n  pick(sanitizedPermissionFields);\n\n/**\n * Creates a permission with default values\n */\nconst getDefaultPermission = () => ({\n  actionParameters: {},\n  conditions: [],\n  properties: {},\n  subject: null,\n});\n\n/**\n * Returns a new permission with the given condition\n * @param condition - The condition to add\n * @param permission - The permission on which we want to add the condition\n * @return\n */\nexport const addCondition = curry((condition: string, permission: Permission): Permission => {\n  const { conditions } = permission;\n  const newConditions = Array.isArray(conditions)\n    ? uniq(conditions.concat(condition))\n    : [condition];\n\n  return set('conditions', newConditions, permission);\n});\n\n/**\n * Returns a new permission without the given condition\n * @param condition - The condition to remove\n * @param permission - The permission on which we want to remove the condition\n */\nexport const removeCondition = curry((condition: string, permission: Permission): Permission => {\n  return set('conditions', remove(eq(condition), permission.conditions), permission);\n});\n\n/**\n * Gets a property or a part of a property from a permission.\n * @param property - The property to get\n * @param permission - The permission on which we want to access the property\n */\nexport const getProperty = curry(\n  (property: string, permission: Permission): Permission =>\n    get(`properties.${property}`, permission)\n);\n\n/**\n * Set a value for a given property on a new permission object\n * @param property - The name of the property\n * @param value - The value of the property\n * @param permission - The permission on which we want to set the property\n */\nexport const setProperty = (\n  property: string,\n  value: unknown,\n  permission: Permission\n): Permission => {\n  return set(`properties.${property}`, value, permission);\n};\n\n/**\n * Returns a new permission without the given property name set\n * @param property - The name of the property to delete\n * @param permission - The permission on which we want to remove the property\n */\nexport const deleteProperty = <TProperty extends string>(\n  property: TProperty,\n  permission: Permission\n) => omit(`properties.${property}`, permission) as Omit<Permission, TProperty>;\n\n/**\n * Creates a new {@link Permission} object from raw attributes. Set default values for certain fields\n * @param  attributes\n */\nexport const create = (attributes: CreatePermissionPayload) => {\n  return pipe(pick(permissionFields), merge(getDefaultPermission()))(attributes) as Permission;\n};\n\n/**\n * Using the given condition provider, check and remove invalid condition from the permission's condition array.\n * @param provider - The condition provider used to do the checks\n * @param permission - The condition to sanitize\n */\nexport const sanitizeConditions = curry(\n  (provider: Provider, permission: Permission): Permission => {\n    if (!isArray(permission.conditions)) {\n      return permission;\n    }\n\n    return permission.conditions\n      .filter((condition: string) => !provider.has(condition))\n      .reduce(\n        (perm: Permission, condition: string) => removeCondition(condition, perm),\n        permission\n      );\n  }\n);\n\n/**\n * Transform raw attributes into valid permissions using the create domain function.\n * @param  payload - Can either be a single object of attributes or an array of those objects.\n */\n\nfunction toPermission<T extends CreatePermissionPayload>(payload: T[]): Permission[];\nfunction toPermission<T extends CreatePermissionPayload>(payload: T): Permission;\nfunction toPermission<T extends CreatePermissionPayload>(\n  payload: T[] | T\n): Permission[] | Permission {\n  if (isArray(payload)) {\n    return map((value) => create(value), payload);\n  }\n\n  return create(payload);\n}\n\nexport { toPermission };\n\nexport default {\n  addCondition,\n  removeCondition,\n  create,\n  deleteProperty,\n  permissionFields,\n  getProperty,\n  sanitizedPermissionFields,\n  sanitizeConditions,\n  sanitizePermissionFields,\n  setProperty,\n  toPermission,\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport { getService } from '../utils';\nimport validators from './common-validators';\n\nconst checkPermissionsSchema = yup.object().shape({\n  permissions: yup.array().of(\n    yup\n      .object()\n      .shape({\n        action: yup.string().required(),\n        subject: yup.string().nullable(),\n        field: yup.string(),\n      })\n      .noUnknown()\n  ),\n});\n\nconst checkPermissionsExist = function (permissions: any) {\n  const existingActions = getService('permission').actionProvider.values();\n  const failIndex = permissions.findIndex(\n    (permission: any) =>\n      !existingActions.some(\n        (action: any) =>\n          action.actionId === permission.action &&\n          (action.section !== 'contentTypes' || action.subjects.includes(permission.subject))\n      )\n  );\n\n  return failIndex === -1\n    ? true\n    : // @ts-expect-error yup types\n      this.createError({\n        path: 'permissions',\n        message: `[${failIndex}] is not an existing permission action`,\n      });\n};\n\nconst actionsExistSchema = yup\n  .array()\n  .of(\n    yup.object().shape({\n      conditions: yup.array().of(yup.string()),\n    })\n  )\n  .test('actions-exist', '', checkPermissionsExist);\n\nexport const validatePermissionsExist = validateYupSchema(actionsExistSchema);\nexport const validateCheckPermissionsInput = validateYupSchema(checkPermissionsSchema);\nexport const validatedUpdatePermissionsInput = validateYupSchema(validators.updatePermissions);\n\nexport default {\n  validatedUpdatePermissionsInput,\n  validatePermissionsExist,\n  validateCheckPermissionsInput,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */ // TODO: TS - Use database parameters interface when they are ready\n/* eslint-disable @typescript-eslint/default-param-last */\nimport _ from 'lodash';\nimport { set, omit, pick, prop, isArray, differenceWith, differenceBy, isEqual } from 'lodash/fp';\n\nimport { dates, arrays, hooks as hooksUtils, errors } from '@strapi/utils';\nimport type { Data } from '@strapi/types';\n\nimport permissionDomain from '../domain/permission';\nimport type { AdminUser, AdminRole, Permission } from '../../../shared/contracts/shared';\nimport type { Action } from '../domain/action';\n\nimport { validatePermissionsExist } from '../validation/permission';\nimport roleConstants from './constants';\nimport { getService } from '../utils';\n\nconst { SUPER_ADMIN_CODE, CONTENT_TYPE_SECTION } = roleConstants;\n\nconst { createAsyncSeriesWaterfallHook } = hooksUtils;\nconst { ApplicationError } = errors;\n\nconst hooks = {\n  willResetSuperAdminPermissions: createAsyncSeriesWaterfallHook(),\n};\n\nconst ACTIONS = {\n  publish: 'plugin::content-manager.explorer.publish',\n};\n\n// @ts-expect-error lodash types\nconst sanitizeRole: <T extends object>(obj: T) => Omit<T, 'users' | 'permissions'> = omit([\n  'users',\n  'permissions',\n] as const);\n\nexport type AdminRoleWithUsersCount = AdminRole & { usersCount: number };\n\nconst COMPARABLE_FIELDS = ['conditions', 'properties', 'subject', 'action', 'actionParameters'];\nconst pickComparableFields = pick(COMPARABLE_FIELDS);\n\nconst jsonClean = <T extends object>(data: T): T => JSON.parse(JSON.stringify(data));\n\n/**\n * Compare two permissions\n */\nconst arePermissionsEqual = (p1: Permission, p2: Permission): boolean => {\n  if (p1.action === p2.action) {\n    return isEqual(jsonClean(pickComparableFields(p1)), jsonClean(pickComparableFields(p2)));\n  }\n\n  return false;\n};\n\n/**\n * Create and save a role in database\n * @param attributes A partial role object\n */\nconst create = async (attributes: Partial<AdminRole>): Promise<AdminRole> => {\n  const alreadyExists = await exists({ name: attributes.name });\n\n  if (alreadyExists) {\n    throw new ApplicationError(\n      `The name must be unique and a role with name \\`${attributes.name}\\` already exists.`\n    );\n  }\n  const autoGeneratedCode = `${_.kebabCase(attributes.name)}-${dates.timestampCode()}`;\n\n  const rolesWithCode = {\n    ...attributes,\n    code: attributes.code || autoGeneratedCode,\n  };\n\n  const result = await strapi.db.query('admin::role').create({ data: rolesWithCode });\n  strapi.eventHub.emit('role.create', { role: sanitizeRole(result) });\n\n  return result;\n};\n\n/**\n * Find a role in database\n * @param params query params to find the role\n * @param populate\n */\nconst findOne = (params = {}, populate?: unknown): Promise<AdminRole> => {\n  return strapi.db.query('admin::role').findOne({ where: params, populate });\n};\n\n/**\n * Find a role in database with usersCounts\n * @param params query params to find the role\n * @param populate\n */\nconst findOneWithUsersCount = async (\n  params = {},\n  populate?: unknown\n): Promise<AdminRoleWithUsersCount> => {\n  const role = await strapi.db.query('admin::role').findOne({ where: params, populate });\n\n  if (role) {\n    role.usersCount = await getUsersCount(role.id);\n  }\n\n  return role;\n};\n\n/**\n * Find roles in database\n * @param params query params to find the roles\n * @param populate\n */\nconst find = (params = {}, populate: unknown): Promise<AdminRole[]> => {\n  return strapi.db.query('admin::role').findMany({ where: params, populate });\n};\n\n/**\n * Find all roles in database\n */\nconst findAllWithUsersCount = async (params: any): Promise<AdminRoleWithUsersCount[]> => {\n  const roles: AdminRoleWithUsersCount[] = await strapi.db\n    .query('admin::role')\n    .findMany(strapi.get('query-params').transform('admin::role', params));\n\n  for (const role of roles) {\n    role.usersCount = await getUsersCount(role.id);\n  }\n\n  return roles;\n};\n\n/**\n * Update a role in database\n * @param params query params to find the role to update\n * @param attributes A partial role object\n */\nconst update = async (params: any, attributes: Partial<AdminRole>): Promise<AdminRole> => {\n  const sanitizedAttributes = _.omit(attributes, ['code']);\n\n  if (_.has(params, 'id') && _.has(sanitizedAttributes, 'name')) {\n    const alreadyExists = await exists({\n      name: sanitizedAttributes.name,\n      id: { $ne: params.id },\n    });\n    if (alreadyExists) {\n      throw new ApplicationError(\n        `The name must be unique and a role with name \\`${sanitizedAttributes.name}\\` already exists.`\n      );\n    }\n  }\n\n  const result = await strapi.db\n    .query('admin::role')\n    .update({ where: params, data: sanitizedAttributes });\n\n  strapi.eventHub.emit('role.update', { role: sanitizeRole(result) });\n\n  return result;\n};\n\n/**\n * Check if a role exists in database\n * @param params query params to find the role\n */\nconst exists = async (params = {} as unknown): Promise<boolean> => {\n  const count = await strapi.db.query('admin::role').count({ where: params });\n  return count > 0;\n};\n\n/**\n * Count the number of roles based on search params\n * @param params params used for the query\n */\nconst count = async (params = {} as any): Promise<number> => {\n  return strapi.db.query('admin::role').count(params);\n};\n\n/**\n * Check if the given roles id can be deleted safely, throw otherwise\n * @param ids\n */\nconst checkRolesIdForDeletion = async (ids = [] as Data.ID[]) => {\n  const superAdminRole = await getSuperAdmin();\n\n  if (superAdminRole && arrays.includesString(ids, superAdminRole.id)) {\n    throw new ApplicationError('You cannot delete the super admin role');\n  }\n\n  for (const roleId of ids) {\n    const usersCount = await getUsersCount(roleId);\n    if (usersCount !== 0) {\n      throw new ApplicationError('Some roles are still assigned to some users');\n    }\n  }\n};\n\n/**\n * Delete roles in database if they have no user assigned\n * @param ids query params to find the roles\n */\nconst deleteByIds = async (ids = [] as Data.ID[]): Promise<AdminRole[]> => {\n  await checkRolesIdForDeletion(ids);\n\n  await getService('permission').deleteByRolesIds(ids);\n\n  const deletedRoles: AdminRole[] = [];\n  for (const id of ids) {\n    const deletedRole = await strapi.db.query('admin::role').delete({ where: { id } });\n\n    if (deletedRole) {\n      strapi.eventHub.emit('role.delete', { role: deletedRole });\n      deletedRoles.push(deletedRole);\n    }\n  }\n\n  return deletedRoles;\n};\n\n/** Count the number of users for some roles\n */\nconst getUsersCount = async (roleId: Data.ID): Promise<number> => {\n  return strapi.db.query('admin::user').count({ where: { roles: { id: roleId } } });\n};\n\n/** Returns admin role\n */\nconst getSuperAdmin = (): Promise<AdminRole | undefined> => findOne({ code: SUPER_ADMIN_CODE });\n\n/** Returns admin role with userCount\n * @returns {Promise<role>}\n */\nconst getSuperAdminWithUsersCount = () => findOneWithUsersCount({ code: SUPER_ADMIN_CODE });\n\n/** Create superAdmin, Author and Editor role is no role already exist\n */\nconst createRolesIfNoneExist = async () => {\n  const someRolesExist = await exists();\n  if (someRolesExist) {\n    return;\n  }\n\n  const { actionProvider } = getService('permission');\n\n  const allActions = actionProvider.values();\n  const contentTypesActions = allActions.filter((a) => a.section === 'contentTypes');\n\n  // create 3 roles\n  const superAdminRole = await create({\n    name: 'Super Admin',\n    code: 'strapi-super-admin',\n    description: 'Super Admins can access and manage all features and settings.',\n  });\n\n  await getService('user').assignARoleToAll(superAdminRole.id);\n\n  const editorRole = await create({\n    name: 'Editor',\n    code: 'strapi-editor',\n    description: 'Editors can manage and publish contents including those of other users.',\n  });\n\n  const authorRole = await create({\n    name: 'Author',\n    code: 'strapi-author',\n    description: 'Authors can manage the content they have created.',\n  });\n\n  // create content-type permissions for each role\n  const editorPermissions = getService('content-type').getPermissionsWithNestedFields(\n    contentTypesActions,\n    {\n      restrictedSubjects: ['plugin::users-permissions.user'],\n    }\n  );\n\n  const authorPermissions = editorPermissions\n    .filter(({ action }: any) => action !== ACTIONS.publish)\n    .map((permission: any) =>\n      permissionDomain.create({ ...permission, conditions: ['admin::is-creator'] })\n    );\n\n  editorPermissions.push(...getDefaultPluginPermissions());\n  authorPermissions.push(...getDefaultPluginPermissions({ isAuthor: true }));\n\n  // assign permissions to roles\n  await addPermissions(editorRole.id, editorPermissions);\n  await addPermissions(authorRole.id, authorPermissions);\n};\n\nconst getDefaultPluginPermissions = ({ isAuthor = false } = {}) => {\n  const conditions = isAuthor ? ['admin::is-creator'] : [];\n\n  // add plugin permissions for each role\n  return [\n    { action: 'plugin::upload.read', conditions },\n    { action: 'plugin::upload.configure-view' },\n    { action: 'plugin::upload.assets.create' },\n    { action: 'plugin::upload.assets.update', conditions },\n    { action: 'plugin::upload.assets.download' },\n    { action: 'plugin::upload.assets.copy-link' },\n  ].map(permissionDomain.create);\n};\n\n/** Display a warning if the role superAdmin doesn't exist\n *  or if the role is not assigned to at least one user\n */\nconst displayWarningIfNoSuperAdmin = async () => {\n  const superAdminRole = await getSuperAdminWithUsersCount();\n  const someUsersExists = await getService('user').exists();\n\n  if (!superAdminRole) {\n    strapi.log.warn(\"Your application doesn't have a super admin role.\");\n  } else if (someUsersExists && superAdminRole.usersCount === 0) {\n    strapi.log.warn(\"Your application doesn't have a super admin user.\");\n  }\n};\n\n/**\n * Assign permissions to a role\n * @param roleId - role Data.ID\n * @param {Array<Permission{action,subject,fields,conditions}>} permissions - permissions to assign to the role\n */\nconst assignPermissions = async (\n  roleId: Data.ID,\n  permissions: Array<Pick<Permission, 'action' | 'subject' | 'conditions'>> = []\n) => {\n  await validatePermissionsExist(permissions);\n\n  // Internal actions are not handled by the role service, so any permission\n  // with an internal action is filtered out\n  const internalActions = getService('permission')\n    .actionProvider.values()\n    .filter((action) => action.section === 'internal')\n    .map((action) => action.actionId);\n\n  const superAdmin = await getService('role').getSuperAdmin();\n  const isSuperAdmin = superAdmin && superAdmin.id === roleId;\n  const assignRole = set('role', roleId);\n\n  const permissionsWithRole = permissions\n    // Add the role attribute to every permission\n    .map(assignRole)\n    // Transform each permission into a Permission instance\n    // @ts-expect-error - lodash set doesn't resolve the type appropriately\n    .map(permissionDomain.create);\n\n  const existingPermissions = await getService('permission').findMany({\n    where: { role: { id: roleId } },\n    populate: ['role'],\n  });\n\n  const permissionsToAdd = differenceWith(\n    arePermissionsEqual,\n    permissionsWithRole,\n    existingPermissions\n  ).filter((permission: Permission) => !internalActions.includes(permission.action));\n\n  const permissionsToDelete = differenceWith(\n    arePermissionsEqual,\n    existingPermissions,\n    permissionsWithRole\n  ).filter((permission: Permission) => !internalActions.includes(permission.action));\n\n  const permissionsToReturn = differenceBy('id', permissionsToDelete, existingPermissions);\n\n  if (permissionsToDelete.length > 0) {\n    // @ts-expect-error - lodash prop doesn't resolve the type appropriately\n    await getService('permission').deleteByIds(permissionsToDelete.map(prop('id')));\n  }\n\n  if (permissionsToAdd.length > 0) {\n    const newPermissions = await addPermissions(roleId, permissionsToAdd);\n    permissionsToReturn.push(...newPermissions);\n  }\n\n  if (!isSuperAdmin && (permissionsToAdd.length || permissionsToDelete.length)) {\n    await getService('metrics').sendDidUpdateRolePermissions();\n  }\n\n  return permissionsToReturn;\n};\n\nconst addPermissions = async (roleId: Data.ID, permissions: any) => {\n  const { conditionProvider, createMany } = getService('permission');\n  const { sanitizeConditions } = permissionDomain;\n\n  const permissionsWithRole = permissions\n    .map(set('role', roleId))\n    // @ts-expect-error - refactor domain/permission Condition type, as it's now expecting\n    // a string but it should be a Condition interface\n    .map(sanitizeConditions(conditionProvider))\n    .map(permissionDomain.create);\n\n  return createMany(permissionsWithRole);\n};\n\nconst isContentTypeAction = (action: Action) => action.section === CONTENT_TYPE_SECTION;\n\n/**\n * Reset super admin permissions (giving it all permissions)\n */\nconst resetSuperAdminPermissions = async () => {\n  const superAdminRole = await getService('role').getSuperAdmin();\n  if (!superAdminRole) {\n    return;\n  }\n\n  const permissionService = getService('permission');\n  const contentTypeService = getService('content-type');\n\n  const allActions = permissionService.actionProvider.values() as Action[];\n\n  const contentTypesActions = allActions.filter((action) => isContentTypeAction(action));\n  const otherActions = allActions.filter((action) => !isContentTypeAction(action));\n\n  // First, get the content-types permissions\n  const permissions = contentTypeService.getPermissionsWithNestedFields(\n    contentTypesActions\n  ) as Permission[];\n\n  // Then add every other permission\n  const otherPermissions = otherActions.reduce((acc, action) => {\n    const { actionId, subjects } = action;\n\n    if (isArray(subjects)) {\n      acc.push(\n        ...subjects.map((subject) => permissionDomain.create({ action: actionId, subject }))\n      );\n    } else {\n      acc.push(permissionDomain.create({ action: actionId }));\n    }\n\n    return acc;\n  }, [] as Permission[]);\n\n  permissions.push(...otherPermissions);\n\n  const transformedPermissions = (await hooks.willResetSuperAdminPermissions.call(\n    permissions\n  )) as Permission[];\n\n  await assignPermissions(superAdminRole.id, transformedPermissions);\n};\n\n/**\n * Check if a user object includes the super admin role\n */\nconst hasSuperAdminRole = (user: AdminUser): boolean => {\n  const roles = _.get(user, 'roles', []) as AdminRole[];\n\n  return roles.map(prop('code')).includes(SUPER_ADMIN_CODE);\n};\n\nconst constants = {\n  superAdminCode: SUPER_ADMIN_CODE,\n};\n\nexport default {\n  hooks,\n  sanitizeRole,\n  create,\n  findOne,\n  findOneWithUsersCount,\n  find,\n  findAllWithUsersCount,\n  update,\n  exists,\n  count,\n  deleteByIds,\n  getUsersCount,\n  getSuperAdmin,\n  getSuperAdminWithUsersCount,\n  createRolesIfNoneExist,\n  displayWarningIfNoSuperAdmin,\n  addPermissions,\n  hasSuperAdminRole,\n  assignPermissions,\n  resetSuperAdminPermissions,\n  checkRolesIdForDeletion,\n  constants,\n};\n","import { toLower } from 'lodash/fp';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport type { Core } from '@strapi/types';\nimport { getService } from '../../utils';\n\nconst createLocalStrategy = (strapi: Core.Strapi, middleware?: any) => {\n  return new LocalStrategy(\n    {\n      usernameField: 'email',\n      passwordField: 'password',\n      session: false,\n    },\n    (email: string, password: string, done: any) => {\n      return getService('auth')\n        .checkCredentials({ email: toLower(email), password })\n        .then(async ([error, user, message]) => {\n          if (middleware) {\n            return middleware([error, user, message], done);\n          }\n\n          return done(error, user, message);\n        })\n        .catch((error) => done(error));\n    }\n  );\n};\n\nexport default createLocalStrategy;\n","import passport from 'koa-passport';\nimport type { Strategy } from 'passport-local';\nimport { isFunction } from 'lodash/fp';\n\nimport createLocalStrategy from './passport/local-strategy';\n\nconst authEventsMapper = {\n  onConnectionSuccess: 'admin.auth.success',\n  onConnectionError: 'admin.auth.error',\n};\n\nconst valueIsFunctionType = ([, value]: [any, any]) => isFunction(value);\nconst keyIsValidEventName = ([key]: any) => {\n  return Object.keys(strapi.service('admin::passport').authEventsMapper).includes(key);\n};\n\nconst getPassportStrategies = () => [createLocalStrategy(strapi)] as Strategy[];\n\nconst registerAuthEvents = () => {\n  // @ts-expect-error - TODO: migrate auth service to TS\n  const { events = {} } = strapi.config.get('admin.auth', {});\n  const { authEventsMapper } = strapi.service('admin::passport');\n\n  const eventList = Object.entries(events).filter(keyIsValidEventName).filter(valueIsFunctionType);\n\n  for (const [eventName, handler] of eventList) {\n    // TODO - TS: ensure the handler is an EventHub.Listener\n    strapi.eventHub.on(authEventsMapper[eventName], handler as any);\n  }\n};\n\nconst init = () => {\n  strapi\n    .service('admin::passport')\n    .getPassportStrategies()\n    .forEach((strategy: Strategy) => passport.use(strategy));\n\n  registerAuthEvents();\n\n  return passport.initialize();\n};\n\nexport default { init, getPassportStrategies, authEventsMapper };\n","import type { Core } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst sendDidInviteUser = async () => {\n  const numberOfUsers = await getService('user').count();\n  const numberOfRoles = await getService('role').count();\n  strapi.telemetry.send('didInviteUser', {\n    groupProperties: { numberOfRoles, numberOfUsers },\n  });\n};\n\nconst sendDidUpdateRolePermissions = async () => {\n  strapi.telemetry.send('didUpdateRolePermissions');\n};\n\nconst sendDidChangeInterfaceLanguage = async () => {\n  const languagesInUse = await getService('user').getLanguagesInUse();\n  // This event is anonymous\n  strapi.telemetry.send('didChangeInterfaceLanguage', { userProperties: { languagesInUse } });\n};\n\nconst sendUpdateProjectInformation = async (strapi: Core.Strapi) => {\n  const numberOfActiveAdminUsers = await getService('user').count({ isActive: true });\n  const numberOfAdminUsers = await getService('user').count();\n\n  strapi.telemetry.send('didUpdateProjectInformation', {\n    groupProperties: { numberOfActiveAdminUsers, numberOfAdminUsers },\n  });\n};\n\nconst startCron = (strapi: Core.Strapi) => {\n  strapi.cron.add({\n    sendProjectInformation: {\n      task: () => sendUpdateProjectInformation(strapi),\n      options: '0 0 0 * * *',\n    },\n  });\n};\n\nexport default {\n  sendDidInviteUser,\n  sendDidUpdateRolePermissions,\n  sendDidChangeInterfaceLanguage,\n  sendUpdateProjectInformation,\n  startCron,\n};\n","import crypto from 'crypto';\nimport _ from 'lodash';\nimport jwt from 'jsonwebtoken';\nimport type { AdminUser } from '../../../shared/contracts/shared';\n\nconst defaultJwtOptions = { expiresIn: '30d' };\n\nexport type TokenOptions = {\n  expiresIn?: string;\n  [key: string]: unknown;\n};\n\nexport type TokenPayload = {\n  id: AdminUser['id'];\n};\n\nexport type AdminAuthConfig = {\n  secret: string;\n  options: TokenOptions;\n};\n\nconst getTokenOptions = () => {\n  const { options, secret } = strapi.config.get<AdminAuthConfig>(\n    'admin.auth',\n    {} as AdminAuthConfig\n  );\n\n  return {\n    secret,\n    options: _.merge(defaultJwtOptions, options),\n  };\n};\n\n/**\n * Create a random token\n */\nconst createToken = (): string => {\n  return crypto.randomBytes(20).toString('hex');\n};\n\n/**\n * Creates a JWT token for an administration user\n * @param user - admin user\n */\nconst createJwtToken = (user: { id: AdminUser['id'] }) => {\n  const { options, secret } = getTokenOptions();\n\n  return jwt.sign({ id: user.id }, secret, options);\n};\n\n/**\n * Tries to decode a token an return its payload and if it is valid\n * @param token - a token to decode\n * @return decodeInfo - the decoded info\n */\nconst decodeJwtToken = (\n  token: string\n): { payload: TokenPayload; isValid: true } | { payload: null; isValid: false } => {\n  const { secret } = getTokenOptions();\n\n  try {\n    const payload = jwt.verify(token, secret) as TokenPayload;\n    return { payload, isValid: true };\n  } catch (err) {\n    return { payload: null, isValid: false };\n  }\n};\n\nconst checkSecretIsDefined = () => {\n  if (strapi.config.get('admin.serveAdminPanel') && !strapi.config.get('admin.auth.secret')) {\n    throw new Error(\n      `Missing auth.secret. Please set auth.secret in config/admin.js (ex: you can generate one using Node with \\`crypto.randomBytes(16).toString('base64')\\`).\nFor security reasons, prefer storing the secret in an environment variable and read it in config/admin.js. See https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/environment.html#configuration-using-environment-variables.`\n    );\n  }\n};\n\nexport { createToken, createJwtToken, getTokenOptions, decodeJwtToken, checkSecretIsDefined };\n","import { yup, validateYupSchemaSync } from '@strapi/utils';\nimport validators from './common-validators';\n\nconst registerProviderActionSchema = yup\n  .array()\n  .required()\n  .of(\n    yup\n      .object()\n      .shape({\n        uid: yup\n          .string()\n          .matches(\n            /^[a-z]([a-z|.|-]+)[a-z]$/,\n            (v) => `${v.path}: The uid can only contain lowercase letters, dots and hyphens.`\n          )\n          .required(),\n        section: yup.string().oneOf(['contentTypes', 'plugins', 'settings', 'internal']).required(),\n        pluginName: yup.mixed().when('section', {\n          is: 'plugins',\n          then: validators.isAPluginName.required(),\n          otherwise: validators.isAPluginName,\n        }),\n        subjects: yup.mixed().when('section', {\n          is: 'contentTypes',\n          then: yup.array().of(yup.string()).required(),\n          otherwise: yup\n            .mixed()\n            .oneOf([undefined], 'subjects should only be defined for the \"contentTypes\" section'),\n        }),\n        displayName: yup.string().required(),\n        category: yup.mixed().when('section', {\n          is: 'settings',\n          then: yup.string().required(),\n          otherwise: yup\n            .mixed()\n            .test(\n              'settingsCategory',\n              'category should only be defined for the \"settings\" section',\n              (cat) => cat === undefined\n            ),\n        }),\n        subCategory: yup.mixed().when('section', {\n          is: (section: any) => ['settings', 'plugins'].includes(section),\n          then: yup.string(),\n          otherwise: yup\n            .mixed()\n            .test(\n              'settingsSubCategory',\n              'subCategory should only be defined for \"plugins\" and \"settings\" sections',\n              (subCat) => {\n                return subCat === undefined;\n              }\n            ),\n        }),\n        options: yup.object({\n          applyToProperties: yup.array().of(yup.string()),\n        }),\n        aliases: yup\n          .array(\n            yup.object({\n              actionId: yup.string(),\n              subjects: yup.array(yup.string()).nullable(),\n            })\n          )\n          .nullable(),\n      })\n      .noUnknown()\n  );\n\nexport const validateRegisterProviderAction = validateYupSchemaSync(registerProviderActionSchema);\n\nexport default {\n  validateRegisterProviderAction,\n};\n","import { providerFactory, hooks, errors } from '@strapi/utils';\nimport { validateRegisterProviderAction } from '../../validation/action-provider';\n\nimport domain from './index';\nimport type { Action, CreateActionPayload } from './index';\nimport type { Permission } from '../../../../shared/contracts/shared';\n\ntype Options = Parameters<typeof providerFactory>['0'];\n\nconst { ApplicationError } = errors;\n\n/**\n * Creates a new instance of an action provider\n */\nconst createActionProvider = (options?: Options) => {\n  const provider = providerFactory<Action>(options);\n  const actionHooks = {\n    appliesPropertyToSubject: hooks.createAsyncParallelHook(),\n  };\n\n  return {\n    ...provider,\n\n    hooks: {\n      ...provider.hooks,\n      ...actionHooks,\n    },\n\n    async register(actionAttributes: CreateActionPayload) {\n      if (strapi.isLoaded) {\n        throw new Error(`You can't register new actions outside of the bootstrap function.`);\n      }\n\n      validateRegisterProviderAction([actionAttributes]);\n\n      const action = domain.create(actionAttributes);\n\n      return provider.register(action.actionId, action);\n    },\n\n    async registerMany(actionsAttributes: CreateActionPayload[]) {\n      validateRegisterProviderAction(actionsAttributes);\n\n      for (const attributes of actionsAttributes) {\n        await this.register(attributes);\n      }\n\n      return this;\n    },\n\n    async appliesToProperty(property: string, actionId: string, subject: Permission['subject']) {\n      const action = provider.get(actionId) as Action | undefined;\n      if (!action) {\n        throw new ApplicationError(`No action found with id \"${actionId}\"`);\n      }\n\n      const appliesToAction = domain.appliesToProperty(property, action);\n\n      // If the property isn't valid for this action, ignore the rest of the checks\n      if (!appliesToAction) {\n        return false;\n      }\n\n      // If the property is valid for this action and there isn't any subject\n      if (!subject) {\n        return true;\n      }\n\n      // If the property is valid for this action and the subject is not handled by the action\n      if (!domain.appliesToSubject(subject, action)) {\n        return false;\n      }\n\n      const results = await actionHooks.appliesPropertyToSubject.call({\n        property,\n        action,\n        subject,\n      });\n\n      return results.every((result) => result !== false);\n    },\n\n    /**\n     * @experimental\n     */\n    unstable_aliases(actionId: string, subject?: string | null): string[] {\n      const isRegistered = this.has(actionId);\n\n      if (!isRegistered) {\n        return [];\n      }\n\n      return this.values()\n        .filter((action) =>\n          action.aliases?.some((alias) => {\n            // Only look at alias with the correct actionId\n            if (alias.actionId !== actionId) {\n              return false;\n            }\n\n            // If the alias don't have a list of required subjects, keep it\n            if (!Array.isArray(alias.subjects)) {\n              return true;\n            }\n\n            // If the alias require specific subjects but none is provided, skip it\n            if (!subject) {\n              return false;\n            }\n\n            // Else, make sure the given subject is allowed\n            return alias.subjects.includes(subject);\n          })\n        )\n        .map((action) => action.actionId);\n    },\n  };\n};\n\nexport default createActionProvider;\n","import { pipe, merge, set, pick } from 'lodash/fp';\n\nexport type Condition = {\n  id: string;\n  displayName: string;\n  name: string;\n  plugin?: string;\n  category?: string;\n  /**\n   * The handler of a {@link Condition}\n   */\n  handler: (user: object, options: object) => object | boolean;\n};\n\n/**\n * Set of attributes used to create a new {@link Action} object\n */\nexport type CreateConditionPayload = Omit<Condition, 'id'>;\n\nconst DEFAULT_CATEGORY = 'default';\n\n/**\n * Get the default value used for every condition\n * @return {Condition}\n */\nexport const getDefaultConditionAttributes = () => ({\n  category: DEFAULT_CATEGORY,\n});\n\n/**\n * Get the list of all the valid attributes of a {@link Condition}\n * @return {string[]}\n */\nexport const conditionFields = ['id', 'displayName', 'handler', 'plugin', 'category'] as const;\n\n/**\n * Remove unwanted attributes from a {@link Condition}\n */\nexport const sanitizeConditionAttributes = pick(conditionFields);\n\nexport const computeConditionId = (condition: CreateConditionPayload) => {\n  const { name, plugin } = condition;\n\n  if (!plugin) {\n    return `api::${name}`;\n  }\n\n  if (plugin === 'admin') {\n    return `admin::${name}`;\n  }\n\n  return `plugin::${plugin}.${name}`;\n};\n\n/**\n * Assign an id attribute to a {@link CreateConditionPayload} object\n * @param  attrs - Payload used to create a condition\n */\nexport const assignConditionId = (attrs: CreateConditionPayload): Condition => {\n  const condition = set('id', computeConditionId(attrs), attrs) as CreateConditionPayload & {\n    id: string;\n  };\n  return condition;\n};\n\n/**\n * Transform the given attributes into a domain representation of a Condition\n * @param payload - The condition payload containing the attributes needed to create a {@link Condition}\n */\nexport const create = pipe(\n  assignConditionId,\n  sanitizeConditionAttributes,\n  merge(getDefaultConditionAttributes())\n) as (payload: CreateConditionPayload) => Condition;\n\nexport default {\n  assignConditionId,\n  computeConditionId,\n  conditionFields,\n  create,\n  getDefaultConditionAttributes,\n  sanitizeConditionAttributes,\n};\n","import { providerFactory } from '@strapi/utils';\nimport domain from '.';\nimport type { CreateConditionPayload } from '.';\n\n/**\n * @typedef ConditionProviderOverride\n * @property {function(CreateConditionPayload)} register\n * @property {function(attributes CreateConditionPayload[]): Promise<this>} registerMany\n */\n\n/**\n * Creates a new instance of a condition provider\n * @return {Provider & ConditionProviderOverride}\n */\nconst createConditionProvider = () => {\n  const provider = providerFactory();\n\n  return {\n    ...provider,\n\n    async register(conditionAttributes: CreateConditionPayload) {\n      if (strapi.isLoaded) {\n        throw new Error(`You can't register new conditions outside of the bootstrap function.`);\n      }\n\n      const condition = domain.create(conditionAttributes);\n\n      return provider.register(condition.id, condition);\n    },\n\n    async registerMany(conditionsAttributes: CreateConditionPayload[]) {\n      for (const attributes of conditionsAttributes) {\n        await this.register(attributes);\n      }\n\n      return this;\n    },\n  };\n};\n\nexport default createConditionProvider;\n","import { subject as asSubject, detectSubjectType } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\nimport {\n  defaults,\n  omit,\n  isArray,\n  isEmpty,\n  isNil,\n  flatMap,\n  some,\n  prop,\n  uniq,\n  intersection,\n  pick,\n  getOr,\n  isObject,\n  cloneDeep,\n} from 'lodash/fp';\n\nimport type { UID } from '@strapi/types';\n\nimport { contentTypes, traverseEntity, sanitize, async, traverse } from '@strapi/utils';\nimport { ADMIN_USER_ALLOWED_FIELDS } from '../../../domain/user';\n\nconst {\n  visitors: { removePassword, expandWildcardPopulate },\n} = sanitize;\n\nconst {\n  constants,\n  isScalarAttribute,\n  getNonVisibleAttributes,\n  getNonWritableAttributes,\n  getWritableAttributes,\n} = contentTypes;\nconst {\n  ID_ATTRIBUTE,\n  DOC_ID_ATTRIBUTE,\n  CREATED_AT_ATTRIBUTE,\n  UPDATED_AT_ATTRIBUTE,\n  PUBLISHED_AT_ATTRIBUTE,\n  CREATED_BY_ATTRIBUTE,\n  UPDATED_BY_ATTRIBUTE,\n} = constants;\n\nconst COMPONENT_FIELDS = ['__component'];\nconst STATIC_FIELDS = [ID_ATTRIBUTE, DOC_ID_ATTRIBUTE];\n\nexport default ({ action, ability, model }: any) => {\n  const schema = strapi.getModel(model);\n\n  const { removeDisallowedFields } = sanitize.visitors;\n\n  const ctx = {\n    schema,\n    getModel: strapi.getModel.bind(strapi),\n  };\n\n  const createSanitizeQuery = (options = {} as any) => {\n    const { fields } = options;\n\n    // TODO: sanitize relations to admin users in all sanitizers\n    const permittedFields = fields.shouldIncludeAll ? null : getQueryFields(fields.permitted);\n\n    const sanitizeFilters = async.pipe(\n      traverse.traverseQueryFilters(removeDisallowedFields(permittedFields), ctx),\n      traverse.traverseQueryFilters(omitDisallowedAdminUserFields, ctx),\n      traverse.traverseQueryFilters(omitHiddenFields, ctx),\n      traverse.traverseQueryFilters(removePassword, ctx),\n      traverse.traverseQueryFilters(({ key, value }, { remove }) => {\n        if (isObject(value) && isEmpty(value)) {\n          remove(key);\n        }\n      }, ctx)\n    );\n\n    const sanitizeSort = async.pipe(\n      traverse.traverseQuerySort(removeDisallowedFields(permittedFields), ctx),\n      traverse.traverseQuerySort(omitDisallowedAdminUserFields, ctx),\n      traverse.traverseQuerySort(omitHiddenFields, ctx),\n      traverse.traverseQuerySort(removePassword, ctx),\n      traverse.traverseQuerySort(({ key, attribute, value }, { remove }) => {\n        if (!isScalarAttribute(attribute) && isEmpty(value)) {\n          remove(key);\n        }\n      }, ctx)\n    );\n\n    const sanitizePopulate = async.pipe(\n      traverse.traverseQueryPopulate(expandWildcardPopulate, ctx),\n      traverse.traverseQueryPopulate(removeDisallowedFields(permittedFields), ctx),\n      traverse.traverseQueryPopulate(omitDisallowedAdminUserFields, ctx),\n      traverse.traverseQueryPopulate(omitHiddenFields, ctx),\n      traverse.traverseQueryPopulate(removePassword, ctx)\n    );\n\n    const sanitizeFields = async.pipe(\n      traverse.traverseQueryFields(removeDisallowedFields(permittedFields), ctx),\n      traverse.traverseQueryFields(omitHiddenFields, ctx),\n      traverse.traverseQueryFields(removePassword, ctx)\n    );\n\n    return async (query: any) => {\n      const sanitizedQuery = cloneDeep(query);\n\n      if (query.filters) {\n        Object.assign(sanitizedQuery, { filters: await sanitizeFilters(query.filters) });\n      }\n\n      if (query.sort) {\n        Object.assign(sanitizedQuery, { sort: await sanitizeSort(query.sort) });\n      }\n\n      if (query.populate) {\n        Object.assign(sanitizedQuery, { populate: await sanitizePopulate(query.populate) });\n      }\n\n      if (query.fields) {\n        Object.assign(sanitizedQuery, { fields: await sanitizeFields(query.fields) });\n      }\n\n      return sanitizedQuery;\n    };\n  };\n\n  const createSanitizeOutput = (options = {} as any) => {\n    const { fields } = options;\n\n    const permittedFields = fields.shouldIncludeAll ? null : getOutputFields(fields.permitted);\n\n    return async.pipe(\n      // Remove fields hidden from the admin\n      traverseEntity(omitHiddenFields, ctx),\n      // Remove unallowed fields from admin::user relations\n      traverseEntity(pickAllowedAdminUserFields, ctx),\n      // Remove not allowed fields (RBAC)\n      traverseEntity(removeDisallowedFields(permittedFields), ctx),\n      // Remove all fields of type 'password'\n      sanitize.sanitizers.sanitizePasswords({\n        schema,\n        getModel(uid: string) {\n          return strapi.getModel(uid as UID.Schema);\n        },\n      })\n    );\n  };\n\n  const createSanitizeInput = (options = {} as any) => {\n    const { fields } = options;\n\n    const permittedFields = fields.shouldIncludeAll ? null : getInputFields(fields.permitted);\n\n    return async.pipe(\n      // Remove fields hidden from the admin\n      traverseEntity(omitHiddenFields, ctx),\n      // Remove not allowed fields (RBAC)\n      traverseEntity(removeDisallowedFields(permittedFields), ctx),\n      // Remove roles from createdBy & updatedBy fields\n      omitCreatorRoles\n    );\n  };\n\n  const wrapSanitize = (createSanitizeFunction: any) => {\n    // TODO\n    // @ts-expect-error define the correct return type\n    const wrappedSanitize = async (data: unknown, options = {} as any) => {\n      if (isArray(data)) {\n        return Promise.all(data.map((entity: unknown) => wrappedSanitize(entity, options)));\n      }\n\n      const { subject, action: actionOverride } = getDefaultOptions(data, options);\n\n      const permittedFields = permittedFieldsOf(ability, actionOverride, subject, {\n        fieldsFrom: (rule) => rule.fields || [],\n      });\n\n      const hasAtLeastOneRegistered = some(\n        (fields) => !isNil(fields),\n        flatMap(prop('fields'), ability.rulesFor(actionOverride, detectSubjectType(subject)))\n      );\n      const shouldIncludeAllFields = isEmpty(permittedFields) && !hasAtLeastOneRegistered;\n\n      const sanitizeOptions = {\n        ...options,\n        fields: {\n          shouldIncludeAll: shouldIncludeAllFields,\n          permitted: permittedFields,\n          hasAtLeastOneRegistered,\n        },\n      };\n\n      const sanitizeFunction = createSanitizeFunction(sanitizeOptions);\n\n      return sanitizeFunction(data);\n    };\n\n    return wrappedSanitize;\n  };\n\n  const getDefaultOptions = (data: any, options: unknown) => {\n    return defaults({ subject: asSubject(model, data), action }, options);\n  };\n\n  /**\n   * Omit creator fields' (createdBy & updatedBy) roles from the admin API responses\n   */\n  const omitCreatorRoles = omit([`${CREATED_BY_ATTRIBUTE}.roles`, `${UPDATED_BY_ATTRIBUTE}.roles`]);\n\n  /**\n   * Visitor used to remove hidden fields from the admin API responses\n   */\n  const omitHiddenFields = ({ key, schema }: any, { remove }: any) => {\n    const isHidden = getOr(false, ['config', 'attributes', key, 'hidden'], schema);\n\n    if (isHidden) {\n      remove(key);\n    }\n  };\n\n  /**\n   * Visitor used to only select needed fields from the admin users entities & avoid leaking sensitive information\n   */\n  const pickAllowedAdminUserFields = ({ attribute, key, value }: any, { set }: any) => {\n    const pickAllowedFields = pick(ADMIN_USER_ALLOWED_FIELDS);\n    if (!attribute) {\n      return;\n    }\n\n    if (attribute.type === 'relation' && attribute.target === 'admin::user' && value) {\n      if (Array.isArray(value)) {\n        set(key, value.map(pickAllowedFields));\n      } else {\n        set(key, pickAllowedFields(value));\n      }\n    }\n  };\n\n  /**\n   * Visitor used to omit disallowed fields from the admin users entities & avoid leaking sensitive information\n   */\n  const omitDisallowedAdminUserFields = ({ key, attribute, schema }: any, { remove }: any) => {\n    if (schema.uid === 'admin::user' && attribute && !ADMIN_USER_ALLOWED_FIELDS.includes(key)) {\n      remove(key);\n    }\n  };\n\n  const getInputFields = (fields = []) => {\n    const nonVisibleAttributes = getNonVisibleAttributes(schema);\n    const writableAttributes = getWritableAttributes(schema);\n\n    const nonVisibleWritableAttributes = intersection(nonVisibleAttributes, writableAttributes);\n\n    return uniq([...fields, ...COMPONENT_FIELDS, ...nonVisibleWritableAttributes]);\n  };\n\n  const getOutputFields = (fields = []) => {\n    const nonWritableAttributes = getNonWritableAttributes(schema);\n    const nonVisibleAttributes = getNonVisibleAttributes(schema);\n\n    return uniq([\n      ...fields,\n      ...STATIC_FIELDS,\n      ...COMPONENT_FIELDS,\n      ...nonWritableAttributes,\n      ...nonVisibleAttributes,\n      CREATED_AT_ATTRIBUTE,\n      UPDATED_AT_ATTRIBUTE,\n    ]);\n  };\n\n  const getQueryFields = (fields = []) => {\n    const nonVisibleAttributes = getNonVisibleAttributes(schema);\n    const writableAttributes = getWritableAttributes(schema);\n\n    const nonVisibleWritableAttributes = intersection(nonVisibleAttributes, writableAttributes);\n\n    return uniq([\n      ...fields,\n      ...STATIC_FIELDS,\n      ...COMPONENT_FIELDS,\n      ...nonVisibleWritableAttributes,\n      CREATED_AT_ATTRIBUTE,\n      UPDATED_AT_ATTRIBUTE,\n      PUBLISHED_AT_ATTRIBUTE,\n      CREATED_BY_ATTRIBUTE,\n      UPDATED_BY_ATTRIBUTE,\n    ]);\n  };\n\n  return {\n    sanitizeOutput: wrapSanitize(createSanitizeOutput),\n    sanitizeInput: wrapSanitize(createSanitizeInput),\n    sanitizeQuery: wrapSanitize(createSanitizeQuery),\n  };\n};\n","import { subject as asSubject, detectSubjectType } from '@casl/ability';\nimport { permittedFieldsOf } from '@casl/ability/extra';\nimport {\n  defaults,\n  omit,\n  isArray,\n  isEmpty,\n  isNil,\n  flatMap,\n  some,\n  prop,\n  uniq,\n  intersection,\n  getOr,\n  isObject,\n} from 'lodash/fp';\n\nimport { contentTypes, traverseEntity, traverse, validate, async, errors } from '@strapi/utils';\nimport { ADMIN_USER_ALLOWED_FIELDS } from '../../../domain/user';\n\nconst { ValidationError } = errors;\nconst { throwPassword, throwDisallowedFields } = validate.visitors;\n\nconst { constants, isScalarAttribute, getNonVisibleAttributes, getWritableAttributes } =\n  contentTypes;\nconst {\n  ID_ATTRIBUTE,\n  DOC_ID_ATTRIBUTE,\n  CREATED_AT_ATTRIBUTE,\n  UPDATED_AT_ATTRIBUTE,\n  PUBLISHED_AT_ATTRIBUTE,\n  CREATED_BY_ATTRIBUTE,\n  UPDATED_BY_ATTRIBUTE,\n} = constants;\n\nconst COMPONENT_FIELDS = ['__component'];\n\nconst STATIC_FIELDS = [ID_ATTRIBUTE, DOC_ID_ATTRIBUTE];\n\nconst throwInvalidKey = ({ key, path }: { key: string; path?: string | null }) => {\n  const msg = path && path !== key ? `Invalid key ${key} at ${path}` : `Invalid key ${key}`;\n\n  throw new ValidationError(msg);\n};\n\nexport default ({ action, ability, model }: any) => {\n  const schema = strapi.getModel(model);\n\n  const ctx = {\n    schema,\n    getModel: strapi.getModel.bind(strapi),\n  };\n\n  const createValidateQuery = (options = {} as any) => {\n    const { fields } = options;\n\n    // TODO: validate relations to admin users in all validators\n    const permittedFields = fields.shouldIncludeAll ? null : getQueryFields(fields.permitted);\n\n    const validateFilters = async.pipe(\n      traverse.traverseQueryFilters(throwDisallowedFields(permittedFields), ctx),\n      traverse.traverseQueryFilters(throwDisallowedAdminUserFields, ctx),\n      traverse.traverseQueryFilters(throwPassword, ctx),\n      traverse.traverseQueryFilters(({ key, value, path }) => {\n        if (isObject(value) && isEmpty(value)) {\n          throwInvalidKey({ key, path: path.attribute });\n        }\n      }, ctx)\n    );\n\n    const validateSort = async.pipe(\n      traverse.traverseQuerySort(throwDisallowedFields(permittedFields), ctx),\n      traverse.traverseQuerySort(throwDisallowedAdminUserFields, ctx),\n      traverse.traverseQuerySort(throwPassword, ctx),\n      traverse.traverseQuerySort(({ key, attribute, value, path }) => {\n        if (!isScalarAttribute(attribute) && isEmpty(value)) {\n          throwInvalidKey({ key, path: path.attribute });\n        }\n      }, ctx)\n    );\n\n    const validateFields = async.pipe(\n      traverse.traverseQueryFields(throwDisallowedFields(permittedFields), ctx),\n      traverse.traverseQueryFields(throwPassword, ctx)\n    );\n\n    const validatePopulate = async.pipe(\n      traverse.traverseQueryPopulate(throwDisallowedFields(permittedFields), ctx),\n      traverse.traverseQueryPopulate(throwDisallowedAdminUserFields, ctx),\n      traverse.traverseQueryPopulate(throwHiddenFields, ctx),\n      traverse.traverseQueryPopulate(throwPassword, ctx)\n    );\n\n    return async (query: any) => {\n      if (query.filters) {\n        await validateFilters(query.filters);\n      }\n\n      if (query.sort) {\n        await validateSort(query.sort);\n      }\n\n      if (query.fields) {\n        await validateFields(query.fields);\n      }\n\n      // a wildcard is always valid; its conversion will be handled by the entity service and can be optimized with sanitizer\n      if (query.populate && query.populate !== '*') {\n        await validatePopulate(query.populate);\n      }\n\n      return true;\n    };\n  };\n\n  const createValidateInput = (options = {} as any) => {\n    const { fields } = options;\n\n    const permittedFields = fields.shouldIncludeAll ? null : getInputFields(fields.permitted);\n\n    return async.pipe(\n      // Remove fields hidden from the admin\n      traverseEntity(throwHiddenFields, ctx),\n      // Remove not allowed fields (RBAC)\n      traverseEntity(throwDisallowedFields(permittedFields), ctx),\n      // Remove roles from createdBy & updatedBy fields\n      omitCreatorRoles\n    );\n  };\n\n  const wrapValidate = (createValidateFunction: any) => {\n    // TODO\n    // @ts-expect-error define the correct return type\n    const wrappedValidate = async (data, options = {}): Promise<unknown> => {\n      if (isArray(data)) {\n        return Promise.all(data.map((entity: unknown) => wrappedValidate(entity, options)));\n      }\n\n      const { subject, action: actionOverride } = getDefaultOptions(data, options);\n\n      const permittedFields = permittedFieldsOf(ability, actionOverride, subject, {\n        fieldsFrom: (rule) => rule.fields || [],\n      });\n\n      const hasAtLeastOneRegistered = some(\n        (fields) => !isNil(fields),\n        flatMap(prop('fields'), ability.rulesFor(actionOverride, detectSubjectType(subject)))\n      );\n      const shouldIncludeAllFields = isEmpty(permittedFields) && !hasAtLeastOneRegistered;\n\n      const validateOptions = {\n        ...options,\n        fields: {\n          shouldIncludeAll: shouldIncludeAllFields,\n          permitted: permittedFields,\n          hasAtLeastOneRegistered,\n        },\n      };\n\n      const validateFunction = createValidateFunction(validateOptions);\n\n      return validateFunction(data);\n    };\n\n    return wrappedValidate;\n  };\n\n  const getDefaultOptions = (data: any, options: unknown) => {\n    return defaults({ subject: asSubject(model, data), action }, options);\n  };\n\n  /**\n   * Omit creator fields' (createdBy & updatedBy) roles from the admin API responses\n   */\n  const omitCreatorRoles = omit([`${CREATED_BY_ATTRIBUTE}.roles`, `${UPDATED_BY_ATTRIBUTE}.roles`]);\n\n  /**\n   * Visitor used to remove hidden fields from the admin API responses\n   */\n  const throwHiddenFields = ({ key, schema, path }: any) => {\n    const isHidden = getOr(false, ['config', 'attributes', key, 'hidden'], schema);\n\n    if (isHidden) {\n      throwInvalidKey({ key, path: path.attribute });\n    }\n  };\n\n  /**\n   * Visitor used to omit disallowed fields from the admin users entities & avoid leaking sensitive information\n   */\n  const throwDisallowedAdminUserFields = ({ key, attribute, schema, path }: any) => {\n    if (schema.uid === 'admin::user' && attribute && !ADMIN_USER_ALLOWED_FIELDS.includes(key)) {\n      throwInvalidKey({ key, path: path.attribute });\n    }\n  };\n\n  const getInputFields = (fields = []) => {\n    const nonVisibleAttributes = getNonVisibleAttributes(schema);\n    const writableAttributes = getWritableAttributes(schema);\n\n    const nonVisibleWritableAttributes = intersection(nonVisibleAttributes, writableAttributes);\n\n    return uniq([...fields, ...COMPONENT_FIELDS, ...nonVisibleWritableAttributes]);\n  };\n\n  const getQueryFields = (fields = []) => {\n    return uniq([\n      ...fields,\n      ...STATIC_FIELDS,\n      ...COMPONENT_FIELDS,\n      CREATED_AT_ATTRIBUTE,\n      UPDATED_AT_ATTRIBUTE,\n      PUBLISHED_AT_ATTRIBUTE,\n    ]);\n  };\n\n  return {\n    validateQuery: wrapValidate(createValidateQuery),\n    validateInput: wrapValidate(createValidateInput),\n  };\n};\n","// TODO: migration\nimport _ from 'lodash';\nimport { rulesToQuery } from '@casl/ability/extra';\n\nconst operatorsMap = {\n  $in: '$in',\n  $nin: '$notIn',\n  $exists: '$notNull',\n  $gte: '$gte',\n  $gt: '$gt',\n  $lte: '$lte',\n  $lt: '$lt',\n  $eq: '$eq',\n  $ne: '$ne',\n  $and: '$and',\n  $or: '$or',\n  $not: '$not',\n} as const;\n\nconst mapKey = (key: keyof typeof operatorsMap) => {\n  if (_.isString(key) && key.startsWith('$') && key in operatorsMap) {\n    return operatorsMap[key];\n  }\n  return key;\n};\n\nconst buildCaslQuery = (ability: unknown, action: unknown, model: unknown) => {\n  // @ts-expect-error casl types\n  return rulesToQuery(ability, action, model, (o) => o.conditions);\n};\n\nconst buildStrapiQuery = (caslQuery: unknown) => {\n  return unwrapDeep(caslQuery);\n};\n\nconst unwrapDeep = (obj: any): unknown => {\n  if (!_.isPlainObject(obj) && !_.isArray(obj)) {\n    return obj;\n  }\n  if (_.isArray(obj)) {\n    return obj.map((v: unknown) => unwrapDeep(v));\n  }\n\n  return _.reduce(\n    obj,\n    (acc, v, k: any) => {\n      const key = mapKey(k);\n\n      if (_.isPlainObject(v)) {\n        if ('$elemMatch' in v) {\n          _.setWith(acc, key, unwrapDeep(v.$elemMatch));\n        } else {\n          _.setWith(acc, key, unwrapDeep(v));\n        }\n      } else if (_.isArray(v)) {\n        // prettier-ignore\n        _.setWith(acc, key, v.map(v => unwrapDeep(v)));\n      } else {\n        _.setWith(acc, key, v);\n      }\n\n      return acc;\n    },\n    {}\n  );\n};\n\nexport { buildCaslQuery, buildStrapiQuery };\n","import _ from 'lodash';\nimport { cloneDeep, isPlainObject } from 'lodash/fp';\nimport { subject as asSubject } from '@casl/ability';\nimport createSanitizeHelpers from './sanitize';\nimport createValidateHelpers from './validate';\n\nimport { buildStrapiQuery, buildCaslQuery } from './query-builders';\n\nexport default ({ ability, action, model }: any) => ({\n  ability,\n  action,\n  model,\n\n  get isAllowed(): unknown {\n    return this.ability.can(action, model);\n  },\n\n  toSubject(target: any, subjectType = model) {\n    return asSubject(subjectType, target);\n  },\n\n  pickPermittedFieldsOf(data: unknown, options = {}) {\n    return this.sanitizeInput(data, options);\n  },\n\n  getQuery(queryAction = action) {\n    if (_.isUndefined(queryAction)) {\n      throw new Error('Action must be defined to build a permission query');\n    }\n\n    return buildStrapiQuery(buildCaslQuery(ability, queryAction, model));\n  },\n\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  addPermissionsQueryTo(query = {} as any, action: unknown) {\n    const newQuery = cloneDeep(query);\n    const permissionQuery = this.getQuery(action) ?? undefined;\n\n    if (isPlainObject(query.filters)) {\n      newQuery.filters = permissionQuery\n        ? { $and: [query.filters, permissionQuery] }\n        : query.filters;\n    } else {\n      newQuery.filters = permissionQuery;\n    }\n\n    return newQuery;\n  },\n\n  ...createSanitizeHelpers({ action, ability, model }),\n  ...createValidateHelpers({ action, ability, model }),\n});\n","import { curry, isArray, isEmpty, difference } from 'lodash/fp';\nimport permissions, { type engine } from '@strapi/permissions';\nimport type { Ability } from '@casl/ability';\nimport permissionDomain from '../../domain/permission';\nimport { getService } from '../../utils';\nimport { Action } from '../../domain/action';\nimport type { AdminUser, Permission } from '../../../../shared/contracts/shared';\n\nexport default (params: { providers: engine.EngineParams['providers'] }) => {\n  const { providers } = params;\n\n  const engine = permissions.engine\n    .new({ providers })\n    /**\n     * Validate the permission's action exists in the action registry\n     */\n    .on('before-format::validate.permission', ({ permission }) => {\n      const action = providers.action.get(permission.action);\n\n      // If the action isn't registered into the action provider, then ignore the permission\n      if (!action) {\n        strapi.log.debug(\n          `Unknown action \"${permission.action}\" supplied when registering a new permission in engine`\n        );\n        return false;\n      }\n    })\n\n    /**\n     * Remove invalid properties from the permission based on the action (applyToProperties)\n     */\n    .on('format.permission', (permission: Permission) => {\n      const action = providers.action.get(permission.action) as Action;\n      const properties = permission.properties || {};\n\n      // Only keep the properties allowed by the action (action.applyToProperties)\n      const propertiesName = Object.keys(properties);\n      const invalidProperties = difference(\n        propertiesName,\n        // @ts-expect-error - applyToProperties is defined inside the options of an action\n        action.applyToProperties || propertiesName\n      );\n\n      const permissionWithSanitizedProperties = invalidProperties.reduce(\n        // @ts-expect-error - fix reduce, property should be a string but it's actually the permission object\n        (property) => permissionDomain.deleteProperty(property, permission) as Permission,\n        permission\n      );\n\n      return permissionWithSanitizedProperties;\n    })\n\n    /**\n     * Ignore the permission if the fields property is an empty array (access to no field)\n     */\n    .on('after-format::validate.permission', ({ permission }) => {\n      const { fields } = permission.properties;\n\n      if (isArray(fields) && isEmpty(fields)) {\n        return false;\n      }\n    });\n\n  return {\n    get hooks() {\n      return engine.hooks;\n    },\n\n    /**\n     * Generate an ability based on the given user (using associated roles & permissions)\n     * @param user\n     */\n    async generateUserAbility(user: AdminUser): Promise<Ability> {\n      const permissions = (await getService('permission').findUserPermissions(user)) as any;\n\n      return engine.generateAbility(permissions, user);\n    },\n\n    /**\n     * Check many permissions based on an ability\n     */\n    checkMany: curry((ability: Ability, permissions: Permission[]) => {\n      // @ts-expect-error - Permissions does not contain any field property\n      return permissions.map(({ action, subject, field }) => ability.can(action, subject, field));\n    }),\n  };\n};\n","import { eq } from 'lodash/fp';\nimport { hooks } from '@strapi/utils';\nimport type { Action } from '../../../domain/action';\n\nexport type SectionOptions = {\n  initialStateFactory?: (...args: any) => unknown; // A factory function that returns the default shape of the section\n  handlers?: ((...args: any) => unknown)[]; // An initial collection of handlers which will be registered in the handlers hook\n  matchers?: ((...args: any) => unknown)[]; // An initial collection of matchers which will be registered in the matchers hook\n};\n\nconst emptyObjectFactory = () => ({});\n\n/**\n * Upon call, creates a new section object\n */\nconst createSection = (\n  { initialStateFactory = emptyObjectFactory, handlers = [], matchers = [] } = {} as SectionOptions\n) => {\n  const state = {\n    hooks: {\n      handlers: hooks.createAsyncSeriesHook(),\n      matchers: hooks.createAsyncParallelHook(),\n    },\n  };\n\n  // Register initial hooks\n  handlers.forEach((handler) => state.hooks.handlers.register(handler));\n  matchers.forEach((matcher) => state.hooks.matchers.register(matcher));\n\n  return {\n    hooks: state.hooks,\n\n    /**\n     * Verifies if an action can be applied to the section by running the matchers hook.\n     * If any of the registered matcher functions returns true, then the condition applies.\n     */\n    async appliesToAction(action: Action): Promise<boolean> {\n      const results = await state.hooks.matchers.call(action);\n\n      return results.some(eq(true));\n    },\n\n    /**\n     * Init, build and returns a section object based on the given actions\n     * @param  actions - A list of actions used to populate the section\n     */\n    async build(actions = [] as Action[]) {\n      const section = initialStateFactory();\n\n      for (const action of actions) {\n        const applies = await this.appliesToAction(action);\n\n        if (applies) {\n          await state.hooks.handlers.call({ action, section });\n        }\n      }\n\n      return section;\n    },\n  };\n};\n\nexport default createSection;\n","import { Action } from '../../../domain/action';\nimport createSection, { SectionOptions } from './section';\n\n/**\n * Create a new section builder with its own sections registry\n */\nconst createSectionBuilder = () => {\n  const state = {\n    sections: new Map(),\n  };\n\n  return {\n    /**\n     * Create & add a section to the builder's registry\n     * @param sectionName - The unique name of the section\n     * @param options - The options used to build a {@link Section}\n     */\n    createSection(sectionName: string, options: SectionOptions) {\n      const section = createSection(options);\n\n      state.sections.set(sectionName, section);\n\n      return this;\n    },\n\n    /**\n     * Removes a section from the builder's registry using its unique name\n     * @param sectionName - The name of the section to delete\n     */\n    deleteSection(sectionName: string) {\n      state.sections.delete(sectionName);\n\n      return this;\n    },\n\n    /**\n     * Register a handler function for a given section\n     * @param  sectionName - The name of the section\n     * @param  handler - The handler to register\n     */\n    addHandler(sectionName: string, handler: () => unknown) {\n      if (state.sections.has(sectionName)) {\n        state.sections.get(sectionName).hooks.handlers.register(handler);\n      }\n\n      return this;\n    },\n\n    /**\n     * Register a matcher function for a given section\n     * @param sectionName - The name of the section\n     * @param matcher - The handler to register\n\n     */\n    addMatcher(sectionName: string, matcher: () => unknown) {\n      if (state.sections.has(sectionName)) {\n        state.sections.get(sectionName).hooks.matchers.register(matcher);\n      }\n\n      return this;\n    },\n\n    /**\n     * Build a section tree based on the registered actions and the given actions\n     * @param actions - The actions used to build each section\n     */\n    async build(actions = [] as Action[]) {\n      const sections = {} as any;\n\n      for (const [sectionName, section] of state.sections.entries()) {\n        sections[sectionName] = await section.build(actions);\n      }\n\n      return sections;\n    },\n  };\n};\n\nexport default createSectionBuilder;\n","import { curry, matchesProperty, pick } from 'lodash/fp';\nimport type { Internal, Struct } from '@strapi/types';\n\nconst isOfKind = (kind: unknown) => matchesProperty('kind', kind);\n\nconst resolveContentType = (uid: Internal.UID.ContentType): Struct.ContentTypeSchema => {\n  return strapi.contentTypes[uid];\n};\n\nconst isNotInSubjects = (subjects: any) => (uid: unknown) =>\n  !subjects.find((subject: any) => subject.uid === uid);\n\nconst hasProperty = curry((property: unknown, subject: any) => {\n  return !!subject.properties.find((prop: any) => prop.value === property);\n});\n\nconst getValidOptions = pick(['applyToProperties']);\n\nconst toSubjectTemplate = (ct: any) => ({\n  uid: ct.uid,\n  label: ct.info.singularName,\n  properties: [],\n});\n\nexport {\n  isOfKind,\n  resolveContentType,\n  isNotInSubjects,\n  hasProperty,\n  getValidOptions,\n  toSubjectTemplate,\n};\n","import type { Internal } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\nimport {\n  toSubjectTemplate,\n  getValidOptions,\n  hasProperty,\n  isNotInSubjects,\n  resolveContentType,\n  isOfKind,\n} from './utils';\nimport type { Action } from '../../../domain/action';\n\nconst { isVisibleAttribute } = contentTypes;\n\nexport type ContentTypesSection = {\n  actions: Action[];\n  subjects: any[];\n};\n\nexport type ActionArraySection = Action[];\n\n/**\n * Transforms & adds the given  setting action to the section\n * Note: The action is transformed to a setting specific format\n * @param options\n * @param options.action\n * @param section\n */\nconst settings = ({ action, section }: { action: Action; section: ActionArraySection }) => {\n  const { category, subCategory, displayName, actionId } = action;\n\n  section.push({\n    displayName,\n    category,\n    subCategory,\n    // TODO: Investigate at which point the action property is transformed to actionId\n    // @ts-expect-error - action should be actionID\n    action: actionId,\n  });\n};\n\n/**\n * Transforms & adds the given plugin action to the section\n * Note: The action is transformed to a plugin specific format\n * @param {object} options\n * @param {Action} options.action\n * @param {ActionArraySection} section\n */\nconst plugins = ({ action, section }: { action: Action; section: ActionArraySection }) => {\n  const { pluginName, subCategory, displayName, actionId } = action;\n\n  section.push({\n    displayName,\n    // @ts-expect-error - plugin should be pluginName, TODO: Investigate at which point the plugin property\n    plugin: pluginName,\n    subCategory,\n    action: actionId,\n  });\n};\n\n/**\n * Transforms & adds the given action to the section's actions field\n * Note: The action is transformed to a content-type specific format\n * @param {object} options\n * @param {Action} options.action\n * @param {ContentTypesSection} section\n */\nconst contentTypesBase = ({\n  action,\n  section,\n}: {\n  action: Action;\n  section: ContentTypesSection;\n}) => {\n  const { displayName, actionId, subjects, options } = action;\n\n  section.actions.push({\n    // @ts-expect-error - label should be displayName, TODO: Investigate at which point the label property\n    label: displayName,\n    actionId,\n    subjects,\n    ...getValidOptions(options),\n  });\n};\n\n/**\n * Initialize the subjects array of a section based on the action's subjects\n */\nconst subjectsHandlerFor =\n  (kind: string) =>\n  ({ action, section: contentTypesSection }: { action: Action; section: ContentTypesSection }) => {\n    // TODO: add a type guard for UID.ContentType\n    const subjects = action.subjects as Internal.UID.ContentType[];\n\n    if (!subjects?.length) {\n      return;\n    }\n\n    const newSubjects = subjects\n      // Ignore already added subjects\n      .filter(isNotInSubjects(contentTypesSection.subjects))\n      // Transform UIDs into content-types\n      .map(resolveContentType)\n      // Only keep specific kind of content-types\n      .filter(isOfKind(kind))\n      // Transform the content-types into section's subjects\n      .map(toSubjectTemplate);\n\n    contentTypesSection.subjects.push(...newSubjects);\n  };\n\nconst buildNode = (model: any, attributeName: string, attribute: any) => {\n  if (!isVisibleAttribute(model, attributeName)) {\n    return null;\n  }\n\n  const node = { label: attributeName, value: attributeName };\n\n  if (attribute.required) {\n    Object.assign(node, { required: true });\n  }\n\n  if (attribute.type === 'component') {\n    const component = strapi.components[attribute.component];\n    return { ...node, children: buildDeepAttributesCollection(component) };\n  }\n\n  return node;\n};\n\nconst buildDeepAttributesCollection = (model: any): unknown => {\n  return Object.entries(model.attributes)\n    .map(([attributeName, attribute]) => buildNode(model, attributeName, attribute))\n    .filter((node) => node !== null);\n};\n\n/**\n * Create and populate the fields property for section's subjects based on the action's subjects list\n */\nconst fieldsProperty = ({ action, section }: { action: Action; section: ContentTypesSection }) => {\n  const { subjects } = action;\n\n  section.subjects\n    .filter((subject) => subjects?.includes(subject.uid))\n    .forEach((subject) => {\n      const { uid } = subject;\n      const contentType = resolveContentType(uid);\n\n      if (hasProperty('fields', subject)) {\n        return;\n      }\n\n      const fields = buildDeepAttributesCollection(contentType);\n      const fieldsProp = { label: 'Fields', value: 'fields', children: fields };\n\n      subject.properties.push(fieldsProp);\n    });\n};\n\nexport { plugins, settings, subjectsHandlerFor, contentTypesBase, fieldsProperty };\n","import { propEq } from 'lodash/fp';\nimport createSectionBuilder from './builder';\nimport {\n  subjectsHandlerFor,\n  contentTypesBase,\n  fieldsProperty,\n  plugins as pluginsHandler,\n  settings as settingsHandler,\n} from './handlers';\n\nconst sectionPropMatcher = propEq('section');\n\nconst createContentTypesInitialState = () => ({\n  actions: [],\n  subjects: [],\n});\n\nconst createDefaultSectionBuilder = () => {\n  const builder = createSectionBuilder();\n\n  builder.createSection('plugins', {\n    initialStateFactory: () => [],\n    handlers: [pluginsHandler],\n    matchers: [sectionPropMatcher('plugins')],\n  });\n\n  builder.createSection('settings', {\n    initialStateFactory: () => [],\n    handlers: [settingsHandler],\n    matchers: [sectionPropMatcher('settings')],\n  });\n\n  builder.createSection('singleTypes', {\n    initialStateFactory: createContentTypesInitialState,\n    handlers: [contentTypesBase, subjectsHandlerFor('singleType'), fieldsProperty],\n    matchers: [sectionPropMatcher('contentTypes')],\n  });\n\n  builder.createSection('collectionTypes', {\n    initialStateFactory: createContentTypesInitialState,\n    handlers: [contentTypesBase, subjectsHandlerFor('collectionType'), fieldsProperty],\n    matchers: [sectionPropMatcher('contentTypes')],\n  });\n\n  return builder;\n};\n\nexport default createDefaultSectionBuilder;\n","import { isNil, isArray, prop, xor, eq, map, differenceWith } from 'lodash/fp';\nimport pmap from 'p-map';\nimport type { Data } from '@strapi/types';\nimport { getService } from '../../utils';\nimport permissionDomain, { CreatePermissionPayload } from '../../domain/permission';\nimport type { AdminUser, Permission } from '../../../../shared/contracts/shared';\nimport { Action } from '../../domain/action';\n\n/**\n * Delete permissions of roles in database\n * @param rolesIds ids of roles\n */\nexport const deleteByRolesIds = async (rolesIds: Data.ID[]): Promise<void> => {\n  const permissionsToDelete = await strapi.db.query('admin::permission').findMany({\n    select: ['id'],\n    where: {\n      role: { id: rolesIds },\n    },\n  });\n\n  if (permissionsToDelete.length > 0) {\n    await deleteByIds(permissionsToDelete.map(prop('id')));\n  }\n};\n\n/**\n * Delete permissions\n * @param ids ids of permissions\n */\nexport const deleteByIds = async (ids: Data.ID[]): Promise<void> => {\n  const result: unknown[] = [];\n  for (const id of ids) {\n    const queryResult = await strapi.db.query('admin::permission').delete({ where: { id } });\n    result.push(queryResult);\n  }\n  strapi.eventHub.emit('permission.delete', { permissions: result });\n};\n\n/**\n * Create many permissions\n * @param permissions\n */\nexport const createMany = async (permissions: CreatePermissionPayload[]): Promise<Permission[]> => {\n  const createdPermissions: CreatePermissionPayload[] = [];\n  for (const permission of permissions) {\n    const newPerm = await strapi.db.query('admin::permission').create({ data: permission });\n    createdPermissions.push(newPerm);\n  }\n\n  const permissionsToReturn = permissionDomain.toPermission(createdPermissions);\n  strapi.eventHub.emit('permission.create', { permissions: permissionsToReturn });\n\n  return permissionsToReturn;\n};\n\n/**\n * Update a permission\n * @param params\n * @param attributes\n */\nconst update = async (params: unknown, attributes: Partial<Permission>) => {\n  const updatedPermission = (await strapi.db\n    .query('admin::permission')\n    .update({ where: params, data: attributes })) as Permission;\n\n  const permissionToReturn = permissionDomain.toPermission(updatedPermission);\n  strapi.eventHub.emit('permission.update', { permissions: permissionToReturn });\n\n  return permissionToReturn;\n};\n\n/**\n * Find assigned permissions in the database\n * @param params query params to find the permissions\n */\nexport const findMany = async (params = {}): Promise<Permission[]> => {\n  const rawPermissions = await strapi.db.query('admin::permission').findMany(params);\n\n  return permissionDomain.toPermission(rawPermissions);\n};\n\n/**\n * Find all permissions for a user\n * @param user - user\n */\nexport const findUserPermissions = async (user: AdminUser): Promise<Permission[]> => {\n  return findMany({ where: { role: { users: { id: user.id } } } });\n};\n\nconst filterPermissionsToRemove = async (permissions: Permission[]) => {\n  const { actionProvider } = getService('permission');\n\n  const permissionsToRemove: Permission[] = [];\n\n  for (const permission of permissions) {\n    const { subjects, options = {} as Action['options'] } =\n      (actionProvider.get(permission.action) as Action) || {};\n    const { applyToProperties } = options;\n\n    const invalidProperties = await Promise.all(\n      (applyToProperties || []).map(async (property) => {\n        const applies = await actionProvider.appliesToProperty(\n          property,\n          permission.action,\n          permission.subject\n        );\n\n        return applies && isNil(permissionDomain.getProperty(property, permission));\n      })\n    );\n\n    const isRegisteredAction = actionProvider.has(permission.action);\n    const hasInvalidProperties = isArray(applyToProperties) && invalidProperties.every(eq(true));\n    const isInvalidSubject = isArray(subjects) && !subjects.includes(permission.subject as string);\n\n    // If the permission has an invalid action, an invalid subject or invalid properties, then add it to the toBeRemoved collection\n    if (!isRegisteredAction || isInvalidSubject || hasInvalidProperties) {\n      permissionsToRemove.push(permission);\n    }\n  }\n\n  return permissionsToRemove;\n};\n\n/**\n * Removes permissions in database that don't exist anymore\n */\nexport const cleanPermissionsInDatabase = async (): Promise<void> => {\n  const pageSize = 200;\n\n  const contentTypeService = getService('content-type');\n\n  const total = await strapi.db.query('admin::permission').count();\n  const pageCount = Math.ceil(total / pageSize);\n\n  for (let page = 0; page < pageCount; page += 1) {\n    // 1. Find invalid permissions and collect their ID to delete them later\n    const results = (await strapi.db\n      .query('admin::permission')\n      .findMany({ limit: pageSize, offset: page * pageSize })) as Permission[];\n\n    const permissions = permissionDomain.toPermission(results);\n    const permissionsToRemove = await filterPermissionsToRemove(permissions);\n    const permissionsIdToRemove = map(prop('id'), permissionsToRemove);\n\n    // 2. Clean permissions' fields (add required ones, remove the non-existing ones)\n    const remainingPermissions = permissions.filter(\n      (permission: Permission) => !permissionsIdToRemove.includes(permission.id)\n    );\n\n    const permissionsWithCleanFields = contentTypeService.cleanPermissionFields(\n      remainingPermissions\n    ) as Permission[];\n\n    // Update only the ones that need to be updated\n    const permissionsNeedingToBeUpdated = differenceWith(\n      (a: Permission, b: Permission) => {\n        return a.id === b.id && xor(a.properties.fields, b.properties.fields).length === 0;\n      },\n      permissionsWithCleanFields,\n      remainingPermissions\n    );\n\n    const updatePromiseProvider = (permission: Permission) => {\n      return update({ id: permission.id }, permission);\n    };\n\n    // Execute all the queries, update the database\n    await Promise.all([\n      deleteByIds(permissionsIdToRemove),\n      pmap(permissionsNeedingToBeUpdated, updatePromiseProvider, {\n        concurrency: 100,\n        stopOnError: true,\n      }),\n    ]);\n  }\n};\n\nexport default {\n  createMany,\n  findMany,\n  deleteByRolesIds,\n  deleteByIds,\n  findUserPermissions,\n  cleanPermissionsInDatabase,\n};\n","import domain from '../domain/permission';\nimport createActionProvider from '../domain/action/provider';\nimport createConditionProvider from '../domain/condition/provider';\nimport createPermissionsManager from './permission/permissions-manager';\nimport createPermissionEngine from './permission/engine';\nimport createSectionsBuilder from './permission/sections-builder';\nimport {\n  cleanPermissionsInDatabase,\n  createMany,\n  deleteByIds,\n  deleteByRolesIds,\n  findMany,\n  findUserPermissions,\n} from './permission/queries';\n\nconst actionProvider = createActionProvider();\nconst conditionProvider = createConditionProvider();\nconst sectionsBuilder = createSectionsBuilder();\n\nconst sanitizePermission = domain.sanitizePermissionFields;\n\nconst engine = createPermissionEngine({\n  providers: { action: actionProvider, condition: conditionProvider },\n});\n\nexport {\n  // Queries / Actions\n  cleanPermissionsInDatabase,\n  createMany,\n  deleteByIds,\n  deleteByRolesIds,\n  findMany,\n  findUserPermissions,\n  // Utils\n  createPermissionsManager,\n  sectionsBuilder,\n  sanitizePermission,\n  // Engine\n  engine,\n  // Providers\n  actionProvider,\n  conditionProvider,\n};\n","import _ from 'lodash';\nimport { uniq, startsWith, intersection } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils } from '@strapi/utils';\nimport type { Modules, Struct } from '@strapi/types';\nimport { getService } from '../utils';\nimport actionDomain from '../domain/action';\nimport permissionDomain from '../domain/permission';\n\ninterface FieldOptions {\n  prefix?: string; // prefix to add to the path\n  nestingLevel?: number; // level of nesting to achieve\n  requiredOnly?: boolean; // only returns required nestedFields\n  existingFields?: string[]; // fields that are already selected, meaning that some sub-fields may be required\n  restrictedSubjects?: string[]; // subjectsId to ignore\n  components?: {\n    // components where components attributes can be found\n    [key: string]: any;\n  };\n}\n\n/**\n * Creates an array of paths to the fields and nested fields, without path nodes\n */\nconst getNestedFields = (\n  model: Struct.ContentTypeSchema,\n  {\n    prefix = '',\n    nestingLevel = 15,\n    components = {},\n    requiredOnly = false,\n    existingFields = [],\n  }: FieldOptions\n): string[] => {\n  if (nestingLevel === 0) {\n    return prefix ? [prefix] : [];\n  }\n\n  const nonAuthorizableFields = contentTypesUtils.getNonVisibleAttributes(model);\n\n  return _.reduce(\n    model.attributes,\n    (fields: any, attr: any, key: any) => {\n      if (nonAuthorizableFields.includes(key)) return fields;\n\n      const fieldPath = prefix ? `${prefix}.${key}` : key;\n      const shouldBeIncluded = !requiredOnly || attr.required === true;\n      const insideExistingFields = existingFields && existingFields.some(startsWith(fieldPath));\n\n      if (attr.type === 'component') {\n        if (shouldBeIncluded || insideExistingFields) {\n          const compoFields = getNestedFields(components[attr.component], {\n            nestingLevel: nestingLevel - 1,\n            prefix: fieldPath,\n            components,\n            requiredOnly,\n            existingFields,\n          });\n\n          if (compoFields.length === 0 && shouldBeIncluded) {\n            return fields.concat(fieldPath);\n          }\n\n          return fields.concat(compoFields);\n        }\n        return fields;\n      }\n\n      if (shouldBeIncluded) {\n        return fields.concat(fieldPath);\n      }\n\n      return fields;\n    },\n    []\n  );\n};\n\n/**\n * Creates an array of paths to the fields and nested fields, with path nodes\n */\nconst getNestedFieldsWithIntermediate = (\n  model: Struct.ContentTypeSchema,\n  { prefix = '', nestingLevel = 15, components = {} }: FieldOptions\n): string[] => {\n  if (nestingLevel === 0) {\n    return [];\n  }\n\n  const nonAuthorizableFields = contentTypesUtils.getNonVisibleAttributes(model);\n\n  return _.reduce(\n    model.attributes,\n    (fields: any, attr: any, key: any) => {\n      if (nonAuthorizableFields.includes(key)) return fields;\n\n      const fieldPath = prefix ? `${prefix}.${key}` : key;\n      fields.push(fieldPath);\n\n      if (attr.type === 'component') {\n        const compoFields = getNestedFieldsWithIntermediate(components[attr.component], {\n          nestingLevel: nestingLevel - 1,\n          prefix: fieldPath,\n          components,\n        });\n\n        fields.push(...compoFields);\n      }\n\n      return fields;\n    },\n    []\n  );\n};\n\n/**\n * Creates an array of permissions with the \"properties.fields\" attribute filled\n */\nconst getPermissionsWithNestedFields = (\n  actions: any[],\n  { nestingLevel, restrictedSubjects = [] }: FieldOptions = {}\n): Modules.Permissions.PermissionRule[] => {\n  return actions.reduce((permissions, action) => {\n    const validSubjects = action.subjects.filter(\n      (subject: any) => !restrictedSubjects.includes(subject)\n    );\n\n    // Create a Permission for each subject (content-type uid) within the action\n    for (const subject of validSubjects) {\n      const fields = actionDomain.appliesToProperty('fields', action)\n        ? getNestedFields(strapi.contentTypes[subject], {\n            components: strapi.components,\n            nestingLevel,\n          })\n        : undefined;\n\n      const permission = permissionDomain.create({\n        action: action.actionId,\n        subject,\n        properties: { fields },\n      });\n\n      permissions.push(permission);\n    }\n\n    return permissions;\n  }, []);\n};\n\n/**\n * Cleans permissions' fields (add required ones, remove the non-existing ones)\n */\nconst cleanPermissionFields = (\n  permissions: Modules.Permissions.PermissionRule[],\n  { nestingLevel }: FieldOptions = {}\n): Modules.Permissions.PermissionRule[] => {\n  const { actionProvider } = getService('permission');\n\n  return permissions.map((permission: any) => {\n    const {\n      action: actionId,\n      subject,\n      properties: { fields },\n    } = permission;\n\n    const action = actionProvider.get(actionId) as any;\n\n    // todo see if it's possible to check property on action + subject (async)\n    if (!actionDomain.appliesToProperty('fields', action)) {\n      return permissionDomain.deleteProperty('fields', permission);\n    }\n\n    if (!subject || !strapi.contentTypes[subject]) {\n      return permission;\n    }\n\n    const possibleFields = getNestedFieldsWithIntermediate(strapi.contentTypes[subject], {\n      components: strapi.components,\n      nestingLevel,\n    });\n\n    const requiredFields = getNestedFields(strapi.contentTypes[subject], {\n      components: strapi.components,\n      requiredOnly: true,\n      nestingLevel,\n      existingFields: fields,\n    });\n\n    // @ts-expect-error lodash types\n    const badNestedFields = uniq([...intersection(fields, possibleFields), ...requiredFields]);\n\n    const newFields = badNestedFields.filter(\n      (field) => !badNestedFields.some(startsWith(`${field}.`))\n    );\n\n    return permissionDomain.setProperty('fields', newFields, permission);\n  }, []);\n};\n\nexport {\n  getNestedFields,\n  getPermissionsWithNestedFields,\n  cleanPermissionFields,\n  getNestedFieldsWithIntermediate,\n};\n","import { isString } from 'lodash/fp';\nimport { getService } from '../utils';\n\nconst isValidCondition = (condition: unknown) => {\n  const { conditionProvider } = getService('permission');\n\n  return isString(condition) && conditionProvider.has(condition);\n};\n\nexport { isValidCondition };\n","import { isNil } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport constants from './constants';\nimport type { AdminRole } from '../../../shared/contracts/shared';\n\nconst { AUTHOR_CODE, PUBLISH_ACTION } = constants;\n\nconst { NotFoundError } = errors;\n// TODO: move actionProvider here instead of in the permission service\n\n/**\n * Returns actions available for a role.\n * @param {string|number} roleId\n * @returns {object[]}\n */\nconst getAllowedActionsForRole = async (roleId?: string) => {\n  const { actionProvider } = getService('permission');\n\n  if (!isNil(roleId)) {\n    const role: AdminRole = await getService('role').findOne({ id: roleId });\n\n    if (!role) {\n      throw new NotFoundError('role.notFound');\n    }\n\n    if (role.code === AUTHOR_CODE) {\n      return actionProvider.values().filter(({ actionId }: any) => actionId !== PUBLISH_ACTION);\n    }\n  }\n\n  return actionProvider.values();\n};\n\nexport { getAllowedActionsForRole };\n","import crypto from 'crypto';\nimport { omit, difference, isNil, isEmpty, map, isArray, uniq, isNumber } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Update, ApiToken, ApiTokenBody } from '../../../shared/contracts/api-token';\nimport constants from './constants';\n\nconst { ValidationError, NotFoundError } = errors;\n\ntype ApiTokenPermission = {\n  id: number | `${number}`;\n  action: string;\n  token: DBApiToken | number;\n};\n\ntype DBApiToken = ApiToken & {\n  permissions: (number | ApiTokenPermission)[];\n};\n\nconst SELECT_FIELDS = [\n  'id',\n  'name',\n  'description',\n  'lastUsedAt',\n  'type',\n  'lifespan',\n  'expiresAt',\n  'createdAt',\n  'updatedAt',\n];\n\nconst POPULATE_FIELDS = ['permissions'];\n\n// TODO: we need to ensure the permissions are actually valid registered permissions!\n\n/**\n * Assert that a token's permissions attribute is valid for its type\n */\nconst assertCustomTokenPermissionsValidity = (\n  type: ApiTokenBody['type'],\n  permissions: ApiTokenBody['permissions']\n) => {\n  // Ensure non-custom tokens doesn't have permissions\n  if (type !== constants.API_TOKEN_TYPE.CUSTOM && !isEmpty(permissions)) {\n    throw new ValidationError('Non-custom tokens should not reference permissions');\n  }\n\n  // Custom type tokens should always have permissions attached to them\n  if (type === constants.API_TOKEN_TYPE.CUSTOM && !isArray(permissions)) {\n    throw new ValidationError('Missing permissions attribute for custom token');\n  }\n\n  // Permissions provided for a custom type token should be valid/registered permissions UID\n  if (type === constants.API_TOKEN_TYPE.CUSTOM) {\n    const validPermissions = strapi.contentAPI.permissions.providers.action.keys();\n    const invalidPermissions = difference(permissions, validPermissions) as string[];\n\n    if (!isEmpty(invalidPermissions)) {\n      throw new ValidationError(`Unknown permissions provided: ${invalidPermissions.join(', ')}`);\n    }\n  }\n};\n\n/**\n * Check if a token's lifespan is valid\n */\nconst isValidLifespan = (lifespan: unknown) => {\n  if (isNil(lifespan)) {\n    return true;\n  }\n\n  if (!isNumber(lifespan) || !Object.values(constants.API_TOKEN_LIFESPANS).includes(lifespan)) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Assert that a token's lifespan is valid\n */\nconst assertValidLifespan = (lifespan: unknown) => {\n  if (!isValidLifespan(lifespan)) {\n    throw new ValidationError(\n      `lifespan must be one of the following values:\n      ${Object.values(constants.API_TOKEN_LIFESPANS).join(', ')}`\n    );\n  }\n};\n\n/**\n * Flatten a token's database permissions objects to an array of strings\n */\nconst flattenTokenPermissions = (token: DBApiToken): ApiToken => {\n  if (!token) {\n    return token;\n  }\n\n  return {\n    ...token,\n    permissions: isArray(token.permissions) ? map('action', token.permissions) : token.permissions,\n  };\n};\n\ntype WhereParams = {\n  id?: string | number;\n  name?: string;\n  lastUsedAt?: number;\n  description?: string;\n  accessKey?: string;\n};\n\n/**\n *  Get a token\n */\nconst getBy = async (whereParams: WhereParams = {}): Promise<ApiToken | null> => {\n  if (Object.keys(whereParams).length === 0) {\n    return null;\n  }\n\n  const token = await strapi.db\n    .query('admin::api-token')\n    .findOne({ select: SELECT_FIELDS, populate: POPULATE_FIELDS, where: whereParams });\n\n  if (!token) {\n    return token;\n  }\n\n  return flattenTokenPermissions(token);\n};\n\n/**\n * Check if token exists\n */\nconst exists = async (whereParams: WhereParams = {}): Promise<boolean> => {\n  const apiToken = await getBy(whereParams);\n\n  return !!apiToken;\n};\n\n/**\n * Return a secure sha512 hash of an accessKey\n */\nconst hash = (accessKey: string) => {\n  return crypto\n    .createHmac('sha512', strapi.config.get('admin.apiToken.salt'))\n    .update(accessKey)\n    .digest('hex');\n};\n\nconst getExpirationFields = (lifespan: ApiTokenBody['lifespan']) => {\n  // it must be nil or a finite number >= 0\n  const isValidNumber = isNumber(lifespan) && Number.isFinite(lifespan) && lifespan > 0;\n  if (!isValidNumber && !isNil(lifespan)) {\n    throw new ValidationError('lifespan must be a positive number or null');\n  }\n\n  return {\n    lifespan: lifespan || null,\n    expiresAt: lifespan ? Date.now() + lifespan : null,\n  };\n};\n\n/**\n * Create a token and its permissions\n */\nconst create = async (attributes: ApiTokenBody): Promise<ApiToken> => {\n  const accessKey = crypto.randomBytes(128).toString('hex');\n\n  assertCustomTokenPermissionsValidity(attributes.type, attributes.permissions);\n  assertValidLifespan(attributes.lifespan);\n\n  // Create the token\n  const apiToken: ApiToken = await strapi.db.query('admin::api-token').create({\n    select: SELECT_FIELDS,\n    populate: POPULATE_FIELDS,\n    data: {\n      ...omit('permissions', attributes),\n      accessKey: hash(accessKey),\n      ...getExpirationFields(attributes.lifespan),\n    },\n  });\n\n  const result: ApiToken = { ...apiToken, accessKey };\n\n  // If this is a custom type token, create and the related permissions\n  if (attributes.type === constants.API_TOKEN_TYPE.CUSTOM) {\n    // TODO: createMany doesn't seem to create relation properly, implement a better way rather than a ton of queries\n    // const permissionsCount = await strapi.db.query('admin::api-token-permission').createMany({\n    //   populate: POPULATE_FIELDS,\n    //   data: attributes.permissions.map(action => ({ action, token: apiToken })),\n    // });\n    await Promise.all(\n      uniq(attributes.permissions).map((action) =>\n        strapi.db.query('admin::api-token-permission').create({\n          data: { action, token: apiToken },\n        })\n      )\n    );\n\n    const currentPermissions = await strapi.db\n      .query('admin::api-token')\n      .load(apiToken, 'permissions');\n\n    if (currentPermissions) {\n      Object.assign(result, { permissions: map('action', currentPermissions) });\n    }\n  }\n\n  return result;\n};\n\nconst regenerate = async (id: string | number): Promise<ApiToken> => {\n  const accessKey = crypto.randomBytes(128).toString('hex');\n\n  const apiToken: ApiToken = await strapi.db.query('admin::api-token').update({\n    select: ['id', 'accessKey'],\n    where: { id },\n    data: {\n      accessKey: hash(accessKey),\n    },\n  });\n\n  if (!apiToken) {\n    throw new NotFoundError('The provided token id does not exist');\n  }\n\n  return {\n    ...apiToken,\n    accessKey,\n  };\n};\n\nconst checkSaltIsDefined = () => {\n  if (!strapi.config.get('admin.apiToken.salt')) {\n    // TODO V5: stop reading API_TOKEN_SALT\n    if (process.env.API_TOKEN_SALT) {\n      process.emitWarning(`[deprecated] In future versions, Strapi will stop reading directly from the environment variable API_TOKEN_SALT. Please set apiToken.salt in config/admin.js instead.\nFor security reasons, keep storing the secret in an environment variable and use env() to read it in config/admin.js (ex: \\`apiToken: { salt: env('API_TOKEN_SALT') }\\`). See https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/environment.html#configuration-using-environment-variables.`);\n\n      strapi.config.set('admin.apiToken.salt', process.env.API_TOKEN_SALT);\n    } else {\n      throw new Error(\n        `Missing apiToken.salt. Please set apiToken.salt in config/admin.js (ex: you can generate one using Node with \\`crypto.randomBytes(16).toString('base64')\\`).\nFor security reasons, prefer storing the secret in an environment variable and read it in config/admin.js. See https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/environment.html#configuration-using-environment-variables.`\n      );\n    }\n  }\n};\n\n/**\n * Return a list of all tokens and their permissions\n */\nconst list = async (): Promise<Array<ApiToken>> => {\n  const tokens: Array<DBApiToken> = await strapi.db.query('admin::api-token').findMany({\n    select: SELECT_FIELDS,\n    populate: POPULATE_FIELDS,\n    orderBy: { name: 'ASC' },\n  });\n\n  if (!tokens) {\n    return tokens;\n  }\n\n  return tokens.map((token) => flattenTokenPermissions(token));\n};\n\n/**\n * Revoke (delete) a token\n */\nconst revoke = async (id: string | number): Promise<ApiToken> => {\n  return strapi.db\n    .query('admin::api-token')\n    .delete({ select: SELECT_FIELDS, populate: POPULATE_FIELDS, where: { id } });\n};\n\n/**\n * Retrieve a token by id\n */\nconst getById = async (id: string | number) => {\n  return getBy({ id });\n};\n\n/**\n * Retrieve a token by name\n */\nconst getByName = async (name: string) => {\n  return getBy({ name });\n};\n\n/**\n * Update a token and its permissions\n */\nconst update = async (\n  id: string | number,\n  attributes: Update.Request['body']\n): Promise<ApiToken> => {\n  // retrieve token without permissions\n  const originalToken: DBApiToken = await strapi.db\n    .query('admin::api-token')\n    .findOne({ where: { id } });\n\n  if (!originalToken) {\n    throw new NotFoundError('Token not found');\n  }\n\n  const changingTypeToCustom =\n    attributes.type === constants.API_TOKEN_TYPE.CUSTOM &&\n    originalToken.type !== constants.API_TOKEN_TYPE.CUSTOM;\n\n  // if we're updating the permissions on any token type, or changing from non-custom to custom, ensure they're still valid\n  // if neither type nor permissions are changing, we don't need to validate again or else we can't allow partial update\n  if (attributes.permissions || changingTypeToCustom) {\n    assertCustomTokenPermissionsValidity(\n      attributes.type || originalToken.type,\n      attributes.permissions || originalToken.permissions\n    );\n  }\n\n  assertValidLifespan(attributes.lifespan);\n\n  const updatedToken: ApiToken = await strapi.db.query('admin::api-token').update({\n    select: SELECT_FIELDS,\n    where: { id },\n    data: omit('permissions', attributes),\n  });\n\n  // custom tokens need to have their permissions updated as well\n  if (updatedToken.type === constants.API_TOKEN_TYPE.CUSTOM && attributes.permissions) {\n    const currentPermissionsResult = await strapi.db\n      .query('admin::api-token')\n      .load(updatedToken, 'permissions');\n\n    const currentPermissions = map('action', currentPermissionsResult || []);\n    const newPermissions = uniq(attributes.permissions);\n\n    const actionsToDelete = difference(currentPermissions, newPermissions);\n    const actionsToAdd = difference(newPermissions, currentPermissions);\n\n    // TODO: improve efficiency here\n    // method using a loop -- works but very inefficient\n    await Promise.all(\n      actionsToDelete.map((action) =>\n        strapi.db.query('admin::api-token-permission').delete({\n          where: { action, token: id },\n        })\n      )\n    );\n\n    // TODO: improve efficiency here\n    // using a loop -- works but very inefficient\n    await Promise.all(\n      actionsToAdd.map((action) =>\n        strapi.db.query('admin::api-token-permission').create({\n          data: { action, token: id },\n        })\n      )\n    );\n  }\n  // if type is not custom, make sure any old permissions get removed\n  else if (updatedToken.type !== constants.API_TOKEN_TYPE.CUSTOM) {\n    await strapi.db.query('admin::api-token-permission').delete({\n      where: { token: id },\n    });\n  }\n\n  // retrieve permissions\n  const permissionsFromDb = await strapi.db\n    .query('admin::api-token')\n    .load(updatedToken, 'permissions');\n\n  return {\n    ...updatedToken,\n    permissions: permissionsFromDb ? permissionsFromDb.map((p: any) => p.action) : undefined,\n  };\n};\n\nconst count = async (where = {}): Promise<number> => {\n  return strapi.db.query('admin::api-token').count({ where });\n};\n\nexport {\n  create,\n  count,\n  regenerate,\n  exists,\n  checkSaltIsDefined,\n  hash,\n  list,\n  revoke,\n  getById,\n  update,\n  getByName,\n  getBy,\n};\n","import permissions from '@strapi/permissions';\nimport { providerFactory } from '@strapi/utils';\n\nconst DEFAULT_TRANSFER_ACTIONS = ['push', 'pull'];\n\nconst providers = {\n  action: providerFactory(),\n  condition: providerFactory(),\n};\n\nDEFAULT_TRANSFER_ACTIONS.forEach((action) => {\n  providers.action.register(action, { action });\n});\n\nconst engine = permissions.engine.new({ providers });\n\nexport { engine, providers };\n","import crypto from 'crypto';\nimport assert from 'assert';\nimport { map, isArray, omit, uniq, isNil, difference, isEmpty, isNumber } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport '@strapi/types';\nimport constants from '../constants';\nimport { getService } from '../../utils';\nimport {\n  DatabaseTransferToken,\n  SanitizedTransferToken,\n  TokenCreatePayload,\n  TokenUpdatePayload,\n  TransferToken,\n  TransferTokenPermission,\n} from '../../../../shared/contracts/transfer';\n\nconst { ValidationError, NotFoundError } = errors;\n\nconst TRANSFER_TOKEN_UID = 'admin::transfer-token';\nconst TRANSFER_TOKEN_PERMISSION_UID = 'admin::transfer-token-permission';\n\nconst SELECT_FIELDS = [\n  'id',\n  'name',\n  'description',\n  'lastUsedAt',\n  'lifespan',\n  'expiresAt',\n  'createdAt',\n  'updatedAt',\n] as const;\n\nconst POPULATE_FIELDS = ['permissions'] as const;\n\n/**\n * Return a list of all tokens and their permissions\n */\nconst list = async (): Promise<SanitizedTransferToken[]> => {\n  const tokens: DatabaseTransferToken[] = await strapi.db.query(TRANSFER_TOKEN_UID).findMany({\n    select: SELECT_FIELDS,\n    populate: POPULATE_FIELDS,\n    orderBy: { name: 'ASC' },\n  });\n\n  if (!tokens) return tokens;\n  return tokens.map((token) => flattenTokenPermissions(token));\n};\n\n/**\n * Create a random token's access key\n */\nconst generateRandomAccessKey = (): string => crypto.randomBytes(128).toString('hex');\n\n/**\n * Validate the given access key's format and returns it if valid\n */\nconst validateAccessKey = (accessKey: string): string => {\n  assert(typeof accessKey === 'string', 'Access key needs to be a string');\n  assert(accessKey.length >= 15, 'Access key needs to have at least 15 characters');\n\n  return accessKey;\n};\n\nexport const hasAccessKey = <T extends { accessKey?: string }>(\n  attributes: T\n): attributes is T & { accessKey: string } => {\n  return 'accessKey' in attributes;\n};\n\n/**\n * Create a token and its permissions\n */\nconst create = async (attributes: TokenCreatePayload): Promise<TransferToken> => {\n  const accessKey = hasAccessKey(attributes)\n    ? validateAccessKey(attributes.accessKey)\n    : generateRandomAccessKey();\n\n  // Make sure the access key isn't picked up directly from the attributes for the next steps\n  delete attributes.accessKey;\n\n  assertTokenPermissionsValidity(attributes);\n  assertValidLifespan(attributes.lifespan);\n\n  const result = (await strapi.db.transaction(async () => {\n    const transferToken = await strapi.db.query(TRANSFER_TOKEN_UID).create({\n      select: SELECT_FIELDS,\n      populate: POPULATE_FIELDS,\n      data: {\n        ...omit('permissions', attributes),\n        accessKey: hash(accessKey),\n        ...getExpirationFields(attributes.lifespan),\n      },\n    });\n\n    await Promise.all(\n      uniq(attributes.permissions).map((action) =>\n        strapi.db\n          .query(TRANSFER_TOKEN_PERMISSION_UID)\n          .create({ data: { action, token: transferToken } })\n      )\n    );\n\n    const currentPermissions: TransferTokenPermission[] = await strapi.db\n      .query(TRANSFER_TOKEN_UID)\n      .load(transferToken, 'permissions');\n\n    if (currentPermissions) {\n      Object.assign(transferToken, { permissions: map('action', currentPermissions) });\n    }\n\n    return transferToken;\n  })) as TransferToken;\n\n  return { ...result, accessKey };\n};\n\n/**\n * Update a token and its permissions\n */\nconst update = async (\n  id: string | number,\n  attributes: TokenUpdatePayload\n): Promise<SanitizedTransferToken> => {\n  // retrieve token without permissions\n  const originalToken = await strapi.db.query(TRANSFER_TOKEN_UID).findOne({ where: { id } });\n\n  if (!originalToken) {\n    throw new NotFoundError('Token not found');\n  }\n\n  assertTokenPermissionsValidity(attributes);\n  assertValidLifespan(attributes.lifespan);\n\n  return strapi.db.transaction(async () => {\n    const updatedToken = await strapi.db.query(TRANSFER_TOKEN_UID).update({\n      select: SELECT_FIELDS,\n      where: { id },\n      data: {\n        ...omit('permissions', attributes),\n      },\n    });\n\n    if (attributes.permissions) {\n      const currentPermissionsResult = await strapi.db\n        .query(TRANSFER_TOKEN_UID)\n        .load(updatedToken, 'permissions');\n\n      const currentPermissions = map('action', currentPermissionsResult || []);\n      const newPermissions = uniq(attributes.permissions);\n\n      const actionsToDelete = difference(currentPermissions, newPermissions);\n      const actionsToAdd = difference(newPermissions, currentPermissions);\n\n      // TODO: improve efficiency here\n      // method using a loop -- works but very inefficient\n      await Promise.all(\n        actionsToDelete.map((action) =>\n          strapi.db.query(TRANSFER_TOKEN_PERMISSION_UID).delete({\n            where: { action, token: id },\n          })\n        )\n      );\n\n      // TODO: improve efficiency here\n      // using a loop -- works but very inefficient\n      await Promise.all(\n        actionsToAdd.map((action) =>\n          strapi.db.query(TRANSFER_TOKEN_PERMISSION_UID).create({\n            data: { action, token: id },\n          })\n        )\n      );\n    }\n\n    // retrieve permissions\n    const permissionsFromDb: TransferTokenPermission[] = await strapi.db\n      .query(TRANSFER_TOKEN_UID)\n      .load(updatedToken, 'permissions');\n\n    return {\n      ...updatedToken,\n      permissions: permissionsFromDb ? permissionsFromDb.map((p) => p.action) : undefined,\n    };\n  }) as unknown as Promise<SanitizedTransferToken>;\n};\n\n/**\n * Revoke (delete) a token\n */\nconst revoke = async (id: string | number): Promise<SanitizedTransferToken> => {\n  return strapi.db.transaction(async () =>\n    strapi.db\n      .query(TRANSFER_TOKEN_UID)\n      .delete({ select: SELECT_FIELDS, populate: POPULATE_FIELDS, where: { id } })\n  ) as unknown as Promise<SanitizedTransferToken>;\n};\n\n/**\n *  Get a token\n */\nconst getBy = async (\n  whereParams = {} as {\n    id?: string | number;\n    name?: string;\n    lastUsedAt?: number;\n    description?: string;\n    accessKey?: string;\n  }\n): Promise<SanitizedTransferToken | null> => {\n  if (Object.keys(whereParams).length === 0) {\n    return null;\n  }\n\n  const token = await strapi.db\n    .query(TRANSFER_TOKEN_UID)\n    .findOne({ select: SELECT_FIELDS, populate: POPULATE_FIELDS, where: whereParams });\n\n  if (!token) {\n    return token;\n  }\n\n  return flattenTokenPermissions(token);\n};\n\n/**\n * Retrieve a token by id\n */\nconst getById = async (id: string | number): Promise<SanitizedTransferToken | null> => {\n  return getBy({ id });\n};\n\n/**\n * Retrieve a token by name\n */\nconst getByName = async (name: string): Promise<SanitizedTransferToken | null> => {\n  return getBy({ name });\n};\n\n/**\n * Check if token exists\n */\nconst exists = async (\n  whereParams = {} as {\n    id?: string | number;\n    name?: string;\n    lastUsedAt?: number;\n    description?: string;\n    accessKey?: string;\n  }\n): Promise<boolean> => {\n  const transferToken = await getBy(whereParams);\n\n  return !!transferToken;\n};\n\nconst regenerate = async (id: string | number): Promise<TransferToken> => {\n  const accessKey = crypto.randomBytes(128).toString('hex');\n  const transferToken = (await strapi.db.transaction(async () =>\n    strapi.db.query(TRANSFER_TOKEN_UID).update({\n      select: ['id', 'accessKey'],\n      where: { id },\n      data: {\n        accessKey: hash(accessKey),\n      },\n    })\n  )) as Promise<TransferToken>;\n\n  if (!transferToken) {\n    throw new NotFoundError('The provided token id does not exist');\n  }\n\n  return {\n    ...transferToken,\n    accessKey,\n  };\n};\n\nconst getExpirationFields = (lifespan: TransferToken['lifespan']) => {\n  // it must be nil or a finite number >= 0\n  const isValidNumber = isNumber(lifespan) && Number.isFinite(lifespan) && lifespan > 0;\n  if (!isValidNumber && !isNil(lifespan)) {\n    throw new ValidationError('lifespan must be a positive number or null');\n  }\n\n  return {\n    lifespan: lifespan || null,\n    expiresAt: lifespan ? Date.now() + lifespan : null,\n  };\n};\n\n/**\n * Return a secure sha512 hash of an accessKey\n */\nconst hash = (accessKey: string): string => {\n  const { hasValidTokenSalt } = getService('transfer').utils;\n\n  if (!hasValidTokenSalt()) {\n    throw new TypeError('Required token salt is not defined');\n  }\n\n  return crypto\n    .createHmac('sha512', strapi.config.get('admin.transfer.token.salt'))\n    .update(accessKey)\n    .digest('hex');\n};\n\nconst checkSaltIsDefined = () => {\n  const { hasValidTokenSalt } = getService('transfer').utils;\n\n  // Ignore the check if the data-transfer feature is manually disabled\n  if (!strapi.config.get('server.transfer.remote.enabled')) {\n    return;\n  }\n\n  if (!hasValidTokenSalt()) {\n    process.emitWarning(\n      `Missing transfer.token.salt: Data transfer features have been disabled.\nPlease set transfer.token.salt in config/admin.js (ex: you can generate one using Node with \\`crypto.randomBytes(16).toString('base64')\\`)\nFor security reasons, prefer storing the secret in an environment variable and read it in config/admin.js. See https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/configurations/optional/environment.html#configuration-using-environment-variables.`\n    );\n  }\n};\n\n/**\n * Flatten a token's database permissions objects to an array of strings\n */\nconst flattenTokenPermissions = (token: DatabaseTransferToken): TransferToken => {\n  if (!token) {\n    return token;\n  }\n\n  return {\n    ...token,\n    permissions: isArray(token.permissions)\n      ? map('action', token.permissions as TransferTokenPermission[])\n      : token.permissions,\n  };\n};\n\n/**\n * Assert that a token's permissions are valid\n */\nconst assertTokenPermissionsValidity = (attributes: TokenUpdatePayload) => {\n  const permissionService = strapi.service('admin::transfer').permission;\n  const validPermissions = permissionService.providers.action.keys();\n  const invalidPermissions = difference(attributes.permissions, validPermissions);\n\n  if (!isEmpty(invalidPermissions)) {\n    throw new ValidationError(`Unknown permissions provided: ${invalidPermissions.join(', ')}`);\n  }\n};\n\n/**\n * Check if a token's lifespan is valid\n */\nconst isValidLifespan = (lifespan: unknown) => {\n  if (isNil(lifespan)) {\n    return true;\n  }\n\n  if (\n    !isNumber(lifespan) ||\n    !Object.values(constants.TRANSFER_TOKEN_LIFESPANS).includes(lifespan)\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Assert that a token's lifespan is valid\n */\nconst assertValidLifespan = (lifespan: unknown) => {\n  if (!isValidLifespan(lifespan)) {\n    throw new ValidationError(\n      `lifespan must be one of the following values:\n      ${Object.values(constants.TRANSFER_TOKEN_LIFESPANS).join(', ')}`\n    );\n  }\n};\n\nexport {\n  create,\n  list,\n  exists,\n  getBy,\n  getById,\n  getByName,\n  update,\n  revoke,\n  regenerate,\n  hash,\n  checkSaltIsDefined,\n};\n","import { env } from '@strapi/utils';\nimport { getService } from '../../utils';\n\n/**\n * A valid transfer token salt must be a non-empty string defined in the Strapi config\n */\nconst hasValidTokenSalt = (): boolean => {\n  const salt = strapi.config.get('admin.transfer.token.salt', null) as string | null;\n\n  return typeof salt === 'string' && salt.length > 0;\n};\n\n/**\n * Checks whether data transfer features are enabled\n */\nconst isRemoteTransferEnabled = (): boolean => {\n  const { utils } = getService('transfer');\n\n  // TODO v6: Remove this warning\n  if (env.bool('STRAPI_DISABLE_REMOTE_DATA_TRANSFER') !== undefined) {\n    strapi.log.warn(\n      'STRAPI_DISABLE_REMOTE_DATA_TRANSFER is no longer supported. Instead, set transfer.remote.enabled to false in your server configuration'\n    );\n  }\n\n  return utils.hasValidTokenSalt() && strapi.config.get('server.transfer.remote.enabled');\n};\n\nexport { isRemoteTransferEnabled, hasValidTokenSalt };\n","import fs from 'fs';\nimport { pick } from 'lodash';\nimport { GetProjectSettings, UpdateProjectSettings } from '../../../shared/contracts/admin';\n\nconst PROJECT_SETTINGS_FILE_INPUTS = ['menuLogo', 'authLogo'] as const;\n\ninterface UploadFile {\n  name: string;\n  path: string;\n  type: string;\n  size: number;\n  stream: fs.ReadStream;\n  tmpPath: string;\n  hash: string;\n  url: string;\n  width: number;\n  height: number;\n  ext: string;\n  provider: unknown;\n}\n\ntype FormattedFiles = Partial<\n  Record<keyof UpdateProjectSettings.Request['files'], Partial<UploadFile>>\n>;\n\nconst parseFilesData = async (files: UpdateProjectSettings.Request['files']) => {\n  const formatedFilesData: FormattedFiles = {};\n\n  await Promise.all(\n    PROJECT_SETTINGS_FILE_INPUTS.map(async (inputName) => {\n      const file = files[inputName];\n\n      // Skip empty file inputs\n      if (!file) {\n        return;\n      }\n\n      const getStream = () => fs.createReadStream(file.filepath);\n\n      // Add formated data for the upload provider\n      formatedFilesData[inputName] = await strapi\n        .plugin('upload')\n        .service('upload')\n        .formatFileInfo({\n          filename: file.originalFilename,\n          type: file.mimetype,\n          size: file.size,\n        });\n\n      // Add image dimensions\n      Object.assign(\n        formatedFilesData[inputName]!,\n        await strapi.plugin('upload').service('image-manipulation').getDimensions({ getStream })\n      );\n\n      // Add file path, and stream\n      Object.assign(formatedFilesData[inputName]!, {\n        stream: getStream(),\n        tmpPath: file.filepath,\n        // TODO\n        // @ts-expect-error define the correct return type\n        provider: strapi.config.get('plugin::upload').provider,\n      });\n    })\n  );\n\n  return formatedFilesData;\n};\n\nconst getProjectSettings = async (): Promise<GetProjectSettings.Response> => {\n  const store = strapi.store({ type: 'core', name: 'admin' });\n\n  // Returns an object with file inputs names as key and null as value\n  const defaultProjectSettings = PROJECT_SETTINGS_FILE_INPUTS.reduce((prev: any, cur: any) => {\n    prev[cur] = null;\n    return prev;\n  }, {});\n\n  const projectSettings = {\n    ...defaultProjectSettings,\n    // @ts-expect-error spread can be applied to return value\n    ...(await store.get({ key: 'project-settings' })),\n  };\n\n  // Filter file input fields\n  PROJECT_SETTINGS_FILE_INPUTS.forEach((inputName) => {\n    if (!projectSettings[inputName]) {\n      return;\n    }\n\n    projectSettings[inputName] = pick(projectSettings[inputName], [\n      'name',\n      'url',\n      'width',\n      'height',\n      'ext',\n      'size',\n    ]);\n  });\n\n  return projectSettings;\n};\n\nconst uploadFiles = async (files: LogoFiles = {}) => {\n  // Call the provider upload function for each file\n  return Promise.all(\n    Object.values(files)\n      .filter((file) => file?.stream instanceof fs.ReadStream)\n      .map((file) => strapi.plugin('upload').provider.uploadStream(file))\n  );\n};\n\nconst deleteOldFiles = async ({ previousSettings, newSettings }: any) => {\n  return Promise.all(\n    PROJECT_SETTINGS_FILE_INPUTS.map(async (inputName) => {\n      // Skip if the store doesn't contain project settings\n      if (!previousSettings) {\n        return;\n      }\n\n      // Skip if there was no previous file\n      if (!previousSettings[inputName]) {\n        return;\n      }\n\n      // Skip if the file was not changed\n      if (\n        newSettings[inputName] &&\n        previousSettings[inputName].hash === newSettings[inputName].hash\n      ) {\n        return;\n      }\n\n      // Skip if the file was not uploaded with the current provider\n      // TODO\n      // @ts-expect-error define the correct return type\n      if (strapi.config.get('plugin::upload').provider !== previousSettings[inputName].provider) {\n        return;\n      }\n\n      // There was a previous file and an new file was uploaded\n      // Remove the previous file\n      strapi.plugin('upload').provider.delete(previousSettings[inputName]);\n    })\n  );\n};\n\ntype LogoFiles = { [K in keyof FormattedFiles]: FormattedFiles[K] | null };\n\nconst updateProjectSettings = async (\n  newSettings: Omit<UpdateProjectSettings.Request['body'], 'menuLogo' | 'authLogo'> & LogoFiles\n) => {\n  const store = strapi.store({ type: 'core', name: 'admin' });\n  const previousSettings = (await store.get({ key: 'project-settings' })) as any;\n  const files = pick(newSettings, PROJECT_SETTINGS_FILE_INPUTS);\n\n  await uploadFiles(files);\n\n  PROJECT_SETTINGS_FILE_INPUTS.forEach((inputName) => {\n    // If the user input exists but is not a formdata \"file\" remove it\n    if (newSettings[inputName] !== undefined && !(typeof newSettings[inputName] === 'object')) {\n      newSettings[inputName] = null;\n      return;\n    }\n\n    // If the user input is undefined reuse previous setting (do not update field)\n    if (!newSettings[inputName] && previousSettings) {\n      newSettings[inputName] = previousSettings[inputName];\n      return;\n    }\n\n    // Update the file\n    newSettings[inputName] = pick(newSettings[inputName], [\n      'name',\n      'hash',\n      'url',\n      'width',\n      'height',\n      'ext',\n      'size',\n      'provider',\n    ]);\n  });\n\n  // No await to proceed asynchronously\n  deleteOldFiles({ previousSettings, newSettings });\n\n  await store.set({\n    key: 'project-settings',\n    value: { ...previousSettings, ...newSettings },\n  });\n\n  return getProjectSettings();\n};\n\nexport { deleteOldFiles, parseFilesData, getProjectSettings, updateProjectSettings };\n","import type { Core, Modules, Schema } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\nimport type { GetRecentDocuments, RecentDocument } from '../../../shared/contracts/homepage';\n\nconst createHomepageService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const MAX_DOCUMENTS = 4;\n\n  const metadataService = strapi.plugin('content-manager').service('document-metadata');\n  const permissionService = strapi.admin.services.permission as typeof import('./permission');\n\n  type ContentTypeConfiguration = {\n    uid: RecentDocument['contentTypeUid'];\n    settings: { mainField: string };\n  };\n  const getConfiguration = async (\n    contentTypeUids: RecentDocument['contentTypeUid'][]\n  ): Promise<ContentTypeConfiguration[]> => {\n    /**\n     * Don't use the strapi.store util because we need to make\n     * more precise queries than exact key matches, in order to make as few queries as possible.\n     */\n    const coreStore = strapi.db.query('strapi::core-store');\n    const rawConfigurations = await coreStore.findMany({\n      where: {\n        key: {\n          $in: contentTypeUids.map(\n            (contentType) => `plugin_content_manager_configuration_content_types::${contentType}`\n          ),\n        },\n      },\n    });\n\n    return rawConfigurations.map((rawConfiguration) => {\n      return JSON.parse(rawConfiguration.value);\n    });\n  };\n\n  const getPermittedContentTypes = async () => {\n    const readPermissions = await permissionService.findMany({\n      where: {\n        role: { users: { id: strapi.requestContext.get()?.state?.user.id } },\n        action: 'plugin::content-manager.explorer.read',\n      },\n    });\n\n    return readPermissions\n      .map((permission) => permission.subject)\n      .filter(Boolean) as RecentDocument['contentTypeUid'][];\n  };\n\n  type ContentTypeMeta = {\n    fields: string[];\n    mainField: string;\n    contentType: Schema.ContentType;\n    hasDraftAndPublish: boolean;\n    uid: RecentDocument['contentTypeUid'];\n  };\n\n  const getContentTypesMeta = (\n    allowedContentTypeUids: RecentDocument['contentTypeUid'][],\n    configurations: ContentTypeConfiguration[]\n  ): ContentTypeMeta[] => {\n    return allowedContentTypeUids.map((uid) => {\n      const configuration = configurations.find((config) => config.uid === uid);\n      const contentType = strapi.contentType(uid);\n      const fields = ['documentId', 'updatedAt'];\n\n      // Add fields required to get the status if D&P is enabled\n      const hasDraftAndPublish = contentTypes.hasDraftAndPublish(contentType);\n      if (hasDraftAndPublish) {\n        fields.push('publishedAt');\n      }\n\n      // Only add the main field if it's defined\n      if (configuration?.settings.mainField) {\n        fields.push(configuration.settings.mainField);\n      }\n\n      // Only add locale if it's localized\n      const isLocalized = (contentType.pluginOptions?.i18n as any)?.localized;\n      if (isLocalized) {\n        fields.push('locale');\n      }\n\n      return {\n        fields,\n        mainField: configuration!.settings.mainField,\n        contentType,\n        hasDraftAndPublish,\n        uid,\n      };\n    });\n  };\n\n  const formatDocuments = (documents: Modules.Documents.AnyDocument[], meta: ContentTypeMeta) => {\n    return documents.map((document) => {\n      return {\n        documentId: document.documentId,\n        locale: document.locale ?? null,\n        updatedAt: new Date(document.updatedAt),\n        title: document[meta.mainField ?? 'documentId'],\n        publishedAt:\n          meta.hasDraftAndPublish && document.publishedAt ? new Date(document.publishedAt) : null,\n        contentTypeUid: meta.uid,\n        contentTypeDisplayName: meta.contentType.info.displayName,\n        kind: meta.contentType.kind,\n      };\n    });\n  };\n\n  const addStatusToDocuments = async (documents: RecentDocument[]): Promise<RecentDocument[]> => {\n    return Promise.all(\n      documents.map(async (recentDocument) => {\n        const hasDraftAndPublish = contentTypes.hasDraftAndPublish(\n          strapi.contentType(recentDocument.contentTypeUid)\n        );\n        /**\n         * Tries to query the other version of the document if draft and publish is enabled,\n         * so that we know when to give the \"modified\" status.\n         */\n        const { availableStatus } = await metadataService.getMetadata(\n          recentDocument.contentTypeUid,\n          recentDocument,\n          {\n            availableStatus: hasDraftAndPublish,\n            availableLocales: false,\n          }\n        );\n        const status: RecentDocument['status'] = metadataService.getStatus(\n          recentDocument,\n          availableStatus\n        );\n\n        return {\n          ...recentDocument,\n          status: hasDraftAndPublish ? status : undefined,\n        };\n      })\n    );\n  };\n\n  const permissionCheckerService = strapi.plugin('content-manager').service('permission-checker');\n  const getPermissionChecker = (uid: string) =>\n    permissionCheckerService.create({\n      userAbility: strapi.requestContext.get()?.state.userAbility,\n      model: uid,\n    });\n\n  return {\n    async getRecentlyPublishedDocuments(): Promise<GetRecentDocuments.Response['data']> {\n      const permittedContentTypes = await getPermittedContentTypes();\n      const allowedContentTypeUids = permittedContentTypes.filter((uid) => {\n        return contentTypes.hasDraftAndPublish(strapi.contentType(uid));\n      });\n      // Fetch the configuration for each content type in a single query\n      const configurations = await getConfiguration(allowedContentTypeUids);\n      // Get the necessary metadata for the documents\n      const contentTypesMeta = getContentTypesMeta(allowedContentTypeUids, configurations);\n      // Now actually fetch and format the documents\n      const recentDocuments = await Promise.all(\n        contentTypesMeta.map(async (meta) => {\n          const permissionQuery = await getPermissionChecker(meta.uid).sanitizedQuery.read({\n            limit: MAX_DOCUMENTS,\n            sort: 'publishedAt:desc',\n            fields: meta.fields,\n            status: 'published',\n          });\n\n          const docs = await strapi.documents(meta.uid).findMany(permissionQuery);\n\n          return formatDocuments(docs, meta);\n        })\n      );\n\n      const overallRecentDocuments = recentDocuments\n        .flat()\n        .sort((a, b) => {\n          if (!a.publishedAt || !b.publishedAt) return 0;\n          return b.publishedAt.valueOf() - a.publishedAt.valueOf();\n        })\n        .slice(0, MAX_DOCUMENTS);\n\n      return addStatusToDocuments(overallRecentDocuments);\n    },\n\n    async getRecentlyUpdatedDocuments(): Promise<GetRecentDocuments.Response['data']> {\n      const allowedContentTypeUids = await getPermittedContentTypes();\n      // Fetch the configuration for each content type in a single query\n      const configurations = await getConfiguration(allowedContentTypeUids);\n      // Get the necessary metadata for the documents\n      const contentTypesMeta = getContentTypesMeta(allowedContentTypeUids, configurations);\n      // Now actually fetch and format the documents\n      const recentDocuments = await Promise.all(\n        contentTypesMeta.map(async (meta) => {\n          const permissionQuery = await getPermissionChecker(meta.uid).sanitizedQuery.read({\n            limit: MAX_DOCUMENTS,\n            sort: 'updatedAt:desc',\n            fields: meta.fields,\n          });\n\n          const docs = await strapi.documents(meta.uid).findMany(permissionQuery);\n\n          return formatDocuments(docs, meta);\n        })\n      );\n\n      const overallRecentDocuments = recentDocuments\n        .flat()\n        .sort((a, b) => {\n          return b.updatedAt.valueOf() - a.updatedAt.valueOf();\n        })\n        .slice(0, MAX_DOCUMENTS);\n\n      return addStatusToDocuments(overallRecentDocuments);\n    },\n  };\n};\n\nexport { createHomepageService };\n","// NOTE: Make sure to use default export for services overwritten in EE\nimport auth from './auth';\nimport user from './user';\nimport role from './role';\nimport passport from './passport';\nimport metrics from './metrics';\nimport * as token from './token';\nimport * as permission from './permission';\nimport * as contentType from './content-type';\nimport * as constants from './constants';\nimport * as condition from './condition';\nimport * as action from './action';\nimport * as apiToken from './api-token';\nimport * as transfer from './transfer';\nimport * as projectSettings from './project-settings';\nimport { createHomepageService } from './homepage';\n\n// TODO: TS - Export services one by one as this export is cjs\nexport default {\n  auth,\n  user,\n  role,\n  passport,\n  token,\n  permission,\n  metrics,\n  'content-type': contentType,\n  constants,\n  condition,\n  action,\n  'api-token': apiToken,\n  transfer,\n  'project-settings': projectSettings,\n  homepage: createHomepageService,\n};\n","import { z } from 'zod';\nimport { validateZod } from '@strapi/utils';\n\nconst MAX_IMAGE_WIDTH = 750;\nconst MAX_IMAGE_HEIGHT = MAX_IMAGE_WIDTH;\nconst MAX_IMAGE_FILE_SIZE = 1024 * 1024; // 1Mo\n\nconst updateProjectSettings = z\n  .object({\n    menuLogo: z.string().nullish(),\n    authLogo: z.string().nullish(),\n  })\n  .strict();\n\nconst updateProjectSettingsLogo = z.object({\n  originalFilename: z.string().nullish(),\n  mimetype: z.enum(['image/jpeg', 'image/png', 'image/svg+xml']),\n  size: z.number().max(MAX_IMAGE_FILE_SIZE).nullish(),\n});\n\nconst updateProjectSettingsFiles = z\n  .object({\n    menuLogo: updateProjectSettingsLogo.nullish(),\n    authLogo: updateProjectSettingsLogo.nullish(),\n  })\n  .strict();\n\nconst logoDimensions = z.object({\n  width: z.number().max(MAX_IMAGE_WIDTH).nullish(),\n  height: z.number().max(MAX_IMAGE_HEIGHT).nullish(),\n});\n\nconst updateProjectSettingsImagesDimensions = z\n  .object({\n    menuLogo: logoDimensions.nullish(),\n    authLogo: logoDimensions.nullish(),\n  })\n  .strict();\n\nexport const validateUpdateProjectSettings = validateZod(updateProjectSettings);\nexport const validateUpdateProjectSettingsFiles = validateZod(updateProjectSettingsFiles);\nexport const validateUpdateProjectSettingsImagesDimensions = validateZod(\n  updateProjectSettingsImagesDimensions\n);\n\nexport default {\n  validateUpdateProjectSettings,\n  validateUpdateProjectSettingsFiles,\n  validateUpdateProjectSettingsImagesDimensions,\n};\n","import type { Context } from 'koa';\n\nimport path from 'path';\n\nimport { map, values, sumBy, pipe, flatMap, propEq } from 'lodash/fp';\nimport _ from 'lodash';\nimport { exists } from 'fs-extra';\nimport '@strapi/types';\nimport { env } from '@strapi/utils';\nimport tsUtils from '@strapi/typescript-utils';\nimport {\n  validateUpdateProjectSettings,\n  validateUpdateProjectSettingsFiles,\n  validateUpdateProjectSettingsImagesDimensions,\n} from '../validation/project-settings';\nimport { getService } from '../utils';\n\nimport type {\n  Init,\n  GetProjectSettings,\n  Information,\n  Plugins,\n  TelemetryProperties,\n  UpdateProjectSettings,\n} from '../../../shared/contracts/admin';\n\nconst { isUsingTypeScript } = tsUtils;\n\n/**\n * A set of functions called \"actions\" for `Admin`\n */\nexport default {\n  // TODO very temporary to check the switch ee/ce\n  // When removing this we need to update the /admin/src/index.js file\n  // whe,re we set the strapi.window.isEE value\n\n  // NOTE: admin/ee/server overrides this controller, and adds the EE features\n  // This returns an empty feature list for CE\n  async getProjectType() {\n    const flags = strapi.config.get('admin.flags', {});\n    return { data: { isEE: false, features: [], flags } };\n  },\n\n  async init() {\n    let uuid = strapi.config.get('uuid', false);\n    const hasAdmin = await getService('user').exists();\n    const { menuLogo, authLogo } = await getService('project-settings').getProjectSettings();\n    // set to null if telemetryDisabled flag not avaialble in package.json\n    const telemetryDisabled: boolean | null = strapi.config.get(\n      'packageJsonStrapi.telemetryDisabled',\n      null\n    );\n\n    if (telemetryDisabled !== null && telemetryDisabled === true) {\n      uuid = false;\n    }\n\n    return {\n      data: {\n        uuid,\n        hasAdmin,\n        menuLogo: menuLogo ? menuLogo.url : null,\n        authLogo: authLogo ? authLogo.url : null,\n      },\n    } satisfies Init.Response;\n  },\n\n  async getProjectSettings() {\n    return getService(\n      'project-settings'\n    ).getProjectSettings() satisfies Promise<GetProjectSettings.Response>;\n  },\n\n  async updateProjectSettings(ctx: Context) {\n    const {\n      request: { files, body },\n    } = ctx as { request: UpdateProjectSettings.Request };\n\n    const projectSettingsService = getService('project-settings');\n\n    await validateUpdateProjectSettings(body);\n    await validateUpdateProjectSettingsFiles(files);\n\n    const formatedFiles = await projectSettingsService.parseFilesData(files);\n    await validateUpdateProjectSettingsImagesDimensions(formatedFiles);\n\n    return projectSettingsService.updateProjectSettings({\n      ...body,\n      ...formatedFiles,\n    }) satisfies Promise<UpdateProjectSettings.Response>;\n  },\n\n  async telemetryProperties(ctx: Context) {\n    // If the telemetry is disabled, ignore the request and return early\n    if (strapi.telemetry.isDisabled) {\n      ctx.status = 204;\n      return;\n    }\n\n    const useTypescriptOnServer = await isUsingTypeScript(strapi.dirs.app.root);\n    const useTypescriptOnAdmin = await isUsingTypeScript(\n      path.join(strapi.dirs.app.root, 'src', 'admin')\n    );\n    const isHostedOnStrapiCloud = env('STRAPI_HOSTING', null) === 'strapi.cloud';\n\n    const numberOfAllContentTypes = _.size(strapi.contentTypes);\n    const numberOfComponents = _.size(strapi.components);\n\n    const getNumberOfDynamicZones = () => {\n      return pipe(\n        map('attributes'),\n        flatMap(values),\n        // @ts-expect-error lodash types\n        sumBy(propEq('type', 'dynamiczone'))\n      )(strapi.contentTypes as any);\n    };\n\n    return {\n      data: {\n        useTypescriptOnServer,\n        useTypescriptOnAdmin,\n        isHostedOnStrapiCloud,\n        numberOfAllContentTypes, // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\n        numberOfComponents,\n        numberOfDynamicZones: getNumberOfDynamicZones(),\n      },\n    } satisfies TelemetryProperties.Response;\n  },\n\n  async information() {\n    const currentEnvironment: string = strapi.config.get('environment');\n    const autoReload = strapi.config.get('autoReload', false);\n    const strapiVersion = strapi.config.get('info.strapi', null);\n    const dependencies = strapi.config.get('info.dependencies', {});\n    const projectId = strapi.config.get('uuid', null);\n    const nodeVersion = process.version;\n    const communityEdition = !strapi.EE;\n    const useYarn: boolean = await exists(path.join(process.cwd(), 'yarn.lock'));\n\n    return {\n      data: {\n        currentEnvironment,\n        autoReload,\n        strapiVersion,\n        dependencies,\n        projectId,\n        nodeVersion,\n        communityEdition,\n        useYarn,\n      },\n    } satisfies Information.Response;\n  },\n\n  async plugins(ctx: Context) {\n    const enabledPlugins = strapi.config.get('enabledPlugins') as any;\n\n    // List of core plugins that are always enabled,\n    // and so it's not necessary to display them in the plugins list\n    const CORE_PLUGINS = [\n      'content-manager',\n      'content-type-builder',\n      'email',\n      'upload',\n      'i18n',\n      'content-releases',\n      'review-workflows',\n    ];\n\n    const plugins = Object.entries(enabledPlugins)\n      .filter(([key]: any) => !CORE_PLUGINS.includes(key))\n      .map(([key, plugin]: any) => ({\n        name: plugin.info.name || key,\n        displayName: plugin.info.displayName || plugin.info.name || key,\n        description: plugin.info.description || '',\n        packageName: plugin.info.packageName,\n      }));\n\n    ctx.send({ plugins }) satisfies Plugins.Response;\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport constants from '../services/constants';\n\nconst apiTokenCreationSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).required(),\n    description: yup.string().optional(),\n    type: yup.string().oneOf(Object.values(constants.API_TOKEN_TYPE)).required(),\n    permissions: yup.array().of(yup.string()).nullable(),\n    lifespan: yup.number().min(1).oneOf(Object.values(constants.API_TOKEN_LIFESPANS)).nullable(),\n  })\n  .noUnknown()\n  .strict();\n\nconst apiTokenUpdateSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).notNull(),\n    description: yup.string().nullable(),\n    type: yup.string().oneOf(Object.values(constants.API_TOKEN_TYPE)).notNull(),\n    permissions: yup.array().of(yup.string()).nullable(),\n  })\n  .noUnknown()\n  .strict();\n\nexport const validateApiTokenCreationInput = validateYupSchema(apiTokenCreationSchema);\nexport const validateApiTokenUpdateInput = validateYupSchema(apiTokenUpdateSchema);\n\nexport default {\n  validateApiTokenCreationInput,\n  validateApiTokenUpdateInput,\n};\n","import type { Context } from 'koa';\n\nimport { strings, errors } from '@strapi/utils';\nimport { trim, has } from 'lodash/fp';\nimport { getService } from '../utils';\nimport {\n  validateApiTokenCreationInput,\n  validateApiTokenUpdateInput,\n} from '../validation/api-tokens';\n\nimport { Create, List, Revoke, Get, Update } from '../../../shared/contracts/api-token';\n\nconst { ApplicationError } = errors;\n\nexport default {\n  async create(ctx: Context) {\n    const { body } = ctx.request as Create.Request;\n    const apiTokenService = getService('api-token');\n\n    /**\n     * We trim both field to avoid having issues with either:\n     * - having a space at the end or start of the value.\n     * - having only spaces as value;\n     */\n    const attributes = {\n      name: trim(body.name),\n      description: trim(body.description),\n      type: body.type,\n      permissions: body.permissions,\n      lifespan: body.lifespan,\n    };\n\n    await validateApiTokenCreationInput(attributes);\n\n    const alreadyExists = await apiTokenService.exists({ name: attributes.name });\n    if (alreadyExists) {\n      throw new ApplicationError('Name already taken');\n    }\n\n    const apiToken = await apiTokenService.create(attributes);\n    ctx.created({ data: apiToken } satisfies Create.Response);\n  },\n\n  async regenerate(ctx: Context) {\n    const { id } = ctx.params;\n    const apiTokenService = getService('api-token');\n\n    const apiTokenExists = await apiTokenService.getById(id);\n    if (!apiTokenExists) {\n      ctx.notFound('API Token not found');\n      return;\n    }\n\n    const accessToken = await apiTokenService.regenerate(id);\n\n    ctx.created({ data: accessToken });\n  },\n\n  async list(ctx: Context) {\n    const apiTokenService = getService('api-token');\n    const apiTokens = await apiTokenService.list();\n\n    ctx.send({ data: apiTokens } satisfies List.Response);\n  },\n\n  async revoke(ctx: Context) {\n    const { id } = ctx.params as Revoke.Params;\n    const apiTokenService = getService('api-token');\n    const apiToken = await apiTokenService.revoke(id);\n\n    ctx.deleted({ data: apiToken } satisfies Revoke.Response);\n  },\n\n  async get(ctx: Context) {\n    const { id } = ctx.params;\n    const apiTokenService = getService('api-token');\n    const apiToken = await apiTokenService.getById(id);\n\n    if (!apiToken) {\n      ctx.notFound('API Token not found');\n      return;\n    }\n\n    ctx.send({ data: apiToken } satisfies Get.Response);\n  },\n\n  async update(ctx: Context) {\n    const { body } = ctx.request as Update.Request;\n    const { id } = ctx.params as Update.Params;\n    const apiTokenService = getService('api-token');\n\n    const attributes = body;\n    /**\n     * We trim both field to avoid having issues with either:\n     * - having a space at the end or start of the value.\n     * - having only spaces as value;\n     */\n    if (has('name', attributes)) {\n      attributes.name = trim(body.name);\n    }\n\n    if (has('description', attributes) || attributes.description === null) {\n      attributes.description = trim(body.description);\n    }\n\n    await validateApiTokenUpdateInput(attributes);\n\n    const apiTokenExists = await apiTokenService.getById(id);\n    if (!apiTokenExists) {\n      return ctx.notFound('API Token not found');\n    }\n\n    if (has('name', attributes)) {\n      const nameAlreadyTaken = await apiTokenService.getByName(attributes.name);\n\n      /**\n       * We cast the ids as string as the one coming from the ctx isn't cast\n       * as a Number in case it is supposed to be an integer. It remains\n       * as a string. This way we avoid issues with integers in the db.\n       */\n      if (!!nameAlreadyTaken && !strings.isEqual(nameAlreadyTaken.id, id)) {\n        throw new ApplicationError('Name already taken');\n      }\n    }\n\n    const apiToken = await apiTokenService.update(id, attributes);\n    ctx.send({ data: apiToken } satisfies Update.Response);\n  },\n\n  async getLayout(ctx: Context) {\n    const apiTokenService = getService('api-token');\n    // TODO\n    // @ts-expect-error remove this controller if not used\n    const layout = await apiTokenService.getApiTokenLayout();\n\n    ctx.send({ data: layout });\n  },\n};\n","import { isUndefined } from 'lodash/fp';\nimport { yup, validateYupSchema } from '@strapi/utils';\nimport validators from './common-validators';\n\nconst userCreationSchema = yup\n  .object()\n  .shape({\n    email: validators.email.required(),\n    firstname: validators.firstname.required(),\n    lastname: validators.lastname,\n    roles: validators.roles.min(1),\n    preferedLanguage: yup.string().nullable(),\n  })\n  .noUnknown();\n\nconst profileUpdateSchema = yup\n  .object()\n  .shape({\n    email: validators.email.notNull(),\n    firstname: validators.firstname.notNull(),\n    lastname: validators.lastname.nullable(),\n    username: validators.username.nullable(),\n    password: validators.password.notNull(),\n    currentPassword: yup\n      .string()\n      .when('password', (password: string, schema: any) =>\n        !isUndefined(password) ? schema.required() : schema\n      )\n      .notNull(),\n    preferedLanguage: yup.string().nullable(),\n  })\n  .noUnknown();\n\nconst userUpdateSchema = yup\n  .object()\n  .shape({\n    email: validators.email.notNull(),\n    firstname: validators.firstname.notNull(),\n    lastname: validators.lastname.nullable(),\n    username: validators.username.nullable(),\n    password: validators.password.notNull(),\n    isActive: yup.bool().notNull(),\n    roles: validators.roles.min(1).notNull(),\n  })\n  .noUnknown();\n\nconst usersDeleteSchema = yup\n  .object()\n  .shape({\n    ids: yup.array().of(yup.strapiID()).min(1).required(),\n  })\n  .noUnknown();\n\nexport const validateUserCreationInput = validateYupSchema(userCreationSchema);\nexport const validateProfileUpdateInput = validateYupSchema(profileUpdateSchema);\nexport const validateUserUpdateInput = validateYupSchema(userUpdateSchema);\nexport const validateUsersDeleteInput = validateYupSchema(usersDeleteSchema);\nexport const schemas = {\n  userCreationSchema,\n  usersDeleteSchema,\n  userUpdateSchema,\n};\n\nexport default {\n  validateUserCreationInput,\n  validateProfileUpdateInput,\n  validateUserUpdateInput,\n  validateUsersDeleteInput,\n  schemas,\n};\n","import type { Context } from 'koa';\nimport type { AdminUser } from '../../../shared/contracts/shared';\n\nimport { getService } from '../utils';\nimport { validateProfileUpdateInput } from '../validation/user';\nimport { GetMe, GetOwnPermissions, UpdateMe } from '../../../shared/contracts/users';\n\nexport default {\n  async getMe(ctx: Context) {\n    const userInfo = getService('user').sanitizeUser(ctx.state.user as AdminUser);\n\n    ctx.body = {\n      data: userInfo,\n    } satisfies GetMe.Response;\n  },\n\n  async updateMe(ctx: Context) {\n    const input = ctx.request.body as UpdateMe.Request['body'];\n\n    await validateProfileUpdateInput(input);\n\n    const userService = getService('user');\n    const authServer = getService('auth');\n\n    const { currentPassword, ...userInfo } = input;\n\n    if (currentPassword && userInfo.password) {\n      const isValid = await authServer.validatePassword(currentPassword, ctx.state.user.password);\n\n      if (!isValid) {\n        return ctx.badRequest('ValidationError', {\n          currentPassword: ['Invalid credentials'],\n        });\n      }\n    }\n\n    const updatedUser = await userService.updateById(ctx.state.user.id, userInfo);\n\n    ctx.body = {\n      data: userService.sanitizeUser(updatedUser),\n    } satisfies UpdateMe.Response;\n  },\n\n  async getOwnPermissions(ctx: Context) {\n    const { findUserPermissions, sanitizePermission } = getService('permission');\n    const { user } = ctx.state;\n\n    const userPermissions = await findUserPermissions(user as AdminUser);\n\n    ctx.body = {\n      // @ts-expect-error - transform response type to sanitized permission\n      data: userPermissions.map(sanitizePermission),\n    } satisfies GetOwnPermissions.Response;\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport validators from '../common-validators';\n\nconst registrationSchema = yup\n  .object()\n  .shape({\n    registrationToken: yup.string().required(),\n    userInfo: yup\n      .object()\n      .shape({\n        firstname: validators.firstname.required(),\n        lastname: validators.lastname.nullable(),\n        password: validators.password.required(),\n      })\n      .required()\n      .noUnknown(),\n  })\n  .noUnknown();\n\nconst registrationInfoQuerySchema = yup\n  .object()\n  .shape({\n    registrationToken: yup.string().required(),\n  })\n  .required()\n  .noUnknown();\n\nconst adminRegistrationSchema = yup\n  .object()\n  .shape({\n    email: validators.email.required(),\n    firstname: validators.firstname.required(),\n    lastname: validators.lastname.nullable(),\n    password: validators.password.required(),\n  })\n  .required()\n  .noUnknown();\n\nexport const validateRegistrationInput = validateYupSchema(registrationSchema);\nexport const validateRegistrationInfoQuery = validateYupSchema(registrationInfoQuerySchema);\nexport const validateAdminRegistrationInput = validateYupSchema(adminRegistrationSchema);\n\nexport default {\n  validateRegistrationInput,\n  validateRegistrationInfoQuery,\n  validateAdminRegistrationInput,\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport validators from '../common-validators';\n\nconst forgotPasswordSchema = yup\n  .object()\n  .shape({\n    email: validators.email.required(),\n  })\n  .required()\n  .noUnknown();\n\nexport default validateYupSchema(forgotPasswordSchema);\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport validators from '../common-validators';\n\nconst resetPasswordSchema = yup\n  .object()\n  .shape({\n    resetPasswordToken: yup.string().required(),\n    password: validators.password.required(),\n  })\n  .required()\n  .noUnknown();\n\nexport default validateYupSchema(resetPasswordSchema);\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst renewToken = yup.object().shape({ token: yup.string().required() }).required().noUnknown();\n\nexport default validateYupSchema(renewToken);\n","import type { Context, Next } from 'koa';\nimport passport from 'koa-passport';\nimport compose from 'koa-compose';\nimport '@strapi/types';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport {\n  validateRegistrationInput,\n  validateAdminRegistrationInput,\n  validateRegistrationInfoQuery,\n  validateForgotPasswordInput,\n  validateResetPasswordInput,\n  validateRenewTokenInput,\n} from '../validation/authentication';\n\nimport type {\n  ForgotPassword,\n  Login,\n  Register,\n  RegistrationInfo,\n  RenewToken,\n  ResetPassword,\n} from '../../../shared/contracts/authentication';\nimport { AdminUser } from '../../../shared/contracts/shared';\n\nconst { ApplicationError, ValidationError } = errors;\n\nexport default {\n  login: compose([\n    (ctx: Context, next: Next) => {\n      return passport.authenticate('local', { session: false }, (err, user, info) => {\n        if (err) {\n          strapi.eventHub.emit('admin.auth.error', { error: err, provider: 'local' });\n          // if this is a recognized error, allow it to bubble up to user\n          if (err.details?.code === 'LOGIN_NOT_ALLOWED') {\n            throw err;\n          }\n\n          // for all other errors throw a generic error to prevent leaking info\n          return ctx.notImplemented();\n        }\n\n        if (!user) {\n          strapi.eventHub.emit('admin.auth.error', {\n            error: new Error(info.message),\n            provider: 'local',\n          });\n          throw new ApplicationError(info.message);\n        }\n\n        const query = ctx.state as Login.Request['query'];\n        query.user = user;\n\n        const sanitizedUser = getService('user').sanitizeUser(user);\n        strapi.eventHub.emit('admin.auth.success', { user: sanitizedUser, provider: 'local' });\n\n        return next();\n      })(ctx, next);\n    },\n    (ctx: Context) => {\n      const { user } = ctx.state as { user: AdminUser };\n\n      ctx.body = {\n        data: {\n          token: getService('token').createJwtToken(user),\n          user: getService('user').sanitizeUser(ctx.state.user), // TODO: fetch more detailed info\n        },\n      } satisfies Login.Response;\n    },\n  ]),\n\n  async renewToken(ctx: Context) {\n    await validateRenewTokenInput(ctx.request.body);\n\n    const { token } = ctx.request.body as RenewToken.Request['body'];\n\n    const { isValid, payload } = getService('token').decodeJwtToken(token);\n\n    if (!isValid) {\n      throw new ValidationError('Invalid token');\n    }\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken({ id: payload.id }),\n      },\n    } satisfies RenewToken.Response;\n  },\n\n  async registrationInfo(ctx: Context) {\n    await validateRegistrationInfoQuery(ctx.request.query);\n\n    const { registrationToken } = ctx.request.query as RegistrationInfo.Request['query'];\n\n    const registrationInfo = await getService('user').findRegistrationInfo(registrationToken);\n\n    if (!registrationInfo) {\n      throw new ValidationError('Invalid registrationToken');\n    }\n\n    ctx.body = { data: registrationInfo } satisfies RegistrationInfo.Response;\n  },\n\n  async register(ctx: Context) {\n    const input = ctx.request.body as Register.Request['body'];\n\n    await validateRegistrationInput(input);\n\n    const user = await getService('user').register(input);\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken(user),\n        user: getService('user').sanitizeUser(user),\n      },\n    } satisfies Register.Response;\n  },\n\n  async registerAdmin(ctx: Context) {\n    const input = ctx.request.body as Register.Request['body'];\n\n    await validateAdminRegistrationInput(input);\n\n    const hasAdmin = await getService('user').exists();\n\n    if (hasAdmin) {\n      throw new ApplicationError('You cannot register a new super admin');\n    }\n\n    const superAdminRole = await getService('role').getSuperAdmin();\n\n    if (!superAdminRole) {\n      throw new ApplicationError(\n        \"Cannot register the first admin because the super admin role doesn't exist.\"\n      );\n    }\n\n    const user = await getService('user').create({\n      ...input,\n      registrationToken: null,\n      isActive: true,\n      roles: superAdminRole ? [superAdminRole.id] : [],\n    });\n\n    strapi.telemetry.send('didCreateFirstAdmin');\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken(user),\n        user: getService('user').sanitizeUser(user),\n      },\n    };\n  },\n\n  async forgotPassword(ctx: Context) {\n    const input = ctx.request.body as ForgotPassword.Request['body'];\n\n    await validateForgotPasswordInput(input);\n\n    getService('auth').forgotPassword(input);\n\n    ctx.status = 204;\n  },\n\n  async resetPassword(ctx: Context) {\n    const input = ctx.request.body as ResetPassword.Request['body'];\n\n    await validateResetPasswordInput(input);\n\n    const user = await getService('auth').resetPassword(input);\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken(user),\n        user: getService('user').sanitizeUser(user),\n      },\n    } satisfies ResetPassword.Response;\n  },\n\n  logout(ctx: Context) {\n    const sanitizedUser = getService('user').sanitizeUser(ctx.state.user);\n    strapi.eventHub.emit('admin.logout', { user: sanitizedUser });\n    ctx.body = { data: {} };\n  },\n};\n","import { pick, map } from 'lodash/fp';\n\n// visible fields for the API\nconst publicFields = ['id', 'displayName', 'category'];\n\nconst formatConditions = map(pick(publicFields));\n\nexport { formatConditions };\n","import type { Context } from 'koa';\nimport { validateCheckPermissionsInput } from '../validation/permission';\nimport { getService } from '../utils';\nimport { formatConditions } from './formatters';\nimport type { Action } from '../domain/action';\nimport type { GetAll, Check } from '../../../shared/contracts/permissions';\nimport { Condition } from '../domain/condition';\nimport { Permission } from '../../../shared/contracts/shared';\n\nexport default {\n  /**\n   * Check each permissions from `request.body.permissions` and returns an array of booleans\n   * @param {KoaContext} ctx - koa context\n   */\n  async check(ctx: Context) {\n    const { body: input } = ctx.request as Check.Request;\n    const { userAbility } = ctx.state;\n\n    await validateCheckPermissionsInput(input);\n\n    const { engine } = getService('permission');\n\n    const checkPermissionsFn = engine.checkMany(userAbility);\n\n    ctx.body = {\n      data: checkPermissionsFn(input.permissions as Permission[]),\n    } satisfies Check.Response;\n  },\n\n  /**\n   * Returns every permissions, in nested format\n   * @param {KoaContext} ctx - koa context\n   */\n  async getAll(ctx: Context) {\n    const { sectionsBuilder, actionProvider, conditionProvider } = getService('permission');\n\n    const actions = actionProvider.values() as Action[];\n    const conditions = conditionProvider.values() as Condition[];\n    const sections = await sectionsBuilder.build(actions);\n\n    ctx.body = {\n      data: {\n        // @ts-expect-error - refactor to use a proper type\n        conditions: formatConditions(conditions),\n        sections,\n      },\n    } satisfies GetAll.Response;\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst roleCreateSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).required(),\n    description: yup.string().nullable(),\n  })\n  .noUnknown();\n\nconst rolesDeleteSchema = yup\n  .object()\n  .shape({\n    ids: yup\n      .array()\n      .of(yup.strapiID())\n      .min(1)\n      .required()\n      .test('roles-deletion-checks', 'Roles deletion checks have failed', async function (ids) {\n        try {\n          await strapi.service('admin::role').checkRolesIdForDeletion(ids);\n        } catch (e) {\n          // @ts-expect-error yup types\n          return this.createError({ path: 'ids', message: e.message });\n        }\n\n        return true;\n      }),\n  })\n  .noUnknown();\n\nconst roleDeleteSchema = yup\n  .strapiID()\n  .required()\n  .test('no-admin-single-delete', 'Role deletion checks have failed', async function (id) {\n    try {\n      await strapi.service('admin::role').checkRolesIdForDeletion([id]);\n    } catch (e) {\n      // @ts-expect-error yup types\n      return this.createError({ path: 'id', message: e.message });\n    }\n\n    return true;\n  });\n\nconst roleUpdateSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1),\n    description: yup.string().nullable(),\n  })\n  .noUnknown();\n\nexport const validateRoleCreateInput = validateYupSchema(roleCreateSchema);\nexport const validateRoleUpdateInput = validateYupSchema(roleUpdateSchema);\nexport const validateRolesDeleteInput = validateYupSchema(rolesDeleteSchema);\nexport const validateRoleDeleteInput = validateYupSchema(roleDeleteSchema);\n\nexport default {\n  validateRoleUpdateInput,\n  validateRoleCreateInput,\n  validateRolesDeleteInput,\n  validateRoleDeleteInput,\n};\n","import type { Context } from 'koa';\nimport { errors } from '@strapi/utils';\nimport {\n  validateRoleUpdateInput,\n  validateRoleCreateInput,\n  validateRoleDeleteInput,\n  validateRolesDeleteInput,\n} from '../validation/role';\nimport { validatedUpdatePermissionsInput } from '../validation/permission';\nimport constants from '../services/constants';\nimport { getService } from '../utils';\nimport type {\n  Create,\n  FindRoles,\n  FindRole,\n  Update,\n  GetPermissions,\n  UpdatePermissions,\n  Delete,\n  BatchDelete,\n} from '../../../shared/contracts/roles';\nimport { AdminRole } from '../../../shared/contracts/shared';\n\nconst { ApplicationError } = errors;\nconst { SUPER_ADMIN_CODE } = constants;\n\nexport default {\n  /**\n   * Create a new role\n   * @param {KoaContext} ctx - koa context\n   */\n  async create(ctx: Context) {\n    const { body } = ctx.request as Create.Request;\n    await validateRoleCreateInput(body);\n\n    const roleService = getService('role');\n\n    const role = await roleService.create(body);\n    const sanitizedRole = roleService.sanitizeRole(role) as Omit<AdminRole, 'users' | 'permission'>;\n\n    ctx.created({ data: sanitizedRole } satisfies Create.Response);\n  },\n\n  /**\n   * Returns on role by id\n   * @param {KoaContext} ctx - koa context\n   */\n  async findOne(ctx: Context) {\n    const { id } = ctx.params as FindRole.Request['params'];\n    const role = await getService('role').findOneWithUsersCount({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    ctx.body = {\n      data: role,\n    } satisfies FindRole.Response;\n  },\n\n  /**\n   * Returns every roles\n   * @param {KoaContext} ctx - koa context\n   */\n  async findAll(ctx: Context) {\n    const { query } = ctx.request as FindRoles.Request;\n\n    const permissionsManager = getService('permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: 'admin::role',\n    });\n\n    await permissionsManager.validateQuery(query);\n    const sanitizedQuery = await permissionsManager.sanitizeQuery(query);\n\n    const roles = await getService('role').findAllWithUsersCount(sanitizedQuery);\n\n    ctx.body = {\n      data: roles,\n    } satisfies FindRoles.Response;\n  },\n\n  /**\n   * Updates a role by id\n   * @param {KoaContext} ctx - koa context\n   */\n  async update(ctx: Context) {\n    const { id } = ctx.params as Update.Request['params'];\n    const { body } = ctx.request as Omit<Update.Request, 'params'>;\n\n    const roleService = getService('role');\n\n    await validateRoleUpdateInput(body);\n\n    const role = await roleService.findOne({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    if (role.code === SUPER_ADMIN_CODE) {\n      throw new ApplicationError(\"Super admin can't be edited.\");\n    }\n\n    const updatedRole = await roleService.update({ id }, body);\n    const sanitizedRole = roleService.sanitizeRole(updatedRole) as Omit<\n      AdminRole,\n      'users' | 'permission'\n    >;\n\n    ctx.body = {\n      data: sanitizedRole,\n    } satisfies Update.Response;\n  },\n\n  /**\n   * Returns the permissions assigned to a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async getPermissions(ctx: Context) {\n    const { id } = ctx.params as GetPermissions.Request['params'];\n\n    const roleService = getService('role');\n    const permissionService = getService('permission');\n\n    const role = await roleService.findOne({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    const permissions = await permissionService.findMany({ where: { role: { id: role.id } } });\n\n    const sanitizedPermissions = permissions.map(permissionService.sanitizePermission);\n\n    ctx.body = {\n      // @ts-expect-error - transform response type to sanitized permission\n      data: sanitizedPermissions,\n    } satisfies GetPermissions.Response;\n  },\n\n  /**\n   * Updates the permissions assigned to a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async updatePermissions(ctx: Context) {\n    const { id } = ctx.params as UpdatePermissions.Request['params'];\n    const { body: input } = ctx.request as Omit<UpdatePermissions.Request, 'params'>;\n\n    const roleService = getService('role');\n    const permissionService = getService('permission');\n\n    const role = await roleService.findOne({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    if (role.code === SUPER_ADMIN_CODE) {\n      throw new ApplicationError(\"Super admin permissions can't be edited.\");\n    }\n\n    await validatedUpdatePermissionsInput(input);\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    const permissions = await roleService.assignPermissions(role.id, input.permissions);\n\n    const sanitizedPermissions = permissions.map(permissionService.sanitizePermission);\n\n    ctx.body = {\n      data: sanitizedPermissions,\n    } satisfies UpdatePermissions.Response;\n  },\n\n  /**\n   * Delete a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async deleteOne(ctx: Context) {\n    const { id } = ctx.params as Delete.Request['params'];\n\n    await validateRoleDeleteInput(id);\n\n    const roleService = getService('role');\n\n    const roles = await roleService.deleteByIds([id]);\n\n    const sanitizedRole = roles.map((role) => roleService.sanitizeRole(role))[0] || null;\n\n    return ctx.deleted({\n      data: sanitizedRole,\n    } satisfies Delete.Response);\n  },\n\n  /**\n   * delete several roles\n   * @param {KoaContext} ctx - koa context\n   */\n  async deleteMany(ctx: Context) {\n    const { body } = ctx.request as BatchDelete.Request;\n\n    await validateRolesDeleteInput(body);\n\n    const roleService = getService('role');\n\n    const roles = await roleService.deleteByIds(body.ids);\n    const sanitizedRoles = roles.map(roleService.sanitizeRole);\n\n    return ctx.deleted({\n      data: sanitizedRoles,\n    } satisfies BatchDelete.Response);\n  },\n};\n","import { Context } from 'koa';\n\nimport { strapi as dataTransferStrapi } from '@strapi/data-transfer';\nimport { errors } from '@strapi/utils';\nimport dataTransferAuthStrategy from '../../strategies/data-transfer';\n\nconst {\n  remote: {\n    handlers: { createPushController, createPullController },\n  },\n} = dataTransferStrapi;\n\nconst { UnauthorizedError } = errors;\n\n/**\n * @param ctx the koa context\n * @param scope the scope to verify\n */\nconst verify = async (ctx: Context, scope?: dataTransferStrapi.remote.constants.TransferMethod) => {\n  const { auth } = ctx.state;\n\n  if (!auth) {\n    throw new UnauthorizedError();\n  }\n\n  await dataTransferAuthStrategy.verify(auth, { scope });\n};\n\nexport const push = createPushController({ verify });\nexport const pull = createPullController({ verify });\n\nexport default {\n  push,\n  pull,\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport constants from '../../services/constants';\n\nconst transferTokenCreationSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).required(),\n    description: yup.string().optional(),\n    permissions: yup\n      .array()\n      .min(1)\n      .of(yup.string().oneOf(Object.values(constants.TRANSFER_TOKEN_TYPE)))\n      .required(),\n    lifespan: yup\n      .number()\n      .min(1)\n      .oneOf(Object.values(constants.TRANSFER_TOKEN_LIFESPANS))\n      .nullable(),\n  })\n  .noUnknown()\n  .strict();\n\nconst transferTokenUpdateSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).notNull(),\n    description: yup.string().nullable(),\n    permissions: yup\n      .array()\n      .min(1)\n      .of(yup.string().oneOf(Object.values(constants.TRANSFER_TOKEN_TYPE)))\n      .nullable(),\n  })\n  .noUnknown()\n  .strict();\n\nexport const validateTransferTokenCreationInput = validateYupSchema(transferTokenCreationSchema);\nexport const validateTransferTokenUpdateInput = validateYupSchema(transferTokenUpdateSchema);\n\nexport default {\n  validateTransferTokenCreationInput,\n  validateTransferTokenUpdateInput,\n};\n","import { Context } from 'koa';\nimport { trim, has } from 'lodash/fp';\nimport { errors, strings } from '@strapi/utils';\nimport { getService } from '../../utils';\nimport { token } from '../../validation/transfer';\n\nimport type {\n  TokenCreate,\n  TokenGetById,\n  TokenList,\n  TokenRegenerate,\n  TokenRevoke,\n  TokenUpdate,\n} from '../../../../shared/contracts/transfer';\n\nconst { ApplicationError } = errors;\n\nconst { validateTransferTokenCreationInput, validateTransferTokenUpdateInput } = token;\n\nexport default {\n  async list(ctx: Context) {\n    const transferService = getService('transfer');\n    const transferTokens = await transferService.token.list();\n\n    ctx.body = { data: transferTokens } satisfies TokenList.Response;\n  },\n\n  async getById(ctx: Context) {\n    const { id } = ctx.params as TokenGetById.Params;\n    const tokenService = getService('transfer').token;\n\n    const transferToken = await tokenService.getById(id);\n\n    if (!transferToken) {\n      ctx.notFound('Transfer token not found');\n      return;\n    }\n\n    ctx.body = { data: transferToken } satisfies TokenGetById.Response;\n  },\n\n  async create(ctx: Context) {\n    const { body } = ctx.request as TokenCreate.Request;\n    const { token: tokenService } = getService('transfer');\n\n    /**\n     * We trim fields to avoid having issues with either:\n     * - having a space at the end or start of the value\n     * - having only spaces as value (so that an empty field can be caught in validation)\n     */\n    const attributes = {\n      name: trim(body.name),\n      description: trim(body.description),\n      permissions: body.permissions,\n      lifespan: body.lifespan,\n    };\n\n    await validateTransferTokenCreationInput(attributes);\n\n    const alreadyExists = await tokenService.exists({ name: attributes.name });\n    if (alreadyExists) {\n      throw new ApplicationError('Name already taken');\n    }\n\n    const transferTokens = await tokenService.create(attributes);\n\n    ctx.created({ data: transferTokens } satisfies TokenCreate.Response);\n  },\n\n  async update(ctx: Context) {\n    const { body } = ctx.request as TokenUpdate.Request;\n    const { id } = ctx.params as TokenUpdate.Params;\n    const { token: tokenService } = getService('transfer');\n\n    const attributes = body;\n    /**\n     * We trim fields to avoid having issues with either:\n     * - having a space at the end or start of the value\n     * - having only spaces as value (so that an empty field can be caught in validation)\n     */\n    if (has('name', attributes)) {\n      attributes.name = trim(body.name);\n    }\n\n    if (has('description', attributes) || attributes.description === null) {\n      attributes.description = trim(body.description);\n    }\n\n    await validateTransferTokenUpdateInput(attributes);\n\n    const apiTokenExists = await tokenService.getById(id);\n    if (!apiTokenExists) {\n      return ctx.notFound('Transfer token not found');\n    }\n\n    if (has('name', attributes)) {\n      const nameAlreadyTaken = await tokenService.getByName(attributes.name);\n\n      /**\n       * We cast the ids as string as the one coming from the ctx isn't cast\n       * as a Number in case it is supposed to be an integer. It remains\n       * as a string. This way we avoid issues with integers in the db.\n       */\n      if (!!nameAlreadyTaken && !strings.isEqual(nameAlreadyTaken.id, id)) {\n        throw new ApplicationError('Name already taken');\n      }\n    }\n\n    const apiToken = await tokenService.update(id, attributes);\n\n    ctx.body = { data: apiToken } satisfies TokenUpdate.Response;\n  },\n\n  async revoke(ctx: Context) {\n    const { id } = ctx.params as TokenRevoke.Params;\n    const { token: tokenService } = getService('transfer');\n\n    const transferToken = await tokenService.revoke(id);\n\n    ctx.deleted({ data: transferToken } satisfies TokenRevoke.Response);\n  },\n\n  async regenerate(ctx: Context) {\n    const { id } = ctx.params as TokenRegenerate.Params;\n    const { token: tokenService } = getService('transfer');\n\n    const exists = await tokenService.getById(id);\n    if (!exists) {\n      ctx.notFound('Transfer token not found');\n      return;\n    }\n\n    const accessToken = await tokenService.regenerate(id);\n\n    ctx.created({ data: accessToken } satisfies TokenRegenerate.Response);\n  },\n};\n","import { mapKeys } from 'lodash/fp';\nimport runner from './runner';\nimport token from './token';\n\nconst prefixActionsName = (prefix: string, dict: any) => mapKeys((key) => `${prefix}-${key}`, dict);\n\nexport default {\n  ...prefixActionsName('runner', runner),\n  ...prefixActionsName('token', token),\n};\n","import type { Context } from 'koa';\n\nimport * as _ from 'lodash';\nimport { errors } from '@strapi/utils';\nimport {\n  validateUserCreationInput,\n  validateUserUpdateInput,\n  validateUsersDeleteInput,\n} from '../validation/user';\nimport { getService } from '../utils';\nimport {\n  Create,\n  DeleteMany,\n  DeleteOne,\n  FindAll,\n  FindOne,\n  Update,\n} from '../../../shared/contracts/user';\nimport { AdminUser } from '../../../shared/contracts/shared';\n\nconst { ApplicationError } = errors;\n\nexport default {\n  async create(ctx: Context) {\n    const { body } = ctx.request as Create.Request;\n    const cleanData = { ...body, email: _.get(body, `email`, ``).toLowerCase() };\n\n    await validateUserCreationInput(cleanData);\n\n    const attributes = _.pick(cleanData, [\n      'firstname',\n      'lastname',\n      'email',\n      'roles',\n      'preferedLanguage',\n    ]);\n\n    const userAlreadyExists = await getService('user').exists({\n      email: attributes.email,\n    });\n\n    if (userAlreadyExists) {\n      throw new ApplicationError('Email already taken');\n    }\n\n    const createdUser = await getService('user').create(attributes);\n\n    const userInfo = getService('user').sanitizeUser(createdUser);\n\n    // Note: We need to assign manually the registrationToken to the\n    // final user payload so that it's not removed in the sanitation process.\n    Object.assign(userInfo, { registrationToken: createdUser.registrationToken });\n\n    // Send 201 created\n    ctx.created({ data: userInfo } satisfies Create.Response);\n  },\n\n  async find(ctx: Context) {\n    const userService = getService('user');\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: 'admin::user',\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n    const sanitizedQuery = await permissionsManager.sanitizeQuery(ctx.query);\n\n    // @ts-expect-error update the service type\n    const { results, pagination } = await userService.findPage(sanitizedQuery);\n\n    ctx.body = {\n      data: {\n        results: results.map((user: AdminUser) => userService.sanitizeUser(user)),\n        pagination,\n      },\n    } satisfies FindAll.Response;\n  },\n\n  async findOne(ctx: Context) {\n    const { id } = ctx.params as FindOne.Params;\n\n    const user = await getService('user').findOne(id);\n\n    if (!user) {\n      return ctx.notFound('User does not exist');\n    }\n\n    ctx.body = {\n      data: getService('user').sanitizeUser(user as AdminUser),\n    } as FindOne.Response;\n  },\n\n  async update(ctx: Context) {\n    const { id } = ctx.params as Update.Params;\n    const { body: input } = ctx.request as Update.Request;\n\n    await validateUserUpdateInput(input);\n\n    if (_.has(input, 'email')) {\n      const uniqueEmailCheck = await getService('user').exists({\n        id: { $ne: id },\n        email: input.email,\n      });\n\n      if (uniqueEmailCheck) {\n        throw new ApplicationError('A user with this email address already exists');\n      }\n    }\n\n    const updatedUser = await getService('user').updateById(id, input);\n\n    if (!updatedUser) {\n      return ctx.notFound('User does not exist');\n    }\n\n    ctx.body = {\n      data: getService('user').sanitizeUser(updatedUser),\n    } satisfies Update.Response;\n  },\n\n  async deleteOne(ctx: Context) {\n    const { id } = ctx.params as DeleteOne.Params;\n\n    const deletedUser = await getService('user').deleteById(id);\n\n    if (!deletedUser) {\n      return ctx.notFound('User not found');\n    }\n\n    return ctx.deleted({\n      data: getService('user').sanitizeUser(deletedUser),\n    } satisfies DeleteOne.Response);\n  },\n\n  /**\n   * Delete several users\n   * @param ctx - koa context\n   */\n  async deleteMany(ctx: Context) {\n    const { body } = ctx.request as DeleteMany.Request;\n    await validateUsersDeleteInput(body);\n\n    const users = await getService('user').deleteByIds(body.ids);\n\n    const sanitizedUsers = users.map(getService('user').sanitizeUser);\n\n    return ctx.deleted({\n      data: sanitizedUsers,\n    } satisfies DeleteMany.Response);\n  },\n};\n","import isLocalhostIp from 'is-localhost-ip';\n// Regular import references a deprecated node module,\n// See https://www.npmjs.com/package/punycode.js#installation\nimport punycode from 'punycode/';\nimport type { Context } from 'koa';\nimport _ from 'lodash';\n\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nimport type { Modules } from '@strapi/types';\n\nimport {\n  CreateWebhook,\n  DeleteWebhook,\n  DeleteWebhooks,\n  GetWebhook,\n  UpdateWebhook,\n  TriggerWebhook,\n  GetWebhooks,\n} from '../../../shared/contracts/webhooks';\n\nconst urlRegex =\n  /^(?:([a-z0-9+.-]+):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9_]-*)*[a-z\\u00a1-\\uffff0-9_]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9_]-*)*[a-z\\u00a1-\\uffff0-9_]+)*\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/;\n\nconst webhookValidator = yup\n  .object({\n    name: yup.string().required(),\n    url: yup\n      .string()\n      .matches(urlRegex, 'url must be a valid URL')\n      .required()\n      .test(\n        'is-public-url',\n        \"Url is not supported because it isn't reachable over the public internet\",\n        async (url) => {\n          if (process.env.NODE_ENV !== 'production') {\n            return true;\n          }\n\n          try {\n            const parsedUrl = new URL(punycode.toASCII(url!));\n            const isLocalUrl = await isLocalhostIp(parsedUrl.hostname);\n            return !isLocalUrl;\n          } catch {\n            return false;\n          }\n        }\n      ),\n    headers: yup.lazy((data) => {\n      if (typeof data !== 'object') {\n        return yup.object().required();\n      }\n\n      return yup\n        .object(\n          // @ts-expect-error lodash types\n          _.mapValues(data, () => {\n            yup.string().min(1).required();\n          })\n        )\n        .required();\n    }),\n    events: yup.array().of(yup.string()).required(),\n  })\n  .noUnknown();\n\nconst updateWebhookValidator = webhookValidator.shape({\n  isEnabled: yup.boolean(),\n});\n\nexport default {\n  async listWebhooks(ctx: Context) {\n    const webhooks = await strapi.get('webhookStore').findWebhooks();\n    ctx.send({ data: webhooks } satisfies GetWebhooks.Response);\n  },\n\n  async getWebhook(ctx: Context) {\n    const { id } = ctx.params;\n    const webhook = await strapi.get('webhookStore').findWebhook(id);\n\n    if (!webhook) {\n      return ctx.notFound('webhook.notFound');\n    }\n\n    ctx.send({ data: webhook } satisfies GetWebhook.Response);\n  },\n\n  async createWebhook(ctx: Context) {\n    const { body } = ctx.request as CreateWebhook.Request;\n\n    await validateYupSchema(webhookValidator)(body);\n\n    const webhook = await strapi.get('webhookStore').createWebhook(body);\n\n    strapi.get('webhookRunner').add(webhook);\n\n    ctx.created({ data: webhook } satisfies CreateWebhook.Response);\n  },\n\n  async updateWebhook(ctx: Context) {\n    const { id } = ctx.params as UpdateWebhook.Params;\n    const { body } = ctx.request as UpdateWebhook.Request;\n\n    await validateYupSchema(updateWebhookValidator)(body);\n\n    const webhook = await strapi.get('webhookStore').findWebhook(id);\n\n    if (!webhook) {\n      return ctx.notFound('webhook.notFound');\n    }\n\n    const updatedWebhook = await strapi.get('webhookStore').updateWebhook(id, {\n      ...webhook,\n      ...body,\n    });\n\n    if (!updatedWebhook) {\n      return ctx.notFound('webhook.notFound');\n    }\n\n    strapi.get('webhookRunner').update(updatedWebhook);\n\n    ctx.send({ data: updatedWebhook } satisfies UpdateWebhook.Response);\n  },\n\n  async deleteWebhook(ctx: Context) {\n    const { id } = ctx.params;\n    const webhook = await strapi.get('webhookStore').findWebhook(id);\n\n    if (!webhook) {\n      return ctx.notFound('webhook.notFound');\n    }\n\n    await strapi.get('webhookStore').deleteWebhook(id);\n\n    strapi.get('webhookRunner').remove(webhook);\n\n    ctx.body = { data: webhook } satisfies DeleteWebhook.Response;\n  },\n\n  async deleteWebhooks(ctx: Context) {\n    const { ids } = ctx.request.body as DeleteWebhooks.Request['body'];\n\n    if (!Array.isArray(ids) || ids.length === 0) {\n      return ctx.badRequest('ids must be an array of id');\n    }\n\n    for (const id of ids) {\n      const webhook = await strapi.get('webhookStore').findWebhook(id);\n\n      if (webhook) {\n        await strapi.get('webhookStore').deleteWebhook(id);\n        strapi.get('webhookRunner').remove(webhook);\n      }\n    }\n\n    ctx.send({ data: ids } satisfies DeleteWebhooks.Response);\n  },\n\n  async triggerWebhook(ctx: Context) {\n    const { id } = ctx.params;\n\n    const webhook = await strapi.get('webhookStore').findWebhook(id);\n\n    const response = await strapi\n      .get('webhookRunner')\n      .run(webhook as Modules.WebhookStore.Webhook, 'trigger-test', {});\n\n    ctx.body = { data: response } satisfies TriggerWebhook.Response;\n  },\n};\n","import type { Context } from 'koa';\nimport type { GetRoutes, GetPermissions } from '../../../shared/contracts/content-api';\nimport '@strapi/types';\n\nexport default {\n  async getPermissions(ctx: Context) {\n    const actionsMap = await strapi.contentAPI.permissions.getActionsMap();\n\n    ctx.send({ data: actionsMap } satisfies GetPermissions.Response);\n  },\n\n  async getRoutes(ctx: Context) {\n    const routesMap = await strapi.contentAPI.getRoutesMap();\n\n    ctx.send({ data: routesMap } satisfies GetRoutes.Response);\n  },\n};\n","import type { Core } from '@strapi/types';\nimport * as yup from 'yup';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport type { GetRecentDocuments } from '../../../shared/contracts/homepage';\n\nconst createHomepageController = () => {\n  const homepageService = getService('homepage');\n\n  const recentDocumentParamsSchema = yup.object().shape({\n    action: yup\n      .mixed<GetRecentDocuments.Request['query']['action']>()\n      .oneOf(['update', 'publish'])\n      .required(),\n  });\n\n  return {\n    async getRecentDocuments(ctx): Promise<GetRecentDocuments.Response> {\n      let action;\n\n      try {\n        action = (await recentDocumentParamsSchema.validate(ctx.query)).action;\n      } catch (error) {\n        if (error instanceof yup.ValidationError) {\n          throw new errors.ValidationError(error.message);\n        }\n        throw error;\n      }\n\n      if (action === 'publish') {\n        return { data: await homepageService.getRecentlyPublishedDocuments() };\n      }\n\n      return { data: await homepageService.getRecentlyUpdatedDocuments() };\n    },\n  } satisfies Core.Controller;\n};\n\nexport { createHomepageController };\n","import type {} from 'koa-body';\n\nimport admin from './admin';\nimport apiToken from './api-token';\nimport authenticatedUser from './authenticated-user';\nimport authentication from './authentication';\nimport permission from './permission';\nimport role from './role';\nimport transfer from './transfer';\nimport user from './user';\nimport webhooks from './webhooks';\nimport contentApi from './content-api';\nimport { createHomepageController } from './homepage';\n\nexport default {\n  admin,\n  'api-token': apiToken,\n  'authenticated-user': authenticatedUser,\n  authentication,\n  permission,\n  role,\n  transfer,\n  user,\n  webhooks,\n  'content-api': contentApi,\n  homepage: createHomepageController,\n};\n","/**\n * Lifecycle callbacks for the `Permission` model.\n */\n\nexport default {\n  collectionName: 'admin_permissions',\n  info: {\n    name: 'Permission',\n    description: '',\n    singularName: 'permission',\n    pluralName: 'permissions',\n    displayName: 'Permission',\n  },\n  options: {},\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    action: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n    },\n    actionParameters: {\n      type: 'json',\n      configurable: false,\n      required: false,\n      default: {},\n    },\n    subject: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: false,\n    },\n    properties: {\n      type: 'json',\n      configurable: false,\n      required: false,\n      default: {},\n    },\n    conditions: {\n      type: 'json',\n      configurable: false,\n      required: false,\n      default: [],\n    },\n    role: {\n      configurable: false,\n      type: 'relation',\n      relation: 'manyToOne',\n      inversedBy: 'permissions',\n      target: 'admin::role',\n    },\n  },\n};\n","export default {\n  collectionName: 'admin_users',\n  info: {\n    name: 'User',\n    description: '',\n    singularName: 'user',\n    pluralName: 'users',\n    displayName: 'User',\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    firstname: {\n      type: 'string',\n      unique: false,\n      minLength: 1,\n      configurable: false,\n      required: false,\n    },\n    lastname: {\n      type: 'string',\n      unique: false,\n      minLength: 1,\n      configurable: false,\n      required: false,\n    },\n    username: {\n      type: 'string',\n      unique: false,\n      configurable: false,\n      required: false,\n    },\n    email: {\n      type: 'email',\n      minLength: 6,\n      configurable: false,\n      required: true,\n      unique: true,\n      private: true,\n    },\n    password: {\n      type: 'password',\n      minLength: 6,\n      configurable: false,\n      required: false,\n      private: true,\n      searchable: false,\n    },\n    resetPasswordToken: {\n      type: 'string',\n      configurable: false,\n      private: true,\n      searchable: false,\n    },\n    registrationToken: {\n      type: 'string',\n      configurable: false,\n      private: true,\n      searchable: false,\n    },\n    isActive: {\n      type: 'boolean',\n      default: false,\n      configurable: false,\n      private: true,\n    },\n    roles: {\n      configurable: false,\n      private: true,\n      type: 'relation',\n      relation: 'manyToMany',\n      inversedBy: 'users',\n      target: 'admin::role',\n      // FIXME: Allow setting this\n      collectionName: 'strapi_users_roles',\n    },\n    blocked: {\n      type: 'boolean',\n      default: false,\n      configurable: false,\n      private: true,\n    },\n    preferedLanguage: {\n      type: 'string',\n      configurable: false,\n      required: false,\n      searchable: false,\n    },\n  },\n  config: {\n    attributes: {\n      resetPasswordToken: {\n        hidden: true,\n      },\n      registrationToken: {\n        hidden: true,\n      },\n    },\n  },\n};\n","/**\n * Lifecycle callbacks for the `Role` model.\n */\n\nexport default {\n  collectionName: 'admin_roles',\n  info: {\n    name: 'Role',\n    description: '',\n    singularName: 'role',\n    pluralName: 'roles',\n    displayName: 'Role',\n  },\n  options: {},\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      minLength: 1,\n      unique: true,\n      configurable: false,\n      required: true,\n    },\n    code: {\n      type: 'string',\n      minLength: 1,\n      unique: true,\n      configurable: false,\n      required: true,\n    },\n    description: {\n      type: 'string',\n      configurable: false,\n    },\n    users: {\n      configurable: false,\n      type: 'relation',\n      relation: 'manyToMany',\n      mappedBy: 'roles',\n      target: 'admin::user',\n    },\n    permissions: {\n      configurable: false,\n      type: 'relation',\n      relation: 'oneToMany',\n      mappedBy: 'role',\n      target: 'admin::permission',\n    },\n  },\n};\n","import constants from '../services/constants';\n\nexport default {\n  collectionName: 'strapi_api_tokens',\n  info: {\n    name: 'Api Token',\n    singularName: 'api-token',\n    pluralName: 'api-tokens',\n    displayName: 'Api Token',\n    description: '',\n  },\n  options: {},\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n      unique: true,\n    },\n    description: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: false,\n      default: '',\n    },\n    type: {\n      type: 'enumeration',\n      enum: Object.values(constants.API_TOKEN_TYPE),\n      configurable: false,\n      required: true,\n      default: constants.API_TOKEN_TYPE.READ_ONLY,\n    },\n    accessKey: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n      searchable: false,\n    },\n    lastUsedAt: {\n      type: 'datetime',\n      configurable: false,\n      required: false,\n    },\n    permissions: {\n      type: 'relation',\n      target: 'admin::api-token-permission',\n      relation: 'oneToMany',\n      mappedBy: 'token',\n      configurable: false,\n      required: false,\n    },\n    expiresAt: {\n      type: 'datetime',\n      configurable: false,\n      required: false,\n    },\n    lifespan: {\n      type: 'biginteger',\n      configurable: false,\n      required: false,\n    },\n  },\n};\n","export default {\n  collectionName: 'strapi_api_token_permissions',\n  info: {\n    name: 'API Token Permission',\n    description: '',\n    singularName: 'api-token-permission',\n    pluralName: 'api-token-permissions',\n    displayName: 'API Token Permission',\n  },\n  options: {},\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    action: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n    },\n    token: {\n      configurable: false,\n      type: 'relation',\n      relation: 'manyToOne',\n      inversedBy: 'permissions',\n      target: 'admin::api-token',\n    },\n  },\n};\n","export default {\n  collectionName: 'strapi_transfer_tokens',\n  info: {\n    name: 'Transfer Token',\n    singularName: 'transfer-token',\n    pluralName: 'transfer-tokens',\n    displayName: 'Transfer Token',\n    description: '',\n  },\n  options: {},\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n      unique: true,\n    },\n    description: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: false,\n      default: '',\n    },\n    accessKey: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n    },\n    lastUsedAt: {\n      type: 'datetime',\n      configurable: false,\n      required: false,\n    },\n    permissions: {\n      type: 'relation',\n      target: 'admin::transfer-token-permission',\n      relation: 'oneToMany',\n      mappedBy: 'token',\n      configurable: false,\n      required: false,\n    },\n    expiresAt: {\n      type: 'datetime',\n      configurable: false,\n      required: false,\n    },\n    lifespan: {\n      type: 'biginteger',\n      configurable: false,\n      required: false,\n    },\n  },\n};\n","export default {\n  collectionName: 'strapi_transfer_token_permissions',\n  info: {\n    name: 'Transfer Token Permission',\n    description: '',\n    singularName: 'transfer-token-permission',\n    pluralName: 'transfer-token-permissions',\n    displayName: 'Transfer Token Permission',\n  },\n  options: {},\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    action: {\n      type: 'string',\n      minLength: 1,\n      configurable: false,\n      required: true,\n    },\n    token: {\n      configurable: false,\n      type: 'relation',\n      relation: 'manyToOne',\n      inversedBy: 'permissions',\n      target: 'admin::transfer-token',\n    },\n  },\n};\n","import Permission from './Permission';\nimport User from './User';\nimport Role from './Role';\nimport apiToken from './api-token';\nimport apiTokenPermission from './api-token-permission';\nimport transferToken from './transfer-token';\nimport transferTokenPermission from './transfer-token-permission';\n\nexport default {\n  permission: { schema: Permission },\n  user: { schema: User },\n  role: { schema: Role },\n  'api-token': { schema: apiToken },\n  'api-token-permission': { schema: apiTokenPermission },\n  'transfer-token': { schema: transferToken },\n  'transfer-token-permission': { schema: transferTokenPermission },\n};\n","import type { Context, Next } from 'koa';\nimport path from 'path';\nimport utils from '@strapi/utils';\nimport { isString, has, toLower, get } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\n\nconst { RateLimitError } = utils.errors;\n\nexport default (config: any, { strapi }: { strapi: Core.Strapi }) =>\n  async (ctx: Context, next: Next) => {\n    let rateLimitConfig = strapi.config.get('admin.rateLimit') as any;\n\n    if (!rateLimitConfig) {\n      rateLimitConfig = {\n        enabled: true,\n      };\n    }\n\n    if (!has('enabled', rateLimitConfig)) {\n      rateLimitConfig.enabled = true;\n    }\n\n    if (rateLimitConfig.enabled === true) {\n      // TODO: TS - Do the dynamic import\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const rateLimit = require('koa2-ratelimit').RateLimit;\n\n      const requestEmail = get('request.body.email')(ctx);\n      const userEmail = isString(requestEmail) ? requestEmail.toLowerCase() : 'unknownEmail';\n\n      const requestPath = isString(ctx.request.path)\n        ? toLower(path.normalize(ctx.request.path)).replace(/\\/$/, '')\n        : 'invalidPath';\n\n      const loadConfig = {\n        interval: { min: 5 },\n        max: 5,\n        prefixKey: `${userEmail}:${requestPath}:${ctx.request.ip}`,\n        handler() {\n          throw new RateLimitError();\n        },\n        ...rateLimitConfig,\n        ...config,\n      };\n\n      return rateLimit.middleware(loadConfig)(ctx, next);\n    }\n\n    return next();\n  };\n","import type { Context, Next } from 'koa';\n\nimport { getService } from '../utils';\n\nexport default () => async (ctx: Context, next: Next) => {\n  const transferUtils = getService('transfer').utils;\n\n  const { hasValidTokenSalt, isRemoteTransferEnabled } = transferUtils;\n\n  // verify that data transfer is enabled\n  if (isRemoteTransferEnabled()) {\n    return next();\n  }\n\n  // if it has been manually disabled, return a not found\n  if (strapi.config.get('server.transfer.remote.enabled') === false) {\n    return ctx.notFound();\n  }\n\n  // if it's enabled but doesn't have a valid salt, throw a not implemented\n  if (!hasValidTokenSalt()) {\n    return ctx.notImplemented(\n      'The server configuration for data transfer is invalid. Please contact your server administrator.',\n      {\n        code: 'INVALID_TOKEN_SALT',\n      }\n    );\n  }\n\n  // This should never happen as long as we're handling individual scenarios above\n  throw new Error('Unexpected error while trying to access a data transfer route');\n};\n","import rateLimit from './rateLimit';\nimport dataTransfer from './data-transfer';\n\nexport { default as rateLimit } from './rateLimit';\nexport { default as dataTransfer } from './data-transfer';\n\nexport default {\n  rateLimit,\n  'data-transfer': dataTransfer,\n};\n","import type { Core } from '@strapi/types';\n\nimport executeCERegister from '../../../server/src/register';\n\nexport default async ({ strapi }: { strapi: Core.Strapi }) => {\n  await executeCERegister({ strapi });\n};\n","import type { Core } from '@strapi/types';\n\nexport const getService = (\n  name: string,\n  { strapi }: { strapi: Core.Strapi } = { strapi: global.strapi }\n) => {\n  return strapi.service(`admin::${name}`);\n};\n\nexport default {\n  getService,\n};\n","export default {\n  sso: [\n    {\n      uid: 'provider-login.read',\n      displayName: 'Read',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'single sign on',\n      subCategory: 'options',\n    },\n    {\n      uid: 'provider-login.update',\n      displayName: 'Update',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'single sign on',\n      subCategory: 'options',\n    },\n  ],\n  auditLogs: [\n    {\n      uid: 'audit-logs.read',\n      displayName: 'Read',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'audit logs',\n      subCategory: 'options',\n    },\n  ],\n};\n","import executeCEBootstrap from '../../../server/src/bootstrap';\nimport { getService } from './utils';\nimport actions from './config/admin-actions';\n\nexport default async (args: any) => {\n  const { actionProvider } = getService('permission');\n  const { persistTablesWithPrefix } = getService('persist-tables');\n\n  if (strapi.ee.features.isEnabled('sso')) {\n    await actionProvider.registerMany(actions.sso);\n  }\n\n  if (strapi.ee.features.isEnabled('audit-logs')) {\n    await persistTablesWithPrefix('strapi_audit_logs');\n    await actionProvider.registerMany(actions.auditLogs);\n  }\n\n  await getService('seat-enforcement').seatEnforcementWorkflow();\n  await executeCEBootstrap(args);\n};\n","import type { Core } from '@strapi/types';\nimport executeCEDestroy from '../../../server/src/destroy';\n\nexport default async ({ strapi }: { strapi: Core.Strapi }) => {\n  await executeCEDestroy();\n};\n","export default {};\n","import { isEmpty } from 'lodash/fp';\n\nexport const isSsoLocked = async (user: any) => {\n  if (!strapi.ee.features.isEnabled('sso')) {\n    return false;\n  }\n\n  if (!user) {\n    throw new Error('Missing user object');\n  }\n\n  // check if any roles are locked\n  const adminStore = await strapi.store({ type: 'core', name: 'admin' });\n  const { providers } = (await adminStore.get({ key: 'auth' })) as any;\n  const lockedRoles = providers.ssoLockedRoles ?? [];\n  if (isEmpty(lockedRoles)) {\n    return false;\n  }\n\n  const roles =\n    // If the roles are pre-loaded for the given user, then use them\n    user.roles ??\n    // Otherwise, try to load the role based on the given user ID\n    (await strapi.db.query('admin::user').load(user, 'roles', { roles: { fields: ['id'] } })) ??\n    // If the query fails somehow, default to an empty array\n    [];\n\n  // Check if any of the user's roles are in lockedRoles\n  const isLocked = lockedRoles.some((lockedId: string) =>\n    // lockedRoles will be a string to avoid issues with frontend and bigints\n    roles.some((role: any) => lockedId === role.id.toString())\n  );\n\n  return isLocked;\n};\n\nexport default {\n  isSsoLocked,\n};\n","import _ from 'lodash';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport { isSsoLocked } from '../utils/sso-lock';\n\nconst { ApplicationError } = errors;\n/**\n * Send an email to the user if it exists and is not locked to SSO\n * If those conditions are not met, nothing happens\n *\n * @param {Object} param params\n * @param {string} param.email user email for which to reset the password\n */\nconst forgotPassword = async ({ email }: any = {}) => {\n  const user = await strapi.db.query('admin::user').findOne({ where: { email, isActive: true } });\n\n  if (!user || (await isSsoLocked(user))) {\n    return;\n  }\n\n  const resetPasswordToken = getService('token').createToken();\n  await getService('user').updateById(user.id, { resetPasswordToken });\n\n  // Send an email to the admin.\n  const url = `${strapi.config.get(\n    'admin.absoluteUrl'\n  )}/auth/reset-password?code=${resetPasswordToken}`;\n  return strapi\n    .plugin('email')\n    .service('email')\n    .sendTemplatedEmail(\n      {\n        to: user.email,\n        from: strapi.config.get('admin.forgotPassword.from'),\n        replyTo: strapi.config.get('admin.forgotPassword.replyTo'),\n      },\n      strapi.config.get('admin.forgotPassword.emailTemplate'),\n      {\n        url,\n        user: _.pick(user, ['email', 'firstname', 'lastname', 'username']),\n      }\n    )\n    .catch((err: unknown) => {\n      // log error server side but do not disclose it to the user to avoid leaking informations\n      strapi.log.error(err);\n    });\n};\n\n/**\n * Reset a user password\n * @param {Object} param params\n * @param {string} param.resetPasswordToken token generated to request a password reset\n * @param {string} param.password new user password\n */\nconst resetPassword = async ({ resetPasswordToken, password }: any = {}) => {\n  const matchingUser = await strapi.db\n    .query('admin::user')\n    .findOne({ where: { resetPasswordToken, isActive: true } });\n\n  if (!matchingUser || (await isSsoLocked(matchingUser))) {\n    throw new ApplicationError();\n  }\n\n  return getService('user').updateById(matchingUser.id, {\n    password,\n    resetPasswordToken: null,\n  });\n};\n\nexport default {\n  forgotPassword,\n  resetPassword,\n};\n","import '@strapi/types';\n\nexport default () => {\n  const registry = new Map();\n\n  Object.assign(registry, {\n    register(provider: unknown) {\n      if (strapi.isLoaded) {\n        throw new Error(`You can't register new provider after the bootstrap`);\n      }\n\n      // TODO\n      // @ts-expect-error check map types\n      this.set(provider.uid, provider);\n    },\n\n    registerMany(providers: unknown[]) {\n      providers.forEach((provider) => {\n        this.register(provider);\n      });\n    },\n\n    getAll(): unknown[] {\n      // TODO\n      // @ts-expect-error check map types\n      return Array.from(this.values());\n    },\n  });\n\n  return registry;\n};\n","import '@strapi/types';\nimport passport from '../../../../../server/src/services/passport';\nimport createProviderRegistry from './provider-registry';\n\nexport const providerRegistry = createProviderRegistry();\nconst errorMessage = 'SSO is disabled. Its functionnalities cannot be accessed.';\n\nexport const getStrategyCallbackURL = (providerName: string) => {\n  if (!strapi.ee.features.isEnabled('sso')) {\n    throw new Error(errorMessage);\n  }\n\n  return `/admin/connect/${providerName}`;\n};\n\nexport const syncProviderRegistryWithConfig = () => {\n  if (!strapi.ee.features.isEnabled('sso')) {\n    throw new Error(errorMessage);\n  }\n\n  const { providers = [] } = strapi.config.get('admin.auth', {}) as any;\n\n  // TODO\n  // @ts-expect-error check map types\n  providerRegistry.registerMany(providers);\n};\n\nexport const SSOAuthEventsMapper = {\n  onSSOAutoRegistration: 'admin.auth.autoRegistration',\n};\n\nexport default {\n  providerRegistry,\n  getStrategyCallbackURL,\n  syncProviderRegistryWithConfig,\n  authEventsMapper: { ...passport.authEventsMapper, ...SSOAuthEventsMapper },\n};\n","import { errors } from '@strapi/utils';\nimport createLocalStrategy from '../../../../server/src/services/passport/local-strategy';\nimport sso from './passport/sso';\nimport { isSsoLocked } from '../utils/sso-lock';\n\nconst { UnauthorizedError } = errors;\n\nconst localStrategyMiddleware = async ([error, user, message]: any, done: any) => {\n  // if we got a user, we need to check that it's not sso locked\n  if (user && !error && (await isSsoLocked(user))) {\n    return done(\n      new UnauthorizedError('Login not allowed, please contact your administrator', {\n        code: 'LOGIN_NOT_ALLOWED',\n      }),\n      user,\n      message\n    );\n  }\n\n  return done(error, user, message);\n};\n\nconst getPassportStrategies = () => {\n  if (!strapi.ee.features.isEnabled('sso')) {\n    return [createLocalStrategy(strapi)];\n  }\n\n  const localStrategy = createLocalStrategy(strapi, localStrategyMiddleware);\n\n  if (!strapi.isLoaded) {\n    sso.syncProviderRegistryWithConfig();\n  }\n\n  // TODO\n  // @ts-expect-error check map types\n  const providers = sso.providerRegistry.getAll();\n  const strategies = providers.map((provider: any) => provider.createStrategy(strapi));\n\n  return [localStrategy, ...strategies];\n};\n\nexport default {\n  getPassportStrategies,\n  ...sso,\n};\n","import { toString } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\n\nconst { ApplicationError } = errors;\n\nconst ssoCheckRolesIdForDeletion = async (ids: any) => {\n  const adminStore = await strapi.store({ type: 'core', name: 'admin' });\n\n  const {\n    providers: { defaultRole },\n  } = (await adminStore.get({ key: 'auth' })) as any;\n\n  for (const roleId of ids) {\n    if (defaultRole && toString(defaultRole) === toString(roleId)) {\n      throw new ApplicationError(\n        'This role is used as the default SSO role. Make sure to change this configuration before deleting the role'\n      );\n    }\n  }\n};\n\nexport default {\n  ssoCheckRolesIdForDeletion,\n};\n","import _ from 'lodash';\nimport { pipe, map, castArray, toNumber } from 'lodash/fp';\nimport { arrays, errors } from '@strapi/utils';\nimport { hasSuperAdminRole } from '../../../../server/src/domain/user';\nimport constants from '../../../../server/src/services/constants';\nimport { getService } from '../utils';\n\nconst { ValidationError } = errors;\nconst { SUPER_ADMIN_CODE } = constants;\n\n/** Checks if ee disabled users list needs to be updated\n * @param {string} id\n * @param {object} input\n */\nconst updateEEDisabledUsersList = async (id: string, input: any) => {\n  const disabledUsers = await getService('seat-enforcement').getDisabledUserList();\n\n  if (!disabledUsers) {\n    return;\n  }\n\n  const user = disabledUsers.find((user: any) => user.id === Number(id));\n  if (!user) {\n    return;\n  }\n\n  if (user.isActive !== input.isActive) {\n    const newDisabledUsersList = disabledUsers.filter((user: any) => user.id !== Number(id));\n    await strapi.store.set({\n      type: 'ee',\n      key: 'disabled_users',\n      value: newDisabledUsersList,\n    });\n  }\n};\n\nconst castNumberArray = pipe(castArray, map(toNumber));\n\nconst removeFromEEDisabledUsersList = async (ids: unknown) => {\n  let idsToCheck: any;\n  if (typeof ids === 'object') {\n    idsToCheck = castNumberArray(ids);\n  } else {\n    idsToCheck = [Number(ids)];\n  }\n\n  const disabledUsers = await getService('seat-enforcement').getDisabledUserList();\n\n  if (!disabledUsers) {\n    return;\n  }\n\n  const newDisabledUsersList = disabledUsers.filter((user: any) => !idsToCheck.includes(user.id));\n  await strapi.store.set({\n    type: 'ee',\n    key: 'disabled_users',\n    value: newDisabledUsersList,\n  });\n};\n\n/**\n * Update a user in database\n * @param id query params to find the user to update\n * @param attributes A partial user object\n * @returns {Promise<user>}\n */\nconst updateById = async (id: any, attributes: any) => {\n  // Check at least one super admin remains\n  if (_.has(attributes, 'roles')) {\n    const lastAdminUser = await isLastSuperAdminUser(id);\n    const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n    const willRemoveSuperAdminRole = !arrays.includesString(attributes.roles, superAdminRole.id);\n\n    if (lastAdminUser && willRemoveSuperAdminRole) {\n      throw new ValidationError('You must have at least one user with super admin role.');\n    }\n  }\n\n  // cannot disable last super admin\n  if (attributes.isActive === false) {\n    const lastAdminUser = await isLastSuperAdminUser(id);\n    if (lastAdminUser) {\n      throw new ValidationError('You must have at least one user with super admin role.');\n    }\n  }\n\n  // hash password if a new one is sent\n  if (_.has(attributes, 'password')) {\n    const hashedPassword = await getService('auth').hashPassword(attributes.password);\n\n    const updatedUser = await strapi.db.query('admin::user').update({\n      where: { id },\n      data: {\n        ...attributes,\n        password: hashedPassword,\n      },\n      populate: ['roles'],\n    });\n\n    strapi.eventHub.emit('user.update', { user: sanitizeUser(updatedUser) });\n\n    return updatedUser;\n  }\n\n  const updatedUser = await strapi.db.query('admin::user').update({\n    where: { id },\n    data: attributes,\n    populate: ['roles'],\n  });\n\n  await updateEEDisabledUsersList(id, attributes);\n\n  if (updatedUser) {\n    strapi.eventHub.emit('user.update', { user: sanitizeUser(updatedUser) });\n  }\n\n  return updatedUser;\n};\n\n/** Delete a user\n * @param id id of the user to delete\n * @returns {Promise<user>}\n */\nconst deleteById = async (id: unknown) => {\n  // Check at least one super admin remains\n  const userToDelete = await strapi.db.query('admin::user').findOne({\n    where: { id },\n    populate: ['roles'],\n  });\n\n  if (!userToDelete) {\n    return null;\n  }\n\n  if (userToDelete) {\n    if (userToDelete.roles.some((r: any) => r.code === SUPER_ADMIN_CODE)) {\n      const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n      if (superAdminRole.usersCount === 1) {\n        throw new ValidationError('You must have at least one user with super admin role.');\n      }\n    }\n  }\n\n  const deletedUser = await strapi.db\n    .query('admin::user')\n    .delete({ where: { id }, populate: ['roles'] });\n\n  await removeFromEEDisabledUsersList(id);\n\n  strapi.eventHub.emit('user.delete', { user: sanitizeUser(deletedUser) });\n\n  return deletedUser;\n};\n\n/** Delete a user\n * @param ids ids of the users to delete\n * @returns {Promise<user>}\n */\nconst deleteByIds = async (ids: any) => {\n  // Check at least one super admin remains\n  const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n  const nbOfSuperAdminToDelete = await strapi.db.query('admin::user').count({\n    where: {\n      id: ids,\n      roles: { id: superAdminRole.id },\n    },\n  });\n\n  if (superAdminRole.usersCount === nbOfSuperAdminToDelete) {\n    throw new ValidationError('You must have at least one user with super admin role.');\n  }\n\n  const deletedUsers = [];\n  for (const id of ids) {\n    const deletedUser = await strapi.db.query('admin::user').delete({\n      where: { id },\n      populate: ['roles'],\n    });\n\n    deletedUsers.push(deletedUser);\n  }\n\n  await removeFromEEDisabledUsersList(ids);\n\n  strapi.eventHub.emit('user.delete', {\n    users: deletedUsers.map((deletedUser) => sanitizeUser(deletedUser)),\n  });\n\n  return deletedUsers;\n};\n\nconst sanitizeUserRoles = (role: unknown) => _.pick(role, ['id', 'name', 'description', 'code']);\n\n/**\n * Check if a user is the last super admin\n * @param {int|string} userId user's id to look for\n */\nconst isLastSuperAdminUser = async (userId: unknown) => {\n  const user = (await findOne(userId)) as any;\n  const superAdminRole = await getService('role').getSuperAdminWithUsersCount();\n\n  return superAdminRole.usersCount === 1 && hasSuperAdminRole(user);\n};\n\n/**\n * Remove private user fields\n * @param {Object} user - user to sanitize\n */\nconst sanitizeUser = (user: any) => {\n  return {\n    ..._.omit(user, ['password', 'resetPasswordToken', 'registrationToken', 'roles']),\n    roles: user.roles && user.roles.map(sanitizeUserRoles),\n  };\n};\n\n/**\n * Find one user\n */\nconst findOne = async (id: any, populate = ['roles']) => {\n  return strapi.db.query('admin::user').findOne({ where: { id }, populate });\n};\n\nconst getCurrentActiveUserCount = async () => {\n  return strapi.db.query('admin::user').count({ where: { isActive: true } });\n};\n\nexport default {\n  updateEEDisabledUsersList,\n  removeFromEEDisabledUsersList,\n  getCurrentActiveUserCount,\n  deleteByIds,\n  deleteById,\n  updateById,\n};\n","import { assign } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst getSSOProvidersList = async () => {\n  const { providerRegistry } = strapi.service('admin::passport');\n\n  return providerRegistry.getAll().map(({ uid }: { uid: string }) => uid);\n};\n\nconst sendUpdateProjectInformation = async (strapi: Core.Strapi) => {\n  let groupProperties = {};\n\n  const numberOfActiveAdminUsers = await getService('user').count({ isActive: true });\n  const numberOfAdminUsers = await getService('user').count();\n\n  if (strapi.ee.features.isEnabled('sso')) {\n    const SSOProviders = await getSSOProvidersList();\n\n    groupProperties = assign(groupProperties, {\n      SSOProviders,\n      isSSOConfigured: SSOProviders.length !== 0,\n    });\n  }\n\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    const numberOfContentReleases = await strapi\n      .db!.query('plugin::content-releases.release')\n      .count();\n\n    const numberOfPublishedContentReleases = await strapi\n      .db!.query('plugin::content-releases.release')\n      .count({\n        filters: { releasedAt: { $notNull: true } },\n      });\n\n    groupProperties = assign(groupProperties, {\n      numberOfContentReleases,\n      numberOfPublishedContentReleases,\n    });\n  }\n\n  groupProperties = assign(groupProperties, { numberOfActiveAdminUsers, numberOfAdminUsers });\n\n  strapi.telemetry.send('didUpdateProjectInformation', {\n    groupProperties,\n  });\n};\n\nconst startCron = (strapi: Core.Strapi) => {\n  strapi.cron.add({\n    sendProjectInformation: {\n      task: () => sendUpdateProjectInformation(strapi),\n      options: '0 0 0 * * *',\n    },\n  });\n};\n\nexport default { startCron, getSSOProvidersList, sendUpdateProjectInformation };\n","import { take, drop, map, prop, pick, reverse, isNil } from 'lodash/fp';\nimport { getService } from '../utils';\nimport constants from '../../../../server/src/services/constants';\n\nconst { SUPER_ADMIN_CODE } = constants;\n\n/**\n * Keeps the list of users disabled by the seat enforcement service\n */\nconst getDisabledUserList = async () => {\n  return strapi.store.get({ type: 'ee', key: 'disabled_users' });\n};\n\nconst enableMaximumUserCount = async (numberOfUsersToEnable: number) => {\n  const disabledUsers = (await getDisabledUserList()) as any;\n  const orderedDisabledUsers = reverse(disabledUsers);\n\n  const usersToEnable = take(numberOfUsersToEnable, orderedDisabledUsers);\n\n  await strapi.db.query('admin::user').updateMany({\n    where: { id: map(prop('id'), usersToEnable) },\n    data: { isActive: true },\n  });\n\n  const remainingDisabledUsers = drop(numberOfUsersToEnable, orderedDisabledUsers);\n\n  await strapi.store.set({\n    type: 'ee',\n    key: 'disabled_users',\n    value: remainingDisabledUsers,\n  });\n};\n\nconst disableUsersAboveLicenseLimit = async (numberOfUsersToDisable: number) => {\n  const currentlyDisabledUsers: any = (await getDisabledUserList()) ?? [];\n\n  const usersToDisable = [];\n  const nonSuperAdminUsersToDisable = await strapi.db.query('admin::user').findMany({\n    where: {\n      isActive: true,\n      roles: {\n        code: { $ne: SUPER_ADMIN_CODE },\n      },\n    },\n    orderBy: { createdAt: 'DESC' },\n    limit: numberOfUsersToDisable,\n  });\n\n  usersToDisable.push(...nonSuperAdminUsersToDisable);\n\n  if (nonSuperAdminUsersToDisable.length < numberOfUsersToDisable) {\n    const superAdminUsersToDisable = await strapi.db.query('admin::user').findMany({\n      where: {\n        isActive: true,\n        roles: { code: SUPER_ADMIN_CODE },\n      },\n      orderBy: { createdAt: 'DESC' },\n      limit: numberOfUsersToDisable - nonSuperAdminUsersToDisable.length,\n    });\n\n    usersToDisable.push(...superAdminUsersToDisable);\n  }\n\n  await strapi.db.query('admin::user').updateMany({\n    where: { id: map(prop('id'), usersToDisable) },\n    data: { isActive: false },\n  });\n\n  await strapi.store.set({\n    type: 'ee',\n    key: 'disabled_users',\n    value: currentlyDisabledUsers.concat(map(pick(['id', 'isActive']), usersToDisable)),\n  });\n};\n\nconst syncDisabledUserRecords = async () => {\n  const disabledUsers = await strapi.store.get({ type: 'ee', key: 'disabled_users' });\n\n  if (!disabledUsers) {\n    return;\n  }\n\n  await strapi.db.query('admin::user').updateMany({\n    where: { id: map(prop('id'), disabledUsers) },\n    data: { isActive: false },\n  });\n};\n\nconst seatEnforcementWorkflow = async () => {\n  const adminSeats = strapi.ee.seats;\n  if (isNil(adminSeats)) {\n    return;\n  }\n\n  // TODO: we need to make sure an admin can decide to disable specific user and reactivate others\n  await syncDisabledUserRecords();\n\n  const currentActiveUserCount = await getService('user').getCurrentActiveUserCount();\n\n  const adminSeatsLeft = adminSeats - currentActiveUserCount;\n\n  if (adminSeatsLeft > 0) {\n    await enableMaximumUserCount(adminSeatsLeft);\n  } else if (adminSeatsLeft < 0) {\n    await disableUsersAboveLicenseLimit(-adminSeatsLeft);\n  }\n};\n\nexport default {\n  seatEnforcementWorkflow,\n  getDisabledUserList,\n};\n","import type { Core } from '@strapi/types';\nimport { differenceWith, isEqual } from 'lodash/fp';\n\nexport interface PersistedTable {\n  name: string;\n  dependsOn?: Array<{ name: string }>;\n}\n\n/**\n * Transform table name to the object format\n */\nconst transformTableName = (table: string | PersistedTable) => {\n  if (typeof table === 'string') {\n    return { name: table };\n  }\n  return table;\n};\n\n/**\n * Finds all tables in the database matching the regular expression\n * @param {Object} ctx\n * @param {Strapi} ctx.strapi\n * @param {RegExp} regex\n * @returns {Promise<string[]>}\n */\nexport async function findTables({ strapi }: { strapi: Core.Strapi }, regex: any) {\n  const tables = await strapi.db.dialect.schemaInspector.getTables();\n  return tables.filter((tableName: string) => regex.test(tableName));\n}\n\n/**\n * Add tables name to the reserved tables in core store\n */\nasync function addPersistTables(\n  { strapi }: { strapi: Core.Strapi },\n  tableNames: Array<string | PersistedTable>\n) {\n  const persistedTables = await getPersistedTables({ strapi });\n  const tables = tableNames.map(transformTableName);\n\n  // Get new tables to be persisted, remove tables if they already were persisted\n  const notPersistedTableNames = differenceWith(isEqual, tables, persistedTables);\n  // Remove tables that are going to be changed\n  const tablesToPersist = differenceWith(\n    (t1: any, t2: any) => t1.name === t2.name,\n    persistedTables,\n    notPersistedTableNames\n  );\n\n  if (!notPersistedTableNames.length) {\n    return;\n  }\n\n  // @ts-expect-error lodash types\n  tablesToPersist.push(...notPersistedTableNames);\n  await strapi.store.set({\n    type: 'core',\n    key: 'persisted_tables',\n    value: tablesToPersist,\n  });\n}\n\n/**\n * Get all reserved table names from the core store\n * @param {Object} ctx\n * @param {Strapi} ctx.strapi\n * @param {RegExp} regex\n * @returns {Promise<string[]>}\n */\n\nasync function getPersistedTables({ strapi }: { strapi: Core.Strapi }) {\n  const persistedTables: any = await strapi.store.get({\n    type: 'core',\n    key: 'persisted_tables',\n  });\n\n  return (persistedTables || []).map(transformTableName);\n}\n\n/**\n * Set all reserved table names in the core store\n * @param {Object} ctx\n * @param {Strapi} ctx.strapi\n * @param {Array<string|{ table: string; dependsOn?: Array<{ table: string;}> }>} tableNames\n * @returns {Promise<void>}\n */\nasync function setPersistedTables(\n  { strapi }: { strapi: Core.Strapi },\n  tableNames: Array<string | PersistedTable>\n) {\n  await strapi.store.set({\n    type: 'core',\n    key: 'persisted_tables',\n    value: tableNames,\n  });\n}\n/**\n * Add all table names that start with a prefix to the reserved tables in\n * core store\n * @param {string} tableNamePrefix\n * @return {Promise<void>}\n */\n\nexport const persistTablesWithPrefix = async (tableNamePrefix: string) => {\n  const tableNameRegex = new RegExp(`^${tableNamePrefix}.*`);\n  const tableNames = await findTables({ strapi }, tableNameRegex);\n\n  await addPersistTables({ strapi }, tableNames);\n};\n\n/**\n * Remove all table names that end with a suffix from the reserved tables in core store\n * @param {string} tableNameSuffix\n * @return {Promise<void>}\n */\nexport const removePersistedTablesWithSuffix = async (tableNameSuffix: string) => {\n  const tableNameRegex = new RegExp(`.*${tableNameSuffix}$`);\n  const persistedTables = await getPersistedTables({ strapi });\n\n  const filteredPersistedTables = persistedTables.filter((table: any) => {\n    return !tableNameRegex.test(table.name);\n  });\n\n  if (filteredPersistedTables.length === persistedTables.length) {\n    return;\n  }\n\n  await setPersistedTables({ strapi }, filteredPersistedTables);\n};\n\n/**\n * Add tables to the reserved tables in core store\n */\nexport const persistTables = async (tables: Array<string | PersistedTable>) => {\n  await addPersistTables({ strapi }, tables);\n};\n\nexport default {\n  persistTablesWithPrefix,\n  removePersistedTablesWithSuffix,\n  persistTables,\n  findTables,\n};\n","import auth from './auth';\nimport passport from './passport';\nimport role from './role';\nimport user from './user';\nimport metrics from './metrics';\nimport seatEnforcement from './seat-enforcement';\nimport persistTables from './persist-tables';\n\nexport default {\n  auth,\n  passport,\n  role,\n  user,\n  metrics,\n  'seat-enforcement': seatEnforcement,\n  'persist-tables': persistTables,\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst providerOptionsUpdateSchema = yup.object().shape({\n  autoRegister: yup.boolean().required(),\n  defaultRole: yup\n    .strapiID()\n    .when('autoRegister', (value, initSchema) => {\n      return value ? initSchema.required() : initSchema.nullable();\n    })\n    .test('is-valid-role', 'You must submit a valid default role', (roleId) => {\n      if (roleId === null) {\n        return true;\n      }\n      return strapi.service('admin::role').exists({ id: roleId });\n    }),\n  ssoLockedRoles: yup\n    .array()\n    .nullable()\n    .of(\n      yup\n        .strapiID()\n        .test(\n          'is-valid-role',\n          'You must submit a valid role for the SSO Locked roles',\n          (roleId) => {\n            return strapi.service('admin::role').exists({ id: roleId });\n          }\n        )\n    ),\n});\n\nexport const validateProviderOptionsUpdate = validateYupSchema(providerOptionsUpdateSchema);\n\nexport default {\n  validateProviderOptionsUpdate,\n};\n","export const PROVIDER_REDIRECT_BASE = '/auth/login';\nexport const PROVIDER_REDIRECT_SUCCESS = `${PROVIDER_REDIRECT_BASE}/success`;\nexport const PROVIDER_REDIRECT_ERROR = `${PROVIDER_REDIRECT_BASE}/error`;\n\nexport default {\n  PROVIDER_REDIRECT_BASE,\n  PROVIDER_REDIRECT_SUCCESS,\n  PROVIDER_REDIRECT_ERROR,\n};\n","import { mapValues } from 'lodash/fp';\nimport { PROVIDER_REDIRECT_ERROR, PROVIDER_REDIRECT_SUCCESS } from './constants';\n\nconst PROVIDER_URLS_MAP = {\n  success: PROVIDER_REDIRECT_SUCCESS,\n  error: PROVIDER_REDIRECT_ERROR,\n};\n\nexport const getAdminStore = async () => strapi.store({ type: 'core', name: 'admin' });\n\nexport const getPrefixedRedirectUrls = () => {\n  const { url: adminUrl } = strapi.config.get('admin') as any;\n  const prefixUrl = (url: string) => `${adminUrl || '/admin'}${url}`;\n\n  return mapValues(prefixUrl, PROVIDER_URLS_MAP);\n};\n\nexport default {\n  getAdminStore,\n  getPrefixedRedirectUrls,\n};\n","import type { Core } from '@strapi/types';\nimport passport from 'koa-passport';\nimport { getService } from '../../utils';\nimport utils from './utils';\n\nconst defaultConnectionError = () => new Error('Invalid connection payload');\n\nexport const authenticate: Core.MiddlewareHandler = async (ctx, next) => {\n  const {\n    params: { provider },\n  } = ctx;\n  const redirectUrls = utils.getPrefixedRedirectUrls();\n\n  // @ts-expect-error - can not use null to authenticate\n  return passport.authenticate(provider, null, async (error, profile) => {\n    if (error || !profile || !profile.email) {\n      if (error) {\n        strapi.log.error(error);\n      }\n\n      strapi.eventHub.emit('admin.auth.error', {\n        error: error || defaultConnectionError(),\n        provider,\n      });\n\n      return ctx.redirect(redirectUrls.error);\n    }\n\n    const user = await getService('user').findOneByEmail(profile.email);\n    const scenario = user ? existingUserScenario : nonExistingUserScenario;\n\n    return scenario(ctx, next)(user || profile, provider);\n  })(ctx, next);\n};\n\nconst existingUserScenario: Core.MiddlewareHandler =\n  (ctx, next) => async (user: any, provider: any) => {\n    const redirectUrls = utils.getPrefixedRedirectUrls();\n\n    if (!user.isActive) {\n      strapi.eventHub.emit('admin.auth.error', {\n        error: new Error(`Deactivated user tried to login (${user.id})`),\n        provider,\n      });\n      return ctx.redirect(redirectUrls.error);\n    }\n\n    ctx.state.user = user;\n    return next();\n  };\n\nconst nonExistingUserScenario: Core.MiddlewareHandler =\n  (ctx, next) => async (profile: any, provider: any) => {\n    const { email, firstname, lastname, username } = profile;\n    const redirectUrls = utils.getPrefixedRedirectUrls();\n    const adminStore = await utils.getAdminStore();\n    const { providers } = (await adminStore.get({ key: 'auth' })) as any;\n\n    // We need at least the username or the firstname/lastname combination to register a new user\n    const isMissingRegisterFields = !username && (!firstname || !lastname);\n\n    if (!providers.autoRegister || !providers.defaultRole || isMissingRegisterFields) {\n      strapi.eventHub.emit('admin.auth.error', { error: defaultConnectionError(), provider });\n      return ctx.redirect(redirectUrls.error);\n    }\n\n    const defaultRole = await getService('role').findOne({ id: providers.defaultRole });\n\n    // If the default role has been misconfigured, redirect with an error\n    if (!defaultRole) {\n      strapi.eventHub.emit('admin.auth.error', { error: defaultConnectionError(), provider });\n      return ctx.redirect(redirectUrls.error);\n    }\n\n    // Register a new user with the information given by the provider and login with it\n    ctx.state.user = await getService('user').create({\n      email,\n      username,\n      firstname,\n      lastname,\n      roles: [defaultRole.id],\n      isActive: true,\n      registrationToken: null,\n    });\n\n    strapi.eventHub.emit('admin.auth.autoRegistration', {\n      user: ctx.state.user,\n      provider,\n    });\n\n    return next();\n  };\n\nexport const redirectWithAuth: Core.MiddlewareHandler = (ctx) => {\n  const {\n    params: { provider },\n  } = ctx;\n  const redirectUrls = utils.getPrefixedRedirectUrls();\n  const domain: string | undefined = strapi.config.get('admin.auth.domain');\n  const { user } = ctx.state;\n\n  const jwt = getService('token').createJwtToken(user);\n\n  const isProduction = strapi.config.get('environment') === 'production';\n\n  const cookiesOptions = { httpOnly: false, secure: isProduction, overwrite: true, domain };\n\n  const sanitizedUser = getService('user').sanitizeUser(user);\n  strapi.eventHub.emit('admin.auth.success', { user: sanitizedUser, provider });\n\n  ctx.cookies.set('jwtToken', jwt, cookiesOptions);\n  ctx.redirect(redirectUrls.success);\n};\n\nexport default {\n  authenticate,\n  redirectWithAuth,\n};\n","import type { Context, Next } from 'koa';\n\nimport { pick } from 'lodash/fp';\nimport compose from 'koa-compose';\nimport { errors } from '@strapi/utils';\nimport { validateProviderOptionsUpdate } from '../validation/authentication';\nimport { middlewares, utils } from './authentication-utils';\n\nconst toProviderDTO = pick(['uid', 'displayName', 'icon']);\nconst toProviderLoginOptionsDTO = pick(['autoRegister', 'defaultRole', 'ssoLockedRoles']);\n\nconst { ValidationError } = errors;\n\nconst providerAuthenticationFlow = compose([\n  middlewares.authenticate,\n  middlewares.redirectWithAuth,\n]);\n\nexport default {\n  async getProviders(ctx: Context) {\n    const { providerRegistry } = strapi.service('admin::passport');\n\n    ctx.body = providerRegistry.getAll().map(toProviderDTO);\n  },\n\n  async getProviderLoginOptions(ctx: Context) {\n    const adminStore = await utils.getAdminStore();\n    const { providers: providersOptions } = (await adminStore.get({ key: 'auth' })) as any;\n\n    ctx.body = {\n      data: toProviderLoginOptionsDTO(providersOptions),\n    };\n  },\n\n  async updateProviderLoginOptions(ctx: Context) {\n    const {\n      request: { body },\n    } = ctx;\n\n    await validateProviderOptionsUpdate(body);\n\n    const adminStore = await utils.getAdminStore();\n    const currentAuthOptions = (await adminStore.get({ key: 'auth' })) as any;\n    const newAuthOptions = { ...currentAuthOptions, providers: body };\n    await adminStore.set({ key: 'auth', value: newAuthOptions });\n\n    strapi.telemetry.send('didUpdateSSOSettings');\n\n    ctx.body = {\n      data: toProviderLoginOptionsDTO(newAuthOptions.providers),\n    };\n  },\n\n  providerLogin(ctx: Context, next: Next) {\n    const {\n      params: { provider: providerName },\n    } = ctx;\n\n    const { providerRegistry } = strapi.service('admin::passport');\n\n    if (!providerRegistry.has(providerName)) {\n      throw new ValidationError(`Invalid provider supplied: ${providerName}`);\n    }\n\n    return providerAuthenticationFlow(ctx, next);\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst roleCreateSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).required(),\n    description: yup.string().nullable(),\n  })\n  .noUnknown();\n\nconst rolesDeleteSchema = yup\n  .object()\n  .shape({\n    ids: yup\n      .array()\n      .of(yup.strapiID())\n      .min(1)\n      .required()\n      .test(\n        'roles-deletion-checks',\n        'Roles deletion checks have failed',\n        async function rolesDeletionChecks(ids) {\n          try {\n            await strapi.service('admin::role').checkRolesIdForDeletion(ids);\n\n            if (strapi.ee.features.isEnabled('sso')) {\n              await strapi.service('admin::role').ssoCheckRolesIdForDeletion(ids);\n            }\n          } catch (e: any) {\n            return this.createError({ path: 'ids', message: e.message });\n          }\n\n          return true;\n        }\n      ),\n  })\n  .noUnknown();\n\nconst roleDeleteSchema = yup\n  .strapiID()\n  .required()\n  .test(\n    'no-admin-single-delete',\n    'Role deletion checks have failed',\n    async function noAdminSingleDelete(id) {\n      try {\n        await strapi.service('admin::role').checkRolesIdForDeletion([id]);\n\n        if (strapi.ee.features.isEnabled('sso')) {\n          await strapi.service('admin::role').ssoCheckRolesIdForDeletion([id]);\n        }\n      } catch (e: any) {\n        return this.createError({ path: 'id', message: e.message });\n      }\n\n      return true;\n    }\n  );\n\nexport const validateRoleCreateInput = validateYupSchema(roleCreateSchema);\nexport const validateRolesDeleteInput = validateYupSchema(rolesDeleteSchema);\nexport const validateRoleDeleteInput = validateYupSchema(roleDeleteSchema);\n\nexport default {\n  validateRoleCreateInput,\n  validateRolesDeleteInput,\n  validateRoleDeleteInput,\n};\n","import type { Context } from 'koa';\n\nimport {\n  validateRoleCreateInput,\n  validateRoleDeleteInput,\n  validateRolesDeleteInput,\n} from '../validation/role';\nimport { getService } from '../utils';\n\nexport default {\n  /**\n   * Create a new role\n   * @param {KoaContext} ctx - koa context\n   */\n  async create(ctx: Context) {\n    await validateRoleCreateInput(ctx.request.body);\n\n    const roleService = getService('role');\n\n    const role = await roleService.create(ctx.request.body);\n    const sanitizedRole = roleService.sanitizeRole(role);\n\n    ctx.created({ data: sanitizedRole });\n  },\n\n  /**\n   * Delete a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async deleteOne(ctx: Context) {\n    const { id } = ctx.params;\n\n    await validateRoleDeleteInput(id);\n\n    const roleService = getService('role');\n\n    const roles = await roleService.deleteByIds([id]);\n\n    const sanitizedRole = roles.map((role: unknown) => roleService.sanitizeRole(role))[0] || null;\n\n    return ctx.deleted({\n      data: sanitizedRole,\n    });\n  },\n\n  /**\n   * delete several roles\n   * @param {KoaContext} ctx - koa context\n   */\n  async deleteMany(ctx: Context) {\n    const { body } = ctx.request;\n\n    await validateRolesDeleteInput(body);\n\n    const roleService = getService('role');\n\n    const roles = await roleService.deleteByIds(body.ids);\n    const sanitizedRoles = roles.map(roleService.sanitizeRole);\n\n    return ctx.deleted({\n      data: sanitizedRoles,\n    });\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\nimport { schemas } from '../../../../server/src/validation/user';\n\nconst ssoUserCreationInputExtension = yup\n  .object()\n  .shape({\n    useSSORegistration: yup.boolean(),\n  })\n  .noUnknown();\n\nexport const validateUserCreationInput = (data: any) => {\n  let schema = schemas.userCreationSchema;\n\n  if (strapi.ee.features.isEnabled('sso')) {\n    schema = schema.concat(ssoUserCreationInputExtension);\n  }\n\n  return validateYupSchema(schema)(data);\n};\n\nexport default {\n  validateUserCreationInput,\n};\n","import type { Context } from 'koa';\n\nimport _ from 'lodash';\nimport { pick, isNil } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport { validateUserCreationInput } from '../validation/user';\nimport { validateUserUpdateInput } from '../../../../server/src/validation/user';\nimport { getService } from '../utils';\nimport { isSsoLocked } from '../utils/sso-lock';\n\nconst { ApplicationError, ForbiddenError } = errors;\n\nconst pickUserCreationAttributes = pick(['firstname', 'lastname', 'email', 'roles']);\n\nconst hasAdminSeatsAvaialble = async () => {\n  if (!strapi.EE) {\n    return true;\n  }\n\n  const permittedSeats = strapi.ee.seats as any;\n  if (isNil(permittedSeats)) {\n    return true;\n  }\n\n  const userCount = await strapi.service('admin::user').getCurrentActiveUserCount();\n\n  if (userCount < permittedSeats) {\n    return true;\n  }\n};\n\nexport default {\n  async create(ctx: Context) {\n    if (!(await hasAdminSeatsAvaialble())) {\n      throw new ForbiddenError('License seat limit reached. You cannot create a new user');\n    }\n\n    const { body } = ctx.request;\n    const cleanData = { ...body, email: _.get(body, `email`, ``).toLowerCase() };\n\n    await validateUserCreationInput(cleanData);\n\n    const attributes = pickUserCreationAttributes(cleanData);\n    const { useSSORegistration } = cleanData;\n\n    const userAlreadyExists = await getService('user').exists({ email: attributes.email });\n\n    if (userAlreadyExists) {\n      throw new ApplicationError('Email already taken');\n    }\n\n    if (useSSORegistration) {\n      Object.assign(attributes, { registrationToken: null, isActive: true });\n    }\n\n    const createdUser = await getService('user').create(attributes);\n    const userInfo = getService('user').sanitizeUser(createdUser);\n\n    // Note: We need to assign manually the registrationToken to the\n    // final user payload so that it's not removed in the sanitation process.\n    Object.assign(userInfo, { registrationToken: createdUser.registrationToken });\n\n    ctx.created({ data: userInfo });\n  },\n\n  async update(ctx: Context) {\n    const { id } = ctx.params;\n    const { body: input } = ctx.request;\n\n    await validateUserUpdateInput(input);\n\n    if (_.has(input, 'email')) {\n      const uniqueEmailCheck = await getService('user').exists({\n        id: { $ne: id },\n        email: input.email,\n      });\n\n      if (uniqueEmailCheck) {\n        throw new ApplicationError('A user with this email address already exists');\n      }\n    }\n\n    const user = await getService('user').findOne(id, null);\n\n    if (!(await hasAdminSeatsAvaialble()) && !user.isActive && input.isActive) {\n      throw new ForbiddenError('License seat limit reached. You cannot active this user');\n    }\n\n    const updatedUser = await getService('user').updateById(id, input);\n\n    if (!updatedUser) {\n      return ctx.notFound('User does not exist');\n    }\n\n    ctx.body = {\n      data: getService('user').sanitizeUser(updatedUser),\n    };\n  },\n\n  async isSSOLocked(ctx: Context) {\n    const { user } = ctx.state;\n    const isSSOLocked = await isSsoLocked(user);\n\n    ctx.body = {\n      data: {\n        isSSOLocked,\n      },\n    };\n  },\n};\n","import { isNil } from 'lodash/fp';\nimport { env } from '@strapi/utils';\nimport { getService } from '../utils';\n\nexport default {\n  // NOTE: Overrides CE admin controller\n  async getProjectType() {\n    const flags = strapi.config.get('admin.flags', {});\n    try {\n      return { data: { isEE: strapi.EE, features: strapi.ee.features.list(), flags } };\n    } catch (err) {\n      return { data: { isEE: false, features: [], flags } };\n    }\n  },\n\n  async licenseLimitInformation() {\n    const permittedSeats = strapi.ee.seats;\n\n    let shouldNotify = false;\n    let licenseLimitStatus = null;\n    let enforcementUserCount;\n\n    const currentActiveUserCount = await getService('user').getCurrentActiveUserCount();\n\n    const eeDisabledUsers = await getService('seat-enforcement').getDisabledUserList();\n\n    if (eeDisabledUsers) {\n      enforcementUserCount = currentActiveUserCount + eeDisabledUsers.length;\n    } else {\n      enforcementUserCount = currentActiveUserCount;\n    }\n\n    if (!isNil(permittedSeats) && enforcementUserCount > permittedSeats) {\n      shouldNotify = true;\n      licenseLimitStatus = 'OVER_LIMIT';\n    }\n\n    if (!isNil(permittedSeats) && enforcementUserCount === permittedSeats) {\n      shouldNotify = true;\n      licenseLimitStatus = 'AT_LIMIT';\n    }\n\n    const data = {\n      enforcementUserCount,\n      currentActiveUserCount,\n      permittedSeats,\n      shouldNotify,\n      shouldStopCreate: isNil(permittedSeats) ? false : currentActiveUserCount >= permittedSeats,\n      licenseLimitStatus,\n      isHostedOnStrapiCloud: env('STRAPI_HOSTING', null) === 'strapi.cloud',\n      features: strapi.ee.features.list() ?? [],\n    };\n\n    return { data };\n  },\n};\n","import authentication from './authentication';\nimport role from './role';\nimport user from './user';\nimport admin from './admin';\n\nexport default {\n  authentication,\n  role,\n  user,\n  admin,\n};\n","import type { Core } from '@strapi/types';\n\nexport const enableFeatureMiddleware =\n  (featureName: string): Core.MiddlewareHandler =>\n  (ctx, next) => {\n    if (strapi.ee.features.isEnabled(featureName)) {\n      return next();\n    }\n\n    ctx.status = 404;\n  };\n","import { enableFeatureMiddleware } from './utils';\n\nexport default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/providers',\n      handler: 'authentication.getProviders',\n      config: {\n        middlewares: [enableFeatureMiddleware('sso')],\n        auth: false,\n      },\n    },\n    {\n      method: 'GET',\n      path: '/connect/:provider',\n      handler: 'authentication.providerLogin',\n      config: {\n        middlewares: [enableFeatureMiddleware('sso')],\n        auth: false,\n      },\n    },\n    {\n      method: 'POST',\n      path: '/connect/:provider',\n      handler: 'authentication.providerLogin',\n      config: {\n        middlewares: [enableFeatureMiddleware('sso')],\n        auth: false,\n      },\n    },\n    {\n      method: 'GET',\n      path: '/providers/options',\n      handler: 'authentication.getProviderLoginOptions',\n      config: {\n        middlewares: [enableFeatureMiddleware('sso')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          { name: 'admin::hasPermissions', config: { actions: ['admin::provider-login.read'] } },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/providers/options',\n      handler: 'authentication.updateProviderLoginOptions',\n      config: {\n        middlewares: [enableFeatureMiddleware('sso')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          { name: 'admin::hasPermissions', config: { actions: ['admin::provider-login.update'] } },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/providers/isSSOLocked',\n      handler: 'user.isSSOLocked',\n      config: {\n        middlewares: [enableFeatureMiddleware('sso')],\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'admin',\n  routes: [\n    // License limit infos\n    {\n      method: 'GET',\n      path: '/license-limit-information',\n      handler: 'admin.licenseLimitInformation',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: [\n                'admin::users.create',\n                'admin::users.read',\n                'admin::users.update',\n                'admin::users.delete',\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import sso from './sso';\nimport licenseLimit from './license-limit';\n\nexport default {\n  sso,\n  'license-limit': licenseLimit,\n};\n","import { enableFeatureMiddleware } from '../../routes/utils';\n\nexport default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/audit-logs',\n      handler: 'audit-logs.findMany',\n      config: {\n        middlewares: [enableFeatureMiddleware('audit-logs')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::audit-logs.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/audit-logs/:id',\n      handler: 'audit-logs.findOne',\n      config: {\n        middlewares: [enableFeatureMiddleware('audit-logs')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::audit-logs.read'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst ALLOWED_SORT_STRINGS = ['action:ASC', 'action:DESC', 'date:ASC', 'date:DESC'];\n\nconst validateFindManySchema = yup\n  .object()\n  .shape({\n    page: yup.number().integer().min(1),\n    pageSize: yup.number().integer().min(1).max(100),\n    sort: yup.mixed().oneOf(ALLOWED_SORT_STRINGS),\n  })\n  .required();\n\nexport const validateFindMany = validateYupSchema(validateFindManySchema, { strict: false });\n\nexport default {\n  validateFindMany,\n};\n","import type { Context } from 'koa';\n\nimport { validateFindMany } from '../validation/audit-logs';\n\nexport default {\n  async findMany(ctx: Context) {\n    const { query } = ctx.request;\n    await validateFindMany(query);\n\n    const auditLogs = strapi.get('audit-logs');\n    const body = await auditLogs.findMany(query);\n\n    ctx.body = body;\n  },\n\n  async findOne(ctx: Context) {\n    const { id } = ctx.params;\n\n    const auditLogs = strapi.get('audit-logs');\n    const body = await auditLogs.findOne(id);\n\n    ctx.body = body;\n\n    strapi.telemetry.send('didWatchAnAuditLog');\n  },\n};\n","import type { Core } from '@strapi/types';\n\ninterface Event {\n  action: string;\n  date: Date;\n  userId: string | number;\n  payload: Record<string, unknown>;\n}\n\ninterface Log extends Omit<Event, 'userId'> {\n  user: string | number;\n}\n\nconst getSanitizedUser = (user: any) => {\n  let displayName = user.email;\n\n  if (user.username) {\n    displayName = user.username;\n  } else if (user.firstname && user.lastname) {\n    displayName = `${user.firstname} ${user.lastname}`;\n  }\n\n  return {\n    id: user.id,\n    email: user.email,\n    displayName,\n  };\n};\n\n/**\n * @description\n * Manages audit logs interaction with the database. Accessible via strapi.get('audit-logs')\n */\nconst createAuditLogsService = (strapi: Core.Strapi) => {\n  return {\n    async saveEvent(event: Event) {\n      const { userId, ...rest } = event;\n\n      const auditLog: Log = { ...rest, user: userId };\n\n      // Save to database\n      await strapi.db?.query('admin::audit-log').create({ data: auditLog });\n\n      return this;\n    },\n\n    async findMany(query: unknown) {\n      const { results, pagination } = await strapi.db?.query('admin::audit-log').findPage({\n        populate: ['user'],\n        select: ['action', 'date', 'payload'],\n        ...strapi.get('query-params').transform('admin::audit-log', query),\n      });\n\n      const sanitizedResults = results.map((result: any) => {\n        const { user, ...rest } = result;\n        return {\n          ...rest,\n          user: user ? getSanitizedUser(user) : null,\n        };\n      });\n\n      return {\n        results: sanitizedResults,\n        pagination,\n      };\n    },\n\n    async findOne(id: unknown) {\n      const result: any = await strapi.db?.query('admin::audit-log').findOne({\n        where: { id },\n        populate: ['user'],\n        select: ['action', 'date', 'payload'],\n      });\n\n      if (!result) {\n        return null;\n      }\n\n      const { user, ...rest } = result;\n      return {\n        ...rest,\n        user: user ? getSanitizedUser(user) : null,\n      };\n    },\n\n    deleteExpiredEvents(expirationDate: Date) {\n      return strapi.db?.query('admin::audit-log').deleteMany({\n        where: {\n          date: {\n            $lt: expirationDate.toISOString(),\n          },\n        },\n      });\n    },\n  };\n};\n\nexport { createAuditLogsService };\n","import type { Core } from '@strapi/types';\nimport { scheduleJob } from 'node-schedule';\n\nconst DEFAULT_RETENTION_DAYS = 90;\n\nconst defaultEvents = [\n  'entry.create',\n  'entry.update',\n  'entry.delete',\n  'entry.publish',\n  'entry.unpublish',\n  'media.create',\n  'media.update',\n  'media.delete',\n  'media-folder.create',\n  'media-folder.update',\n  'media-folder.delete',\n  'user.create',\n  'user.update',\n  'user.delete',\n  'admin.auth.success',\n  'admin.logout',\n  'content-type.create',\n  'content-type.update',\n  'content-type.delete',\n  'component.create',\n  'component.update',\n  'component.delete',\n  'role.create',\n  'role.update',\n  'role.delete',\n  'permission.create',\n  'permission.update',\n  'permission.delete',\n];\n\nconst getEventMap = (defaultEvents: any) => {\n  const getDefaultPayload = (...args: any) => args[0];\n\n  // Use the default payload for all default events\n  return defaultEvents.reduce((acc: any, event: any) => {\n    acc[event] = getDefaultPayload;\n    return acc;\n  }, {} as any);\n};\n\nconst getRetentionDays = (strapi: Core.Strapi) => {\n  const featureConfig = strapi.ee.features.get('audit-logs');\n  const licenseRetentionDays =\n    typeof featureConfig === 'object' && featureConfig?.options.retentionDays;\n  const userRetentionDays = strapi.config.get('admin.auditLogs.retentionDays');\n\n  // For enterprise plans, use 90 days by default, but allow users to override it\n  if (licenseRetentionDays == null) {\n    return userRetentionDays ?? DEFAULT_RETENTION_DAYS;\n  }\n\n  // Allow users to override the license retention days, but not to increase it\n  if (userRetentionDays && userRetentionDays < licenseRetentionDays) {\n    return userRetentionDays;\n  }\n\n  // User didn't provide a retention days value, use the license one\n  return licenseRetentionDays;\n};\n\n/**\n * @description\n * Manages the the lifecycle of audit logs. Accessible via strapi.get('audit-logs-lifecycles')\n */\nconst createAuditLogsLifecycleService = (strapi: Core.Strapi) => {\n  // Manage internal service state privately\n  const state = {} as any;\n  const auditLogsService = strapi.get('audit-logs');\n\n  // NOTE: providers should be able to replace getEventMap to add or remove events\n  const eventMap = getEventMap(defaultEvents);\n\n  const processEvent = (name: string, ...args: any) => {\n    const requestState = strapi.requestContext.get()?.state;\n\n    // Ignore events with auth strategies different from admin\n    const isUsingAdminAuth = requestState?.route.info.type === 'admin';\n    const user = requestState?.user;\n    if (!isUsingAdminAuth || !user) {\n      return null;\n    }\n\n    const getPayload = eventMap[name];\n\n    // Ignore the event if it's not in the map\n    if (!getPayload) {\n      return null;\n    }\n\n    // Ignore some events based on payload\n    // TODO: What does this ignore in upload? Why would we want to ignore anything?\n    const ignoredUids = ['plugin::upload.file', 'plugin::upload.folder'];\n    if (ignoredUids.includes(args[0]?.uid)) {\n      return null;\n    }\n\n    return {\n      action: name,\n      date: new Date().toISOString(),\n      payload: getPayload(...args) || {},\n      userId: user.id,\n    };\n  };\n\n  const handleEvent = async (name: string, ...args: any) => {\n    const processedEvent = processEvent(name, ...args);\n\n    if (processedEvent) {\n      await auditLogsService.saveEvent(processedEvent);\n    }\n  };\n\n  return {\n    async register() {\n      // Handle license being enabled\n      if (!state.eeEnableUnsubscribe) {\n        // @ts-expect-error- update event hub to receive callback argument\n        state.eeEnableUnsubscribe = strapi.eventHub.on('ee.enable', () => {\n          // Recreate the service to use the new license info\n          this.destroy();\n          this.register();\n        });\n      }\n\n      // Handle license being updated\n      if (!state.eeUpdateUnsubscribe) {\n        // @ts-expect-error- update event hub to receive callback argument\n        state.eeUpdateUnsubscribe = strapi.eventHub.on('ee.update', () => {\n          // Recreate the service to use the new license info\n          this.destroy();\n          this.register();\n        });\n      }\n\n      // Handle license being disabled\n      // @ts-expect-error- update event hub to receive callback argument\n      state.eeDisableUnsubscribe = strapi.eventHub.on('ee.disable', () => {\n        // Turn off service when the license gets disabled\n        // Only ee.enable and ee.update listeners remain active to recreate the service\n        this.destroy();\n      });\n\n      // Check current state of license\n      if (!strapi.ee.features.isEnabled('audit-logs')) {\n        return this;\n      }\n\n      // Start saving events\n      state.eventHubUnsubscribe = strapi.eventHub.subscribe(handleEvent);\n\n      // Manage audit logs auto deletion\n      const retentionDays = getRetentionDays(strapi);\n      state.deleteExpiredJob = scheduleJob('0 0 * * *', () => {\n        const expirationDate = new Date(Date.now() - retentionDays * 24 * 60 * 60 * 1000);\n        auditLogsService.deleteExpiredEvents(expirationDate);\n      });\n\n      return this;\n    },\n\n    unsubscribe() {\n      if (state.eeDisableUnsubscribe) {\n        state.eeDisableUnsubscribe();\n      }\n\n      if (state.eventHubUnsubscribe) {\n        state.eventHubUnsubscribe();\n      }\n\n      if (state.deleteExpiredJob) {\n        state.deleteExpiredJob.cancel();\n      }\n\n      return this;\n    },\n\n    destroy() {\n      return this.unsubscribe();\n    },\n  };\n};\n\nexport { createAuditLogsLifecycleService };\n","export const auditLog = {\n  schema: {\n    kind: 'collectionType',\n    collectionName: 'strapi_audit_logs',\n    info: {\n      singularName: 'audit-log',\n      pluralName: 'audit-logs',\n      displayName: 'Audit Log',\n    },\n    options: {\n      timestamps: false,\n    },\n    pluginOptions: {\n      'content-manager': {\n        visible: false,\n      },\n      'content-type-builder': {\n        visible: false,\n      },\n    },\n    attributes: {\n      action: {\n        type: 'string',\n        required: true,\n      },\n      date: {\n        type: 'datetime',\n        required: true,\n      },\n      user: {\n        type: 'relation',\n        relation: 'oneToOne',\n        target: 'admin::user',\n      },\n      payload: {\n        type: 'json',\n      },\n    },\n  },\n};\n","import register from './register';\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport adminContentTypes from './content-types';\nimport services from './services';\nimport controllers from './controllers';\nimport routes from './routes';\nimport auditLogsRoutes from './audit-logs/routes/audit-logs';\nimport auditLogsController from './audit-logs/controllers/audit-logs';\nimport { createAuditLogsService } from './audit-logs/services/audit-logs';\nimport { createAuditLogsLifecycleService } from './audit-logs/services/lifecycles';\nimport { auditLog } from './audit-logs/content-types/audit-log';\nimport type { Core } from '@strapi/types';\n\nconst getAdminEE = () => {\n  const eeAdmin = {\n    register,\n    bootstrap,\n    destroy,\n    contentTypes: {\n      // Always register the audit-log content type to prevent data loss\n      'audit-log': auditLog,\n      ...adminContentTypes,\n    },\n    services,\n    controllers,\n    routes,\n  };\n\n  // Only add the other audit-logs APIs if the feature is enabled by the user and the license\n  if (\n    strapi.config.get('admin.auditLogs.enabled', true) &&\n    strapi.ee.features.isEnabled('audit-logs')\n  ) {\n    return {\n      ...eeAdmin,\n      controllers: {\n        ...eeAdmin.controllers,\n        'audit-logs': auditLogsController,\n      },\n      routes: {\n        ...eeAdmin.routes,\n        'audit-logs': auditLogsRoutes,\n      },\n      async register({ strapi }: { strapi: Core.Strapi }) {\n        // Run the the default registration\n        await eeAdmin.register({ strapi });\n        // Register an internal audit logs service\n        strapi.add('audit-logs', createAuditLogsService(strapi));\n        // Register an internal audit logs lifecycle service\n        const auditLogsLifecycle = createAuditLogsLifecycleService(strapi);\n        strapi.add('audit-logs-lifecycle', auditLogsLifecycle);\n\n        await auditLogsLifecycle.register();\n      },\n      async destroy({ strapi }: { strapi: Core.Strapi }) {\n        strapi.get('audit-logs-lifecycle').destroy();\n        await eeAdmin.destroy({ strapi });\n      },\n    };\n  }\n\n  return eeAdmin;\n};\n\nexport default getAdminEE;\n","import _ from 'lodash';\n\nimport bootstrap from './bootstrap';\nimport register from './register';\nimport destroy from './destroy';\nimport config from './config';\nimport policies from './policies';\nimport routes from './routes';\nimport services from './services';\nimport controllers from './controllers';\nimport contentTypes from './content-types';\nimport middlewares from './middlewares';\nimport getEEAdmin from '../../ee/server/src';\n\n// eslint-disable-next-line import/no-mutable-exports\nlet admin = {\n  bootstrap,\n  register,\n  destroy,\n  config,\n  policies,\n  routes,\n  services,\n  controllers,\n  contentTypes,\n  middlewares,\n};\n\nconst mergeRoutes = (a: any, b: any, key: string) => {\n  return _.isArray(a) && _.isArray(b) && key === 'routes' ? a.concat(b) : undefined;\n};\n\nif (strapi.EE) {\n  admin = _.mergeWith({}, admin, getEEAdmin(), mergeRoutes);\n}\n\nexport default admin;\n"],"names":["getService","name","strapi","service","actions","uid","displayName","pluginName","section","category","subCategory","aliases","actionId","subjects","conditions","plugin","handler","user","id","$elemMatch","$in","roles","map","r","defaultAdminAuthSettings","providers","autoRegister","defaultRole","ssoLockedRoles","registerPermissionActions","actionProvider","registerMany","adminActions","registerAdminConditions","conditionProvider","adminConditions","registerModelHooks","sendDidChangeInterfaceLanguage","db","lifecycles","subscribe","models","afterCreate","afterDelete","afterUpdate","params","data","preferedLanguage","syncAuthSettings","adminStore","store","type","adminAuthSettings","get","key","newAuthSettings","merge","roleExists","exists","set","value","syncAPITokensPermissions","validPermissions","contentAPI","permissions","action","keys","permissionsInDB","async","pipe","query","findMany","unknownPermissions","uniq","difference","length","deleteMany","where","createDefaultAPITokensIfNeeded","userService","apiTokenService","usersCount","count","apiTokenCount","create","description","lifespan","permissionService","roleService","transferService","tokenService","createRolesIfNoneExist","resetSuperAdminPermissions","displayWarningIfNoSuperAdmin","cleanPermissionsInDatabase","displayWarningIfUsersDontHaveRole","sendUpdateProjectInformation","startCron","checkSaltIsDefined","token","checkSecretIsDefined","registerAdminPanelRoute","buildDir","resolve","dirs","dist","root","fse","pathExistsSync","__dirname","serveAdminMiddleware","ctx","next","method","body","status","createReadStream","join","server","routes","path","config","admin","serveStatic","maxage","defer","index","setHeaders","res","ext","extname","setHeader","auth","filesDir","koaStaticOptions","serve","koaStatic","prev","newPath","basename","authenticate","authorization","request","header","authenticated","parts","split","toLowerCase","payload","isValid","decodeJwtToken","findOne","populate","isActive","userAbility","engine","generateUserAbility","state","credentials","ability","DAY_IN_MS","constants","CONTENT_TYPE_SECTION","SUPER_ADMIN_CODE","EDITOR_CODE","AUTHOR_CODE","READ_ACTION","CREATE_ACTION","UPDATE_ACTION","DELETE_ACTION","PUBLISH_ACTION","API_TOKEN_TYPE","READ_ONLY","FULL_ACCESS","CUSTOM","API_TOKEN_LIFESPANS","UNLIMITED","DAYS_7","DAYS_30","DAYS_90","TRANSFER_TOKEN_TYPE","PUSH","PULL","TRANSFER_TOKEN_LIFESPANS","UnauthorizedError","ForbiddenError","errors","isReadScope","scope","endsWith","extractToken","apiToken","getBy","accessKey","hash","currentDate","Date","isNil","expiresAt","expirationDate","error","hoursSinceLastUsed","differenceInHours","parseISO","lastUsedAt","update","generateAbility","verify","scopes","castArray","every","isAllowed","can","passportMiddleware","init","api","use","register","adminAuthStrategy","apiTokenAuthStrategy","clear","subject","html","text","forgotPassword","emailTemplate","forgotPasswordTemplate","policyCtx","Boolean","isAuthenticated","hasPermissionsSchema","yup","object","array","of","lazy","val","_","isArray","string","min","max","isString","required","shape","validateHasPermissionsInput","validateYupSchema","createPolicy","policy","inputModifiers","check","transform","arr","isObject","perm","validator","find","modifier","isAuthorized","_ctx","_config","telemetry","isDisabled","isAuthenticatedAdmin","hasPermissions","isTelemetryEnabled","policies","middlewares","transferToken","permission","strategies","dataTransferAuthStrategy","info","authentication","users","webhooks","apiTokens","contentApi","transfer","homepage","ApplicationError","hashPassword","password","bcrypt","validatePassword","compare","checkCredentials","email","message","resetPasswordToken","createToken","updateById","url","sendTemplatedEmail","to","from","replyTo","pick","catch","err","log","resetPassword","matchingUser","createUser","attributes","username","hasSuperAdminRole","filter","role","code","ADMIN_USER_ALLOWED_FIELDS","getDefaultActionAttributes","options","applyToProperties","actionFields","sanitizeActionAttributes","computeActionId","assignActionId","attrs","assignOrOmitSubCategory","shouldHaveSubCategory","includes","omit","appliesToProperty","curry","property","prop","appliesToSubject","checkFieldsAreCorrectlyNested","fields","Array","failed","indexA","slice","some","fieldB","startsWith","checkFieldsDontHaveDuplicates","getActionFromProvider","lowercase","firstname","trim","lastname","test","byteSize","TextEncoder","encode","matches","strapiID","isAPluginName","undefined","Object","plugins","createError","arrayOfConditionNames","ids","isUndefined","permissionsAreEquals","a","b","checkNoDuplicatedPermissions","permA","i","permB","checkNilFields","actionDomain","fieldsPropertyValidation","nullable","actionParameters","parent","properties","hasNoProperties","isEmpty","has","validate","strict","abortEarly","e","noUnknown","updatePermissions","ValidationError","sanitizeUserRoles","sanitizeUser","userInfo","registrationToken","createdUser","sendDidInviteUser","eventHub","emit","lastAdminUser","isLastSuperAdminUser","superAdminRole","getSuperAdminWithUsersCount","willRemoveSuperAdminRole","arrays","includesString","hashedPassword","updatedUser","resetPasswordByEmail","Error","passwordValidator","userId","findRegistrationInfo","findOneByEmail","$eqi","findPage","defaults","deleteById","userToDelete","deletedUser","delete","deleteByIds","nbOfSuperAdminToDelete","deletedUsers","push","countUsersWithoutRole","$null","assignARoleToAll","roleId","select","Promise","all","warn","getLanguagesInUse","permissionFields","sanitizedPermissionFields","sanitizePermissionFields","getDefaultPermission","addCondition","condition","newConditions","concat","removeCondition","remove","eq","getProperty","setProperty","deleteProperty","sanitizeConditions","provider","reduce","toPermission","checkPermissionsSchema","field","checkPermissionsExist","existingActions","values","failIndex","findIndex","actionsExistSchema","validatePermissionsExist","validateCheckPermissionsInput","validatedUpdatePermissionsInput","validators","roleConstants","createAsyncSeriesWaterfallHook","hooksUtils","hooks","willResetSuperAdminPermissions","ACTIONS","publish","sanitizeRole","COMPARABLE_FIELDS","pickComparableFields","jsonClean","JSON","parse","stringify","arePermissionsEqual","p1","p2","isEqual","alreadyExists","autoGeneratedCode","kebabCase","dates","timestampCode","rolesWithCode","result","findOneWithUsersCount","getUsersCount","findAllWithUsersCount","sanitizedAttributes","$ne","checkRolesIdForDeletion","getSuperAdmin","deleteByRolesIds","deletedRoles","deletedRole","someRolesExist","allActions","contentTypesActions","editorRole","authorRole","editorPermissions","getPermissionsWithNestedFields","restrictedSubjects","authorPermissions","permissionDomain","getDefaultPluginPermissions","isAuthor","addPermissions","someUsersExists","assignPermissions","internalActions","superAdmin","isSuperAdmin","assignRole","permissionsWithRole","existingPermissions","permissionsToAdd","differenceWith","permissionsToDelete","permissionsToReturn","differenceBy","newPermissions","sendDidUpdateRolePermissions","createMany","isContentTypeAction","contentTypeService","otherActions","otherPermissions","acc","transformedPermissions","call","superAdminCode","createLocalStrategy","middleware","LocalStrategy","usernameField","passwordField","session","done","toLower","then","authEventsMapper","onConnectionSuccess","onConnectionError","valueIsFunctionType","isFunction","keyIsValidEventName","getPassportStrategies","registerAuthEvents","events","eventList","entries","eventName","on","forEach","strategy","passport","initialize","numberOfUsers","numberOfRoles","send","groupProperties","languagesInUse","userProperties","numberOfActiveAdminUsers","numberOfAdminUsers","cron","add","sendProjectInformation","task","defaultJwtOptions","expiresIn","getTokenOptions","secret","crypto","randomBytes","toString","createJwtToken","jwt","sign","registerProviderActionSchema","v","oneOf","mixed","when","is","otherwise","cat","subCat","validateRegisterProviderAction","validateYupSchemaSync","createActionProvider","providerFactory","actionHooks","appliesPropertyToSubject","createAsyncParallelHook","actionAttributes","isLoaded","domain","actionsAttributes","appliesToAction","results","unstable_aliases","isRegistered","alias","DEFAULT_CATEGORY","getDefaultConditionAttributes","conditionFields","sanitizeConditionAttributes","computeConditionId","assignConditionId","createConditionProvider","conditionAttributes","conditionsAttributes","visitors","removePassword","expandWildcardPopulate","sanitize","isScalarAttribute","getNonVisibleAttributes","getNonWritableAttributes","getWritableAttributes","contentTypes","ID_ATTRIBUTE","DOC_ID_ATTRIBUTE","CREATED_AT_ATTRIBUTE","UPDATED_AT_ATTRIBUTE","PUBLISHED_AT_ATTRIBUTE","CREATED_BY_ATTRIBUTE","UPDATED_BY_ATTRIBUTE","COMPONENT_FIELDS","STATIC_FIELDS","model","schema","getModel","removeDisallowedFields","bind","createSanitizeQuery","permittedFields","shouldIncludeAll","getQueryFields","permitted","sanitizeFilters","traverse","traverseQueryFilters","omitDisallowedAdminUserFields","omitHiddenFields","sanitizeSort","traverseQuerySort","attribute","sanitizePopulate","traverseQueryPopulate","sanitizeFields","traverseQueryFields","sanitizedQuery","cloneDeep","filters","assign","sort","createSanitizeOutput","getOutputFields","traverseEntity","pickAllowedAdminUserFields","sanitizers","sanitizePasswords","createSanitizeInput","getInputFields","omitCreatorRoles","wrapSanitize","createSanitizeFunction","wrappedSanitize","entity","actionOverride","getDefaultOptions","permittedFieldsOf","fieldsFrom","rule","hasAtLeastOneRegistered","flatMap","rulesFor","detectSubjectType","shouldIncludeAllFields","sanitizeOptions","sanitizeFunction","asSubject","isHidden","getOr","pickAllowedFields","target","nonVisibleAttributes","writableAttributes","nonVisibleWritableAttributes","intersection","nonWritableAttributes","sanitizeOutput","sanitizeInput","sanitizeQuery","throwPassword","throwDisallowedFields","throwInvalidKey","msg","createValidateQuery","validateFilters","throwDisallowedAdminUserFields","validateSort","validateFields","validatePopulate","throwHiddenFields","createValidateInput","wrapValidate","createValidateFunction","wrappedValidate","validateOptions","validateFunction","validateQuery","validateInput","operatorsMap","$nin","$exists","$gte","$gt","$lte","$lt","$eq","$and","$or","$not","mapKey","buildCaslQuery","rulesToQuery","o","buildStrapiQuery","caslQuery","unwrapDeep","obj","isPlainObject","k","setWith","toSubject","subjectType","pickPermittedFieldsOf","getQuery","queryAction","addPermissionsQueryTo","newQuery","permissionQuery","createSanitizeHelpers","createValidateHelpers","new","debug","propertiesName","invalidProperties","permissionWithSanitizedProperties","findUserPermissions","checkMany","emptyObjectFactory","createSection","initialStateFactory","handlers","matchers","createAsyncSeriesHook","matcher","build","applies","createSectionBuilder","sections","Map","sectionName","deleteSection","addHandler","addMatcher","isOfKind","kind","matchesProperty","resolveContentType","isNotInSubjects","hasProperty","getValidOptions","toSubjectTemplate","ct","label","singularName","isVisibleAttribute","settings","contentTypesBase","subjectsHandlerFor","contentTypesSection","newSubjects","buildNode","attributeName","node","component","components","children","buildDeepAttributesCollection","fieldsProperty","contentType","fieldsProp","sectionPropMatcher","propEq","createContentTypesInitialState","createDefaultSectionBuilder","builder","pluginsHandler","settingsHandler","rolesIds","queryResult","createdPermissions","newPerm","updatedPermission","permissionToReturn","rawPermissions","filterPermissionsToRemove","permissionsToRemove","isRegisteredAction","hasInvalidProperties","isInvalidSubject","pageSize","total","pageCount","Math","ceil","page","limit","offset","permissionsIdToRemove","remainingPermissions","permissionsWithCleanFields","cleanPermissionFields","permissionsNeedingToBeUpdated","xor","updatePromiseProvider","pmap","concurrency","stopOnError","sectionsBuilder","createSectionsBuilder","sanitizePermission","createPermissionEngine","getNestedFields","prefix","nestingLevel","requiredOnly","existingFields","nonAuthorizableFields","contentTypesUtils","attr","fieldPath","shouldBeIncluded","insideExistingFields","compoFields","getNestedFieldsWithIntermediate","validSubjects","possibleFields","requiredFields","badNestedFields","newFields","isValidCondition","NotFoundError","getAllowedActionsForRole","SELECT_FIELDS","POPULATE_FIELDS","assertCustomTokenPermissionsValidity","invalidPermissions","isValidLifespan","isNumber","assertValidLifespan","flattenTokenPermissions","whereParams","createHmac","digest","getExpirationFields","isValidNumber","Number","isFinite","now","currentPermissions","load","regenerate","process","env","API_TOKEN_SALT","emitWarning","list","tokens","orderBy","revoke","getById","getByName","originalToken","changingTypeToCustom","updatedToken","currentPermissionsResult","actionsToDelete","actionsToAdd","permissionsFromDb","p","DEFAULT_TRANSFER_ACTIONS","TRANSFER_TOKEN_UID","TRANSFER_TOKEN_PERMISSION_UID","generateRandomAccessKey","validateAccessKey","assert","hasAccessKey","assertTokenPermissionsValidity","transaction","hasValidTokenSalt","utils","TypeError","salt","isRemoteTransferEnabled","bool","PROJECT_SETTINGS_FILE_INPUTS","parseFilesData","files","formatedFilesData","inputName","file","getStream","fs","filepath","formatFileInfo","filename","originalFilename","mimetype","size","getDimensions","stream","tmpPath","getProjectSettings","defaultProjectSettings","cur","projectSettings","uploadFiles","ReadStream","uploadStream","deleteOldFiles","previousSettings","newSettings","updateProjectSettings","createHomepageService","MAX_DOCUMENTS","metadataService","services","getConfiguration","contentTypeUids","coreStore","rawConfigurations","rawConfiguration","getPermittedContentTypes","readPermissions","requestContext","getContentTypesMeta","allowedContentTypeUids","configurations","configuration","hasDraftAndPublish","mainField","isLocalized","pluginOptions","i18n","localized","formatDocuments","documents","meta","document","documentId","locale","updatedAt","title","publishedAt","contentTypeUid","contentTypeDisplayName","addStatusToDocuments","recentDocument","availableStatus","getMetadata","availableLocales","getStatus","permissionCheckerService","getPermissionChecker","getRecentlyPublishedDocuments","permittedContentTypes","contentTypesMeta","recentDocuments","read","docs","overallRecentDocuments","flat","valueOf","getRecentlyUpdatedDocuments","metrics","MAX_IMAGE_WIDTH","MAX_IMAGE_HEIGHT","MAX_IMAGE_FILE_SIZE","z","menuLogo","nullish","authLogo","updateProjectSettingsLogo","enum","number","updateProjectSettingsFiles","logoDimensions","width","height","updateProjectSettingsImagesDimensions","validateUpdateProjectSettings","validateZod","validateUpdateProjectSettingsFiles","validateUpdateProjectSettingsImagesDimensions","isUsingTypeScript","tsUtils","getProjectType","flags","isEE","features","uuid","hasAdmin","telemetryDisabled","projectSettingsService","formatedFiles","telemetryProperties","useTypescriptOnServer","app","useTypescriptOnAdmin","isHostedOnStrapiCloud","numberOfAllContentTypes","numberOfComponents","getNumberOfDynamicZones","sumBy","numberOfDynamicZones","information","currentEnvironment","autoReload","strapiVersion","dependencies","projectId","nodeVersion","version","communityEdition","EE","useYarn","cwd","enabledPlugins","CORE_PLUGINS","packageName","apiTokenCreationSchema","optional","apiTokenUpdateSchema","notNull","validateApiTokenCreationInput","validateApiTokenUpdateInput","created","apiTokenExists","notFound","accessToken","deleted","nameAlreadyTaken","strings","getLayout","layout","getApiTokenLayout","userCreationSchema","profileUpdateSchema","currentPassword","userUpdateSchema","usersDeleteSchema","validateUserCreationInput","validateProfileUpdateInput","validateUserUpdateInput","validateUsersDeleteInput","schemas","getMe","updateMe","input","authServer","badRequest","getOwnPermissions","userPermissions","registrationSchema","registrationInfoQuerySchema","adminRegistrationSchema","validateRegistrationInput","validateRegistrationInfoQuery","validateAdminRegistrationInput","forgotPasswordSchema","resetPasswordSchema","renewToken","login","compose","details","notImplemented","sanitizedUser","validateRenewTokenInput","registrationInfo","registerAdmin","validateForgotPasswordInput","validateResetPasswordInput","logout","publicFields","formatConditions","checkPermissionsFn","getAll","roleCreateSchema","rolesDeleteSchema","roleDeleteSchema","roleUpdateSchema","validateRoleCreateInput","validateRoleUpdateInput","validateRolesDeleteInput","validateRoleDeleteInput","sanitizedRole","findAll","permissionsManager","createPermissionsManager","updatedRole","getPermissions","sanitizedPermissions","deleteOne","sanitizedRoles","remote","createPushController","createPullController","dataTransferStrapi","pull","transferTokenCreationSchema","transferTokenUpdateSchema","validateTransferTokenCreationInput","validateTransferTokenUpdateInput","transferTokens","prefixActionsName","dict","mapKeys","runner","cleanData","userAlreadyExists","pagination","uniqueEmailCheck","sanitizedUsers","urlRegex","webhookValidator","NODE_ENV","parsedUrl","URL","punycode","toASCII","isLocalUrl","isLocalhostIp","hostname","headers","mapValues","updateWebhookValidator","isEnabled","boolean","listWebhooks","findWebhooks","getWebhook","webhook","findWebhook","createWebhook","updateWebhook","updatedWebhook","deleteWebhook","deleteWebhooks","triggerWebhook","response","run","actionsMap","getActionsMap","getRoutes","routesMap","getRoutesMap","createHomepageController","homepageService","recentDocumentParamsSchema","getRecentDocuments","authenticatedUser","collectionName","pluralName","visible","minLength","configurable","default","relation","inversedBy","unique","private","searchable","blocked","hidden","mappedBy","Permission","User","Role","apiTokenPermission","transferTokenPermission","RateLimitError","rateLimitConfig","enabled","rateLimit","require","RateLimit","requestEmail","userEmail","requestPath","normalize","replace","loadConfig","interval","prefixKey","ip","transferUtils","dataTransfer","executeCERegister","global","sso","auditLogs","args","persistTablesWithPrefix","ee","seatEnforcementWorkflow","executeCEBootstrap","executeCEDestroy","isSsoLocked","lockedRoles","isLocked","lockedId","registry","providerRegistry","createProviderRegistry","errorMessage","getStrategyCallbackURL","providerName","syncProviderRegistryWithConfig","SSOAuthEventsMapper","onSSOAutoRegistration","localStrategyMiddleware","localStrategy","createStrategy","ssoCheckRolesIdForDeletion","updateEEDisabledUsersList","disabledUsers","getDisabledUserList","newDisabledUsersList","castNumberArray","toNumber","removeFromEEDisabledUsersList","idsToCheck","getCurrentActiveUserCount","getSSOProvidersList","SSOProviders","isSSOConfigured","numberOfContentReleases","numberOfPublishedContentReleases","releasedAt","$notNull","enableMaximumUserCount","numberOfUsersToEnable","orderedDisabledUsers","reverse","usersToEnable","take","updateMany","remainingDisabledUsers","drop","disableUsersAboveLicenseLimit","numberOfUsersToDisable","currentlyDisabledUsers","usersToDisable","nonSuperAdminUsersToDisable","createdAt","superAdminUsersToDisable","syncDisabledUserRecords","adminSeats","seats","currentActiveUserCount","adminSeatsLeft","transformTableName","table","findTables","regex","tables","dialect","schemaInspector","getTables","tableName","addPersistTables","tableNames","persistedTables","getPersistedTables","notPersistedTableNames","tablesToPersist","t1","t2","setPersistedTables","tableNamePrefix","tableNameRegex","RegExp","removePersistedTablesWithSuffix","tableNameSuffix","filteredPersistedTables","persistTables","seatEnforcement","providerOptionsUpdateSchema","initSchema","validateProviderOptionsUpdate","PROVIDER_REDIRECT_BASE","PROVIDER_REDIRECT_SUCCESS","PROVIDER_REDIRECT_ERROR","PROVIDER_URLS_MAP","success","getAdminStore","getPrefixedRedirectUrls","adminUrl","prefixUrl","defaultConnectionError","redirectUrls","profile","redirect","scenario","existingUserScenario","nonExistingUserScenario","isMissingRegisterFields","redirectWithAuth","isProduction","cookiesOptions","httpOnly","secure","overwrite","cookies","toProviderDTO","toProviderLoginOptionsDTO","providerAuthenticationFlow","getProviders","getProviderLoginOptions","providersOptions","updateProviderLoginOptions","currentAuthOptions","newAuthOptions","providerLogin","rolesDeletionChecks","noAdminSingleDelete","ssoUserCreationInputExtension","useSSORegistration","pickUserCreationAttributes","hasAdminSeatsAvaialble","permittedSeats","userCount","isSSOLocked","licenseLimitInformation","shouldNotify","licenseLimitStatus","enforcementUserCount","eeDisabledUsers","shouldStopCreate","enableFeatureMiddleware","featureName","licenseLimit","ALLOWED_SORT_STRINGS","validateFindManySchema","integer","validateFindMany","getSanitizedUser","createAuditLogsService","saveEvent","event","rest","auditLog","sanitizedResults","deleteExpiredEvents","date","toISOString","DEFAULT_RETENTION_DAYS","defaultEvents","getEventMap","getDefaultPayload","getRetentionDays","featureConfig","licenseRetentionDays","retentionDays","userRetentionDays","createAuditLogsLifecycleService","auditLogsService","eventMap","processEvent","requestState","isUsingAdminAuth","route","getPayload","ignoredUids","handleEvent","processedEvent","eeEnableUnsubscribe","destroy","eeUpdateUnsubscribe","eeDisableUnsubscribe","eventHubUnsubscribe","deleteExpiredJob","scheduleJob","unsubscribe","cancel","timestamps","getAdminEE","eeAdmin","bootstrap","adminContentTypes","controllers","auditLogsController","auditLogsRoutes","auditLogsLifecycle","mergeRoutes","mergeWith","getEEAdmin"],"mappings":"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"}