{"version":3,"file":"index.js","sources":["../../server/src/utils/index.ts","../../server/src/bootstrap.ts","../../server/src/controllers/validate-locale-creation.ts","../../server/src/graphql.ts","../../server/src/register.ts","../../server/src/content-types/locale/index.ts","../../server/src/content-types/index.ts","../../server/src/services/permissions/actions.ts","../../server/src/services/permissions/sections-builder.ts","../../server/src/services/permissions/engine.ts","../../server/src/services/permissions.ts","../../server/src/services/metrics.ts","../../server/src/services/localizations.ts","../../server/src/constants/index.ts","../../server/src/services/locales.ts","../../server/src/services/iso-locales.ts","../../server/src/services/content-types.ts","../../server/src/services/sanitize/index.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/validation/locales.ts","../../server/src/domain/locale.ts","../../server/src/controllers/locales.ts","../../server/src/validation/content-types.ts","../../server/src/controllers/content-types.ts","../../server/src/controllers/iso-locales.ts","../../server/src/controllers/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { LocaleService } from '../services/locales';\nimport type { PermissionsService } from '../services/permissions';\nimport type { ContentTypesService } from '../services/content-types';\nimport type { MetricsService } from '../services/metrics';\nimport type { ISOLocalesService } from '../services/iso-locales';\nimport type { LocalizationsService } from '../services/localizations';\nimport type { SanitizeService } from '../services/sanitize';\n\ntype S = {\n  permissions: PermissionsService;\n  metrics: MetricsService;\n  locales: LocaleService;\n  localizations: LocalizationsService;\n  ['iso-locales']: ISOLocalesService;\n  ['content-types']: ContentTypesService;\n  sanitize: SanitizeService;\n};\n\nconst getCoreStore = () => {\n  return strapi.store({ type: 'plugin', name: 'i18n' });\n};\n\n// retrieve a local service\nconst getService = <T extends keyof S>(name: T): ReturnType<S[T]> => {\n  return strapi.plugin('i18n').service(name);\n};\n\nexport { getService, getCoreStore };\n","import type { Schema } from '@strapi/types';\nimport { getService } from './utils';\n\nconst registerModelsHooks = () => {\n  strapi.db.lifecycles.subscribe({\n    models: ['plugin::i18n.locale'],\n\n    async afterCreate() {\n      await getService('permissions').actions.syncSuperAdminPermissionsWithLocales();\n    },\n\n    async afterDelete() {\n      await getService('permissions').actions.syncSuperAdminPermissionsWithLocales();\n    },\n  });\n\n  strapi.documents.use(async (context, next) => {\n    const schema: Schema.ContentType = context.contentType;\n\n    if (!['create', 'update', 'discardDraft', 'publish'].includes(context.action)) {\n      return next();\n    }\n\n    if (!getService('content-types').isLocalizedContentType(schema)) {\n      return next();\n    }\n\n    // Build a populate array for all non localized fields within the schema\n    const { getNestedPopulateOfNonLocalizedAttributes } = getService('content-types');\n\n    const attributesToPopulate = getNestedPopulateOfNonLocalizedAttributes(schema.uid);\n\n    // Get the result of the document service action\n    const result = (await next()) as any;\n\n    // We may not have received a result with everything populated that we need\n    // Use the id and populate built from non localized fields to get the full\n    // result\n    let resultID;\n    // TODO: fix bug where an empty array can be returned\n    if (Array.isArray(result?.entries) && result.entries[0]?.id) {\n      resultID = result.entries[0].id;\n    } else if (result?.id) {\n      resultID = result.id;\n    } else {\n      return result;\n    }\n\n    if (attributesToPopulate.length > 0) {\n      const populatedResult = await strapi.db\n        .query(schema.uid)\n        .findOne({ where: { id: resultID }, populate: attributesToPopulate });\n\n      await getService('localizations').syncNonLocalizedAttributes(populatedResult, schema);\n    }\n\n    return result;\n  });\n};\n\nexport default async () => {\n  const { sendDidInitializeEvent } = getService('metrics');\n  const { initDefaultLocale } = getService('locales');\n  const { sectionsBuilder, actions, engine } = getService('permissions');\n\n  // Data\n  await initDefaultLocale();\n\n  // Sections Builder\n  sectionsBuilder.registerLocalesPropertyHandler();\n\n  // Actions\n  await actions.registerI18nActions();\n  actions.registerI18nActionsHooks();\n  actions.updateActionsProperties();\n\n  // Engine/Permissions\n  engine.registerI18nPermissionsHandlers();\n\n  // Hooks & Models\n  registerModelsHooks();\n\n  sendDidInitializeEvent();\n};\n","import { get } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Core, Struct } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst { ApplicationError } = errors;\n\n// TODO: v5 if implemented in the CM => delete this middleware\nconst validateLocaleCreation: Core.MiddlewareHandler = async (ctx, next) => {\n  const { model } = ctx.params;\n  const { query } = ctx.request;\n\n  // Prevent empty body\n  if (!ctx.request.body) {\n    ctx.request.body = {};\n  }\n\n  const body = ctx.request.body as any;\n\n  const { getValidLocale, isLocalizedContentType } = getService('content-types');\n\n  const modelDef = strapi.getModel(model) as Struct.ContentTypeSchema;\n\n  if (!isLocalizedContentType(modelDef)) {\n    return next();\n  }\n\n  // Prevent empty string locale\n  const locale = get('locale', query) || get('locale', body) || undefined;\n\n  // cleanup to avoid creating duplicates in single types\n  ctx.request.query = {};\n\n  let entityLocale;\n  try {\n    entityLocale = await getValidLocale(locale);\n  } catch (e) {\n    throw new ApplicationError(\"This locale doesn't exist\");\n  }\n\n  body.locale = entityLocale;\n\n  if (modelDef.kind === 'singleType') {\n    const entity = await strapi.entityService.findMany(modelDef.uid, {\n      locale: entityLocale,\n    } as any); // TODO: add this type to entityService\n\n    ctx.request.query.locale = body.locale;\n\n    // updating\n    if (entity) {\n      return next();\n    }\n  }\n\n  return next();\n};\n\nexport default validateLocaleCreation;\n","import { propEq, identity } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\n\nconst { ValidationError } = errors;\n\nconst LOCALE_SCALAR_TYPENAME = 'I18NLocaleCode';\nconst LOCALE_ARG_PLUGIN_NAME = 'I18NLocaleArg';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  register() {\n    const { service: getGraphQLService } = strapi.plugin('graphql');\n    const { service: getI18NService } = strapi.plugin('i18n');\n\n    const { isLocalizedContentType } = getI18NService('content-types');\n\n    const extensionService = getGraphQLService('extension');\n\n    extensionService.shadowCRUD('plugin::i18n.locale').disableMutations();\n\n    // Disable unwanted fields for localized content types\n    Object.entries(strapi.contentTypes).forEach(([uid, ct]) => {\n      if (isLocalizedContentType(ct)) {\n        // Disable locale field in localized inputs\n        extensionService.shadowCRUD(uid).field('locale').disableInput();\n\n        // Disable localizations field in localized inputs\n        extensionService.shadowCRUD(uid).field('localizations').disableInput();\n      }\n    });\n\n    extensionService.use(({ nexus, typeRegistry }: any) => {\n      const i18nLocaleArgPlugin = getI18nLocaleArgPlugin({ nexus, typeRegistry });\n      const i18nLocaleScalar = getLocaleScalar({ nexus });\n      return {\n        plugins: [i18nLocaleArgPlugin],\n        types: [i18nLocaleScalar],\n\n        resolversConfig: {\n          // Modify the default scope associated to find and findOne locale queries to match the actual action name\n          'Query.i18NLocale': { auth: { scope: 'plugin::i18n.locales.listLocales' } },\n          'Query.i18NLocales': { auth: { scope: 'plugin::i18n.locales.listLocales' } },\n        },\n      };\n    });\n  },\n});\n\nconst getLocaleScalar = ({ nexus }: any) => {\n  const { service: getI18NService } = strapi.plugin('i18n');\n\n  const locales = getI18NService('iso-locales').getIsoLocales();\n\n  return nexus.scalarType({\n    name: LOCALE_SCALAR_TYPENAME,\n\n    description: 'A string used to identify an i18n locale',\n\n    serialize: identity,\n    parseValue: identity,\n\n    parseLiteral(ast: any) {\n      if (ast.kind !== 'StringValue') {\n        throw new ValidationError('Locale cannot represent non string type');\n      }\n\n      const isValidLocale = ast.value === '*' || locales.find(propEq('code', ast.value));\n\n      if (!isValidLocale) {\n        throw new ValidationError('Unknown locale supplied');\n      }\n\n      return ast.value;\n    },\n  });\n};\n\nconst getI18nLocaleArgPlugin = ({ nexus, typeRegistry }: any) => {\n  const { service: getI18NService } = strapi.plugin('i18n');\n\n  const { isLocalizedContentType } = getI18NService('content-types');\n\n  return nexus.plugin({\n    name: LOCALE_ARG_PLUGIN_NAME,\n\n    onAddOutputField(config: any) {\n      // Add the locale arg to the queries on localized CTs\n\n      const { parentType } = config;\n\n      // Only target queries or mutations\n      if (parentType !== 'Query' && parentType !== 'Mutation') {\n        return;\n      }\n\n      let contentType;\n\n      if (config?.extensions?.strapi?.contentType) {\n        contentType = config.extensions.strapi.contentType;\n      } else {\n        const registryType = typeRegistry.get(config.type);\n\n        if (!registryType) {\n          return;\n        }\n\n        contentType = registryType.config.contentType;\n      }\n\n      // Ignore non-localized content types\n      if (!isLocalizedContentType(contentType)) {\n        return;\n      }\n\n      if (!config.args) {\n        config.args = {};\n      }\n\n      config.args.locale = nexus.arg({\n        type: LOCALE_SCALAR_TYPENAME,\n        description: 'The locale to use for the query',\n      });\n    },\n  });\n};\n","import _ from 'lodash';\nimport type { Core } from '@strapi/types';\n\nimport validateLocaleCreation from './controllers/validate-locale-creation';\nimport graphqlProvider from './graphql';\nimport { getService } from './utils';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  extendContentTypes(strapi);\n  addContentManagerLocaleMiddleware(strapi);\n};\n\n// TODO: v5 if implemented in the CM => delete this middleware\n/**\n * Adds middleware on CM creation routes to use i18n locale passed in a specific param\n * @param {Strapi} strapi\n */\nconst addContentManagerLocaleMiddleware = (strapi: Core.Strapi) => {\n  strapi.server.router.use('/content-manager/collection-types/:model', (ctx, next) => {\n    if (ctx.method === 'POST' || ctx.method === 'PUT') {\n      return validateLocaleCreation(ctx, next);\n    }\n\n    return next();\n  });\n\n  strapi.server.router.use('/content-manager/single-types/:model', (ctx, next) => {\n    if (ctx.method === 'POST' || ctx.method === 'PUT') {\n      return validateLocaleCreation(ctx, next);\n    }\n\n    return next();\n  });\n};\n\n/**\n * Adds locale and localization fields to all content types\n * Even if content type is not localized, it will have these fields\n * @param {Strapi} strapi\n */\nconst extendContentTypes = (strapi: Core.Strapi) => {\n  const { isLocalizedContentType } = getService('content-types');\n\n  Object.values(strapi.contentTypes).forEach((contentType) => {\n    const { attributes } = contentType;\n\n    const isLocalized = isLocalizedContentType(contentType);\n\n    _.set(attributes, 'locale', {\n      writable: true,\n      private: !isLocalized,\n      configurable: false,\n      visible: false,\n      type: 'string',\n    });\n\n    _.set(attributes, 'localizations', {\n      type: 'relation',\n      relation: 'oneToMany',\n      target: contentType.uid,\n      writable: false,\n      private: !isLocalized,\n      configurable: false,\n      visible: false,\n      unstable_virtual: true,\n      joinColumn: {\n        name: 'document_id',\n        referencedColumn: 'document_id',\n        referencedTable: strapi.db.metadata.identifiers.getTableName(contentType.collectionName!),\n        // ensure the population will not include the results we already loaded\n        on({ results }: { results: any[] }) {\n          return {\n            id: {\n              $notIn: results.map((r) => r.id),\n            },\n          };\n        },\n      },\n    });\n  });\n\n  if (strapi.plugin('graphql')) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    graphqlProvider({ strapi }).register();\n  }\n};\n","import schema from './schema.json';\n\nexport default {\n  schema,\n};\n","import locale from './locale';\n\nexport default {\n  locale,\n};\n","import { isArray, getOr, prop } from 'lodash/fp';\nimport { getService } from '../../utils';\n\nconst actions = [\n  {\n    section: 'settings',\n    category: 'Internationalization',\n    subCategory: 'Locales',\n    pluginName: 'i18n',\n    displayName: 'Create',\n    uid: 'locale.create',\n  },\n  {\n    section: 'settings',\n    category: 'Internationalization',\n    subCategory: 'Locales',\n    pluginName: 'i18n',\n    displayName: 'Read',\n    uid: 'locale.read',\n    aliases: [\n      { actionId: 'plugin::content-manager.explorer.read', subjects: ['plugin::i18n.locale'] },\n    ],\n  },\n  {\n    section: 'settings',\n    category: 'Internationalization',\n    subCategory: 'Locales',\n    pluginName: 'i18n',\n    displayName: 'Update',\n    uid: 'locale.update',\n  },\n  {\n    section: 'settings',\n    category: 'Internationalization',\n    subCategory: 'Locales',\n    pluginName: 'i18n',\n    displayName: 'Delete',\n    uid: 'locale.delete',\n  },\n];\n\nconst addLocalesPropertyIfNeeded = ({ value: action }: any) => {\n  const {\n    section,\n    options: { applyToProperties },\n  } = action;\n\n  // Only add the locales property to contentTypes' actions\n  if (section !== 'contentTypes') {\n    return;\n  }\n\n  // If the 'locales' property is already declared within the applyToProperties array, then ignore the next steps\n  if (isArray(applyToProperties) && applyToProperties.includes('locales')) {\n    return;\n  }\n\n  // Add the 'locales' property to the applyToProperties array (create it if necessary)\n  action.options.applyToProperties = isArray(applyToProperties)\n    ? applyToProperties.concat('locales')\n    : ['locales'];\n};\n\nconst shouldApplyLocalesPropertyToSubject = ({ property, subject }: any) => {\n  if (property === 'locales') {\n    const model = strapi.getModel(subject);\n\n    return getService('content-types').isLocalizedContentType(model);\n  }\n\n  return true;\n};\n\nconst addAllLocalesToPermissions = async (permissions: any) => {\n  const { actionProvider } = strapi.service('admin::permission');\n  const { find: findAllLocales } = getService('locales');\n\n  const allLocales = await findAllLocales();\n  const allLocalesCode = allLocales.map(prop('code'));\n\n  return Promise.all(\n    permissions.map(async (permission: any) => {\n      const { action, subject } = permission;\n\n      const appliesToLocalesProperty = await actionProvider.appliesToProperty(\n        'locales',\n        action,\n        subject\n      );\n\n      if (!appliesToLocalesProperty) {\n        return permission;\n      }\n\n      const oldPermissionProperties = getOr({}, 'properties', permission);\n\n      return { ...permission, properties: { ...oldPermissionProperties, locales: allLocalesCode } };\n    })\n  );\n};\n\nconst syncSuperAdminPermissionsWithLocales = async () => {\n  const roleService = strapi.service('admin::role');\n  const permissionService = strapi.service('admin::permission');\n\n  const superAdminRole = await roleService.getSuperAdmin();\n\n  if (!superAdminRole) {\n    return;\n  }\n\n  const superAdminPermissions = await permissionService.findMany({\n    where: {\n      role: {\n        id: superAdminRole.id,\n      },\n    },\n  });\n\n  const newSuperAdminPermissions = await addAllLocalesToPermissions(superAdminPermissions);\n\n  await roleService.assignPermissions(superAdminRole.id, newSuperAdminPermissions);\n};\n\nconst registerI18nActions = async () => {\n  const { actionProvider } = strapi.service('admin::permission');\n\n  await actionProvider.registerMany(actions);\n};\n\nconst registerI18nActionsHooks = () => {\n  const { actionProvider } = strapi.service('admin::permission');\n  const { hooks } = strapi.service('admin::role');\n\n  actionProvider.hooks.appliesPropertyToSubject.register(shouldApplyLocalesPropertyToSubject);\n  hooks.willResetSuperAdminPermissions.register(addAllLocalesToPermissions);\n};\n\nconst updateActionsProperties = () => {\n  const { actionProvider } = strapi.service('admin::permission');\n\n  // Register the transformation for every new action\n  actionProvider.hooks.willRegister.register(addLocalesPropertyIfNeeded);\n\n  // Handle already registered actions\n  actionProvider.values().forEach((action: any) => addLocalesPropertyIfNeeded({ value: action }));\n};\n\nexport default {\n  actions,\n  registerI18nActions,\n  registerI18nActionsHooks,\n  updateActionsProperties,\n  syncSuperAdminPermissionsWithLocales,\n};\n","import { isEmpty } from 'lodash/fp';\n\nimport { getService } from '../../utils';\n\n/**\n * Handler for the permissions layout (sections builder)\n * Adds the locales property to the subjects\n * @param {Action} action\n * @param {ContentTypesSection} section\n * @return {Promise<void>}\n */\nconst localesPropertyHandler = async ({ action, section }: any) => {\n  const { actionProvider } = strapi.service('admin::permission');\n\n  const locales = await getService('locales').find();\n\n  // Do not add the locales property if there is none registered\n  if (isEmpty(locales)) {\n    return;\n  }\n\n  for (const subject of section.subjects) {\n    const applies = await actionProvider.appliesToProperty('locales', action.actionId, subject.uid);\n    const hasLocalesProperty = subject.properties.find(\n      (property: any) => property.value === 'locales'\n    );\n\n    if (applies && !hasLocalesProperty) {\n      subject.properties.push({\n        label: 'Locales',\n        value: 'locales',\n        children: locales.map(({ name, code }: any) => ({ label: name || code, value: code })),\n      });\n    }\n  }\n};\n\nconst registerLocalesPropertyHandler = () => {\n  const { sectionsBuilder } = strapi.service('admin::permission');\n\n  sectionsBuilder.addHandler('singleTypes', localesPropertyHandler);\n  sectionsBuilder.addHandler('collectionTypes', localesPropertyHandler);\n};\n\nexport default {\n  localesPropertyHandler,\n  registerLocalesPropertyHandler,\n};\n","import { getService } from '../../utils';\n\n/**\n * @typedef {object} WillRegisterPermissionContext\n * @property {Permission} permission\n * @property {object} user\n * @property {object} condition\n */\n\n/**\n * Locales property handler for the permission engine\n * Add the has-locale-access condition if the locales property is defined\n * @param {WillRegisterPermissionContext} context\n */\nconst willRegisterPermission = (context: any) => {\n  const { permission, condition, user } = context;\n  const { subject, properties } = permission;\n\n  const isSuperAdmin = strapi.service('admin::role').hasSuperAdminRole(user);\n\n  if (isSuperAdmin) {\n    return;\n  }\n\n  const { locales } = properties || {};\n  const { isLocalizedContentType } = getService('content-types');\n\n  // If there is no subject defined, ignore the permission\n  if (!subject) {\n    return;\n  }\n\n  const ct = strapi.contentTypes[subject];\n\n  // If the subject exists but isn't localized, ignore the permission\n  if (!isLocalizedContentType(ct)) {\n    return;\n  }\n\n  // If the subject is localized but the locales property is null (access to all locales), ignore the permission\n  if (locales === null) {\n    return;\n  }\n\n  condition.and({\n    locale: {\n      $in: locales || [],\n    },\n  });\n};\n\nconst registerI18nPermissionsHandlers = () => {\n  const { engine } = strapi.service('admin::permission');\n\n  engine.hooks['before-register.permission'].register(willRegisterPermission);\n};\n\nexport default {\n  willRegisterPermission,\n  registerI18nPermissionsHandlers,\n};\n","import i18nActionsService from './permissions/actions';\nimport sectionsBuilderService from './permissions/sections-builder';\nimport engineService from './permissions/engine';\n\nconst permissions = () => ({\n  actions: i18nActionsService,\n  sectionsBuilder: sectionsBuilderService,\n  engine: engineService,\n});\n\ntype PermissionsService = typeof permissions;\n\nexport default permissions;\nexport type { PermissionsService };\n","import { reduce } from 'lodash/fp';\nimport { getService } from '../utils';\n\nconst sendDidInitializeEvent = async () => {\n  const { isLocalizedContentType } = getService('content-types');\n\n  // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\n  const numberOfContentTypes = reduce(\n    (sum, contentType) => (isLocalizedContentType(contentType) ? sum + 1 : sum),\n    0\n  )(strapi.contentTypes as any);\n\n  await strapi.telemetry.send('didInitializeI18n', { groupProperties: { numberOfContentTypes } });\n};\n\nconst sendDidUpdateI18nLocalesEvent = async () => {\n  const numberOfLocales = await getService('locales').count();\n\n  await strapi.telemetry.send('didUpdateI18nLocales', {\n    groupProperties: { numberOfLocales },\n  });\n};\n\nconst metrics = () => ({\n  sendDidInitializeEvent,\n  sendDidUpdateI18nLocalesEvent,\n});\n\ntype MetricsService = typeof metrics;\n\nexport default metrics;\nexport type { MetricsService };\n","import { cloneDeep, isEmpty } from 'lodash/fp';\n\nimport type { Schema } from '@strapi/types';\nimport { async } from '@strapi/utils';\nimport { getService } from '../utils';\n\n/**\n * Update non localized fields of all the related localizations of an entry with the entry values\n */\nconst syncNonLocalizedAttributes = async (sourceEntry: any, model: Schema.ContentType) => {\n  const { copyNonLocalizedAttributes } = getService('content-types');\n\n  const nonLocalizedAttributes = copyNonLocalizedAttributes(model, sourceEntry);\n  if (isEmpty(nonLocalizedAttributes)) {\n    return;\n  }\n\n  const uid = model.uid;\n  const documentId = sourceEntry.documentId;\n  const locale = sourceEntry.locale;\n  const status = sourceEntry?.publishedAt ? 'published' : 'draft';\n\n  // Find all the entries that need to be updated\n  // this is every other entry of the document in the same status but a different locale\n  const localeEntriesToUpdate = await strapi.db.query(uid).findMany({\n    where: {\n      documentId,\n      publishedAt: status === 'published' ? { $ne: null } : null,\n      locale: { $ne: locale },\n    },\n    select: ['locale', 'id'],\n  });\n\n  const entryData = await strapi.documents(uid).omitComponentData(nonLocalizedAttributes);\n\n  await async.map(localeEntriesToUpdate, async (entry: any) => {\n    const transformedData = await strapi.documents.utils.transformData(\n      cloneDeep(nonLocalizedAttributes),\n      {\n        uid,\n        status,\n        locale: entry.locale,\n        allowMissingId: true,\n      }\n    );\n\n    // Update or create non localized components for the entry\n    const componentData = await strapi\n      .documents(uid)\n      .updateComponents(entry, transformedData as any);\n\n    // Update every other locale entry of this documentId in the same status\n    await strapi.db.query(uid).update({\n      where: {\n        documentId,\n        publishedAt: status === 'published' ? { $ne: null } : null,\n        locale: { $eq: entry.locale },\n      },\n      // The data we send to the update function is the entry data merged with\n      // the updated component data\n      data: Object.assign(cloneDeep(entryData), componentData),\n    });\n  });\n};\n\nconst localizations = () => ({\n  syncNonLocalizedAttributes,\n});\n\ntype LocalizationsService = typeof localizations;\n\nexport default localizations;\nexport type { LocalizationsService };\n","import isoLocales from './iso-locales.json';\n\n/**\n * Returns the default locale based either on env var or english\n * @returns {string}\n */\nconst getInitLocale = () => {\n  const envLocaleCode = process.env.STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE;\n\n  if (envLocaleCode) {\n    const matchingLocale = isoLocales.find(({ code }) => code === envLocaleCode);\n\n    if (!matchingLocale) {\n      throw new Error(\n        'Unknown locale code provided in the environment variable STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE'\n      );\n    }\n\n    return { ...matchingLocale };\n  }\n\n  return {\n    code: 'en',\n    name: 'English (en)',\n  };\n};\n\nconst DEFAULT_LOCALE = getInitLocale();\n\nexport { isoLocales, DEFAULT_LOCALE, getInitLocale };\n","import { isNil } from 'lodash/fp';\nimport { DEFAULT_LOCALE } from '../constants';\nimport { getService, getCoreStore } from '../utils';\n\nconst find = (params: any = {}) =>\n  strapi.db.query('plugin::i18n.locale').findMany({ where: params });\n\nconst findById = (id: any) => strapi.db.query('plugin::i18n.locale').findOne({ where: { id } });\n\nconst findByCode = (code: any) =>\n  strapi.db.query('plugin::i18n.locale').findOne({ where: { code } });\n\nconst count = (params: any = {}) => strapi.db.query('plugin::i18n.locale').count({ where: params });\n\nconst create = async (locale: any) => {\n  const result = await strapi.db.query('plugin::i18n.locale').create({ data: locale });\n\n  getService('metrics').sendDidUpdateI18nLocalesEvent();\n\n  return result;\n};\n\nconst update = async (params: any, updates: any) => {\n  const result = await strapi.db\n    .query('plugin::i18n.locale')\n    .update({ where: params, data: updates });\n\n  getService('metrics').sendDidUpdateI18nLocalesEvent();\n\n  return result;\n};\n\nconst deleteFn = async ({ id }: any) => {\n  const localeToDelete = await findById(id);\n\n  if (localeToDelete) {\n    await deleteAllLocalizedEntriesFor({ locale: localeToDelete.code });\n    const result = await strapi.db.query('plugin::i18n.locale').delete({ where: { id } });\n\n    getService('metrics').sendDidUpdateI18nLocalesEvent();\n\n    return result;\n  }\n\n  return localeToDelete;\n};\n\nconst setDefaultLocale = ({ code }: any) =>\n  getCoreStore().set({ key: 'default_locale', value: code });\n\nconst getDefaultLocale = () => getCoreStore().get({ key: 'default_locale' });\n\nconst setIsDefault = async (locales: any) => {\n  if (isNil(locales)) {\n    return locales;\n  }\n\n  const actualDefault = await getDefaultLocale();\n\n  if (Array.isArray(locales)) {\n    return locales.map((locale) => ({ ...locale, isDefault: actualDefault === locale.code }));\n  }\n  // single locale\n  return { ...locales, isDefault: actualDefault === locales.code };\n};\n\nconst initDefaultLocale = async () => {\n  const existingLocalesNb = await strapi.db.query('plugin::i18n.locale').count();\n  if (existingLocalesNb === 0) {\n    await create(DEFAULT_LOCALE);\n    await setDefaultLocale({ code: DEFAULT_LOCALE.code });\n  }\n};\n\nconst deleteAllLocalizedEntriesFor = async ({ locale }: any) => {\n  const { isLocalizedContentType } = getService('content-types');\n\n  const localizedModels = Object.values(strapi.contentTypes).filter(isLocalizedContentType);\n\n  for (const model of localizedModels) {\n    // FIXME: delete many content & their associations\n    await strapi.db.query(model.uid).deleteMany({ where: { locale } });\n  }\n};\n\nconst locales = () => ({\n  find,\n  findById,\n  findByCode,\n  create,\n  update,\n  count,\n  setDefaultLocale,\n  getDefaultLocale,\n  setIsDefault,\n  delete: deleteFn,\n  initDefaultLocale,\n});\n\ntype LocaleService = typeof locales;\n\nexport default locales;\nexport type { LocaleService };\n","import { isoLocales } from '../constants';\n\nconst getIsoLocales = () => isoLocales;\n\nconst isoLocalesService = () => ({\n  getIsoLocales,\n});\n\ntype ISOLocalesService = typeof isoLocalesService;\n\nexport default isoLocalesService;\nexport type { ISOLocalesService };\n","import _ from 'lodash';\nimport { pick, pipe, has, prop, isNil, cloneDeep, isArray } from 'lodash/fp';\nimport { errors, contentTypes as contentTypeUtils } from '@strapi/utils';\nimport { getService } from '../utils';\n\nconst {\n  isRelationalAttribute,\n  getVisibleAttributes,\n  isTypedAttribute,\n  getScalarAttributes,\n  getRelationalAttributes,\n} = contentTypeUtils;\nconst { ApplicationError } = errors;\n\nconst hasLocalizedOption = (modelOrAttribute: any) => {\n  return prop('pluginOptions.i18n.localized', modelOrAttribute) === true;\n};\n\nconst getValidLocale = async (locale: any) => {\n  const localesService = getService('locales');\n\n  if (isNil(locale)) {\n    return localesService.getDefaultLocale();\n  }\n\n  const foundLocale = await localesService.findByCode(locale);\n  if (!foundLocale) {\n    throw new ApplicationError('Locale not found');\n  }\n\n  return locale;\n};\n\n/**\n * Returns whether an attribute is localized or not\n * @param {*} attribute\n * @returns\n */\nconst isLocalizedAttribute = (attribute: any) => {\n  return (\n    hasLocalizedOption(attribute) ||\n    isRelationalAttribute(attribute) ||\n    isTypedAttribute(attribute, 'uid')\n  );\n};\n\n/**\n * Returns whether a model is localized or not\n * @param {*} model\n * @returns\n */\nconst isLocalizedContentType = (model: any) => {\n  return hasLocalizedOption(model);\n};\n\n/**\n * Returns the list of attribute names that are not localized\n * @param {object} model\n * @returns {string[]}\n */\nconst getNonLocalizedAttributes = (model: any) => {\n  return getVisibleAttributes(model).filter(\n    (attrName) => !isLocalizedAttribute(model.attributes[attrName])\n  );\n};\n\nconst removeId = (value: any) => {\n  if (typeof value === 'object' && has('id', value)) {\n    delete value.id;\n  }\n};\n\nconst removeIds = (model: any) => (entry: any) => removeIdsMut(model, cloneDeep(entry));\n\nconst removeIdsMut = (model: any, entry: any) => {\n  if (isNil(entry)) {\n    return entry;\n  }\n\n  removeId(entry);\n\n  _.forEach(model.attributes, (attr, attrName) => {\n    const value = entry[attrName];\n    if (attr.type === 'dynamiczone' && isArray(value)) {\n      value.forEach((compo) => {\n        if (has('__component', compo)) {\n          const model = strapi.components[compo.__component];\n          removeIdsMut(model, compo);\n        }\n      });\n    } else if (attr.type === 'component') {\n      const model = strapi.components[attr.component];\n      if (isArray(value)) {\n        value.forEach((compo) => removeIdsMut(model, compo));\n      } else {\n        removeIdsMut(model, value);\n      }\n    }\n  });\n\n  return entry;\n};\n\n/**\n * Returns a copy of an entry picking only its non localized attributes\n * @param {object} model\n * @param {object} entry\n * @returns {object}\n */\nconst copyNonLocalizedAttributes = (model: any, entry: any) => {\n  const nonLocalizedAttributes = getNonLocalizedAttributes(model);\n\n  return pipe(pick(nonLocalizedAttributes), removeIds(model))(entry);\n};\n\n/**\n * Returns the list of attribute names that are localized\n * @param {object} model\n * @returns {string[]}\n */\nconst getLocalizedAttributes = (model: any) => {\n  return getVisibleAttributes(model).filter((attrName) =>\n    isLocalizedAttribute(model.attributes[attrName])\n  );\n};\n\n/**\n * Fill non localized fields of an entry if there are nil\n * @param {Object} entry entry to fill\n * @param {Object} relatedEntry values used to fill\n * @param {Object} options\n * @param {Object} options.model corresponding model\n */\nconst fillNonLocalizedAttributes = (entry: any, relatedEntry: any, { model }: any) => {\n  if (isNil(relatedEntry)) {\n    return;\n  }\n\n  const modelDef = strapi.getModel(model);\n  const relatedEntryCopy = copyNonLocalizedAttributes(modelDef, relatedEntry);\n\n  _.forEach(relatedEntryCopy, (value, field) => {\n    if (isNil(entry[field])) {\n      entry[field] = value;\n    }\n  });\n};\n\n/**\n * build the populate param to\n * @param {String} modelUID uid of the model, could be of a content-type or a component\n */\nconst getNestedPopulateOfNonLocalizedAttributes = (modelUID: any) => {\n  const schema = strapi.getModel(modelUID);\n  const scalarAttributes = getScalarAttributes(schema);\n  const nonLocalizedAttributes = getNonLocalizedAttributes(schema);\n\n  const allAttributes = [...scalarAttributes, ...nonLocalizedAttributes];\n  if (schema.modelType === 'component') {\n    // When called recursively on a non localized component we\n    // need to explicitly populate that components relations\n    allAttributes.push(...getRelationalAttributes(schema));\n  }\n\n  const currentAttributesToPopulate = allAttributes.filter((value, index, self) => {\n    return self.indexOf(value) === index && self.lastIndexOf(value) === index;\n  });\n\n  const attributesToPopulate = [...currentAttributesToPopulate];\n  for (const attrName of currentAttributesToPopulate) {\n    const attr = schema.attributes[attrName];\n    if (attr.type === 'component') {\n      const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(attr.component).map(\n        (nestedAttr) => `${attrName}.${nestedAttr}`\n      );\n      attributesToPopulate.push(...nestedPopulate);\n    } else if (attr.type === 'dynamiczone') {\n      attr.components.forEach((componentName) => {\n        const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(componentName).map(\n          (nestedAttr) => `${attrName}.${nestedAttr}`\n        );\n        attributesToPopulate.push(...nestedPopulate);\n      });\n    }\n  }\n\n  return attributesToPopulate;\n};\n\nconst contentTypes = () => ({\n  isLocalizedContentType,\n  getValidLocale,\n  getLocalizedAttributes,\n  getNonLocalizedAttributes,\n  copyNonLocalizedAttributes,\n  fillNonLocalizedAttributes,\n  getNestedPopulateOfNonLocalizedAttributes,\n});\n\ntype ContentTypesService = typeof contentTypes;\n\nexport default contentTypes;\nexport { ContentTypesService };\n","import type { Core, Schema, Data } from '@strapi/types';\n\nimport { traverseEntity } from '@strapi/utils';\nimport { curry } from 'lodash/fp';\n\nimport { getService } from '../../utils';\n\nconst LOCALIZATION_FIELDS = ['locale', 'localizations'];\n\nconst sanitize = ({ strapi }: { strapi: Core.Strapi }) => {\n  const { isLocalizedContentType } = getService('content-types');\n\n  /**\n   * Sanitizes localization fields of a given entity based on its schema.\n   *\n   * Remove localization-related fields that are unnecessary, that is\n   * for schemas that aren't localized.\n   */\n  const sanitizeLocalizationFields = curry((schema: Schema.Schema, entity: Data.Entity) =>\n    traverseEntity(\n      ({ key, schema }, { remove }) => {\n        const isLocalized = isLocalizedContentType(schema);\n        const isLocalizationField = LOCALIZATION_FIELDS.includes(key);\n\n        if (!isLocalized && isLocalizationField) {\n          remove(key);\n        }\n      },\n      { schema, getModel: strapi.getModel.bind(strapi) },\n      entity\n    )\n  );\n\n  return {\n    sanitizeLocalizationFields,\n  };\n};\n\ntype SanitizeService = typeof sanitize;\n\nexport default sanitize;\nexport type { SanitizeService };\n","import permissions from './permissions';\nimport metrics from './metrics';\nimport localizations from './localizations';\nimport locales from './locales';\nimport isoLocales from './iso-locales';\nimport contentTypes from './content-types';\nimport sanitize from './sanitize';\n\nexport default {\n  permissions,\n  metrics,\n  localizations,\n  locales,\n  sanitize,\n  'iso-locales': isoLocales,\n  'content-types': contentTypes,\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/iso-locales',\n      handler: 'iso-locales.listIsoLocales',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/locales',\n      handler: 'locales.listLocales',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/locales',\n      handler: 'locales.createLocale',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.create'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/locales/:id',\n      handler: 'locales.updateLocale',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.update'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/locales/:id',\n      handler: 'locales.deleteLocale',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::i18n.locale.delete'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/content-manager/actions/get-non-localized-fields',\n      handler: 'content-types.getNonLocalizedAttributes',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'content-api',\n  routes: [\n    {\n      method: 'GET',\n      path: '/locales',\n      handler: 'locales.listLocales',\n    },\n  ],\n};\n","import admin from './admin';\nimport contentApi from './content-api';\n\nexport default {\n  admin,\n  'content-api': contentApi,\n};\n","import { prop } from 'lodash/fp';\nimport { yup, validateYupSchema } from '@strapi/utils';\n\nimport { isoLocales } from '../constants';\n\nconst allowedLocaleCodes = isoLocales.map(prop('code'));\n\nconst createLocaleSchema = yup\n  .object()\n  .shape({\n    name: yup.string().max(50).nullable(),\n    code: yup.string().oneOf(allowedLocaleCodes).required(),\n    isDefault: yup.boolean().required(),\n  })\n  .noUnknown();\n\nconst updateLocaleSchema = yup\n  .object()\n  .shape({\n    name: yup.string().min(1).max(50).nullable(),\n    isDefault: yup.boolean(),\n  })\n  .noUnknown();\n\nconst validateCreateLocaleInput = validateYupSchema(createLocaleSchema);\nconst validateUpdateLocaleInput = validateYupSchema(updateLocaleSchema);\n\nexport { validateCreateLocaleInput, validateUpdateLocaleInput };\n","const formatLocale = (locale: { name: string; code: string; isDefault: boolean }) => {\n  return {\n    ...locale,\n    name: locale.name || null,\n  };\n};\n\nexport { formatLocale };\n","import * as utils from '@strapi/utils';\nimport { pick } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\nimport { getService } from '../utils';\nimport { validateCreateLocaleInput, validateUpdateLocaleInput } from '../validation/locales';\nimport { formatLocale } from '../domain/locale';\n\nconst { setCreatorFields } = utils;\nconst { ApplicationError } = utils.errors;\n\nconst sanitizeLocale = (locale: any) => {\n  const model = strapi.getModel('plugin::i18n.locale');\n\n  return strapi.contentAPI.sanitize.output(locale, model);\n};\n\nconst controller: Core.Controller = {\n  async listLocales(ctx) {\n    const localesService = getService('locales');\n\n    const locales = await localesService.find();\n    const sanitizedLocales = await sanitizeLocale(locales);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocales);\n  },\n\n  async createLocale(ctx) {\n    const { user } = ctx.state;\n    const body = ctx.request.body as any;\n    const { isDefault, ...localeToCreate } = body;\n\n    await validateCreateLocaleInput(body);\n\n    const localesService = getService('locales');\n\n    const existingLocale = await localesService.findByCode(body.code);\n    if (existingLocale) {\n      throw new ApplicationError('This locale already exists');\n    }\n\n    const localeToPersist = setCreatorFields({ user })(formatLocale(localeToCreate));\n\n    const locale = await localesService.create(localeToPersist);\n\n    if (isDefault) {\n      await localesService.setDefaultLocale(locale);\n    }\n\n    const sanitizedLocale = await sanitizeLocale(locale);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\n  },\n\n  async updateLocale(ctx) {\n    const { user } = ctx.state;\n    const { id } = ctx.params;\n    const body = ctx.request.body as any;\n    const { isDefault, ...updates } = body;\n\n    await validateUpdateLocaleInput(body);\n\n    const localesService = getService('locales');\n\n    const existingLocale = await localesService.findById(id);\n    if (!existingLocale) {\n      return ctx.notFound('locale.notFound');\n    }\n\n    const allowedParams = ['name'];\n    const cleanUpdates = setCreatorFields({ user, isEdition: true })(pick(allowedParams, updates));\n\n    const updatedLocale = await localesService.update({ id }, cleanUpdates);\n\n    if (isDefault) {\n      await localesService.setDefaultLocale(updatedLocale);\n    }\n\n    const sanitizedLocale = await sanitizeLocale(updatedLocale);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\n  },\n\n  async deleteLocale(ctx) {\n    const { id } = ctx.params;\n\n    const localesService = getService('locales');\n\n    const existingLocale = await localesService.findById(id);\n    if (!existingLocale) {\n      return ctx.notFound('locale.notFound');\n    }\n\n    const defaultLocaleCode = await localesService.getDefaultLocale();\n    if (existingLocale.code === defaultLocaleCode) {\n      throw new ApplicationError('Cannot delete the default locale');\n    }\n\n    await localesService.delete({ id });\n\n    const sanitizedLocale = await sanitizeLocale(existingLocale);\n\n    ctx.body = await localesService.setIsDefault(sanitizedLocale);\n  },\n};\n\nexport default controller;\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nimport { get } from 'lodash/fp';\n\nconst validateGetNonLocalizedAttributesSchema = yup\n  .object()\n  .shape({\n    model: yup.string().required(),\n    id: yup.mixed().when('model', {\n      is: (model: any) => get('kind', strapi.contentType(model)) === 'singleType',\n      then: yup.strapiID().nullable(),\n      otherwise: yup.strapiID().required(),\n    }),\n    locale: yup.string().required(),\n  })\n  .noUnknown()\n  .required();\n\nconst validateGetNonLocalizedAttributesInput = validateYupSchema(\n  validateGetNonLocalizedAttributesSchema\n);\n\nexport { validateGetNonLocalizedAttributesInput };\n","import { pick, uniq, prop, getOr, flatten, pipe, map } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils, errors } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\nimport { getService } from '../utils';\nimport { validateGetNonLocalizedAttributesInput } from '../validation/content-types';\n\nconst { ApplicationError } = errors;\n\nconst { PUBLISHED_AT_ATTRIBUTE } = contentTypesUtils.constants;\n\nconst getLocalesProperty = getOr<string[]>([], 'properties.locales');\nconst getFieldsProperty = prop('properties.fields');\n\nconst getFirstLevelPath = map((path: string) => path.split('.')[0]);\n\nconst controller = {\n  async getNonLocalizedAttributes(ctx) {\n    const { user } = ctx.state;\n    const body = ctx.request.body as any;\n    const { model, id, locale } = body;\n\n    await validateGetNonLocalizedAttributesInput({ model, id, locale });\n\n    const {\n      copyNonLocalizedAttributes,\n      isLocalizedContentType,\n      getNestedPopulateOfNonLocalizedAttributes,\n    } = getService('content-types');\n\n    const {\n      default: { READ_ACTION, CREATE_ACTION },\n    } = strapi.service('admin::constants');\n\n    const modelDef = strapi.contentType(model);\n    const attributesToPopulate = getNestedPopulateOfNonLocalizedAttributes(model);\n\n    if (!isLocalizedContentType(modelDef)) {\n      throw new ApplicationError(`Model ${model} is not localized`);\n    }\n\n    const params = modelDef.kind === 'singleType' ? {} : { id };\n\n    const entity = await strapi.db\n      .query(model)\n      .findOne({ where: params, populate: attributesToPopulate });\n\n    if (!entity) {\n      return ctx.notFound();\n    }\n\n    const permissions = await strapi.admin.services.permission.findMany({\n      where: {\n        action: [READ_ACTION, CREATE_ACTION],\n        subject: model,\n        role: {\n          id: user.roles.map(prop('id')),\n        },\n      },\n    });\n\n    const localePermissions = permissions\n      .filter((perm: any) => getLocalesProperty(perm).includes(locale))\n      .map(getFieldsProperty);\n\n    const permittedFields = pipe(flatten, getFirstLevelPath, uniq)(localePermissions);\n\n    const nonLocalizedFields = copyNonLocalizedAttributes(modelDef, entity);\n    const sanitizedNonLocalizedFields = pick(permittedFields, nonLocalizedFields);\n\n    const availableLocalesResult = await strapi.plugins['content-manager']\n      .service('document-metadata')\n      .getMetadata(model, entity, {\n        availableLocales: true,\n      });\n\n    const availableLocales = availableLocalesResult.availableLocales.map((localeResult: any) =>\n      pick(['id', 'locale', PUBLISHED_AT_ATTRIBUTE], localeResult)\n    );\n\n    ctx.body = {\n      nonLocalizedFields: sanitizedNonLocalizedFields,\n      localizations: availableLocales.concat(\n        pick(['id', 'locale', PUBLISHED_AT_ATTRIBUTE], entity)\n      ),\n    };\n  },\n} satisfies Core.Controller;\n\nexport default controller;\n","import type { Core } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst controller: Core.Controller = {\n  listIsoLocales(ctx) {\n    const isoLocalesService = getService('iso-locales');\n\n    ctx.body = isoLocalesService.getIsoLocales();\n  },\n};\n\nexport default controller;\n","import locales from './locales';\nimport contentTypes from './content-types';\nimport isoLocales from './iso-locales';\n\nexport default {\n  locales,\n  'iso-locales': isoLocales,\n  'content-types': contentTypes,\n};\n","import bootstrap from './bootstrap';\nimport register from './register';\nimport contentTypes from './content-types';\nimport services from './services';\nimport routes from './routes';\nimport controllers from './controllers';\n\nexport default () => ({\n  register,\n  bootstrap,\n  routes,\n  controllers,\n  contentTypes,\n  services,\n});\n"],"names":["getCoreStore","strapi","store","type","name","getService","plugin","service","registerModelsHooks","db","lifecycles","subscribe","models","afterCreate","actions","syncSuperAdminPermissionsWithLocales","afterDelete","documents","use","context","next","schema","contentType","includes","action","isLocalizedContentType","getNestedPopulateOfNonLocalizedAttributes","attributesToPopulate","uid","result","resultID","Array","isArray","entries","id","length","populatedResult","query","findOne","where","populate","syncNonLocalizedAttributes","sendDidInitializeEvent","initDefaultLocale","sectionsBuilder","engine","registerLocalesPropertyHandler","registerI18nActions","registerI18nActionsHooks","updateActionsProperties","registerI18nPermissionsHandlers","ApplicationError","errors","validateLocaleCreation","ctx","model","params","request","body","getValidLocale","modelDef","getModel","locale","get","undefined","entityLocale","e","kind","entity","entityService","findMany","ValidationError","LOCALE_SCALAR_TYPENAME","LOCALE_ARG_PLUGIN_NAME","register","getGraphQLService","getI18NService","extensionService","shadowCRUD","disableMutations","Object","contentTypes","forEach","ct","field","disableInput","nexus","typeRegistry","i18nLocaleArgPlugin","getI18nLocaleArgPlugin","i18nLocaleScalar","getLocaleScalar","plugins","types","resolversConfig","auth","scope","locales","getIsoLocales","scalarType","description","serialize","identity","parseValue","parseLiteral","ast","isValidLocale","value","find","propEq","onAddOutputField","config","parentType","extensions","registryType","args","arg","extendContentTypes","addContentManagerLocaleMiddleware","server","router","method","values","attributes","isLocalized","_","set","writable","private","configurable","visible","relation","target","unstable_virtual","joinColumn","referencedColumn","referencedTable","metadata","identifiers","getTableName","collectionName","on","results","$notIn","map","r","graphqlProvider","section","category","subCategory","pluginName","displayName","aliases","actionId","subjects","addLocalesPropertyIfNeeded","options","applyToProperties","concat","shouldApplyLocalesPropertyToSubject","property","subject","addAllLocalesToPermissions","permissions","actionProvider","findAllLocales","allLocales","allLocalesCode","prop","Promise","all","permission","appliesToLocalesProperty","appliesToProperty","oldPermissionProperties","getOr","properties","roleService","permissionService","superAdminRole","getSuperAdmin","superAdminPermissions","role","newSuperAdminPermissions","assignPermissions","registerMany","hooks","appliesPropertyToSubject","willResetSuperAdminPermissions","willRegister","localesPropertyHandler","isEmpty","applies","hasLocalesProperty","push","label","children","code","addHandler","willRegisterPermission","condition","user","isSuperAdmin","hasSuperAdminRole","and","$in","i18nActionsService","sectionsBuilderService","engineService","numberOfContentTypes","reduce","sum","telemetry","send","groupProperties","sendDidUpdateI18nLocalesEvent","numberOfLocales","count","metrics","sourceEntry","copyNonLocalizedAttributes","nonLocalizedAttributes","documentId","status","publishedAt","localeEntriesToUpdate","$ne","select","entryData","omitComponentData","async","entry","transformedData","utils","transformData","cloneDeep","allowMissingId","componentData","updateComponents","update","$eq","data","assign","localizations","getInitLocale","envLocaleCode","process","env","STRAPI_PLUGIN_I18N_INIT_LOCALE_CODE","matchingLocale","isoLocales","Error","DEFAULT_LOCALE","findById","findByCode","create","updates","deleteFn","localeToDelete","deleteAllLocalizedEntriesFor","delete","setDefaultLocale","key","getDefaultLocale","setIsDefault","isNil","actualDefault","isDefault","existingLocalesNb","localizedModels","filter","deleteMany","isoLocalesService","isRelationalAttribute","getVisibleAttributes","isTypedAttribute","getScalarAttributes","getRelationalAttributes","contentTypeUtils","hasLocalizedOption","modelOrAttribute","localesService","foundLocale","isLocalizedAttribute","attribute","getNonLocalizedAttributes","attrName","removeId","has","removeIds","removeIdsMut","attr","compo","components","__component","component","pipe","pick","getLocalizedAttributes","fillNonLocalizedAttributes","relatedEntry","relatedEntryCopy","modelUID","scalarAttributes","allAttributes","modelType","currentAttributesToPopulate","index","self","indexOf","lastIndexOf","nestedPopulate","nestedAttr","componentName","LOCALIZATION_FIELDS","sanitize","sanitizeLocalizationFields","curry","traverseEntity","remove","isLocalizationField","bind","routes","path","handler","policies","admin","contentApi","allowedLocaleCodes","createLocaleSchema","yup","object","shape","string","max","nullable","oneOf","required","boolean","noUnknown","updateLocaleSchema","min","validateCreateLocaleInput","validateYupSchema","validateUpdateLocaleInput","formatLocale","setCreatorFields","sanitizeLocale","contentAPI","output","controller","listLocales","sanitizedLocales","createLocale","state","localeToCreate","existingLocale","localeToPersist","sanitizedLocale","updateLocale","notFound","allowedParams","cleanUpdates","isEdition","updatedLocale","deleteLocale","defaultLocaleCode","validateGetNonLocalizedAttributesSchema","mixed","when","is","then","strapiID","otherwise","validateGetNonLocalizedAttributesInput","PUBLISHED_AT_ATTRIBUTE","contentTypesUtils","constants","getLocalesProperty","getFieldsProperty","getFirstLevelPath","split","default","READ_ACTION","CREATE_ACTION","services","roles","localePermissions","perm","permittedFields","flatten","uniq","nonLocalizedFields","sanitizedNonLocalizedFields","availableLocalesResult","getMetadata","availableLocales","localeResult","listIsoLocales","bootstrap","controllers"],"mappings":"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"}