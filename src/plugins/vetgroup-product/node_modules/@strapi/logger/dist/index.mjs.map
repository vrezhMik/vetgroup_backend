{"version":3,"file":"index.mjs","sources":["../src/constants.ts","../src/formats/log-errors.ts","../src/formats/pretty-print.ts","../src/formats/level-filter.ts","../src/formats/exclude-colors.ts","../src/formats/detailed-log.ts","../src/configs/default-configuration.ts","../src/configs/output-file-configuration.ts","../src/index.ts"],"sourcesContent":["import { config } from 'winston';\n\nconst LEVELS = config.npm.levels;\nconst LEVEL_LABEL = 'silly';\nconst LEVEL = LEVELS[LEVEL_LABEL];\n\nexport { LEVEL, LEVEL_LABEL, LEVELS };\n","import { format, Logform } from 'winston';\n\nconst logErrors: Logform.FormatWrap = format((info) => {\n  if (info instanceof Error) {\n    return { ...info, message: `${info.message as string}${info.stack ? `\\n${info.stack}` : ''}` };\n  }\n\n  return info;\n});\n\nexport default logErrors;\n","import { format, Logform } from 'winston';\nimport logErrors from './log-errors';\n\nconst defaultTimestampFormat = 'YYYY-MM-DD HH:mm:ss.SSS';\n\nexport interface PrettyPrintOptions {\n  /**\n   * Enable or disable timestamps print if it's a boolean value. Use the given format for the timestamps if it's a string\n   */\n  timestamps?: Logform.TimestampOptions['format'] | boolean;\n  /**\n   * Enable or disable the use of colors for the log level\n   */\n  colors?: boolean;\n}\n\n/**\n * Create a pretty print formatter for a winston logger\n * @param options\n */\nexport default (options: PrettyPrintOptions = {}): Logform.Format => {\n  const { timestamps = true, colors = true } = options;\n\n  const handlers: Logform.Format[] = [];\n\n  if (timestamps) {\n    handlers.push(\n      format.timestamp({\n        format: timestamps === true ? defaultTimestampFormat : timestamps,\n      })\n    );\n  }\n\n  if (colors) {\n    handlers.push(format.colorize());\n  }\n\n  handlers.push(logErrors());\n\n  handlers.push(\n    format.printf(({ level, message, timestamp }) => {\n      return `${timestamps ? `[${timestamp as string}] ` : ''}${level}: ${message as string}`;\n    })\n  );\n\n  return format.combine(...handlers);\n};\n","import { format } from 'winston';\n\nexport default (...levels: string[]) => {\n  return format((info) => (levels.some((level) => info.level.includes(level)) ? info : false))();\n};\n","import { format } from 'winston';\n\n/**\n * This will remove the chalk color codes from the message provided.\n * It's used to log plain text in the log file\n */\nexport default format.printf(({ message }) => {\n  if (typeof message !== 'string') {\n    return message;\n  }\n\n  return message.replace(\n    // eslint-disable-next-line no-control-regex\n    /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n    ''\n  );\n});\n","import { format } from 'winston';\n\n/**\n * This will remove the chalk color codes from the message provided.\n * It's used to log plain text in the log file\n */\nexport default format.printf(({ message, level, timestamp }) => {\n  if (typeof message !== 'string') {\n    return message;\n  }\n\n  const newMessage = `[${timestamp as string}] ${level}: ${message as string}`;\n\n  return newMessage.replace(\n    // eslint-disable-next-line no-control-regex\n    /[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g,\n    ''\n  );\n});\n","import { transports, LoggerOptions } from 'winston';\nimport { LEVEL_LABEL, LEVELS } from '../constants';\nimport { prettyPrint } from '../formats';\n\nexport default (): LoggerOptions => {\n  return {\n    level: LEVEL_LABEL,\n    levels: LEVELS,\n    format: prettyPrint(),\n    transports: [new transports.Console()],\n  };\n};\n","import { transports, LoggerOptions } from 'winston';\n\nimport { LEVEL_LABEL, LEVELS } from '../constants';\nimport { prettyPrint, excludeColors } from '../formats';\n\nexport default (\n  filename: string,\n  fileTransportOptions: transports.FileTransportOptions = {}\n): LoggerOptions => {\n  return {\n    level: LEVEL_LABEL,\n    levels: LEVELS,\n    format: prettyPrint(),\n    transports: [\n      new transports.Console(),\n      new transports.File({\n        level: 'error',\n        filename,\n        format: excludeColors,\n        ...fileTransportOptions,\n      }),\n    ],\n  };\n};\n","import * as winston from 'winston';\nimport * as configs from './configs';\n\nexport * as formats from './formats';\n\nexport type Logger = winston.Logger;\n\nconst createLogger = (userConfiguration: winston.LoggerOptions = {}): winston.Logger => {\n  const configuration = configs.createDefaultConfiguration();\n\n  Object.assign(configuration, userConfiguration);\n\n  return winston.createLogger(configuration);\n};\n\nexport { createLogger, winston, configs };\n"],"names":["LEVELS","config","npm","levels","LEVEL_LABEL","logErrors","format","info","Error","message","stack","defaultTimestampFormat","options","timestamps","colors","handlers","push","timestamp","colorize","printf","level","combine","some","includes","replace","newMessage","prettyPrint","transports","Console","filename","fileTransportOptions","File","excludeColors","createLogger","userConfiguration","configuration","configs","Object","assign","winston"],"mappings":"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"}