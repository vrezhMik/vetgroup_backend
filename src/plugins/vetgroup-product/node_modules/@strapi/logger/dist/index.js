'use strict';

var winston = require('winston');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var winston__namespace = /*#__PURE__*/_interopNamespaceDefault(winston);

const LEVELS = winston.config.npm.levels;
const LEVEL_LABEL = 'silly';
LEVELS[LEVEL_LABEL];

const logErrors = winston.format((info)=>{
    if (info instanceof Error) {
        return {
            ...info,
            message: `${info.message}${info.stack ? `\n${info.stack}` : ''}`
        };
    }
    return info;
});

const defaultTimestampFormat = 'YYYY-MM-DD HH:mm:ss.SSS';
/**
 * Create a pretty print formatter for a winston logger
 * @param options
 */ var prettyPrint = ((options = {})=>{
    const { timestamps = true, colors = true } = options;
    const handlers = [];
    if (timestamps) {
        handlers.push(winston.format.timestamp({
            format: timestamps === true ? defaultTimestampFormat : timestamps
        }));
    }
    if (colors) {
        handlers.push(winston.format.colorize());
    }
    handlers.push(logErrors());
    handlers.push(winston.format.printf(({ level, message, timestamp })=>{
        return `${timestamps ? `[${timestamp}] ` : ''}${level}: ${message}`;
    }));
    return winston.format.combine(...handlers);
});

var levelFilter = ((...levels)=>{
    return winston.format((info)=>levels.some((level)=>info.level.includes(level)) ? info : false)();
});

/**
 * This will remove the chalk color codes from the message provided.
 * It's used to log plain text in the log file
 */ var excludeColors = winston.format.printf(({ message })=>{
    if (typeof message !== 'string') {
        return message;
    }
    return message.replace(// eslint-disable-next-line no-control-regex
    /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
});

/**
 * This will remove the chalk color codes from the message provided.
 * It's used to log plain text in the log file
 */ var detailedLog = winston.format.printf(({ message, level, timestamp })=>{
    if (typeof message !== 'string') {
        return message;
    }
    const newMessage = `[${timestamp}] ${level}: ${message}`;
    return newMessage.replace(// eslint-disable-next-line no-control-regex
    /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
});

var index$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  detailedLogs: detailedLog,
  excludeColors: excludeColors,
  levelFilter: levelFilter,
  prettyPrint: prettyPrint
});

var defaultConfiguration = (()=>{
    return {
        level: LEVEL_LABEL,
        levels: LEVELS,
        format: prettyPrint(),
        transports: [
            new winston.transports.Console()
        ]
    };
});

var outputFileConfiguration = ((filename, fileTransportOptions = {})=>{
    return {
        level: LEVEL_LABEL,
        levels: LEVELS,
        format: prettyPrint(),
        transports: [
            new winston.transports.Console(),
            new winston.transports.File({
                level: 'error',
                filename,
                format: excludeColors,
                ...fileTransportOptions
            })
        ]
    };
});

var index = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createDefaultConfiguration: defaultConfiguration,
  createOutputFileConfiguration: outputFileConfiguration
});

const createLogger = (userConfiguration = {})=>{
    const configuration = defaultConfiguration();
    Object.assign(configuration, userConfiguration);
    return winston__namespace.createLogger(configuration);
};

exports.winston = winston__namespace;
exports.configs = index;
exports.createLogger = createLogger;
exports.formats = index$1;
//# sourceMappingURL=index.js.map
