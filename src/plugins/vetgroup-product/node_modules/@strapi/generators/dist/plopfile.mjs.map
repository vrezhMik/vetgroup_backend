{"version":3,"file":"plopfile.mjs","sources":["../src/plops/utils/validate-input.ts","../src/plops/api.ts","../src/plops/prompts/get-destination-prompts.ts","../src/plops/utils/get-file-path.ts","../src/plops/controller.ts","../src/plops/prompts/ct-names-prompts.ts","../src/plops/prompts/kind-prompts.ts","../src/plops/utils/validate-attribute-input.ts","../src/plops/prompts/get-attributes-prompts.ts","../src/plops/prompts/bootstrap-api-prompts.ts","../src/plops/content-type.ts","../src/plops/policy.ts","../src/plops/middleware.ts","../src/plops/utils/validate-file-name-input.ts","../src/plops/utils/get-formatted-date.ts","../src/plops/migration.ts","../src/plops/service.ts","../src/plopfile.ts"],"sourcesContent":["export default (input: string) => {\n  const regex = /^[A-Za-z-]+$/g;\n\n  if (!input) {\n    return 'You must provide an input';\n  }\n\n  return regex.test(input) || \"Please use only letters, '-' and no spaces\";\n};\n","import { join } from 'path';\nimport type { NodePlopAPI } from 'plop';\nimport fs from 'fs-extra';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport validateInput from './utils/validate-input';\n\nexport default (plop: NodePlopAPI) => {\n  // API generator\n  plop.setGenerator('api', {\n    description: 'Generate a basic API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'API name',\n        validate: (input) => validateInput(input),\n      },\n      {\n        type: 'confirm',\n        name: 'isPluginApi',\n        message: 'Is this API for a plugin?',\n      },\n      {\n        when: (answers) => answers.isPluginApi,\n        type: 'list',\n        name: 'plugin',\n        message: 'Plugin name',\n        async choices() {\n          const pluginsPath = join(plop.getDestBasePath(), 'plugins');\n          const exists = await fs.pathExists(pluginsPath);\n          if (!exists) {\n            throw Error('Couldn\\'t find a \"plugins\" directory');\n          }\n\n          const pluginsDir = await fs.readdir(pluginsPath, { withFileTypes: true });\n          const pluginsDirContent = pluginsDir.filter((fd) => fd.isDirectory());\n\n          if (pluginsDirContent.length === 0) {\n            throw Error('The \"plugins\" directory is empty');\n          }\n\n          return pluginsDirContent;\n        },\n      },\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath =\n        answers.isPluginApi && answers.plugin ? 'plugins/{{ plugin }}/server' : 'api/{{ id }}';\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      const baseActions = [\n        {\n          type: 'add',\n          path: `${filePath}/controllers/{{ id }}.${language}`,\n          templateFile: `templates/${language}/controller.${language}.hbs`,\n        },\n        {\n          type: 'add',\n          path: `${filePath}/services/{{ id }}.${language}`,\n          templateFile: `templates/${language}/service.${language}.hbs`,\n        },\n      ];\n\n      if (answers.isPluginApi) {\n        return baseActions;\n      }\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/routes/{{ id }}.${language}`,\n          templateFile: `templates/${language}/single-route.${language}.hbs`,\n        },\n        ...baseActions,\n      ];\n    },\n  });\n};\n","import { join } from 'path';\nimport fs from 'fs-extra';\n\nimport type { PromptQuestion } from 'node-plop';\n\nexport default (\n  action: string,\n  basePath: string,\n  { rootFolder = false } = {}\n): Array<PromptQuestion> => {\n  return [\n    {\n      type: 'list',\n      name: 'destination',\n      message: `Where do you want to add this ${action}?`,\n      choices: [\n        ...(rootFolder\n          ? [\n              {\n                name: `Add ${action} to root of project`,\n                value: 'root',\n              },\n            ]\n          : [\n              {\n                name: `Add ${action} to new API`,\n                value: 'new',\n              },\n            ]),\n        { name: `Add ${action} to an existing API`, value: 'api' },\n        { name: `Add ${action} to an existing plugin`, value: 'plugin' },\n      ],\n    },\n    {\n      when: (answers) => answers.destination === 'api',\n      type: 'list',\n      message: 'Which API is this for?',\n      name: 'api',\n      async choices() {\n        const apiPath = join(basePath, 'api');\n        const exists = await fs.pathExists(apiPath);\n\n        if (!exists) {\n          throw Error('Couldn\\'t find an \"api\" directory');\n        }\n\n        const apiDir = await fs.readdir(apiPath, { withFileTypes: true });\n        const apiDirContent = apiDir.filter((fd) => fd.isDirectory());\n\n        if (apiDirContent.length === 0) {\n          throw Error('The \"api\" directory is empty');\n        }\n\n        return apiDirContent;\n      },\n    },\n    {\n      when: (answers) => answers.destination === 'plugin',\n      type: 'list',\n      message: 'Which plugin is this for?',\n      name: 'plugin',\n      async choices() {\n        const pluginsPath = join(basePath, 'plugins');\n        const exists = await fs.pathExists(pluginsPath);\n\n        if (!exists) {\n          throw Error('Couldn\\'t find a \"plugins\" directory');\n        }\n\n        const pluginsDir = await fs.readdir(pluginsPath);\n        const pluginsDirContent = pluginsDir.filter((api) =>\n          fs.lstatSync(join(pluginsPath, api)).isDirectory()\n        );\n\n        if (pluginsDirContent.length === 0) {\n          throw Error('The \"plugins\" directory is empty');\n        }\n\n        return pluginsDirContent;\n      },\n    },\n  ];\n};\n","export default (destination: string) => {\n  if (destination === 'api') {\n    return `api/{{ api }}`;\n  }\n\n  if (destination === 'plugin') {\n    return `plugins/{{ plugin }}/server`;\n  }\n\n  if (destination === 'root') {\n    return './';\n  }\n\n  return `api/{{ id }}`;\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\nimport validateInput from './utils/validate-input';\n\nexport default (plop: NodePlopAPI) => {\n  // Controller generator\n  plop.setGenerator('controller', {\n    description: 'Generate a controller for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'Controller name',\n        validate: (input) => validateInput(input),\n      },\n      ...getDestinationPrompts('controller', plop.getDestBasePath()),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/controllers/{{ id }}.${language}`,\n          templateFile: `templates/${language}/controller.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import pluralize from 'pluralize';\nimport slugify from '@sindresorhus/slugify';\nimport { strings } from '@strapi/utils';\n\nimport type { PromptQuestion } from 'node-plop';\n\ninterface Answers {\n  displayName: string;\n  singularName: string;\n  pluralName: string;\n}\n\nconst questions: Array<PromptQuestion> = [\n  {\n    type: 'input',\n    name: 'displayName',\n    message: 'Content type display name',\n    validate: (input: string) => !!input,\n  },\n  {\n    type: 'input',\n    name: 'singularName',\n    message: 'Content type singular name',\n    default: (answers: Answers) => slugify(answers.displayName),\n    validate(input) {\n      if (!strings.isKebabCase(input)) {\n        return 'Value must be in kebab-case';\n      }\n\n      return true;\n    },\n  },\n  {\n    type: 'input',\n    name: 'pluralName',\n    message: 'Content type plural name',\n    default: (answers: Answers) => pluralize(answers.singularName),\n    validate(input: string, answers: Answers) {\n      if (answers.singularName === input) {\n        return 'Singular and plural names cannot be the same';\n      }\n\n      if (!strings.isKebabCase(input)) {\n        return 'Value must be in kebab-case';\n      }\n\n      return true;\n    },\n  },\n];\n\nexport default questions;\n","import type { PromptQuestion } from 'node-plop';\n\nimport validateInput from '../utils/validate-input';\n\nconst questions: Array<PromptQuestion> = [\n  {\n    type: 'list',\n    name: 'kind',\n    message: 'Please choose the model type',\n    default: 'collectionType',\n    choices: [\n      { name: 'Collection Type', value: 'collectionType' },\n      { name: 'Single Type', value: 'singleType' },\n    ],\n    validate: (input: string) => validateInput(input),\n  },\n];\n\nexport default questions;\n","export default (input: string) => {\n  const regex = /^[A-Za-z-|_]+$/g;\n\n  if (!input) {\n    return 'You must provide an input';\n  }\n\n  return regex.test(input) || \"Please use only letters, '-', '_',  and no spaces\";\n};\n","import type { DynamicPromptsFunction } from 'node-plop';\n\nimport validateAttributeInput from '../utils/validate-attribute-input';\n\ninterface AttributeAnswer {\n  attributeName: string;\n  attributeType: typeof DEFAULT_TYPES;\n  enum?: string;\n  multiple?: boolean;\n}\n\nconst DEFAULT_TYPES = [\n  // advanced types\n  'media',\n\n  // scalar types\n  'string',\n  'text',\n  'richtext',\n  'json',\n  'enumeration',\n  'password',\n  'email',\n  'integer',\n  'biginteger',\n  'float',\n  'decimal',\n  'date',\n  'time',\n  'datetime',\n  'timestamp',\n  'boolean',\n] as const;\n\nconst getAttributesPrompts: DynamicPromptsFunction = async (inquirer) => {\n  const { addAttributes } = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'addAttributes',\n      message: 'Do you want to add attributes?',\n    },\n  ]);\n\n  const attributes: Array<AttributeAnswer> = [];\n\n  /**\n   * @param {import('inquirer').Inquirer} inquirer\n   * @returns {Promise<void>}\n   */\n  const createNewAttributes = async (inquirer: Parameters<DynamicPromptsFunction>[0]) => {\n    const answers = await inquirer.prompt([\n      {\n        type: 'input',\n        name: 'attributeName',\n        message: 'Name of attribute',\n        validate: (input: string) => validateAttributeInput(input),\n      },\n      {\n        type: 'list',\n        name: 'attributeType',\n        message: 'What type of attribute',\n        pageSize: DEFAULT_TYPES.length,\n        choices: DEFAULT_TYPES.map((type) => {\n          return { name: type, value: type };\n        }),\n      },\n      {\n        when: (answers) => answers.attributeType === 'enumeration',\n        type: 'input',\n        name: 'enum',\n        message: 'Add values separated by a comma',\n      },\n      {\n        when: (answers) => answers.attributeType === 'media',\n        type: 'list',\n        name: 'multiple',\n        message: 'Choose media type',\n        choices: [\n          { name: 'Multiple', value: true },\n          { name: 'Single', value: false },\n        ],\n      },\n      {\n        type: 'confirm',\n        name: 'addAttributes',\n        message: 'Do you want to add another attribute?',\n      },\n    ]);\n\n    attributes.push(answers);\n\n    if (!answers.addAttributes) {\n      return;\n    }\n\n    await createNewAttributes(inquirer);\n  };\n\n  if (addAttributes) {\n    await createNewAttributes(inquirer);\n  } else {\n    console.warn(\n      `You won't be able to manage entries from the admin, you can still add attributes later from the content type builder.`\n    );\n  }\n\n  return attributes;\n};\n\nexport default getAttributesPrompts;\n","import type { PromptQuestion } from 'node-plop';\n\nconst questions: Array<PromptQuestion> = [\n  {\n    type: 'confirm',\n    name: 'bootstrapApi',\n    default: true,\n    message: 'Bootstrap API related files?',\n  },\n];\n\nexport default questions;\n","import { join } from 'path';\nimport type { NodePlopAPI, ActionType } from 'plop';\nimport slugify from '@sindresorhus/slugify';\nimport fs from 'fs-extra';\nimport { strings } from '@strapi/utils';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\nimport ctNamesPrompts from './prompts/ct-names-prompts';\nimport kindPrompts from './prompts/kind-prompts';\nimport getAttributesPrompts from './prompts/get-attributes-prompts';\nimport bootstrapApiPrompts from './prompts/bootstrap-api-prompts';\n\nexport default (plop: NodePlopAPI) => {\n  // Model generator\n  plop.setGenerator('content-type', {\n    description: 'Generate a content type for an API',\n    async prompts(inquirer) {\n      const config = await inquirer.prompt([...ctNamesPrompts, ...kindPrompts]);\n      // @ts-expect-error issue with deprecated inquirer.prompts attribute to fix with ugprade to inquirer\n      const attributes = await getAttributesPrompts(inquirer);\n\n      const api = await inquirer.prompt([\n        ...getDestinationPrompts('model', plop.getDestBasePath()),\n        {\n          when: (answers) => answers.destination === 'new',\n          type: 'input',\n          name: 'id',\n          default: config.singularName,\n          message: 'Name of the new API?',\n          async validate(input) {\n            if (!strings.isKebabCase(input)) {\n              return 'Value must be in kebab-case';\n            }\n\n            const apiPath = join(plop.getDestBasePath(), 'api');\n            const exists = await fs.pathExists(apiPath);\n\n            if (!exists) {\n              return true;\n            }\n\n            const apiDir = await fs.readdir(apiPath, { withFileTypes: true });\n            const apiDirContent = apiDir.filter((fd) => fd.isDirectory());\n\n            if (apiDirContent.findIndex((dir) => dir.name === input) !== -1) {\n              throw new Error('This name is already taken.');\n            }\n\n            return true;\n          },\n        },\n        ...bootstrapApiPrompts,\n      ]);\n\n      return {\n        ...config,\n        ...api,\n        attributes,\n      };\n    },\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const attributes = answers.attributes.reduce((object: any, answer: any) => {\n        const val: any = { type: answer.attributeType };\n\n        if (answer.attributeType === 'enumeration') {\n          val.enum = answer.enum.split(',').map((item: string) => item.trim());\n        }\n\n        if (answer.attributeType === 'media') {\n          val.allowedTypes = ['images', 'files', 'videos', 'audios'];\n          val.multiple = answer.multiple;\n        }\n\n        return Object.assign(object, { [answer.attributeName]: val }, {});\n      }, {});\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      const baseActions: Array<ActionType> = [\n        {\n          type: 'add',\n          path: `${filePath}/content-types/{{ singularName }}/schema.json`,\n          templateFile: `templates/${language}/content-type.schema.json.hbs`,\n          data: {\n            collectionName: slugify(answers.pluralName, { separator: '_' }),\n          },\n        },\n      ];\n\n      if (Object.entries(attributes).length > 0) {\n        baseActions.push({\n          type: 'modify',\n          path: `${filePath}/content-types/{{ singularName }}/schema.json`,\n          transform(template: string) {\n            const parsedTemplate = JSON.parse(template);\n            parsedTemplate.attributes = attributes;\n            return JSON.stringify(parsedTemplate, null, 2);\n          },\n        });\n      }\n\n      if (answers.bootstrapApi) {\n        const { singularName } = answers;\n\n        let uid;\n        if (answers.destination === 'new') {\n          uid = `api::${answers.id}.${singularName}`;\n        } else if (answers.api) {\n          uid = `api::${answers.api}.${singularName}`;\n        } else if (answers.plugin) {\n          uid = `plugin::${answers.plugin}.${singularName}`;\n        }\n\n        baseActions.push(\n          {\n            type: 'add',\n            path: `${filePath}/controllers/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-controller.${language}.hbs`,\n            data: { uid },\n          },\n          {\n            type: 'add',\n            path: `${filePath}/services/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-service.${language}.hbs`,\n            data: { uid },\n          },\n          {\n            type: 'add',\n            path: `${filePath}/routes/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-router.${language}.hbs`,\n            data: { uid },\n          }\n        );\n      }\n\n      return baseActions;\n    },\n  });\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport validateInput from './utils/validate-input';\nimport getFilePath from './utils/get-file-path';\n\nexport default (plop: NodePlopAPI) => {\n  // Policy generator\n  plop.setGenerator('policy', {\n    description: 'Generate a policy for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'Policy name',\n        validate: (input) => validateInput(input),\n      },\n      ...getDestinationPrompts('policy', plop.getDestBasePath(), { rootFolder: true }),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const currentDir = process.cwd();\n      const filePath = getFilePath(answers.destination);\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/policies/{{ id }}.${language}`,\n          templateFile: `templates/${language}/policy.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport validateInput from './utils/validate-input';\nimport getFilePath from './utils/get-file-path';\n\nexport default (plop: NodePlopAPI) => {\n  // middleware generator\n  plop.setGenerator('middleware', {\n    description: 'Generate a middleware for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: 'Middleware name',\n        validate: (input) => validateInput(input),\n      },\n      ...getDestinationPrompts('middleware', plop.getDestBasePath(), { rootFolder: true }),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/middlewares/{{ name }}.${language}`,\n          templateFile: `templates/${language}/middleware.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","export default (input: string) => {\n  const regex = /^[A-Za-z-_0-9]+$/g;\n\n  if (!input) {\n    return 'You must provide an input';\n  }\n\n  return regex.test(input) || \"Please use only letters and number, '-' or '_' and no spaces\";\n};\n","export default (date: Date = new Date()) => {\n  return new Date(date.getTime() - date.getTimezoneOffset() * 60000)\n    .toJSON()\n    .replace(/[-:]/g, '.')\n    .replace(/\\....Z/, '');\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\nimport validateFileNameInput from './utils/validate-file-name-input';\nimport getFormattedDate from './utils/get-formatted-date';\n\nexport default (plop: NodePlopAPI) => {\n  // Migration generator\n  plop.setGenerator('migration', {\n    description: 'Generate a migration',\n    prompts: [\n      {\n        type: 'input',\n        name: 'name',\n        message: 'Migration name',\n        validate: (input) => validateFileNameInput(input),\n      },\n    ],\n    actions() {\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n      const timestamp = getFormattedDate();\n\n      return [\n        {\n          type: 'add',\n          path: `${currentDir}/database/migrations/${timestamp}.{{ name }}.${language}`,\n          templateFile: `templates/${language}/migration.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import type { NodePlopAPI } from 'plop';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\n\nexport default (plop: NodePlopAPI) => {\n  // Service generator\n  plop.setGenerator('service', {\n    description: 'Generate a service for an API',\n    prompts: [\n      {\n        type: 'input',\n        name: 'id',\n        message: 'Service name',\n      },\n      ...getDestinationPrompts('service', plop.getDestBasePath()),\n    ],\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const filePath = getFilePath(answers?.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      return [\n        {\n          type: 'add',\n          path: `${filePath}/services/{{ id }}.${language}`,\n          templateFile: `templates/${language}/service.${language}.hbs`,\n        },\n      ];\n    },\n  });\n};\n","import pluralize from 'pluralize';\nimport type { NodePlopAPI } from 'plop';\n\nimport generateApi from './plops/api';\nimport generateController from './plops/controller';\nimport generateContentType from './plops/content-type';\nimport generatePolicy from './plops/policy';\nimport generateMiddleware from './plops/middleware';\nimport generateMigration from './plops/migration';\nimport generateService from './plops/service';\n\nexport default (plop: NodePlopAPI) => {\n  // Plop config\n  plop.setWelcomeMessage('Strapi Generators');\n  plop.setHelper('pluralize', (text: string) => pluralize(text));\n\n  // Generators\n  generateApi(plop);\n  generateController(plop);\n  generateContentType(plop);\n  generatePolicy(plop);\n  generateMiddleware(plop);\n  generateMigration(plop);\n  generateService(plop);\n};\n"],"names":["input","regex","test","plop","setGenerator","description","prompts","type","name","message","validate","validateInput","when","answers","isPluginApi","choices","pluginsPath","join","getDestBasePath","exists","fs","pathExists","Error","pluginsDir","readdir","withFileTypes","pluginsDirContent","filter","fd","isDirectory","length","actions","filePath","plugin","currentDir","process","cwd","language","tsUtils","isUsingTypeScriptSync","baseActions","path","templateFile","action","basePath","rootFolder","value","destination","apiPath","apiDir","apiDirContent","api","lstatSync","getDestinationPrompts","getFilePath","questions","default","slugify","displayName","strings","isKebabCase","pluralize","singularName","DEFAULT_TYPES","getAttributesPrompts","inquirer","addAttributes","prompt","attributes","createNewAttributes","validateAttributeInput","pageSize","map","attributeType","push","console","warn","config","ctNamesPrompts","kindPrompts","findIndex","dir","bootstrapApiPrompts","reduce","object","answer","val","enum","split","item","trim","allowedTypes","multiple","Object","assign","attributeName","data","collectionName","pluralName","separator","entries","transform","template","parsedTemplate","JSON","parse","stringify","bootstrapApi","uid","id","date","Date","getTime","getTimezoneOffset","toJSON","replace","validateFileNameInput","timestamp","getFormattedDate","setWelcomeMessage","setHelper","text","generateApi","generateController","generateContentType","generatePolicy","generateMiddleware","generateMigration","generateService"],"mappings":"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"}