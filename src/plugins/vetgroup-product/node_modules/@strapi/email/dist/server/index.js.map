{"version":3,"file":"index.js","sources":["../../server/src/bootstrap.ts","../../server/src/services/email.ts","../../server/src/services/index.ts","../../server/src/routes/admin.ts","../../server/src/routes/content-api.ts","../../server/src/routes/index.ts","../../server/src/controllers/email.ts","../../server/src/controllers/index.ts","../../server/src/config.ts","../../server/src/middlewares/rateLimit.ts","../../server/src/middlewares/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport type { EmailConfig, SendOptions } from './types';\n\ninterface EmailProvider {\n  send: (options: SendOptions) => Promise<any>;\n}\n\ninterface EmailProviderModule {\n  init: (\n    options: EmailConfig['providerOptions'],\n    settings: EmailConfig['settings']\n  ) => EmailProvider;\n  name?: string;\n  provider?: string;\n}\n\nconst createProvider = (emailConfig: EmailConfig) => {\n  const providerName = emailConfig.provider.toLowerCase();\n  let provider: EmailProviderModule;\n\n  let modulePath: string;\n  try {\n    modulePath = require.resolve(`@strapi/provider-email-${providerName}`);\n  } catch (error) {\n    if (\n      error !== null &&\n      typeof error === 'object' &&\n      'code' in error &&\n      error.code === 'MODULE_NOT_FOUND'\n    ) {\n      modulePath = providerName;\n    } else {\n      throw error;\n    }\n  }\n\n  try {\n    provider = require(modulePath);\n  } catch (err) {\n    throw new Error(`Could not load email provider \"${providerName}\".`);\n  }\n\n  return provider.init(emailConfig.providerOptions, emailConfig.settings);\n};\n\nexport const bootstrap = async ({ strapi }: { strapi: Core.Strapi }) => {\n  const emailConfig: EmailConfig = strapi.config.get('plugin::email');\n  strapi.plugin('email').provider = createProvider(emailConfig);\n\n  // Add permissions\n  const actions = [\n    {\n      section: 'settings',\n      category: 'email',\n      displayName: 'Access the Email Settings page',\n      uid: 'settings.read',\n      pluginName: 'email',\n    },\n  ];\n\n  await strapi.service('admin::permission').actionProvider.registerMany(actions);\n};\n","import * as _ from 'lodash';\nimport { objects, template } from '@strapi/utils';\n\nimport type {\n  EmailConfig,\n  EmailOptions,\n  EmailTemplate,\n  EmailTemplateData,\n  SendOptions,\n} from '../types';\n\nconst { createStrictInterpolationRegExp } = template;\n\nconst getProviderSettings = (): EmailConfig => strapi.config.get('plugin::email');\n\nconst send = async (options: SendOptions) => strapi.plugin('email').provider.send(options);\n\n/**\n * fill subject, text and html using lodash template\n * @param {object} emailOptions - to, from and replyto...\n * @param {object} emailTemplate - object containing attributes to fill\n * @param {object} data - data used to fill the template\n * @returns {{ subject, text, subject }}\n */\nconst sendTemplatedEmail = (\n  emailOptions: EmailOptions,\n  emailTemplate: EmailTemplate,\n  data: EmailTemplateData\n) => {\n  const attributes = ['subject', 'text', 'html'];\n  const missingAttributes = _.difference(attributes, Object.keys(emailTemplate));\n\n  if (missingAttributes.length > 0) {\n    throw new Error(\n      `Following attributes are missing from your email template : ${missingAttributes.join(', ')}`\n    );\n  }\n\n  const allowedInterpolationVariables = objects.keysDeep(data);\n  const interpolate = createStrictInterpolationRegExp(allowedInterpolationVariables, 'g');\n\n  const templatedAttributes = attributes.reduce(\n    (compiled, attribute) =>\n      emailTemplate[attribute]\n        ? Object.assign(compiled, {\n            [attribute]: _.template(emailTemplate[attribute], {\n              interpolate,\n            })(data),\n          })\n        : compiled,\n    {}\n  );\n\n  return strapi.plugin('email').provider.send({ ...emailOptions, ...templatedAttributes });\n};\n\nconst emailService = () => ({\n  getProviderSettings,\n  send,\n  sendTemplatedEmail,\n});\n\nexport default emailService;\n","import email from './email';\n\nexport const services = { email };\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'email.send',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/test',\n      handler: 'email.test',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          { name: 'admin::hasPermissions', config: { actions: ['plugin::email.settings.read'] } },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/settings',\n      handler: 'email.getSettings',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          { name: 'admin::hasPermissions', config: { actions: ['plugin::email.settings.read'] } },\n        ],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'content-api',\n  routes: [\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'email.send',\n    },\n  ],\n};\n","import admin from './admin';\nimport contentApi from './content-api';\n\nexport const routes = {\n  admin,\n  'content-api': contentApi,\n};\n","import { pick } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\n\nimport type Koa from 'koa';\nimport type {} from 'koa-body';\nimport type { EmailConfig, SendOptions } from '../types';\n\nconst { ApplicationError } = errors;\n\n/**\n * Email.js controller\n *\n * @description: A set of functions called \"actions\" of the `email` plugin.\n */\nconst emailController = {\n  async send(ctx: Koa.Context) {\n    const options = ctx.request.body as SendOptions;\n\n    try {\n      await strapi.plugin('email').service('email').send(options);\n    } catch (error) {\n      if (error instanceof Error) {\n        if ('statusCode' in error && error.statusCode === 400) {\n          throw new ApplicationError(error.message);\n        } else {\n          throw new Error(`Couldn't send email: ${error.message}.`);\n        }\n      }\n    }\n\n    // Send 200 `ok`\n    ctx.send({});\n  },\n\n  async test(ctx: Koa.Context) {\n    const { to } = ctx.request.body as Pick<SendOptions, 'to'>;\n\n    if (!to) {\n      throw new ApplicationError('No recipient(s) are given');\n    }\n\n    const email: SendOptions = {\n      to,\n      subject: `Strapi test mail to: ${to}`,\n      text: `Great! You have correctly configured the Strapi email plugin with the ${strapi.config.get(\n        'plugin::email.provider'\n      )} provider. \\r\\nFor documentation on how to use the email plugin checkout: https://docs.strapi.io/developer-docs/latest/plugins/email.html`,\n    };\n\n    try {\n      await strapi.plugin('email').service('email').send(email);\n    } catch (error) {\n      if (error instanceof Error) {\n        if ('statusCode' in error && error.statusCode === 400) {\n          throw new ApplicationError(error.message);\n        } else {\n          throw new Error(`Couldn't send test email: ${error.message}.`);\n        }\n      }\n    }\n\n    // Send 200 `ok`\n    ctx.send({});\n  },\n\n  async getSettings(ctx: Koa.Context) {\n    const config: EmailConfig = strapi.plugin('email').service('email').getProviderSettings();\n\n    ctx.send({\n      config: pick(\n        ['provider', 'settings.defaultFrom', 'settings.defaultReplyTo', 'settings.testAddress'],\n        config\n      ),\n    });\n  },\n};\n\nexport default emailController;\n","import email from './email';\n\nexport const controllers = { email };\n","import type { StrapiConfig } from './types';\n\nexport const config: StrapiConfig = {\n  default: {\n    provider: 'sendmail',\n    providerOptions: {},\n    settings: {\n      defaultFrom: 'Strapi <no-reply@strapi.io>',\n    },\n  },\n  validator() {},\n};\n","import type { Context, Next } from 'koa';\nimport utils from '@strapi/utils';\nimport { isString, get } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\n\nconst { RateLimitError } = utils.errors;\n\nexport default (config: any, { strapi }: { strapi: Core.Strapi }) =>\n  async (ctx: Context, next: Next) => {\n    const pluginConfig = strapi.config.get('plugin::email') as any;\n    const rateLimitConfig = {\n      enabled: true,\n      ...(pluginConfig.ratelimit || {}),\n    };\n\n    if (rateLimitConfig.enabled === true) {\n      // TODO: TS - Do the dynamic import\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const rateLimit = require('koa2-ratelimit').RateLimit;\n\n      const requestEmail = get('request.body.email')(ctx);\n      const userEmail = isString(requestEmail) ? requestEmail.toLowerCase() : 'unknownEmail';\n\n      const loadConfig = {\n        interval: { min: 5 },\n        max: 5,\n        prefixKey: `${userEmail}`,\n        handler() {\n          throw new RateLimitError();\n        },\n        ...rateLimitConfig,\n        ...config,\n      };\n\n      return rateLimit.middleware(loadConfig)(ctx, next);\n    }\n\n    return next();\n  };\n","import rateLimit from './rateLimit';\n\nexport { default as rateLimit } from './rateLimit';\n\nexport default {\n  rateLimit,\n};\n","import { bootstrap } from './bootstrap';\nimport { services } from './services';\nimport { routes } from './routes';\nimport { controllers } from './controllers';\nimport { config } from './config';\nimport middlewares from './middlewares';\n\nexport default {\n  bootstrap,\n  services,\n  routes,\n  controllers,\n  config,\n  middlewares,\n};\n"],"names":["createProvider","emailConfig","providerName","provider","toLowerCase","modulePath","require","resolve","error","code","err","Error","init","providerOptions","settings","bootstrap","strapi","config","get","plugin","actions","section","category","displayName","uid","pluginName","service","actionProvider","registerMany","createStrictInterpolationRegExp","template","getProviderSettings","send","options","sendTemplatedEmail","emailOptions","emailTemplate","data","attributes","missingAttributes","_","difference","Object","keys","length","join","allowedInterpolationVariables","objects","keysDeep","interpolate","templatedAttributes","reduce","compiled","attribute","assign","emailService","services","email","type","routes","method","path","handler","policies","name","admin","contentApi","ApplicationError","errors","emailController","ctx","request","body","statusCode","message","test","to","subject","text","getSettings","pick","controllers","default","defaultFrom","validator","RateLimitError","utils","next","pluginConfig","rateLimitConfig","enabled","ratelimit","rateLimit","RateLimit","requestEmail","userEmail","isString","loadConfig","interval","min","max","prefixKey","middleware","middlewares"],"mappings":"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"}