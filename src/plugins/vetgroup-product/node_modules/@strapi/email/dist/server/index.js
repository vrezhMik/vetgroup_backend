'use strict';

var _ = require('lodash');
var utils = require('@strapi/utils');
var fp = require('lodash/fp');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var ___namespace = /*#__PURE__*/_interopNamespaceDefault(_);

const createProvider = (emailConfig)=>{
    const providerName = emailConfig.provider.toLowerCase();
    let provider;
    let modulePath;
    try {
        modulePath = require.resolve(`@strapi/provider-email-${providerName}`);
    } catch (error) {
        if (error !== null && typeof error === 'object' && 'code' in error && error.code === 'MODULE_NOT_FOUND') {
            modulePath = providerName;
        } else {
            throw error;
        }
    }
    try {
        provider = require(modulePath);
    } catch (err) {
        throw new Error(`Could not load email provider "${providerName}".`);
    }
    return provider.init(emailConfig.providerOptions, emailConfig.settings);
};
const bootstrap = async ({ strapi })=>{
    const emailConfig = strapi.config.get('plugin::email');
    strapi.plugin('email').provider = createProvider(emailConfig);
    // Add permissions
    const actions = [
        {
            section: 'settings',
            category: 'email',
            displayName: 'Access the Email Settings page',
            uid: 'settings.read',
            pluginName: 'email'
        }
    ];
    await strapi.service('admin::permission').actionProvider.registerMany(actions);
};

const { createStrictInterpolationRegExp } = utils.template;
const getProviderSettings = ()=>strapi.config.get('plugin::email');
const send = async (options)=>strapi.plugin('email').provider.send(options);
/**
 * fill subject, text and html using lodash template
 * @param {object} emailOptions - to, from and replyto...
 * @param {object} emailTemplate - object containing attributes to fill
 * @param {object} data - data used to fill the template
 * @returns {{ subject, text, subject }}
 */ const sendTemplatedEmail = (emailOptions, emailTemplate, data)=>{
    const attributes = [
        'subject',
        'text',
        'html'
    ];
    const missingAttributes = ___namespace.difference(attributes, Object.keys(emailTemplate));
    if (missingAttributes.length > 0) {
        throw new Error(`Following attributes are missing from your email template : ${missingAttributes.join(', ')}`);
    }
    const allowedInterpolationVariables = utils.objects.keysDeep(data);
    const interpolate = createStrictInterpolationRegExp(allowedInterpolationVariables, 'g');
    const templatedAttributes = attributes.reduce((compiled, attribute)=>emailTemplate[attribute] ? Object.assign(compiled, {
            [attribute]: ___namespace.template(emailTemplate[attribute], {
                interpolate
            })(data)
        }) : compiled, {});
    return strapi.plugin('email').provider.send({
        ...emailOptions,
        ...templatedAttributes
    });
};
const emailService = ()=>({
        getProviderSettings,
        send,
        sendTemplatedEmail
    });

const services = {
    email: emailService
};

var admin = {
    type: 'admin',
    routes: [
        {
            method: 'POST',
            path: '/',
            handler: 'email.send',
            config: {
                policies: [
                    'admin::isAuthenticatedAdmin'
                ]
            }
        },
        {
            method: 'POST',
            path: '/test',
            handler: 'email.test',
            config: {
                policies: [
                    'admin::isAuthenticatedAdmin',
                    {
                        name: 'admin::hasPermissions',
                        config: {
                            actions: [
                                'plugin::email.settings.read'
                            ]
                        }
                    }
                ]
            }
        },
        {
            method: 'GET',
            path: '/settings',
            handler: 'email.getSettings',
            config: {
                policies: [
                    'admin::isAuthenticatedAdmin',
                    {
                        name: 'admin::hasPermissions',
                        config: {
                            actions: [
                                'plugin::email.settings.read'
                            ]
                        }
                    }
                ]
            }
        }
    ]
};

var contentApi = {
    type: 'content-api',
    routes: [
        {
            method: 'POST',
            path: '/',
            handler: 'email.send'
        }
    ]
};

const routes = {
    admin,
    'content-api': contentApi
};

const { ApplicationError } = utils.errors;
/**
 * Email.js controller
 *
 * @description: A set of functions called "actions" of the `email` plugin.
 */ const emailController = {
    async send (ctx) {
        const options = ctx.request.body;
        try {
            await strapi.plugin('email').service('email').send(options);
        } catch (error) {
            if (error instanceof Error) {
                if ('statusCode' in error && error.statusCode === 400) {
                    throw new ApplicationError(error.message);
                } else {
                    throw new Error(`Couldn't send email: ${error.message}.`);
                }
            }
        }
        // Send 200 `ok`
        ctx.send({});
    },
    async test (ctx) {
        const { to } = ctx.request.body;
        if (!to) {
            throw new ApplicationError('No recipient(s) are given');
        }
        const email = {
            to,
            subject: `Strapi test mail to: ${to}`,
            text: `Great! You have correctly configured the Strapi email plugin with the ${strapi.config.get('plugin::email.provider')} provider. \r\nFor documentation on how to use the email plugin checkout: https://docs.strapi.io/developer-docs/latest/plugins/email.html`
        };
        try {
            await strapi.plugin('email').service('email').send(email);
        } catch (error) {
            if (error instanceof Error) {
                if ('statusCode' in error && error.statusCode === 400) {
                    throw new ApplicationError(error.message);
                } else {
                    throw new Error(`Couldn't send test email: ${error.message}.`);
                }
            }
        }
        // Send 200 `ok`
        ctx.send({});
    },
    async getSettings (ctx) {
        const config = strapi.plugin('email').service('email').getProviderSettings();
        ctx.send({
            config: fp.pick([
                'provider',
                'settings.defaultFrom',
                'settings.defaultReplyTo',
                'settings.testAddress'
            ], config)
        });
    }
};

const controllers = {
    email: emailController
};

const config = {
    default: {
        provider: 'sendmail',
        providerOptions: {},
        settings: {
            defaultFrom: 'Strapi <no-reply@strapi.io>'
        }
    },
    validator () {}
};

const { RateLimitError } = utils.errors;
var rateLimit = ((config, { strapi })=>async (ctx, next)=>{
        const pluginConfig = strapi.config.get('plugin::email');
        const rateLimitConfig = {
            enabled: true,
            ...pluginConfig.ratelimit || {}
        };
        if (rateLimitConfig.enabled === true) {
            // TODO: TS - Do the dynamic import
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            const rateLimit = require('koa2-ratelimit').RateLimit;
            const requestEmail = fp.get('request.body.email')(ctx);
            const userEmail = fp.isString(requestEmail) ? requestEmail.toLowerCase() : 'unknownEmail';
            const loadConfig = {
                interval: {
                    min: 5
                },
                max: 5,
                prefixKey: `${userEmail}`,
                handler () {
                    throw new RateLimitError();
                },
                ...rateLimitConfig,
                ...config
            };
            return rateLimit.middleware(loadConfig)(ctx, next);
        }
        return next();
    });

var middlewares = {
    rateLimit
};

var index = {
    bootstrap,
    services,
    routes,
    controllers,
    config,
    middlewares
};

module.exports = index;
//# sourceMappingURL=index.js.map
