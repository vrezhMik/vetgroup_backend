'use strict';

const PERMISSIONS = {
    // This permission regards the main component (App) and is used to tell
    // If the plugin link should be displayed in the menu
    // And also if the plugin is accessible. This use case is found when a user types the url of the
    // plugin directly in the browser
    settings: [
        {
            action: 'plugin::email.settings.read',
            subject: null
        }
    ]
};

const prefixPluginTranslations = (trad, pluginId)=>{
    return Object.keys(trad).reduce((acc, current)=>{
        acc[`${pluginId}.${current}`] = trad[current];
        return acc;
    }, {});
};

function __variableDynamicImportRuntime1__(path) {
  switch (path) {
    case './translations/ar.json': return Promise.resolve().then(function () { return require('./ar-BDHMRt_b.js'); });
    case './translations/cs.json': return Promise.resolve().then(function () { return require('./cs-DrOn3eR2.js'); });
    case './translations/de.json': return Promise.resolve().then(function () { return require('./de-BlqtkWR3.js'); });
    case './translations/dk.json': return Promise.resolve().then(function () { return require('./dk-DW7WecjY.js'); });
    case './translations/en.json': return Promise.resolve().then(function () { return require('./en-DacnIsXb.js'); });
    case './translations/es.json': return Promise.resolve().then(function () { return require('./es-DxWi6BKM.js'); });
    case './translations/fr.json': return Promise.resolve().then(function () { return require('./fr-BsENAPSS.js'); });
    case './translations/id.json': return Promise.resolve().then(function () { return require('./id-BORUwKHm.js'); });
    case './translations/it.json': return Promise.resolve().then(function () { return require('./it-eAGyIQ1x.js'); });
    case './translations/ja.json': return Promise.resolve().then(function () { return require('./ja-DdOPbVbe.js'); });
    case './translations/ko.json': return Promise.resolve().then(function () { return require('./ko-CaWqWfC8.js'); });
    case './translations/ms.json': return Promise.resolve().then(function () { return require('./ms-CrRuDILn.js'); });
    case './translations/nl.json': return Promise.resolve().then(function () { return require('./nl-BMsBb10t.js'); });
    case './translations/pl.json': return Promise.resolve().then(function () { return require('./pl-CO-R08qV.js'); });
    case './translations/pt-BR.json': return Promise.resolve().then(function () { return require('./pt-BR-CBzJhkyg.js'); });
    case './translations/pt.json': return Promise.resolve().then(function () { return require('./pt-BzFac2P5.js'); });
    case './translations/ru.json': return Promise.resolve().then(function () { return require('./ru-DnqOAZDX.js'); });
    case './translations/sk.json': return Promise.resolve().then(function () { return require('./sk-N47IGfwH.js'); });
    case './translations/th.json': return Promise.resolve().then(function () { return require('./th-OW3_QVEZ.js'); });
    case './translations/tr.json': return Promise.resolve().then(function () { return require('./tr-n7J_y4Bh.js'); });
    case './translations/uk.json': return Promise.resolve().then(function () { return require('./uk-DWA4QHtk.js'); });
    case './translations/vi.json': return Promise.resolve().then(function () { return require('./vi-DjJBc-ms.js'); });
    case './translations/zh-Hans.json': return Promise.resolve().then(function () { return require('./zh-Hans-D0bb9tfC.js'); });
    case './translations/zh.json': return Promise.resolve().then(function () { return require('./zh-9wNbbqde.js'); });
    default: return new Promise(function(resolve, reject) {
      (typeof queueMicrotask === 'function' ? queueMicrotask : setTimeout)(
        reject.bind(null, new Error("Unknown variable dynamic import: " + path))
      );
    })
   }
 }
const admin = {
    // TODO typing app in strapi/types as every plugin needs it
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    register (app) {
        // Create the email settings section
        app.createSettingSection({
            id: 'email',
            intlLabel: {
                id: 'email.SettingsNav.section-label',
                defaultMessage: 'Email Plugin'
            }
        }, [
            {
                intlLabel: {
                    id: 'email.Settings.email.plugin.title',
                    defaultMessage: 'Settings'
                },
                id: 'settings',
                to: 'email',
                Component: ()=>Promise.resolve().then(function () { return require('./Settings-BBq0I4Nx.js'); }).then((mod)=>({
                            default: mod.ProtectedSettingsPage
                        })),
                permissions: PERMISSIONS.settings
            }
        ]);
        app.registerPlugin({
            id: 'email',
            name: 'email'
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    bootstrap () {},
    async registerTrads ({ locales }) {
        const importedTrads = await Promise.all(locales.map((locale)=>{
            return __variableDynamicImportRuntime1__(`./translations/${locale}.json`).then(({ default: data })=>{
                return {
                    data: prefixPluginTranslations(data, 'email'),
                    locale
                };
            }).catch(()=>{
                return {
                    data: {},
                    locale
                };
            });
        }));
        return Promise.resolve(importedTrads);
    }
};

exports.PERMISSIONS = PERMISSIONS;
exports.admin = admin;
//# sourceMappingURL=index-uY5sPjIN.js.map
