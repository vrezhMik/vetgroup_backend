{"version":3,"file":"index.mjs","sources":["../../server/src/utils/index.ts","../../server/src/constants/workflows.ts","../../server/src/migrations/shorten-stage-attribute.ts","../../server/src/migrations/set-stages-default-color.ts","../../server/src/migrations/set-stages-roles.ts","../../server/src/migrations/set-workflow-default-name.ts","../../server/src/migrations/multiple-workflows.ts","../../server/src/utils/review-workflows.ts","../../server/src/migrations/handle-deleted-ct-in-workflows.ts","../../server/src/middlewares/review-workflows.ts","../../server/src/register.ts","../../server/src/content-types/workflow/index.ts","../../server/src/content-types/workflow-stage/index.ts","../../server/src/content-types/index.ts","../../server/src/config/actions.ts","../../server/src/constants/webhook-events.ts","../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/routes/utils.ts","../../server/src/routes/review-workflows.ts","../../server/src/routes/index.ts","../../server/src/services/workflow-content-types.ts","../../server/src/services/workflows.ts","../../server/src/services/stages.ts","../../server/src/services/stage-permissions.ts","../../server/src/services/assignees.ts","../../server/src/services/validation.ts","../../server/src/services/metrics/index.ts","../../server/src/services/metrics/weekly-metrics.ts","../../server/src/services/document-service-middleware.ts","../../server/src/services/index.ts","../../server/src/validation/review-workflows.ts","../../server/src/controllers/workflows.ts","../../server/src/controllers/stages.ts","../../server/src/controllers/assignees.ts","../../server/src/controllers/index.ts","../../server/src/index.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\nexport const getAdminService = (\n  name: string,\n  { strapi }: { strapi: Core.Strapi } = { strapi: global.strapi }\n) => {\n  return strapi.service(`admin::${name}`);\n};\n\nexport const getService = (name: string, { strapi } = { strapi: global.strapi }) => {\n  return strapi.plugin('review-workflows').service(name);\n};\n\nexport default {\n  getAdminService,\n  getService,\n};\n","export const WORKFLOW_MODEL_UID = 'plugin::review-workflows.workflow';\nexport const STAGE_MODEL_UID = 'plugin::review-workflows.workflow-stage';\n/**\n * TODO: For V4 compatibility, the old UID was kept, when review workflows was in the admin package\n *\n * NOTE!: if you change this string you need to change it here too: strapi/packages/core/review-workflows/admin/src/routes/settings/components/Stages.tsx\n */\nexport const STAGE_TRANSITION_UID = 'admin::review-workflows.stage.transition';\n\nexport const STAGE_DEFAULT_COLOR = '#4945FF';\nexport const ENTITY_STAGE_ATTRIBUTE = 'strapi_stage';\nexport const ENTITY_ASSIGNEE_ATTRIBUTE = 'strapi_assignee';\n\nexport const MAX_WORKFLOWS = 200;\nexport const MAX_STAGES_PER_WORKFLOW = 200;\n\nexport const ERRORS = {\n  WORKFLOW_WITHOUT_STAGES: 'A workflow must have at least one stage.',\n  WORKFLOWS_LIMIT:\n    'You’ve reached the limit of workflows in your plan. Delete a workflow or contact Sales to enable more workflows.',\n  STAGES_LIMIT:\n    'You’ve reached the limit of stages for this workflow in your plan. Try deleting some stages or contact Sales to enable more stages.',\n  DUPLICATED_STAGE_NAME: 'Stage names must be unique.',\n};\n\nexport const WORKFLOW_POPULATE = {\n  stages: {\n    populate: {\n      permissions: {\n        fields: ['action', 'actionParameters'],\n        populate: {\n          role: { fields: ['id', 'name'] },\n        },\n      },\n    },\n  },\n  stageRequiredToPublish: true,\n};\n","import semver from 'semver';\nimport { getOr } from 'lodash/fp';\nimport { async } from '@strapi/utils';\nimport { STAGE_MODEL_UID } from '../constants/workflows';\n\nfunction checkVersionThreshold(\n  startVersion: string,\n  currentVersion: string,\n  thresholdVersion: string\n) {\n  return semver.gte(currentVersion, thresholdVersion) && semver.lt(startVersion, thresholdVersion);\n}\n\n/**\n * Shorten strapi stage name\n */\nasync function migrateStageAttribute({ oldContentTypes, contentTypes }: any) {\n  const getRWVersion = getOr('0.0.0', `${STAGE_MODEL_UID}.options.version`);\n  const oldRWVersion = getRWVersion(oldContentTypes);\n  const currentRWVersion = getRWVersion(contentTypes);\n\n  const migrationNeeded = checkVersionThreshold(oldRWVersion, currentRWVersion, '1.1.0');\n\n  // TODO: Find tables with something else than `findTables` function\n  // if (migrationNeeded) {\n  //   const oldAttributeTableName = 'strapi_review_workflows_stage';\n  //   const newAttributeTableName = 'strapi_stage';\n  //   // const tables = await findTables({ strapi }, new RegExp(oldAttributeTableName));\n\n  //   await async.map(tables, async (tableName: string) => {\n  //     const newTableName = tableName.replace(oldAttributeTableName, newAttributeTableName);\n  //     const alreadyHasNextTable = await strapi.db.connection.schema.hasTable(newTableName);\n\n  //     // The table can be already created but empty. In order to rename the old one, we need to drop the previously created empty one.\n  //     if (alreadyHasNextTable) {\n  //       const dataInTable = await strapi.db.connection(newTableName).select().limit(1);\n  //       if (!dataInTable.length) {\n  //         await strapi.db.connection.schema.dropTable(newTableName);\n  //       }\n  //     }\n\n  //     try {\n  //       await strapi.db.connection.schema.renameTable(tableName, newTableName);\n  //     } catch (e: any) {\n  //       strapi.log.warn(\n  //         `An error occurred during the migration of ${tableName} table to ${newTableName}.\\nIf ${newTableName} already exists, migration can't be done automatically.`\n  //       );\n  //       strapi.log.warn(e.message);\n  //     }\n  //   });\n  // }\n}\n\nexport default migrateStageAttribute;\n","import { STAGE_DEFAULT_COLOR, STAGE_MODEL_UID } from '../constants/workflows';\n\n/**\n * Set the default color for stages if the color attribute was added\n */\nasync function migrateReviewWorkflowStagesColor({ oldContentTypes, contentTypes }: any) {\n  // Look for CT's color attribute\n  const hadColor = !!oldContentTypes?.[STAGE_MODEL_UID]?.attributes?.color;\n  const hasColor = !!contentTypes?.[STAGE_MODEL_UID]?.attributes?.color;\n\n  // Add the default stage color if color attribute was added\n  if (!hadColor && hasColor) {\n    await strapi.db.query(STAGE_MODEL_UID).updateMany({\n      data: {\n        color: STAGE_DEFAULT_COLOR,\n      },\n    });\n  }\n}\n\nexport default migrateReviewWorkflowStagesColor;\n","import { STAGE_TRANSITION_UID, STAGE_MODEL_UID } from '../constants/workflows';\nimport { getService } from '../utils';\n\n/**\n * Migrate review workflow stages to have RBAC permissions for all roles.\n */\nasync function migrateReviewWorkflowStagesRoles({ oldContentTypes, contentTypes }: any) {\n  const hadRolePermissions = !!oldContentTypes?.[STAGE_MODEL_UID]?.attributes?.permissions;\n  const hasRolePermissions = !!contentTypes?.[STAGE_MODEL_UID]?.attributes?.permissions;\n\n  // If the stage content type did not have permissions in the previous version\n  // then we set the permissions of every stage to be every current role in the app.\n  // This ensures consistent behaviour when upgrading to a strapi version with review workflows RBAC.\n  if (!hadRolePermissions && hasRolePermissions) {\n    const roleUID = 'admin::role';\n    strapi.log.info(\n      `Migrating all existing review workflow stages to have RBAC permissions for all ${roleUID}.`\n    );\n\n    const stagePermissionsService = getService('stage-permissions');\n\n    const stages = await strapi.db.query(STAGE_MODEL_UID).findMany();\n    const roles = await strapi.db.query(roleUID).findMany();\n\n    // Collect the permissions to add and group them by stage id.\n    const groupedPermissions = {} as any;\n    roles\n      .map((role) => role.id)\n      .forEach((roleId) => {\n        stages\n          .map((stage) => stage.id)\n          .forEach((stageId) => {\n            if (!groupedPermissions[stageId]) {\n              groupedPermissions[stageId] = [];\n            }\n\n            groupedPermissions[stageId].push({\n              roleId,\n              fromStage: stageId,\n              action: STAGE_TRANSITION_UID,\n            });\n          });\n      });\n\n    for (const [stageId, permissions] of Object.entries(groupedPermissions)) {\n      const numericalStageId = Number(stageId);\n\n      if (Number.isNaN(numericalStageId)) {\n        strapi.log.warn(\n          `Unable to apply ${roleUID} migration for ${STAGE_MODEL_UID} with id ${stageId}. The stage does not have a numerical id.`\n        );\n        continue;\n      }\n\n      // Register the permissions for this stage\n      const stagePermissions = await stagePermissionsService.registerMany(permissions);\n\n      // Update the stage with its new permissions\n      await strapi.db.query(STAGE_MODEL_UID).update({\n        where: { id: numericalStageId },\n        data: {\n          permissions: stagePermissions.flat().map((permission: any) => permission.id),\n        },\n      });\n    }\n  }\n}\n\nexport default migrateReviewWorkflowStagesRoles;\n","import { WORKFLOW_MODEL_UID } from '../constants/workflows';\nimport defaultWorkflow from '../constants/default-workflow.json';\n\n/**\n * Multiple workflows introduced the ability to name a workflow.\n * This migration adds the default workflow name if the name attribute was added.\n */\nasync function migrateReviewWorkflowName({ oldContentTypes, contentTypes }: any) {\n  // Look for RW name attribute\n  const hadName = !!oldContentTypes?.[WORKFLOW_MODEL_UID]?.attributes?.name;\n  const hasName = !!contentTypes?.[WORKFLOW_MODEL_UID]?.attributes?.name;\n\n  // Add the default workflow name if name attribute was added\n  if (!hadName && hasName) {\n    await strapi.db.query(WORKFLOW_MODEL_UID).updateMany({\n      where: {\n        name: { $null: true },\n      },\n      data: {\n        name: defaultWorkflow.name,\n      },\n    });\n  }\n}\n\nexport default migrateReviewWorkflowName;\n","import { get, keys, pickBy, pipe } from 'lodash/fp';\nimport { WORKFLOW_MODEL_UID } from '../constants/workflows';\n\nasync function migrateWorkflowsContentTypes({ oldContentTypes, contentTypes }: any) {\n  // Look for RW contentTypes attribute\n  const hadContentTypes = !!oldContentTypes?.[WORKFLOW_MODEL_UID]?.attributes?.contentTypes;\n  const hasContentTypes = !!contentTypes?.[WORKFLOW_MODEL_UID]?.attributes?.contentTypes;\n\n  if (!hadContentTypes && hasContentTypes) {\n    // Initialize contentTypes with an empty array and assign only to one\n    // workflow the Content Types which were using Review Workflow before.\n    await strapi.db.query(WORKFLOW_MODEL_UID).updateMany({ data: { contentTypes: [] } });\n\n    // Find Content Types which were using Review Workflow before\n    const contentTypes = pipe([pickBy(get('options.reviewWorkflows')), keys])(oldContentTypes);\n\n    if (contentTypes.length) {\n      // Update only one workflow with the contentTypes\n      // Before this release there was only one workflow, so this operation is safe.\n      await strapi.db\n        .query(WORKFLOW_MODEL_UID)\n        .update({ where: { id: { $notNull: true } }, data: { contentTypes } });\n    }\n  }\n}\n\nexport default migrateWorkflowsContentTypes;\n","import type { Core } from '@strapi/types';\nimport { getOr, keys, pickBy, pipe, has, clamp } from 'lodash/fp';\nimport {\n  ENTITY_STAGE_ATTRIBUTE,\n  MAX_WORKFLOWS,\n  MAX_STAGES_PER_WORKFLOW,\n} from '../constants/workflows';\n\nexport const getVisibleContentTypesUID = pipe([\n  // Pick only content-types visible in the content-manager and option is not false\n  pickBy(\n    (value) =>\n      getOr(true, 'pluginOptions.content-manager.visible', value) &&\n      !getOr(false, 'options.noStageAttribute', value)\n  ),\n  // Get UIDs\n  keys,\n]);\n\nexport const hasStageAttribute = has(['attributes', ENTITY_STAGE_ATTRIBUTE]);\n\nexport const getWorkflowContentTypeFilter = (\n  { strapi }: { strapi: Core.Strapi },\n  contentType: any\n) => {\n  if (strapi.db.dialect.supportsOperator('$jsonSupersetOf')) {\n    return { $jsonSupersetOf: JSON.stringify([contentType]) };\n  }\n  return { $contains: `\"${contentType}\"` };\n};\n\nexport const clampMaxWorkflows = clamp(1, MAX_WORKFLOWS);\nexport const clampMaxStagesPerWorkflow = clamp(1, MAX_STAGES_PER_WORKFLOW);\n\nexport default {\n  clampMaxWorkflows,\n  clampMaxStagesPerWorkflow,\n  getVisibleContentTypesUID,\n  hasStageAttribute,\n  getWorkflowContentTypeFilter,\n};\n","import { difference, keys } from 'lodash/fp';\nimport { async } from '@strapi/utils';\nimport { WORKFLOW_MODEL_UID } from '../constants/workflows';\nimport { getWorkflowContentTypeFilter } from '../utils/review-workflows';\n\n/**\n * Remove CT references from workflows if the CT is deleted\n */\nasync function migrateDeletedCTInWorkflows({ oldContentTypes, contentTypes }: any) {\n  const deletedContentTypes = difference(keys(oldContentTypes), keys(contentTypes)) ?? [];\n\n  if (deletedContentTypes.length) {\n    await async.map(deletedContentTypes, async (deletedContentTypeUID: unknown) => {\n      const workflow = await strapi.db.query(WORKFLOW_MODEL_UID).findOne({\n        select: ['id', 'contentTypes'],\n        where: {\n          contentTypes: getWorkflowContentTypeFilter({ strapi }, deletedContentTypeUID),\n        },\n      });\n\n      if (workflow) {\n        await strapi.db.query(WORKFLOW_MODEL_UID).update({\n          where: { id: workflow.id },\n          data: {\n            contentTypes: workflow.contentTypes.filter(\n              (contentTypeUID: unknown) => contentTypeUID !== deletedContentTypeUID\n            ),\n          },\n        });\n      }\n    });\n  }\n}\n\nexport default migrateDeletedCTInWorkflows;\n","import type { Context } from 'koa';\nimport type { Core } from '@strapi/types';\n\nimport { set } from 'lodash/fp';\n\n/**\n * A Strapi middleware function that adds support for review workflows.\n *\n * Why is it needed ?\n * For now, the admin panel cannot have anything but top-level attributes in the content-type for options.\n * But we need the CE part to be agnostics from Review Workflow (which is an EE feature).\n * CE handle the `options` object, that's why we move the reviewWorkflows boolean to the options object.\n *\n * @param {object} strapi - The Strapi instance.\n */\nexport function contentTypeMiddleware(strapi: Core.Strapi) {\n  /**\n   * A middleware function that moves the `reviewWorkflows` attribute from the top level of\n   * the request body to the `options` object within the request body.\n   *\n   * @param {object} ctx - The Koa context object.\n   */\n  const moveReviewWorkflowOption = (ctx: Context) => {\n    // Move reviewWorkflows to options.reviewWorkflows\n    const { reviewWorkflows, ...contentType } = ctx.request.body.contentType;\n\n    if (typeof reviewWorkflows === 'boolean') {\n      ctx.request.body.contentType = set('options.reviewWorkflows', reviewWorkflows, contentType);\n    }\n  };\n  strapi.server.router.use('/content-type-builder/content-types/:uid?', (ctx, next) => {\n    if (ctx.method === 'PUT' || ctx.method === 'POST') {\n      moveReviewWorkflowOption(ctx);\n    }\n    return next();\n  });\n}\n\nexport default {\n  contentTypeMiddleware,\n};\n","import { defaultsDeep, filter, pipe, map } from 'lodash/fp';\n\nimport type { Core, UID } from '@strapi/types';\n\nimport { getService, getAdminService } from './utils';\nimport migrateStageAttribute from './migrations/shorten-stage-attribute';\nimport migrateReviewWorkflowStagesColor from './migrations/set-stages-default-color';\nimport migrateReviewWorkflowStagesRoles from './migrations/set-stages-roles';\nimport migrateReviewWorkflowName from './migrations/set-workflow-default-name';\nimport migrateWorkflowsContentTypes from './migrations/multiple-workflows';\nimport migrateDeletedCTInWorkflows from './migrations/handle-deleted-ct-in-workflows';\nimport reviewWorkflowsMiddlewares from './middlewares/review-workflows';\n\nimport { getVisibleContentTypesUID, hasStageAttribute } from './utils/review-workflows';\n\nimport {\n  ENTITY_STAGE_ATTRIBUTE,\n  ENTITY_ASSIGNEE_ATTRIBUTE,\n  STAGE_MODEL_UID,\n  MAX_WORKFLOWS,\n  MAX_STAGES_PER_WORKFLOW,\n} from './constants/workflows';\n\nconst setRelation = (attributeName: any, target: any, contentType: any) => {\n  Object.assign(contentType.attributes, {\n    [attributeName]: {\n      writable: true,\n      private: false,\n      configurable: false,\n      visible: false,\n      useJoinTable: true, // We want a join table to persist data when downgrading to CE\n      type: 'relation',\n      relation: 'oneToOne',\n      target,\n    },\n  });\n\n  return contentType;\n};\n\n/**\n * Add the stage and assignee attributes to content types\n */\nfunction extendReviewWorkflowContentTypes({ strapi }: { strapi: Core.Strapi }) {\n  const contentTypeToExtend = getVisibleContentTypesUID(strapi.contentTypes);\n\n  for (const contentTypeUID of contentTypeToExtend) {\n    strapi.get('content-types').extend(contentTypeUID, (contentType: any) => {\n      // Set Stage attribute\n      setRelation(ENTITY_STAGE_ATTRIBUTE, STAGE_MODEL_UID, contentType);\n      // Set Assignee attribute\n      setRelation(ENTITY_ASSIGNEE_ATTRIBUTE, 'admin::user', contentType);\n    });\n  }\n}\n\n/**\n * Persist the stage & assignee attributes so they are not removed when downgrading to CE.\n *\n * TODO: V6 - Instead of persisting the join tables, always create the stage & assignee attributes, even in CE mode\n *            It was decided in V4 & V5 to not expose them in CE (as they pollute the CTs) but it's not worth given the complexity this needs\n */\nfunction persistRWOnDowngrade({ strapi }: { strapi: Core.Strapi }) {\n  const { removePersistedTablesWithSuffix, persistTables } = getAdminService('persist-tables');\n\n  return async ({ contentTypes }: { contentTypes: Record<UID.ContentType, any> }) => {\n    const getStageTableToPersist = (contentTypeUID: UID.ContentType) => {\n      // Persist the stage join table\n      const { attributes, tableName } = strapi.db.metadata.get(contentTypeUID) as any;\n      const joinTableName = attributes[ENTITY_STAGE_ATTRIBUTE].joinTable.name;\n      return {\n        name: joinTableName,\n        dependsOn: [{ name: tableName }],\n      };\n    };\n\n    const getAssigneeTableToPersist = (contentTypeUID: UID.ContentType) => {\n      // Persist the assignee join table\n      const { attributes, tableName } = strapi.db.metadata.get(contentTypeUID) as any;\n      const joinTableName = attributes[ENTITY_ASSIGNEE_ATTRIBUTE].joinTable.name;\n      return {\n        name: joinTableName,\n        dependsOn: [{ name: tableName }],\n      };\n    };\n\n    const enabledRWContentTypes = pipe([\n      getVisibleContentTypesUID,\n      filter((uid: UID.ContentType) => hasStageAttribute(contentTypes[uid])),\n    ])(contentTypes);\n\n    // Remove previously created join tables and persist the new ones\n    const stageJoinTablesToPersist = enabledRWContentTypes.map(getStageTableToPersist);\n    await removePersistedTablesWithSuffix('_strapi_stage_lnk');\n    await persistTables(stageJoinTablesToPersist);\n\n    // Remove previously created join tables and persist the new ones\n    const assigneeJoinTablesToPersist = enabledRWContentTypes.map(getAssigneeTableToPersist);\n    await removePersistedTablesWithSuffix('_strapi_assignee_lnk');\n    await persistTables(assigneeJoinTablesToPersist);\n  };\n}\n\nexport default async ({ strapi }: { strapi: Core.Strapi }) => {\n  // Data Migrations\n  strapi.hook('strapi::content-types.beforeSync').register(migrateStageAttribute);\n  strapi.hook('strapi::content-types.afterSync').register(persistRWOnDowngrade({ strapi }));\n  strapi\n    .hook('strapi::content-types.afterSync')\n    .register(migrateReviewWorkflowStagesColor)\n    .register(migrateReviewWorkflowStagesRoles)\n    .register(migrateReviewWorkflowName)\n    .register(migrateWorkflowsContentTypes)\n    .register(migrateDeletedCTInWorkflows);\n\n  // Middlewares\n  reviewWorkflowsMiddlewares.contentTypeMiddleware(strapi);\n\n  // Schema customization\n  extendReviewWorkflowContentTypes({ strapi });\n\n  // License limits\n  const reviewWorkflowsOptions = defaultsDeep(\n    {\n      numberOfWorkflows: MAX_WORKFLOWS,\n      stagesPerWorkflow: MAX_STAGES_PER_WORKFLOW,\n    },\n    strapi.ee.features.get('review-workflows')\n  );\n  const workflowsValidationService = getService('validation', { strapi });\n  workflowsValidationService.register(reviewWorkflowsOptions);\n};\n","export default {\n  schema: {\n    collectionName: 'strapi_workflows',\n    info: {\n      name: 'Workflow',\n      description: '',\n      singularName: 'workflow',\n      pluralName: 'workflows',\n      displayName: 'Workflow',\n    },\n    options: {},\n    pluginOptions: {\n      'content-manager': {\n        visible: false,\n      },\n      'content-type-builder': {\n        visible: false,\n      },\n    },\n    attributes: {\n      name: {\n        type: 'string',\n        required: true,\n        unique: true,\n      },\n      stages: {\n        type: 'relation',\n        target: 'plugin::review-workflows.workflow-stage',\n        relation: 'oneToMany',\n        mappedBy: 'workflow',\n      },\n      stageRequiredToPublish: {\n        type: 'relation',\n        target: 'plugin::review-workflows.workflow-stage',\n        relation: 'oneToOne',\n        required: false,\n      },\n      contentTypes: {\n        type: 'json',\n        required: true,\n        default: '[]',\n      },\n    },\n  },\n};\n","import { STAGE_DEFAULT_COLOR } from '../../constants/workflows';\n\nexport default {\n  schema: {\n    collectionName: 'strapi_workflows_stages',\n    info: {\n      name: 'Workflow Stage',\n      description: '',\n      singularName: 'workflow-stage',\n      pluralName: 'workflow-stages',\n      displayName: 'Stages',\n    },\n    options: {\n      version: '1.1.0',\n    },\n    pluginOptions: {\n      'content-manager': {\n        visible: false,\n      },\n      'content-type-builder': {\n        visible: false,\n      },\n    },\n    attributes: {\n      name: {\n        type: 'string',\n        configurable: false,\n      },\n      color: {\n        type: 'string',\n        configurable: false,\n        default: STAGE_DEFAULT_COLOR,\n      },\n      workflow: {\n        type: 'relation',\n        target: 'plugin::review-workflows.workflow',\n        relation: 'manyToOne',\n        inversedBy: 'stages',\n        configurable: false,\n      },\n      permissions: {\n        type: 'relation',\n        target: 'admin::permission',\n        relation: 'manyToMany',\n        configurable: false,\n      },\n    },\n  },\n};\n","import workflow from './workflow';\nimport workflowStage from './workflow-stage';\n\nexport default {\n  workflow,\n  'workflow-stage': workflowStage,\n};\n","export default {\n  reviewWorkflows: [\n    {\n      uid: 'review-workflows.create',\n      displayName: 'Create',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'review workflows',\n      subCategory: 'options',\n    },\n    {\n      uid: 'review-workflows.read',\n      displayName: 'Read',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'review workflows',\n      subCategory: 'options',\n    },\n    {\n      uid: 'review-workflows.update',\n      displayName: 'Update',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'review workflows',\n      subCategory: 'options',\n    },\n    {\n      uid: 'review-workflows.delete',\n      displayName: 'Delete',\n      pluginName: 'admin',\n      section: 'settings',\n      category: 'review workflows',\n      subCategory: 'options',\n    },\n    {\n      uid: 'review-workflows.stage.transition',\n      displayName: 'Change stage',\n      pluginName: 'admin',\n      section: 'internal',\n    },\n  ],\n};\n","export const WORKFLOW_UPDATE_STAGE = 'review-workflows.updateEntryStage';\n\nexport default {\n  WORKFLOW_UPDATE_STAGE,\n};\n","import { getAdminService, getService } from './utils';\nimport actions from './config/actions';\n\nimport defaultStages from './constants/default-stages.json';\nimport defaultWorkflow from './constants/default-workflow.json';\nimport webhookEvents from './constants/webhook-events';\n\n/**\n * Initialize the default workflow if there is no workflow in the database\n */\n\nasync function initDefaultWorkflow() {\n  const workflowsService = getService('workflows', { strapi });\n  const stagesService = getService('stages', { strapi });\n\n  const wfCount = await workflowsService.count();\n  const stagesCount = await stagesService.count();\n\n  // Check if there is nothing about review-workflow in DB\n  // If any, the feature has already been initialized with a workflow and stages\n  if (wfCount === 0 && stagesCount === 0) {\n    const workflow = {\n      ...defaultWorkflow,\n      contentTypes: [],\n      stages: defaultStages,\n    };\n\n    await workflowsService.create({ data: workflow });\n  }\n}\n\n/**\n * Webhook store limits the events that can be triggered,\n * this function extends it with the events review workflows can trigger\n */\nconst registerWebhookEvents = async () =>\n  Object.entries(webhookEvents).forEach(([eventKey, event]) =>\n    strapi.get('webhookStore').addAllowedEvent(eventKey, event)\n  );\n\nexport default async (args: any) => {\n  // Permissions\n  const { actionProvider } = getAdminService('permission');\n  await actionProvider.registerMany(actions.reviewWorkflows);\n\n  // Webhooks and events\n  await registerWebhookEvents();\n  await getService('workflow-weekly-metrics').registerCron();\n\n  // Data initialization\n  await initDefaultWorkflow();\n\n  // Document service middleware\n  const docsMiddlewares = getService('document-service-middlewares');\n  strapi.documents.use(docsMiddlewares.assignStageOnCreate);\n  strapi.documents.use(docsMiddlewares.handleStageOnUpdate);\n  strapi.documents.use(docsMiddlewares.checkStageBeforePublish);\n};\n","import type { Core } from '@strapi/types';\n\nexport default async ({ strapi }: { strapi: Core.Strapi }) => {};\n","export const enableFeatureMiddleware = (featureName: string) => (ctx: any, next: any) => {\n  if (strapi.ee.features.isEnabled(featureName)) {\n    return next();\n  }\n\n  ctx.status = 404;\n};\n","import { enableFeatureMiddleware } from './utils';\n\nexport default {\n  type: 'admin',\n  routes: [\n    // Review workflow\n    {\n      method: 'POST',\n      path: '/workflows',\n      handler: 'workflows.create',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::review-workflows.create'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/workflows/:id',\n      handler: 'workflows.update',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::review-workflows.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/workflows/:id',\n      handler: 'workflows.delete',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::review-workflows.delete'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/workflows',\n      handler: 'workflows.find',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::review-workflows.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/workflows/:workflow_id/stages',\n      handler: 'stages.find',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::review-workflows.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/workflows/:workflow_id/stages/:id',\n      handler: 'stages.findById',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::review-workflows.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/content-manager/(collection|single)-types/:model_uid/:id/stage',\n      handler: 'stages.updateEntity',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/content-manager/(collection|single)-types/:model_uid/:id/stages',\n      handler: 'stages.listAvailableStages',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/content-manager/(collection|single)-types/:model_uid/:id/assignee',\n      handler: 'assignees.updateEntity',\n      config: {\n        middlewares: [enableFeatureMiddleware('review-workflows')],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['admin::users.read'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import reviewWorkflows from './review-workflows';\n\nexport default {\n  'review-workflows': reviewWorkflows,\n};\n","import type { Core } from '@strapi/types';\nimport { async } from '@strapi/utils';\nimport { difference, merge } from 'lodash/fp';\nimport { getService } from '../utils';\nimport { WORKFLOW_MODEL_UID } from '../constants/workflows';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const contentManagerContentTypeService = strapi\n    .plugin('content-manager')\n    .service('content-types');\n  const stagesService = getService('stages', { strapi });\n\n  const updateContentTypeConfig = async (uid: any, reviewWorkflowOption: any) => {\n    // Merge options in the configuration as the configuration service use a destructuration merge which doesn't include nested objects\n    const modelConfig = await contentManagerContentTypeService.findConfiguration(uid);\n\n    await contentManagerContentTypeService.updateConfiguration(\n      { uid },\n      { options: merge(modelConfig.options, { reviewWorkflows: reviewWorkflowOption }) }\n    );\n  };\n\n  return {\n    /**\n     * Migrates entities stages. Used when a content type is assigned to a workflow.\n     * @param {*} options\n     * @param {Array<string>} options.srcContentTypes - The content types assigned to the previous workflow\n     * @param {Array<string>} options.destContentTypes - The content types assigned to the new workflow\n     * @param {Workflow.Stage} options.stageId - The new stage to assign the entities to\n     */\n    async migrate({ srcContentTypes = [], destContentTypes, stageId }: any) {\n      const workflowsService = getService('workflows', { strapi });\n      const { created, deleted } = diffContentTypes(srcContentTypes, destContentTypes);\n\n      await async.map(\n        created,\n        async (uid: any) => {\n          // Content Types should only be assigned to one workflow\n          // However, edge cases can happen, and this handles them\n          const srcWorkflows = await workflowsService._getAssignedWorkflows(uid, {});\n\n          if (srcWorkflows.length) {\n            // Updates all existing entities stages links to the new stage\n            await stagesService.updateEntitiesStage(uid, { toStageId: stageId });\n            // Transfer content types from the previous workflow(s)\n            await async.map(srcWorkflows, (srcWorkflow: any) =>\n              this.transferContentTypes(srcWorkflow, uid)\n            );\n          }\n          await updateContentTypeConfig(uid, true);\n\n          // Create new stages links to the new stage\n          return stagesService.updateEntitiesStage(uid, {\n            fromStageId: null,\n            toStageId: stageId,\n          });\n        },\n        // transferContentTypes can cause race conditions if called in parallel when updating the same workflow\n        { concurrency: 1 }\n      );\n\n      await async.map(deleted, async (uid: any) => {\n        await updateContentTypeConfig(uid, false);\n        await stagesService.deleteAllEntitiesStage(uid, {});\n      });\n    },\n\n    /**\n     * Filters the content types assigned to a workflow\n     * @param {Workflow} srcWorkflow - The workflow to transfer from\n     * @param {string} uid - The content type uid\n     */\n    async transferContentTypes(srcWorkflow: any, uid: any) {\n      // Update assignedContentTypes of the previous workflow\n      await strapi.db.query(WORKFLOW_MODEL_UID).update({\n        where: {\n          id: srcWorkflow.id,\n        },\n        data: {\n          contentTypes: srcWorkflow.contentTypes.filter((contentType: any) => contentType !== uid),\n        },\n      });\n    },\n  };\n};\n\nconst diffContentTypes = (srcContentTypes: any, destContentTypes: any) => {\n  const created = difference(destContentTypes, srcContentTypes);\n  const deleted = difference(srcContentTypes, destContentTypes);\n  return { created, deleted };\n};\n","import type { Core } from '@strapi/types';\nimport { set, isString, map, get } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport { WORKFLOW_MODEL_UID, WORKFLOW_POPULATE } from '../constants/workflows';\nimport { getService } from '../utils';\nimport { getWorkflowContentTypeFilter } from '../utils/review-workflows';\nimport workflowsContentTypesFactory from './workflow-content-types';\n\nconst processFilters = ({ strapi }: { strapi: Core.Strapi }, filters: any = {}) => {\n  const processedFilters = { ...filters };\n\n  if (isString(filters.contentTypes)) {\n    processedFilters.contentTypes = getWorkflowContentTypeFilter({ strapi }, filters.contentTypes);\n  }\n\n  return processedFilters;\n};\n\n// TODO: How can we improve this? Maybe using traversePopulate?\nconst processPopulate = (populate: any) => {\n  // If it does not exist or it's not an object (like an array) return the default populate\n  if (!populate) {\n    return WORKFLOW_POPULATE;\n  }\n\n  return populate;\n};\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const workflowsContentTypes = workflowsContentTypesFactory({ strapi });\n  const workflowValidator = getService('validation', { strapi });\n  const metrics = getService('workflow-metrics', { strapi });\n\n  return {\n    /**\n     * Returns all the workflows matching the user-defined filters.\n     * @param {object} opts - Options for the query.\n     * @param {object} opts.filters - Filters object.\n     * @returns {Promise<object[]>} - List of workflows that match the user's filters.\n     */\n    async find(opts: any = {}) {\n      const filters = processFilters({ strapi }, opts.filters);\n      const populate = processPopulate(opts.populate);\n\n      const query = strapi.get('query-params').transform(WORKFLOW_MODEL_UID, {\n        ...opts,\n        filters,\n        populate,\n      });\n\n      return strapi.db.query(WORKFLOW_MODEL_UID).findMany(query);\n    },\n\n    /**\n     * Returns the workflow with the specified ID.\n     * @param {string} id - ID of the requested workflow.\n     * @param {object} opts - Options for the query.\n     * @returns {Promise<object>} - Workflow object matching the requested ID.\n     */\n    findById(id: any, opts: { populate?: any } = {}) {\n      const populate = processPopulate(opts.populate);\n\n      const query = strapi.get('query-params').transform(WORKFLOW_MODEL_UID, { populate });\n\n      return strapi.db.query(WORKFLOW_MODEL_UID).findOne({\n        ...query,\n        where: { id },\n      });\n    },\n\n    /**\n     * Creates a new workflow.\n     * @param {object} opts - Options for creating the new workflow.\n     * @returns {Promise<object>} - Workflow object that was just created.\n     * @throws {ValidationError} - If the workflow has no stages.\n     */\n    async create(opts: { data: any }) {\n      let createOpts = { ...opts, populate: WORKFLOW_POPULATE };\n\n      workflowValidator.validateWorkflowStages(opts.data.stages);\n      await workflowValidator.validateWorkflowCount(1);\n\n      return strapi.db.transaction(async () => {\n        // Create stages\n        const stages = await getService('stages', { strapi }).createMany(opts.data.stages);\n        const mapIds = map(get('id'));\n\n        createOpts = set('data.stages', mapIds(stages), createOpts);\n\n        if (opts.data.stageRequiredToPublishName) {\n          const stageRequiredToPublish = stages.find(\n            (stage: any) => stage.name === opts.data.stageRequiredToPublishName\n          );\n          if (!stageRequiredToPublish) {\n            throw new errors.ApplicationError('Stage required to publish does not exist');\n          }\n\n          createOpts = set('data.stageRequiredToPublish', stageRequiredToPublish.id, createOpts);\n        }\n\n        // Update (un)assigned Content Types\n        if (opts.data.contentTypes) {\n          await workflowsContentTypes.migrate({\n            destContentTypes: opts.data.contentTypes,\n            stageId: stages[0].id,\n          });\n        }\n\n        // Create Workflow\n        const createdWorkflow = await strapi.db\n          .query(WORKFLOW_MODEL_UID)\n          .create(strapi.get('query-params').transform(WORKFLOW_MODEL_UID, createOpts));\n\n        metrics.sendDidCreateWorkflow(createdWorkflow.id, !!opts.data.stageRequiredToPublishName);\n\n        if (opts.data.stageRequiredToPublishName) {\n          await strapi\n            .plugin('content-releases')\n            .service('release-action')\n            .validateActionsByContentTypes(opts.data.contentTypes);\n        }\n\n        return createdWorkflow;\n      });\n    },\n\n    /**\n     * Updates an existing workflow.\n     * @param {object} workflow - The existing workflow to update.\n     * @param {object} opts - Options for updating the workflow.\n     * @returns {Promise<object>} - Workflow object that was just updated.\n     * @throws {ApplicationError} - If the supplied stage ID does not belong to the workflow.\n     */\n    async update(workflow: any, opts: any) {\n      const stageService = getService('stages', { strapi });\n      let updateOpts = { ...opts, populate: { ...WORKFLOW_POPULATE } };\n      let updatedStages: any = [];\n      let updatedStageIds: any;\n\n      await workflowValidator.validateWorkflowCount();\n\n      return strapi.db.transaction(async () => {\n        // Update stages\n        if (opts.data.stages) {\n          workflowValidator.validateWorkflowStages(opts.data.stages);\n          opts.data.stages.forEach((stage: any) =>\n            this.assertStageBelongsToWorkflow(stage.id, workflow)\n          );\n\n          updatedStages = await stageService.replaceStages(\n            workflow.stages,\n            opts.data.stages,\n            workflow.contentTypes\n          );\n          updatedStageIds = updatedStages.map((stage: any) => stage.id);\n\n          updateOpts = set('data.stages', updatedStageIds, updateOpts);\n        }\n\n        if (opts.data.stageRequiredToPublishName !== undefined) {\n          const stages = updatedStages ?? workflow.stages;\n\n          if (opts.data.stageRequiredToPublishName === null) {\n            updateOpts = set('data.stageRequiredToPublish', null, updateOpts);\n          } else {\n            const stageRequiredToPublish = stages.find(\n              (stage: any) => stage.name === opts.data.stageRequiredToPublishName\n            );\n\n            if (!stageRequiredToPublish) {\n              throw new errors.ApplicationError('Stage required to publish does not exist');\n            }\n\n            updateOpts = set('data.stageRequiredToPublish', stageRequiredToPublish.id, updateOpts);\n          }\n        }\n\n        // Update (un)assigned Content Types\n        if (opts.data.contentTypes) {\n          await workflowsContentTypes.migrate({\n            srcContentTypes: workflow.contentTypes,\n            destContentTypes: opts.data.contentTypes,\n            stageId: updatedStageIds ? updatedStageIds[0] : workflow.stages[0].id,\n          });\n        }\n\n        metrics.sendDidEditWorkflow(workflow.id, !!opts.data.stageRequiredToPublishName);\n\n        const query = strapi.get('query-params').transform(WORKFLOW_MODEL_UID, updateOpts);\n\n        // Update Workflow\n        const updatedWorkflow = await strapi.db.query(WORKFLOW_MODEL_UID).update({\n          ...query,\n          where: { id: workflow.id },\n        });\n\n        await strapi\n          .plugin('content-releases')\n          .service('release-action')\n          .validateActionsByContentTypes([\n            ...workflow.contentTypes,\n            ...(opts.data.contentTypes || []),\n          ]);\n\n        return updatedWorkflow;\n      });\n    },\n\n    /**\n     * Deletes an existing workflow.\n     * Also deletes all the workflow stages and migrate all assigned the content types.\n     * @param {*} workflow\n     * @param {*} opts\n     * @returns\n     */\n    async delete(workflow: any, opts: any) {\n      const stageService = getService('stages', { strapi });\n\n      const workflowCount = await this.count();\n\n      if (workflowCount <= 1) {\n        throw new errors.ApplicationError('Can not delete the last workflow');\n      }\n\n      return strapi.db.transaction(async () => {\n        // Delete stages\n        await stageService.deleteMany(workflow.stages);\n\n        // Unassign all content types, this will migrate the content types to null\n        await workflowsContentTypes.migrate({\n          srcContentTypes: workflow.contentTypes,\n          destContentTypes: [],\n        });\n\n        const query = strapi.get('query-params').transform(WORKFLOW_MODEL_UID, opts);\n\n        // Delete Workflow\n        const deletedWorkflow = await strapi.db.query(WORKFLOW_MODEL_UID).delete({\n          ...query,\n          where: { id: workflow.id },\n        });\n\n        await strapi\n          .plugin('content-releases')\n          .service('release-action')\n          .validateActionsByContentTypes(workflow.contentTypes);\n\n        return deletedWorkflow;\n      });\n    },\n    /**\n     * Returns the total count of workflows.\n     * @returns {Promise<number>} - Total count of workflows.\n     */\n    count() {\n      return strapi.db.query(WORKFLOW_MODEL_UID).count();\n    },\n\n    /**\n     * Finds the assigned workflow for a given content type ID.\n     * @param {string} uid - Content type ID to find the assigned workflow for.\n     * @param {object} opts - Options for the query.\n     * @returns {Promise<object|null>} - Assigned workflow object if found, or null.\n     */\n    async getAssignedWorkflow(uid: any, opts: any = {}) {\n      const workflows = await this._getAssignedWorkflows(uid, opts);\n\n      return workflows.length > 0 ? workflows[0] : null;\n    },\n\n    /**\n     * Finds all the assigned workflows for a given content type ID.\n     * Normally, there should only be one workflow assigned to a content type.\n     * However, edge cases can occur where a content type is assigned to multiple workflows.\n     * @param {string} uid - Content type ID to find the assigned workflows for.\n     * @param {object} opts - Options for the query.\n     * @returns {Promise<object[]>} - List of assigned workflow objects.\n     */\n    async _getAssignedWorkflows(uid: any, opts = {}) {\n      return this.find({\n        ...opts,\n        filters: { contentTypes: getWorkflowContentTypeFilter({ strapi }, uid) },\n      });\n    },\n\n    /**\n     * Asserts that a content type has an assigned workflow.\n     * @param {string} uid - Content type ID to verify the assignment of.\n     * @returns {Promise<object>} - Workflow object associated with the content type ID.\n     * @throws {ApplicationError} - If no assigned workflow is found for the content type ID.\n     */\n    async assertContentTypeBelongsToWorkflow(uid: any) {\n      const workflow = await this.getAssignedWorkflow(uid, {\n        populate: 'stages',\n      });\n\n      if (!workflow) {\n        throw new errors.ApplicationError(\n          `Review workflows is not activated on Content Type ${uid}.`\n        );\n      }\n\n      return workflow;\n    },\n\n    /**\n     * Asserts that a stage belongs to a given workflow.\n     * @param {string} stageId - ID of stage to check.\n     * @param {object} workflow - Workflow object to check against.\n     * @returns\n     * @throws {ApplicationError} - If the stage does not belong to the specified workflow.\n     */\n    assertStageBelongsToWorkflow(stageId: any, workflow: any) {\n      if (!stageId) {\n        return;\n      }\n\n      const belongs = workflow.stages.some((stage: any) => stage.id === stageId);\n      if (!belongs) {\n        throw new errors.ApplicationError(`Stage does not belong to workflow \"${workflow.name}\"`);\n      }\n    },\n  };\n};\n","import type { Core, UID } from '@strapi/types';\nimport { async, errors } from '@strapi/utils';\nimport { map, pick, isEqual } from 'lodash/fp';\nimport { STAGE_MODEL_UID, ENTITY_STAGE_ATTRIBUTE, ERRORS } from '../constants/workflows';\nimport { WORKFLOW_UPDATE_STAGE } from '../constants/webhook-events';\nimport { getService } from '../utils';\n\nconst { ApplicationError, ValidationError } = errors;\nconst sanitizedStageFields = ['id', 'name', 'workflow', 'color'];\nconst sanitizeStageFields = pick(sanitizedStageFields);\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const metrics = getService('workflow-metrics', { strapi });\n  const stagePermissionsService = getService('stage-permissions', { strapi });\n  const workflowValidator = getService('validation', { strapi });\n\n  return {\n    find({ workflowId, populate }: any) {\n      return strapi.db.query(STAGE_MODEL_UID).findMany({\n        where: { workflow: workflowId },\n        populate,\n      });\n    },\n\n    findById(id: string | number, { populate }: any = {}) {\n      return strapi.db.query(STAGE_MODEL_UID).findOne({\n        where: { id },\n        populate,\n      });\n    },\n\n    async createMany(stagesList: any, { fields }: any = {}) {\n      const params = { select: fields ?? '*' };\n\n      const stages = await Promise.all(\n        stagesList.map((stage: any) =>\n          strapi.db.query(STAGE_MODEL_UID).create({\n            data: sanitizeStageFields(stage),\n            ...params,\n          })\n        )\n      );\n\n      // Create stage permissions\n      await async.reduce(stagesList)(async (_, stage, idx) => {\n        // Ignore stages without permissions\n        if (!stage.permissions || stage.permissions.length === 0) {\n          return;\n        }\n\n        const stagePermissions = stage.permissions;\n        const stageId = stages[idx].id;\n\n        const permissions = await async.map(\n          stagePermissions,\n          // Register each stage permission\n          (permission: any) =>\n            stagePermissionsService.register({\n              roleId: permission.role,\n              action: permission.action,\n              fromStage: stageId,\n            })\n        );\n\n        // Update stage with the new permissions\n        await strapi.db.query(STAGE_MODEL_UID).update({\n          where: { id: stageId },\n          data: {\n            permissions: permissions.flat().map((p: any) => p.id),\n          },\n        });\n      }, []);\n\n      metrics.sendDidCreateStage();\n\n      return stages;\n    },\n\n    async update(srcStage: any, destStage: any) {\n      let stagePermissions = srcStage?.permissions ?? [];\n      const stageId = destStage.id;\n\n      if (destStage.permissions) {\n        await this.deleteStagePermissions([srcStage]);\n\n        const permissions = await async.map(destStage.permissions, (permission: any) =>\n          stagePermissionsService.register({\n            roleId: permission.role,\n            action: permission.action,\n            fromStage: stageId,\n          })\n        );\n        stagePermissions = permissions.flat().map((p: any) => p.id);\n      }\n\n      const stage = await strapi.db.query(STAGE_MODEL_UID).update({\n        where: { id: stageId },\n        data: {\n          ...destStage,\n          permissions: stagePermissions,\n        },\n      });\n\n      metrics.sendDidEditStage();\n\n      return stage;\n    },\n\n    async delete(stage: any) {\n      // Unregister all permissions related to this stage id\n      await this.deleteStagePermissions([stage]);\n\n      const deletedStage = await strapi.db.query(STAGE_MODEL_UID).delete({\n        where: { id: stage.id },\n      });\n\n      metrics.sendDidDeleteStage();\n\n      return deletedStage;\n    },\n\n    async deleteMany(stages: any) {\n      await this.deleteStagePermissions(stages);\n\n      return strapi.db.query(STAGE_MODEL_UID).deleteMany({\n        where: { id: { $in: stages.map((s: any) => s.id) } },\n      });\n    },\n\n    async deleteStagePermissions(stages: any) {\n      // TODO: Find another way to do this for when we use the \"to\" parameter.\n      const permissions = stages.map((s: any) => s.permissions || []).flat();\n      await stagePermissionsService.unregister(permissions || []);\n    },\n\n    count({ workflowId }: any = {}) {\n      const opts = {} as any;\n\n      if (workflowId) {\n        opts.where = {\n          workflow: workflowId,\n        };\n      }\n\n      return strapi.db.query(STAGE_MODEL_UID).count(opts);\n    },\n\n    async replaceStages(srcStages: any, destStages: any, contentTypesToMigrate = []) {\n      const { created, updated, deleted } = getDiffBetweenStages(srcStages, destStages);\n\n      assertAtLeastOneStageRemain(srcStages || [], { created, deleted });\n\n      // Update stages and assign entity stages\n      return strapi.db.transaction(async ({ trx }) => {\n        // Create the new stages\n        const createdStages = await this.createMany(created, { fields: ['id'] });\n        // Put all the newly created stages ids\n        const createdStagesIds = map('id', createdStages);\n\n        // Update the workflow stages\n        await async.map(updated, (destStage: any) => {\n          const srcStage = srcStages.find((s: any) => s.id === destStage.id);\n\n          return this.update(srcStage, destStage);\n        });\n\n        // Delete the stages that are not in the new stages list\n        await async.map(deleted, async (stage: any) => {\n          // Find the nearest stage in the workflow and newly created stages\n          // that is not deleted, prioritizing the previous stages\n          const nearestStage = findNearestMatchingStage(\n            [...srcStages, ...createdStages],\n            srcStages.findIndex((s: any) => s.id === stage.id),\n            (targetStage: any) => {\n              return !deleted.find((s: any) => s.id === targetStage.id);\n            }\n          );\n\n          // Assign the new stage to entities that had the deleted stage\n          await async.map(contentTypesToMigrate, (contentTypeUID: any) => {\n            this.updateEntitiesStage(contentTypeUID, {\n              fromStageId: stage.id,\n              toStageId: nearestStage.id,\n              trx,\n            });\n          });\n\n          return this.delete(stage);\n        });\n\n        return destStages.map((stage: any) => ({\n          ...stage,\n          id: stage.id ?? createdStagesIds.shift(),\n        }));\n      });\n    },\n\n    /**\n     * Update the stage of an entity\n     */\n    async updateEntity(\n      entityToUpdate: {\n        id: number | string;\n        documentId: string;\n        locale: string;\n        updatedAt: string;\n      },\n      model: UID.ContentType,\n      stageId: any\n    ) {\n      const stage = await this.findById(stageId);\n      const { documentId, locale } = entityToUpdate;\n\n      await workflowValidator.validateWorkflowCount();\n\n      if (!stage) {\n        throw new ApplicationError(`Selected stage does not exist`);\n      }\n\n      const entity = await strapi.documents(model).update({\n        documentId,\n        locale,\n        // Stage doesn't have DP or i18n enabled, connecting it through the `id`\n        // will be safer than relying on the `documentId` + `locale` + `status` transformation\n        data: { [ENTITY_STAGE_ATTRIBUTE]: pick(['id'], stage) },\n        populate: [ENTITY_STAGE_ATTRIBUTE],\n      });\n\n      // Update the `updated_at` field of the entity, so that the `status` is not considered `Modified`\n      // NOTE: `updatedAt` is a protected attribute that can not be modified directly from the query layer\n      //        hence the knex query builder is used here.\n      const { tableName } = strapi.db.metadata.get(model);\n      await strapi.db\n        .connection(tableName)\n        .where({ id: entityToUpdate.id })\n        .update({\n          updated_at: new Date(entityToUpdate.updatedAt),\n        });\n\n      metrics.sendDidChangeEntryStage();\n\n      return entity;\n    },\n\n    /**\n     * Updates entity stages of a content type:\n     *  - If fromStageId is undefined, all entities with an existing stage will be assigned the new stage\n     *  - If fromStageId is null, all entities without a stage will be assigned the new stage\n     *  - If fromStageId is a number, all entities with that stage will be assigned the new stage\n     *\n     * For performance reasons we use knex queries directly.\n     *\n     * @param {string} contentTypeUID\n     * @param {number | undefined | null} fromStageId\n     * @param {number} toStageId\n     * @param {import('knex').Knex.Transaction} trx\n     * @returns\n     */\n    async updateEntitiesStage(contentTypeUID: any, { fromStageId, toStageId }: any) {\n      const { attributes, tableName } = strapi.db.metadata.get(contentTypeUID) as any;\n      const joinTable = attributes[ENTITY_STAGE_ATTRIBUTE].joinTable;\n      const joinColumn = joinTable.joinColumn.name;\n      const invJoinColumn = joinTable.inverseJoinColumn.name;\n\n      await workflowValidator.validateWorkflowCount();\n\n      return strapi.db.transaction(async ({ trx }) => {\n        // Update all already existing links to the new stage\n        if (fromStageId === undefined) {\n          return strapi.db\n            .getConnection()\n            .from(joinTable.name)\n            .update({ [invJoinColumn]: toStageId })\n            .transacting(trx);\n        }\n\n        // Update all links from the specified stage to the new stage\n        const selectStatement = strapi.db\n          .getConnection()\n          .select({ [joinColumn]: 't1.id', [invJoinColumn]: toStageId })\n          .from(`${tableName} as t1`)\n          .leftJoin(`${joinTable.name} as t2`, `t1.id`, `t2.${joinColumn}`)\n          .where(`t2.${invJoinColumn}`, fromStageId)\n          .toSQL();\n\n        // Insert rows for all entries of the content type that have the specified stage\n        return strapi.db\n          .getConnection(joinTable.name)\n          .insert(\n            strapi.db.connection.raw(\n              `(${joinColumn}, ${invJoinColumn})  ${selectStatement.sql}`,\n              selectStatement.bindings\n            )\n          )\n          .transacting(trx);\n      });\n    },\n\n    /**\n     * Deletes all entity stages of a content type\n     * @param {string} contentTypeUID\n     * @returns\n     */\n    async deleteAllEntitiesStage(contentTypeUID: any) {\n      const { attributes } = strapi.db.metadata.get(contentTypeUID) as any;\n      const joinTable = attributes[ENTITY_STAGE_ATTRIBUTE].joinTable;\n\n      // Delete all stage links for the content type\n      return strapi.db.transaction(async ({ trx }) =>\n        strapi.db.getConnection().from(joinTable.name).delete().transacting(trx)\n      );\n    },\n  };\n};\n\n/**\n * Compares two arrays of stages and returns an object indicating the differences.\n *\n * The function compares the `id` properties of each stage in `sourceStages` and `comparisonStages` to determine if the stage is present in both arrays.\n * If a stage with the same `id` is found in both arrays but the `name` property is different, the stage is considered updated.\n * If a stage with a particular `id` is only found in `comparisonStages`, it is considered created.\n * If a stage with a particular `id` is only found in `sourceStages`, it is considered deleted.\n *\n * @typedef {{id: Number, name: String, workflow: Number}} Stage\n * @typedef {{created: Stage[], updated: Stage[], deleted: Stage[]}} DiffStages\n *\n * The DiffStages object has three properties: `created`, `updated`, and `deleted`.\n * `created` is an array of stages that are in `comparisonStages` but not in `sourceStages`.\n * `updated` is an array of stages that have different names in `comparisonStages` and `sourceStages`.\n * `deleted` is an array of stages that are in `sourceStages` but not in `comparisonStages`.\n *\n * @param {Stage[]} sourceStages\n * @param {Stage[]} comparisonStages\n * @returns { DiffStages }\n */\nfunction getDiffBetweenStages(sourceStages: any, comparisonStages: any) {\n  const result = comparisonStages.reduce(\n    // ...\n\n    (acc: any, stageToCompare: any) => {\n      const srcStage = sourceStages.find((stage: any) => stage.id === stageToCompare.id);\n\n      if (!srcStage) {\n        acc.created.push(stageToCompare);\n      } else if (\n        !isEqual(\n          pick(['name', 'color', 'permissions'], srcStage),\n          pick(['name', 'color', 'permissions'], stageToCompare)\n        )\n      ) {\n        acc.updated.push(stageToCompare);\n      }\n      return acc;\n    },\n    { created: [], updated: [] }\n  );\n\n  result.deleted = sourceStages.filter(\n    (srcStage: any) => !comparisonStages.some((cmpStage: any) => cmpStage.id === srcStage.id)\n  );\n\n  return result;\n}\n\n/**\n * Asserts that at least one stage remains in the workflow after applying deletions and additions.\n *\n * @param {Array} workflowStages - An array of stages in the current workflow.\n * @param {Object} diffStages - An object containing the stages to be deleted and created.\n * @param {Array} diffStages.deleted - An array of stages that are planned to be deleted from the workflow.\n * @param {Array} diffStages.created - An array of stages that are planned to be created in the workflow.\n *\n * @throws {ValidationError} If the number of remaining stages in the workflow after applying deletions and additions is less than 1.\n */\nfunction assertAtLeastOneStageRemain(workflowStages: any, diffStages: any) {\n  const remainingStagesCount =\n    workflowStages.length - diffStages.deleted.length + diffStages.created.length;\n  if (remainingStagesCount < 1) {\n    throw new ValidationError(ERRORS.WORKFLOW_WITHOUT_STAGES);\n  }\n}\n\n/**\n * Find the id of the nearest object in an array that matches a condition.\n * Used for searching for the nearest stage that is not deleted.\n * Starts by searching the elements before the index, then the remaining elements in the array.\n *\n * @param {Array} stages\n * @param {Number} startIndex the index to start searching from\n * @param {Function} condition must evaluate to true for the object to be considered a match\n * @returns {Object} stage\n */\nfunction findNearestMatchingStage(stages: any, startIndex: any, condition: any) {\n  // Start by searching the elements before the startIndex\n  for (let i = startIndex; i >= 0; i -= 1) {\n    if (condition(stages[i])) {\n      return stages[i];\n    }\n  }\n\n  // If no matching element is found before the startIndex,\n  // search the remaining elements in the array\n  const remainingArray = stages.slice(startIndex + 1);\n  const nearestObject = remainingArray.filter(condition)[0];\n  return nearestObject;\n}\n","import type { Core } from '@strapi/types';\nimport { prop } from 'lodash/fp';\nimport { async, errors } from '@strapi/utils';\nimport { getService, getAdminService } from '../utils';\nimport { STAGE_TRANSITION_UID } from '../constants/workflows';\n\nconst { ApplicationError } = errors;\nconst validActions = [STAGE_TRANSITION_UID];\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const roleService = getAdminService('role');\n  const permissionService = getAdminService('permission');\n\n  return {\n    async register({ roleId, action, fromStage }: any) {\n      if (!validActions.includes(action)) {\n        throw new ApplicationError(`Invalid action ${action}`);\n      }\n      const permissions = await roleService.addPermissions(roleId, [\n        {\n          action,\n          actionParameters: {\n            from: fromStage,\n          },\n        },\n      ]);\n\n      // TODO: Filter response\n      return permissions;\n    },\n    async registerMany(permissions: any) {\n      return async.map(permissions, this.register);\n    },\n    async unregister(permissions: any) {\n      const permissionIds = permissions.map(prop('id'));\n      await permissionService.deleteByIds(permissionIds);\n    },\n    can(action: any, fromStage: any) {\n      const requestState = strapi.requestContext.get()?.state;\n\n      if (!requestState) {\n        return false;\n      }\n\n      // Override permissions for super admin\n      const userRoles = requestState.user?.roles;\n      if (userRoles?.some((role: any) => role.code === 'strapi-super-admin')) {\n        return true;\n      }\n\n      return requestState.userAbility.can({\n        name: action,\n        params: { from: fromStage },\n      });\n    },\n  };\n};\n","import type { Core, UID, Modules } from '@strapi/types';\nimport { errors } from '@strapi/utils';\nimport { isNil } from 'lodash/fp';\nimport { ENTITY_ASSIGNEE_ATTRIBUTE } from '../constants/workflows';\nimport { getService, getAdminService } from '../utils';\n\nconst { ApplicationError } = errors;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const metrics = getService('workflow-metrics', { strapi });\n\n  return {\n    async findEntityAssigneeId(id: string | number, model: UID.ContentType) {\n      const entity = await strapi.db.query(model).findOne({\n        where: { id },\n        populate: [ENTITY_ASSIGNEE_ATTRIBUTE],\n        select: [],\n      });\n\n      return entity?.[ENTITY_ASSIGNEE_ATTRIBUTE]?.id ?? null;\n    },\n\n    /**\n     * Update the assignee of an entity\n     */\n    async updateEntityAssignee(\n      entityToUpdate: {\n        id: number | string;\n        documentId: string;\n        locale: string;\n        updatedAt: string;\n      },\n      model: UID.ContentType,\n      assigneeId: string | null\n    ) {\n      const { documentId, locale } = entityToUpdate;\n\n      if (!isNil(assigneeId)) {\n        const userExists = await getAdminService('user', { strapi }).exists({ id: assigneeId });\n\n        if (!userExists) {\n          throw new ApplicationError(`Selected user does not exist`);\n        }\n      }\n\n      const oldAssigneeId = await this.findEntityAssigneeId(entityToUpdate.id, model);\n      metrics.sendDidEditAssignee(oldAssigneeId, assigneeId || null);\n\n      const entity = await strapi.documents(model).update({\n        documentId,\n        locale,\n        data: { [ENTITY_ASSIGNEE_ATTRIBUTE]: assigneeId || null },\n        populate: [ENTITY_ASSIGNEE_ATTRIBUTE],\n        fields: [],\n      });\n\n      // Update the `updated_at` field of the entity, so that the `status` is not considered `Modified`\n      // NOTE: `updatedAt` is a protected attribute that can not be modified directly from the query layer\n      //        hence the knex query builder is used here.\n      const { tableName } = strapi.db.metadata.get(model);\n      await strapi.db\n        .connection(tableName)\n        .where({ id: entityToUpdate.id })\n        .update({\n          updated_at: new Date(entityToUpdate.updatedAt),\n        });\n\n      return entity;\n    },\n  };\n};\n","import type { Core } from '@strapi/types';\nimport { uniq } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport { ERRORS, MAX_WORKFLOWS, MAX_STAGES_PER_WORKFLOW } from '../constants/workflows';\nimport { clampMaxWorkflows, clampMaxStagesPerWorkflow } from '../utils/review-workflows';\n\nconst { ValidationError } = errors;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    limits: {\n      numberOfWorkflows: MAX_WORKFLOWS,\n      stagesPerWorkflow: MAX_STAGES_PER_WORKFLOW,\n    },\n    register({ numberOfWorkflows, stagesPerWorkflow }: any) {\n      if (!Object.isFrozen(this.limits)) {\n        this.limits.numberOfWorkflows = clampMaxWorkflows(\n          numberOfWorkflows || this.limits.numberOfWorkflows\n        );\n        this.limits.stagesPerWorkflow = clampMaxStagesPerWorkflow(\n          stagesPerWorkflow || this.limits.stagesPerWorkflow\n        );\n        Object.freeze(this.limits);\n      }\n    },\n    /**\n     * Validates the stages of a workflow.\n     * @param {Array} stages - Array of stages to be validated.\n     * @throws {ValidationError} - If the workflow has no stages or exceeds the limit.\n     */\n    validateWorkflowStages(stages: any) {\n      if (!stages || stages.length === 0) {\n        throw new ValidationError(ERRORS.WORKFLOW_WITHOUT_STAGES);\n      }\n      if (stages.length > this.limits.stagesPerWorkflow) {\n        throw new ValidationError(ERRORS.STAGES_LIMIT);\n      }\n      // Validate stage names are not duplicated\n      const stageNames = stages.map((stage: any) => stage.name);\n      if (uniq(stageNames).length !== stageNames.length) {\n        throw new ValidationError(ERRORS.DUPLICATED_STAGE_NAME);\n      }\n    },\n\n    async validateWorkflowCountStages(workflowId: any, countAddedStages = 0) {\n      const stagesService = getService('stages', { strapi });\n      const countWorkflowStages = await stagesService.count({ workflowId });\n\n      if (countWorkflowStages + countAddedStages > this.limits.stagesPerWorkflow) {\n        throw new ValidationError(ERRORS.STAGES_LIMIT);\n      }\n    },\n\n    /**\n     * Validates the count of existing and added workflows.\n     * @param {number} [countAddedWorkflows=0] - The count of workflows to be added.\n     * @throws {ValidationError} - If the total count of workflows exceeds the limit.\n     * @returns {Promise<void>} - A Promise that resolves when the validation is completed.\n     */\n    async validateWorkflowCount(countAddedWorkflows = 0) {\n      const workflowsService = getService('workflows', { strapi });\n      const countWorkflows = await workflowsService.count();\n      if (countWorkflows + countAddedWorkflows > this.limits.numberOfWorkflows) {\n        throw new ValidationError(ERRORS.WORKFLOWS_LIMIT);\n      }\n    },\n  };\n};\n","import '@strapi/types';\n\nexport const sendDidCreateStage = async () => {\n  strapi.telemetry.send('didCreateStage', {});\n};\n\nexport const sendDidEditStage = async () => {\n  strapi.telemetry.send('didEditStage', {});\n};\n\nexport const sendDidDeleteStage = async () => {\n  strapi.telemetry.send('didDeleteStage', {});\n};\n\nexport const sendDidChangeEntryStage = async () => {\n  strapi.telemetry.send('didChangeEntryStage', {});\n};\n\nexport const sendDidCreateWorkflow = async (\n  workflowId: string,\n  hasRequiredStageToPublish: boolean\n) => {\n  strapi.telemetry.send('didCreateWorkflow', { workflowId, hasRequiredStageToPublish });\n};\n\nexport const sendDidEditWorkflow = async (\n  workflowId: string,\n  hasRequiredStageToPublish: boolean\n) => {\n  strapi.telemetry.send('didEditWorkflow', { workflowId, hasRequiredStageToPublish });\n};\n\nexport const sendDidEditAssignee = async (fromId: any, toId: any) => {\n  strapi.telemetry.send('didEditAssignee', { from: fromId, to: toId });\n};\n\nexport const sendDidSendReviewWorkflowPropertiesOnceAWeek = async (\n  numberOfActiveWorkflows: number,\n  avgStagesCount: number,\n  maxStagesCount: number,\n  activatedContentTypes: number\n) => {\n  strapi.telemetry.send('didSendReviewWorkflowPropertiesOnceAWeek', {\n    groupProperties: {\n      numberOfActiveWorkflows,\n      avgStagesCount,\n      maxStagesCount,\n      activatedContentTypes,\n    },\n  });\n};\n\nexport default {\n  sendDidCreateStage,\n  sendDidEditStage,\n  sendDidDeleteStage,\n  sendDidChangeEntryStage,\n  sendDidCreateWorkflow,\n  sendDidEditWorkflow,\n  sendDidSendReviewWorkflowPropertiesOnceAWeek,\n  sendDidEditAssignee,\n};\n","import type { Core } from '@strapi/types';\nimport { flow, map, sum, size, mean, max, defaultTo } from 'lodash/fp';\nimport { add } from 'date-fns';\nimport { getService } from '../../utils';\n\nconst ONE_WEEK = 7 * 24 * 60 * 60 * 1000;\n\nconst getWeeklyCronScheduleAt = (date: Date) =>\n  `${date.getSeconds()} ${date.getMinutes()} ${date.getHours()} * * ${date.getDay()}`;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const metrics = getService('workflow-metrics', { strapi });\n  const workflowsService = getService('workflows', { strapi });\n\n  const getMetricsStoreValue = async () => {\n    const value = await strapi.store.get({ type: 'plugin', name: 'ee', key: 'metrics' });\n    return defaultTo({}, value);\n  };\n\n  const setMetricsStoreValue = (value: unknown) =>\n    strapi.store.set({ type: 'plugin', name: 'ee', key: 'metrics', value });\n\n  return {\n    async computeMetrics() {\n      // There will never be more than 200 workflow, so we can safely fetch them all\n      const workflows = await workflowsService.find({ populate: 'stages' });\n\n      const stagesCount = flow(\n        map('stages'), // Number of stages per workflow\n        map(size)\n      )(workflows);\n\n      const contentTypesCount = flow(\n        map('contentTypes'), // Number of content types per workflow\n        map(size)\n      )(workflows);\n\n      return {\n        numberOfActiveWorkflows: size(workflows),\n        avgStagesCount: mean(stagesCount),\n        maxStagesCount: max(stagesCount),\n        activatedContentTypes: sum(contentTypesCount),\n      };\n    },\n\n    async sendMetrics() {\n      const computedMetrics = await this.computeMetrics();\n      metrics.sendDidSendReviewWorkflowPropertiesOnceAWeek(computedMetrics);\n\n      const metricsInfoStored = await getMetricsStoreValue();\n      // @ts-expect-error metricsInfoStored can use spread\n      await setMetricsStoreValue({ ...metricsInfoStored, lastWeeklyUpdate: new Date().getTime() });\n    },\n\n    async ensureWeeklyStoredCronSchedule() {\n      const metricsInfoStored: any = await getMetricsStoreValue();\n      const { weeklySchedule: currentSchedule, lastWeeklyUpdate } = metricsInfoStored;\n\n      const now = new Date();\n      let weeklySchedule = currentSchedule;\n\n      if (!currentSchedule || !lastWeeklyUpdate || lastWeeklyUpdate + ONE_WEEK < now.getTime()) {\n        weeklySchedule = getWeeklyCronScheduleAt(add(now, { seconds: 10 }));\n        await setMetricsStoreValue({ ...metricsInfoStored, weeklySchedule });\n      }\n\n      return weeklySchedule;\n    },\n\n    async registerCron() {\n      const weeklySchedule = await this.ensureWeeklyStoredCronSchedule();\n\n      strapi.cron.add({\n        reviewWorkflowsWeekly: {\n          task: this.sendMetrics.bind(this),\n          options: weeklySchedule,\n        },\n      });\n    },\n  };\n};\n","import type { Modules } from '@strapi/types';\nimport { errors } from '@strapi/utils';\n\nimport { isNil } from 'lodash/fp';\nimport { ENTITY_STAGE_ATTRIBUTE } from '../constants/workflows';\nimport { WORKFLOW_UPDATE_STAGE } from '../constants/webhook-events';\nimport { getService } from '../utils';\n\ntype Middleware = Modules.Documents.Middleware.Middleware;\n\n/**\n * Get the stage information of an entity\n * @param {String} uid\n * @param {Number} id\n * @returns {Object}\n */\nconst getEntityStage = async (uid: any, id: any, params: any) => {\n  const entity = await strapi.documents(uid).findOne({\n    ...params,\n    documentId: id,\n    status: 'draft',\n    populate: {\n      [ENTITY_STAGE_ATTRIBUTE]: {\n        populate: {\n          workflow: true,\n        },\n      },\n    },\n  });\n\n  return entity?.[ENTITY_STAGE_ATTRIBUTE] ?? {};\n};\n\n/**\n * Ensures the entity is assigned to the default workflow stage\n */\nconst assignStageOnCreate: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'create' && ctx.action !== 'clone') {\n    return next();\n  }\n\n  /**\n   * Content types can have assigned workflows,\n   * if the CT has one, assign a default value to the stage attribute if it's not present\n   */\n  const workflow = await getService('workflows').getAssignedWorkflow(ctx.contentType.uid, {\n    populate: 'stages',\n  });\n\n  if (!workflow) {\n    return next();\n  }\n\n  const data = ctx.params.data as Record<string, any>;\n\n  // Assign the default stage if the entity doesn't have one\n  if (ctx.params?.data && isNil(data[ENTITY_STAGE_ATTRIBUTE])) {\n    data[ENTITY_STAGE_ATTRIBUTE] = { id: workflow.stages[0].id };\n  }\n\n  return next();\n};\n\nconst handleStageOnUpdate: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'update') {\n    return next();\n  }\n\n  const { documentId } = ctx.params;\n  const data = ctx.params.data as any;\n\n  if (isNil(data?.[ENTITY_STAGE_ATTRIBUTE])) {\n    delete data?.[ENTITY_STAGE_ATTRIBUTE];\n    return next();\n  }\n\n  /**\n   * Get last stage of the entity\n   */\n  const previousStage = await getEntityStage(ctx.contentType.uid, documentId, ctx.params);\n\n  const result = await next();\n\n  if (!result) {\n    return result;\n  }\n\n  // @ts-expect-error\n  const updatedStage = result?.[ENTITY_STAGE_ATTRIBUTE];\n\n  // Stage might be null if field is not populated\n  if (updatedStage && previousStage?.id && previousStage.id !== updatedStage.id) {\n    const model = strapi.getModel(ctx.contentType.uid);\n\n    strapi.eventHub.emit(WORKFLOW_UPDATE_STAGE, {\n      model: model.modelName,\n      uid: model.uid,\n      // TODO v6: Rename to \"entry\", which is what is used for regular CRUD updates\n      entity: {\n        // @ts-expect-error\n        id: result?.id,\n        documentId,\n        // @ts-expect-error\n        locale: result?.locale,\n        status: 'draft',\n      },\n      workflow: {\n        id: previousStage.workflow.id,\n        stages: {\n          from: {\n            id: previousStage.id,\n            name: previousStage.name,\n          },\n          to: {\n            id: updatedStage.id,\n            name: updatedStage.name,\n          },\n        },\n      },\n    });\n  }\n\n  return next();\n};\n\n/**\n * Check if the entity is at the required stage before publish\n */\nconst checkStageBeforePublish: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'publish') {\n    return next();\n  }\n\n  const workflow = await getService('workflows').getAssignedWorkflow(ctx.contentType.uid, {\n    populate: 'stageRequiredToPublish',\n  });\n\n  if (!workflow || !workflow.stageRequiredToPublish) {\n    return next();\n  }\n\n  const { documentId } = ctx.params;\n  const entryStage = await getEntityStage(ctx.contentType.uid, documentId, ctx.params);\n\n  if (entryStage.id !== workflow.stageRequiredToPublish.id) {\n    throw new errors.ValidationError('Entry is not at the required stage to publish');\n  }\n\n  return next();\n};\n\nexport default () => ({\n  assignStageOnCreate,\n  handleStageOnUpdate,\n  checkStageBeforePublish,\n});\n","import workflows from './workflows';\nimport stages from './stages';\nimport stagePermissions from './stage-permissions';\nimport assignees from './assignees';\nimport reviewWorkflowsValidation from './validation';\nimport reviewWorkflowsMetrics from './metrics';\nimport reviewWorkflowsWeeklyMetrics from './metrics/weekly-metrics';\nimport documentServiceMiddleware from './document-service-middleware';\n\nexport default {\n  workflows,\n  stages,\n  'stage-permissions': stagePermissions,\n  assignees,\n  validation: reviewWorkflowsValidation,\n  'document-service-middlewares': documentServiceMiddleware,\n  'workflow-metrics': reviewWorkflowsMetrics,\n  'workflow-weekly-metrics': reviewWorkflowsWeeklyMetrics,\n};\n","/* eslint-disable func-names */\nimport { yup, validateYupSchema } from '@strapi/utils';\nimport { hasStageAttribute } from '../utils/review-workflows';\nimport { STAGE_TRANSITION_UID } from '../constants/workflows';\n\nconst stageObject = yup.object().shape({\n  id: yup.number().integer().min(1),\n  name: yup.string().max(255).required(),\n  color: yup.string().matches(/^#(?:[0-9a-fA-F]{3}){1,2}$/i), // hex color\n  permissions: yup.array().of(\n    yup.object().shape({\n      role: yup.number().integer().min(1).required(),\n      action: yup.string().oneOf([STAGE_TRANSITION_UID]).required(),\n      actionParameters: yup.object().shape({\n        from: yup.number().integer().min(1).required(),\n        to: yup.number().integer().min(1),\n      }),\n    })\n  ),\n});\n\nconst validateUpdateStageOnEntitySchema = yup\n  .object()\n  .shape({\n    id: yup.number().integer().min(1).required(),\n  })\n  .required();\n\nconst validateContentTypes = yup.array().of(\n  yup\n    .string()\n    .test({\n      name: 'content-type-exists',\n      message: (value) => `Content type ${value.originalValue} does not exist`,\n      test(uid: any) {\n        // Warning; we use the strapi global - to avoid that, it would need to refactor how\n        // we generate validation function by using a factory with the strapi instance as parameter.\n        return !!strapi.getModel(uid);\n      },\n    })\n    .test({\n      name: 'content-type-review-workflow-enabled',\n      message: (value) =>\n        `Content type ${value.originalValue} does not have review workflow enabled`,\n      test(uid: any) {\n        const model = strapi.getModel(uid);\n\n        // It's not a valid content type if it doesn't have the stage attribute\n        return hasStageAttribute(model);\n      },\n    })\n);\n\nconst validateWorkflowCreateSchema = yup.object().shape({\n  name: yup.string().max(255).min(1, 'Workflow name can not be empty').required(),\n  stages: yup\n    .array()\n    .of(stageObject)\n    // @ts-expect-error - add unique property into the yup namespace typing\n    .uniqueProperty('name', 'Stage name must be unique')\n    .min(1, 'Can not create a workflow without stages')\n    .max(200, 'Can not have more than 200 stages')\n    .required('Can not create a workflow without stages'),\n  contentTypes: validateContentTypes,\n  stageRequiredToPublishName: yup.string().min(1).nullable(),\n});\n\nconst validateWorkflowUpdateSchema = yup.object().shape({\n  name: yup.string().max(255).min(1, 'Workflow name can not be empty'),\n  stages: yup\n    .array()\n    .of(stageObject)\n    // @ts-expect-error - add unique property into the yup namespace typing\n    .uniqueProperty('name', 'Stage name must be unique')\n    .min(1, 'Can not update a workflow without stages')\n    .max(200, 'Can not have more than 200 stages'),\n  contentTypes: validateContentTypes,\n  stageRequiredToPublishName: yup.string().min(1).nullable(),\n});\n\nconst validateUpdateAssigneeOnEntitySchema = yup\n  .object()\n  .shape({\n    id: yup.number().integer().min(1).nullable(),\n  })\n  .required();\n\nconst validateLocaleSchema = yup.string().nullable();\n\nexport const validateWorkflowCreate = validateYupSchema(validateWorkflowCreateSchema);\nexport const validateUpdateStageOnEntity = validateYupSchema(validateUpdateStageOnEntitySchema);\nexport const validateUpdateAssigneeOnEntity = validateYupSchema(\n  validateUpdateAssigneeOnEntitySchema\n);\nexport const validateWorkflowUpdate = validateYupSchema(validateWorkflowUpdateSchema);\nexport const validateLocale = validateYupSchema(validateLocaleSchema);\n\nexport default {\n  validateWorkflowCreate,\n  validateUpdateStageOnEntity,\n  validateUpdateAssigneeOnEntity,\n  validateWorkflowUpdate,\n  validateLocale,\n};\n","import type { Context } from 'koa';\nimport { update, map, property } from 'lodash/fp';\n\nimport type { Core } from '@strapi/types';\nimport { async } from '@strapi/utils';\n\nimport { getService } from '../utils';\nimport { validateWorkflowCreate, validateWorkflowUpdate } from '../validation/review-workflows';\nimport { WORKFLOW_MODEL_UID, WORKFLOW_POPULATE } from '../constants/workflows';\n\n/**\n *\n * @param { Core.Strapi } strapi - Strapi instance\n * @param userAbility\n * @return { PermissionChecker }\n */\nfunction getWorkflowsPermissionChecker({ strapi }: { strapi: Core.Strapi }, userAbility: unknown) {\n  return strapi\n    .plugin('content-manager')\n    .service('permission-checker')\n    .create({ userAbility, model: WORKFLOW_MODEL_UID });\n}\n\n/**\n * Transforms workflow to an admin UI format.\n * Some attributes (like permissions) are presented in a different format in the admin UI.\n * @param {Workflow} workflow\n */\nfunction formatWorkflowToAdmin(workflow: any) {\n  if (!workflow) return;\n  if (!workflow.stages) return workflow;\n\n  // Transform permissions roles to be the id string instead of an object\n  const transformPermissions = map(update('role', property('id')));\n  const transformStages = map(update('permissions', transformPermissions));\n  return update('stages', transformStages, workflow);\n}\n\nexport default {\n  /**\n   * Create a new workflow\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async create(ctx: Context) {\n    const { body, query } = ctx.request;\n    const { sanitizeCreateInput, sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate } = await sanitizedQuery.create(query);\n\n    const workflowBody = await validateWorkflowCreate(body.data);\n\n    const workflowService = getService('workflows');\n    const createdWorkflow = await workflowService\n      .create({\n        data: await sanitizeCreateInput(workflowBody),\n        populate,\n      })\n      .then(formatWorkflowToAdmin);\n\n    ctx.created({\n      data: await sanitizeOutput(createdWorkflow),\n    });\n  },\n\n  /**\n   * Update a workflow\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async update(ctx: Context) {\n    const { id } = ctx.params;\n    const { body, query } = ctx.request;\n    const workflowService = getService('workflows');\n    const { sanitizeUpdateInput, sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate } = await sanitizedQuery.update(query);\n    const workflowBody = await validateWorkflowUpdate(body.data);\n\n    // Find if workflow exists\n    const workflow = await workflowService.findById(id, { populate: WORKFLOW_POPULATE });\n    if (!workflow) {\n      return ctx.notFound();\n    }\n\n    // Sanitize input data\n    const getPermittedFieldToUpdate = sanitizeUpdateInput(workflow);\n    const dataToUpdate = await getPermittedFieldToUpdate(workflowBody);\n\n    // Update workflow\n    const updatedWorkflow = await workflowService\n      .update(workflow, {\n        data: dataToUpdate,\n        populate,\n      })\n      .then(formatWorkflowToAdmin);\n\n    // Send sanitized response\n    ctx.body = {\n      data: await sanitizeOutput(updatedWorkflow),\n    };\n  },\n\n  /**\n   * Delete a workflow\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async delete(ctx: Context) {\n    const { id } = ctx.params;\n    const { query } = ctx.request;\n    const workflowService = getService('workflows');\n    const { sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate } = await sanitizedQuery.delete(query);\n\n    const workflow = await workflowService.findById(id, { populate: WORKFLOW_POPULATE });\n    if (!workflow) {\n      return ctx.notFound(\"Workflow doesn't exist\");\n    }\n\n    const deletedWorkflow = await workflowService\n      .delete(workflow, { populate })\n      .then(formatWorkflowToAdmin);\n\n    ctx.body = {\n      data: await sanitizeOutput(deletedWorkflow),\n    };\n  },\n\n  /**\n   * List all workflows\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async find(ctx: Context) {\n    const { query } = ctx.request;\n    const workflowService = getService('workflows');\n    const { sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate, filters, sort } = await sanitizedQuery.read(query);\n\n    const [workflows, workflowCount] = await Promise.all([\n      workflowService.find({ populate, filters, sort }).then(map(formatWorkflowToAdmin)),\n      workflowService.count(),\n    ]);\n\n    ctx.body = {\n      data: await async.map(workflows, sanitizeOutput),\n      meta: {\n        workflowCount,\n      },\n    };\n  },\n};\n","import type { Context } from 'koa';\nimport type { Core } from '@strapi/types';\n\nimport { async, validate } from '@strapi/utils';\nimport { getService } from '../utils';\nimport { validateUpdateStageOnEntity, validateLocale } from '../validation/review-workflows';\nimport {\n  STAGE_MODEL_UID,\n  ENTITY_STAGE_ATTRIBUTE,\n  STAGE_TRANSITION_UID,\n} from '../constants/workflows';\n\n/**\n *\n * @param { Core.Strapi } strapi - Strapi instance\n * @param userAbility\n * @return { (Stage) => SanitizedStage }\n */\nfunction sanitizeStage({ strapi }: { strapi: Core.Strapi }, userAbility: unknown) {\n  const permissionChecker = strapi\n    .plugin('content-manager')\n    .service('permission-checker')\n    .create({ userAbility, model: STAGE_MODEL_UID });\n\n  return (entity: unknown) => permissionChecker.sanitizeOutput(entity);\n}\n\nexport default {\n  /**\n   * List all stages\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async find(ctx: Context) {\n    const { workflow_id: workflowId } = ctx.params;\n    const { populate } = ctx.query;\n    const stagesService = getService('stages');\n    const sanitizer = sanitizeStage({ strapi }, ctx.state.userAbility);\n\n    const stages = await stagesService.find({\n      workflowId,\n      populate,\n    });\n\n    ctx.body = {\n      data: await async.map(stages, sanitizer),\n    };\n  },\n  /**\n   * Get one stage\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async findById(ctx: Context) {\n    const { id, workflow_id: workflowId } = ctx.params;\n    const { populate } = ctx.query;\n    const stagesService = getService('stages');\n    const sanitizer = sanitizeStage({ strapi }, ctx.state.userAbility);\n\n    const stage = await stagesService.findById(id, {\n      workflowId,\n      populate,\n    });\n\n    ctx.body = {\n      data: await sanitizer(stage),\n    };\n  },\n\n  /**\n   * Updates an entity's stage.\n   * @async\n   * @param {Object} ctx - The Koa context object.\n   * @param {Object} ctx.params - An object containing the parameters from the request URL.\n   * @param {string} ctx.params.model_uid - The model UID of the entity.\n   * @param {string} ctx.params.id - The ID of the entity to update.\n   * @param {Object} ctx.request.body.data - Optional data object containing the new stage ID for the entity.\n   * @param {string} ctx.request.body.data.id - The ID of the new stage for the entity.\n   * @throws {ApplicationError} If review workflows is not activated on the specified model UID.\n   * @throws {ValidationError} If the `data` object in the request body fails to pass validation.\n   * @returns {Promise<void>} A promise that resolves when the entity's stage has been updated.\n   */\n  async updateEntity(ctx: Context) {\n    const stagesService = getService('stages');\n    const stagePermissions = getService('stage-permissions');\n    const workflowService = getService('workflows');\n\n    const { model_uid: modelUID, id: documentId } = ctx.params;\n    const { body, query = {} } = ctx.request;\n\n    const { sanitizeOutput } = strapi\n      .plugin('content-manager')\n      .service('permission-checker')\n      .create({ userAbility: ctx.state.userAbility, model: modelUID });\n\n    // Load entity\n    const locale = await validateLocale(query?.locale);\n    const entity = await strapi.documents(modelUID).findOne({\n      documentId,\n      // @ts-expect-error - locale should be also null in the doc service types\n      locale,\n      populate: [ENTITY_STAGE_ATTRIBUTE],\n    });\n\n    if (!entity) {\n      ctx.throw(404, 'Entity not found');\n    }\n\n    // Validate if entity stage can be updated\n    const canTransition = stagePermissions.can(\n      STAGE_TRANSITION_UID,\n      entity[ENTITY_STAGE_ATTRIBUTE]?.id\n    );\n\n    if (!canTransition) {\n      ctx.throw(403, 'Forbidden stage transition');\n    }\n\n    const { id: stageId } = await validateUpdateStageOnEntity(\n      { id: Number(body?.data?.id) },\n      'You should pass an id to the body of the put request.'\n    );\n\n    const workflow = await workflowService.assertContentTypeBelongsToWorkflow(modelUID);\n    workflowService.assertStageBelongsToWorkflow(stageId, workflow);\n\n    const updatedEntity = await stagesService.updateEntity(entity, modelUID, stageId);\n\n    ctx.body = { data: await sanitizeOutput(updatedEntity) };\n  },\n\n  /**\n   * List all the stages that are available for a user to transition an entity to.\n   * If the user has permission to change the current stage of the entity every other stage in the workflow is returned\n   * @async\n   * @param {*} ctx\n   * @param {string} ctx.params.model_uid - The model UID of the entity.\n   * @param {string} ctx.params.id - The ID of the entity.\n   * @throws {ApplicationError} If review workflows is not activated on the specified model UID.\n   */\n  async listAvailableStages(ctx: Context) {\n    const stagePermissions = getService('stage-permissions');\n    const workflowService = getService('workflows');\n\n    const { model_uid: modelUID, id: documentId } = ctx.params;\n    const { query = {} } = ctx.request;\n\n    if (\n      strapi\n        .plugin('content-manager')\n        .service('permission-checker')\n        .create({ userAbility: ctx.state.userAbility, model: modelUID })\n        .cannot.read()\n    ) {\n      return ctx.forbidden();\n    }\n\n    // Load entity\n    const locale = (await validateLocale(query?.locale)) ?? undefined;\n    const entity = await strapi.documents(modelUID).findOne({\n      documentId,\n      locale,\n      populate: [ENTITY_STAGE_ATTRIBUTE],\n    });\n\n    if (!entity) {\n      ctx.throw(404, 'Entity not found');\n    }\n\n    const entityStageId = entity[ENTITY_STAGE_ATTRIBUTE]?.id;\n    const canTransition = stagePermissions.can(STAGE_TRANSITION_UID, entityStageId);\n\n    const [workflowCount, workflowResult] = await Promise.all([\n      workflowService.count(),\n      workflowService.getAssignedWorkflow(modelUID, {\n        populate: 'stages',\n      }),\n    ]);\n\n    const workflowStages = workflowResult ? workflowResult.stages : [];\n\n    const meta = {\n      stageCount: workflowStages.length,\n      workflowCount,\n    };\n\n    if (!canTransition) {\n      ctx.body = {\n        data: [],\n        meta,\n      };\n\n      return;\n    }\n\n    const data = workflowStages.filter((stage: any) => stage.id !== entityStageId);\n    ctx.body = {\n      data,\n      meta,\n    };\n  },\n};\n","import type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { validateUpdateAssigneeOnEntity, validateLocale } from '../validation/review-workflows';\nimport { ENTITY_STAGE_ATTRIBUTE, STAGE_TRANSITION_UID } from '../constants/workflows';\n\nexport default {\n  /**\n   * Updates an entity's assignee.\n   * @async\n   * @param {Object} ctx - The Koa context object.\n   * @param {Object} ctx.params - An object containing the parameters from the request URL.\n   * @param {string} ctx.params.model_uid - The model UID of the entity.\n   * @param {string} ctx.params.id - The ID of the entity to update.\n   * @param {Object} ctx.request.body.data - Optional data object containing the new assignee ID for the entity.\n   * @param {string} ctx.request.body.data.id - The ID of the new assignee for the entity.\n   * @throws {ApplicationError} If review workflows is not activated on the specified model UID.\n   * @throws {ValidationError} If the `data` object in the request body fails to pass validation.\n   * @returns {Promise<void>} A promise that resolves when the entity's assignee has been updated.\n   */\n  async updateEntity(ctx: Context) {\n    const assigneeService = getService('assignees');\n    const workflowService = getService('workflows');\n    const stagePermissions = getService('stage-permissions');\n\n    const { model_uid: model, id: documentId } = ctx.params;\n    const locale = (await validateLocale(ctx.request.query?.locale)) ?? undefined;\n\n    const { sanitizeOutput } = strapi\n      .plugin('content-manager')\n      .service('permission-checker')\n      .create({ userAbility: ctx.state.userAbility, model });\n\n    // Retrieve the entity so we can get its current stage\n    const entity = await strapi.documents(model).findOne({\n      documentId,\n      locale,\n      populate: [ENTITY_STAGE_ATTRIBUTE],\n    });\n\n    if (!entity) {\n      ctx.throw(404, 'Entity not found');\n    }\n\n    // Only allow users who can update the current stage to change the assignee\n    const canTransitionStage = stagePermissions.can(\n      STAGE_TRANSITION_UID,\n      entity[ENTITY_STAGE_ATTRIBUTE]?.id\n    );\n\n    if (!canTransitionStage) {\n      ctx.throw(403, 'Stage transition permission is required');\n    }\n\n    // TODO: check if user has update permission on the entity\n    const { id: assigneeId } = await validateUpdateAssigneeOnEntity(\n      ctx.request?.body?.data,\n      'You should pass a valid id to the body of the put request.'\n    );\n\n    await workflowService.assertContentTypeBelongsToWorkflow(model);\n\n    const updatedEntity = await assigneeService.updateEntityAssignee(entity, model, assigneeId);\n\n    ctx.body = { data: await sanitizeOutput(updatedEntity) };\n  },\n};\n","import type {} from 'koa-body';\n\nimport workflows from './workflows';\nimport stages from './stages';\nimport assignees from './assignees';\n\nexport default {\n  workflows,\n  stages,\n  assignees,\n};\n","import register from './register';\nimport contentTypes from './content-types';\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport routes from './routes';\nimport services from './services';\nimport controllers from './controllers';\n\nconst getPlugin = () => {\n  if (strapi.ee.features.isEnabled('review-workflows')) {\n    return {\n      register,\n      bootstrap,\n      destroy,\n      contentTypes,\n      services,\n      controllers,\n      routes,\n    };\n  }\n\n  return {\n    // Always return contentTypes to avoid losing data when the feature is disabled\n    // or downgrading the license\n    contentTypes,\n  };\n};\n\nexport default getPlugin();\n"],"names":["getAdminService","name","strapi","global","service","getService","plugin","WORKFLOW_MODEL_UID","STAGE_MODEL_UID","STAGE_TRANSITION_UID","STAGE_DEFAULT_COLOR","ENTITY_STAGE_ATTRIBUTE","ENTITY_ASSIGNEE_ATTRIBUTE","MAX_WORKFLOWS","MAX_STAGES_PER_WORKFLOW","ERRORS","WORKFLOW_WITHOUT_STAGES","WORKFLOWS_LIMIT","STAGES_LIMIT","DUPLICATED_STAGE_NAME","WORKFLOW_POPULATE","stages","populate","permissions","fields","role","stageRequiredToPublish","checkVersionThreshold","startVersion","currentVersion","thresholdVersion","semver","gte","lt","migrateStageAttribute","oldContentTypes","contentTypes","getRWVersion","getOr","oldRWVersion","currentRWVersion","migrateReviewWorkflowStagesColor","hadColor","attributes","color","hasColor","db","query","updateMany","data","migrateReviewWorkflowStagesRoles","hadRolePermissions","hasRolePermissions","roleUID","log","info","stagePermissionsService","findMany","roles","groupedPermissions","map","id","forEach","roleId","stage","stageId","push","fromStage","action","Object","entries","numericalStageId","Number","isNaN","warn","stagePermissions","registerMany","update","where","flat","permission","migrateReviewWorkflowName","hadName","hasName","$null","defaultWorkflow","migrateWorkflowsContentTypes","hadContentTypes","hasContentTypes","pipe","pickBy","get","keys","length","$notNull","getVisibleContentTypesUID","value","hasStageAttribute","has","getWorkflowContentTypeFilter","contentType","dialect","supportsOperator","$jsonSupersetOf","JSON","stringify","$contains","clampMaxWorkflows","clamp","clampMaxStagesPerWorkflow","migrateDeletedCTInWorkflows","deletedContentTypes","difference","async","deletedContentTypeUID","workflow","findOne","select","filter","contentTypeUID","contentTypeMiddleware","moveReviewWorkflowOption","ctx","reviewWorkflows","request","body","set","server","router","use","next","method","setRelation","attributeName","target","assign","writable","private","configurable","visible","useJoinTable","type","relation","extendReviewWorkflowContentTypes","contentTypeToExtend","extend","persistRWOnDowngrade","removePersistedTablesWithSuffix","persistTables","getStageTableToPersist","tableName","metadata","joinTableName","joinTable","dependsOn","getAssigneeTableToPersist","enabledRWContentTypes","uid","stageJoinTablesToPersist","assigneeJoinTablesToPersist","hook","register","reviewWorkflowsMiddlewares","reviewWorkflowsOptions","defaultsDeep","numberOfWorkflows","stagesPerWorkflow","ee","features","workflowsValidationService","schema","collectionName","description","singularName","pluralName","displayName","options","pluginOptions","required","unique","mappedBy","default","version","inversedBy","workflowStage","pluginName","section","category","subCategory","WORKFLOW_UPDATE_STAGE","initDefaultWorkflow","workflowsService","stagesService","wfCount","count","stagesCount","defaultStages","create","registerWebhookEvents","webhookEvents","eventKey","event","addAllowedEvent","args","actionProvider","actions","registerCron","docsMiddlewares","documents","assignStageOnCreate","handleStageOnUpdate","checkStageBeforePublish","enableFeatureMiddleware","featureName","isEnabled","status","routes","path","handler","config","middlewares","policies","contentManagerContentTypeService","updateContentTypeConfig","reviewWorkflowOption","modelConfig","findConfiguration","updateConfiguration","merge","migrate","srcContentTypes","destContentTypes","created","deleted","diffContentTypes","srcWorkflows","_getAssignedWorkflows","updateEntitiesStage","toStageId","srcWorkflow","transferContentTypes","fromStageId","concurrency","deleteAllEntitiesStage","processFilters","filters","processedFilters","isString","processPopulate","workflowsContentTypes","workflowsContentTypesFactory","workflowValidator","metrics","find","opts","transform","findById","createOpts","validateWorkflowStages","validateWorkflowCount","transaction","createMany","mapIds","stageRequiredToPublishName","errors","ApplicationError","createdWorkflow","sendDidCreateWorkflow","validateActionsByContentTypes","stageService","updateOpts","updatedStages","updatedStageIds","assertStageBelongsToWorkflow","replaceStages","undefined","sendDidEditWorkflow","updatedWorkflow","delete","workflowCount","deleteMany","deletedWorkflow","getAssignedWorkflow","workflows","assertContentTypeBelongsToWorkflow","belongs","some","ValidationError","sanitizedStageFields","sanitizeStageFields","pick","workflowId","stagesList","params","Promise","all","reduce","_","idx","p","sendDidCreateStage","srcStage","destStage","deleteStagePermissions","sendDidEditStage","deletedStage","sendDidDeleteStage","$in","s","unregister","srcStages","destStages","contentTypesToMigrate","updated","getDiffBetweenStages","assertAtLeastOneStageRemain","trx","createdStages","createdStagesIds","nearestStage","findNearestMatchingStage","findIndex","targetStage","shift","updateEntity","entityToUpdate","model","documentId","locale","entity","connection","updated_at","Date","updatedAt","sendDidChangeEntryStage","joinColumn","invJoinColumn","inverseJoinColumn","getConnection","from","transacting","selectStatement","leftJoin","toSQL","insert","raw","sql","bindings","sourceStages","comparisonStages","result","acc","stageToCompare","isEqual","cmpStage","workflowStages","diffStages","remainingStagesCount","startIndex","condition","i","remainingArray","slice","nearestObject","validActions","roleService","permissionService","includes","addPermissions","actionParameters","permissionIds","prop","deleteByIds","can","requestState","requestContext","state","userRoles","user","code","userAbility","findEntityAssigneeId","updateEntityAssignee","assigneeId","isNil","userExists","exists","oldAssigneeId","sendDidEditAssignee","limits","isFrozen","freeze","stageNames","uniq","validateWorkflowCountStages","countAddedStages","countWorkflowStages","countAddedWorkflows","countWorkflows","telemetry","send","hasRequiredStageToPublish","fromId","toId","to","sendDidSendReviewWorkflowPropertiesOnceAWeek","numberOfActiveWorkflows","avgStagesCount","maxStagesCount","activatedContentTypes","groupProperties","ONE_WEEK","getWeeklyCronScheduleAt","date","getSeconds","getMinutes","getHours","getDay","getMetricsStoreValue","store","key","defaultTo","setMetricsStoreValue","computeMetrics","flow","size","contentTypesCount","mean","max","sum","sendMetrics","computedMetrics","metricsInfoStored","lastWeeklyUpdate","getTime","ensureWeeklyStoredCronSchedule","weeklySchedule","currentSchedule","now","add","seconds","cron","reviewWorkflowsWeekly","task","bind","getEntityStage","previousStage","updatedStage","getModel","eventHub","emit","modelName","entryStage","assignees","validation","reviewWorkflowsValidation","documentServiceMiddleware","reviewWorkflowsMetrics","reviewWorkflowsWeeklyMetrics","stageObject","yup","object","shape","number","integer","min","string","matches","array","of","oneOf","validateUpdateStageOnEntitySchema","validateContentTypes","test","message","originalValue","validateWorkflowCreateSchema","uniqueProperty","nullable","validateWorkflowUpdateSchema","validateUpdateAssigneeOnEntitySchema","validateLocaleSchema","validateWorkflowCreate","validateYupSchema","validateUpdateStageOnEntity","validateUpdateAssigneeOnEntity","validateWorkflowUpdate","validateLocale","getWorkflowsPermissionChecker","formatWorkflowToAdmin","transformPermissions","property","transformStages","sanitizeCreateInput","sanitizeOutput","sanitizedQuery","workflowBody","workflowService","then","sanitizeUpdateInput","notFound","getPermittedFieldToUpdate","dataToUpdate","sort","read","meta","sanitizeStage","permissionChecker","workflow_id","sanitizer","model_uid","modelUID","throw","canTransition","updatedEntity","listAvailableStages","cannot","forbidden","entityStageId","workflowResult","stageCount","assigneeService","canTransitionStage","getPlugin","bootstrap","destroy","services","controllers"],"mappings":"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"}