'use strict';

var webpack = require('webpack');
var config = require('./config-DqHEn7T0.js');
var cli = require('./index-BISxmyok.js');
require('@pmmmwh/react-refresh-webpack-plugin');
require('browserslist-to-esbuild');
require('esbuild-loader');
require('fork-ts-checker-webpack-plugin');
require('html-webpack-plugin');
require('mini-css-extract-plugin');
require('node:crypto');
require('node:path');
require('read-pkg-up');
require('webpack-bundle-analyzer');
require('./aliases-CShKl5-s.js');
require('path');
require('commander');
require('@strapi/cloud-cli');
require('@strapi/utils');
require('lodash');
require('inquirer');
require('@strapi/core');
require('chalk');
require('lodash/fp');
require('boxen');
require('cli-table3');
require('fs');
require('fs-extra');
require('crypto');
require('@strapi/typescript-utils');
require('node:os');
require('node:fs/promises');
require('semver');
require('resolve-from');
require('execa');
require('perf_hooks');
require('browserslist');
require('dotenv');
require('esbuild-register/dist/node');
require('node:fs');
require('lodash/camelCase');
require('outdent');
require('react');
require('react-dom/server');
require('@strapi/admin/_internal');
require('repl');
require('node:cluster');
require('chokidar');
require('os');
require('@strapi/logger');
require('ora');
require('@strapi/data-transfer');
require('cli-progress');
require('typescript');

const build = async (ctx)=>{
    const config$1 = await config.resolveProductionConfig(ctx);
    const finalConfig = await config.mergeConfigWithUserConfig(config$1, ctx);
    ctx.logger.debug('Webpack config', finalConfig);
    return new Promise((resolve, reject)=>{
        webpack(finalConfig, (err, stats)=>{
            if (stats) {
                if (stats.hasErrors()) {
                    ctx.logger.error(stats.toString({
                        chunks: false,
                        colors: true
                    }));
                    reject();
                } else if (ctx.options.stats) {
                    ctx.logger.info(stats.toString({
                        chunks: false,
                        colors: true
                    }));
                }
                resolve(true);
            }
            if (err && cli.isError(err)) {
                ctx.logger.error(err.message);
                reject();
            }
        });
    });
};

exports.build = build;
//# sourceMappingURL=build-DFPOG3E7.js.map
