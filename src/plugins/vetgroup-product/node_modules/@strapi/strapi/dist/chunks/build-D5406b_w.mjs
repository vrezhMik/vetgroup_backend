import webpack from 'webpack';
import { r as resolveProductionConfig, m as mergeConfigWithUserConfig } from './config-BoKYA5TU.mjs';
import { i as isError } from './index-D-Uxo0aY.mjs';
import '@pmmmwh/react-refresh-webpack-plugin';
import 'browserslist-to-esbuild';
import 'esbuild-loader';
import 'fork-ts-checker-webpack-plugin';
import 'html-webpack-plugin';
import 'mini-css-extract-plugin';
import 'node:crypto';
import 'node:path';
import 'read-pkg-up';
import 'webpack-bundle-analyzer';
import './aliases-CL7EXieF.mjs';
import 'path';
import 'commander';
import '@strapi/cloud-cli';
import '@strapi/utils';
import 'lodash';
import 'inquirer';
import '@strapi/core';
import 'chalk';
import 'lodash/fp';
import 'boxen';
import 'cli-table3';
import 'fs';
import 'fs-extra';
import 'crypto';
import '@strapi/typescript-utils';
import 'node:os';
import 'node:fs/promises';
import 'semver';
import 'resolve-from';
import 'execa';
import 'perf_hooks';
import 'browserslist';
import 'dotenv';
import 'esbuild-register/dist/node';
import 'node:fs';
import 'lodash/camelCase';
import 'outdent';
import 'react';
import 'react-dom/server';
import '@strapi/admin/_internal';
import 'repl';
import 'node:cluster';
import 'chokidar';
import 'os';
import '@strapi/logger';
import 'ora';
import '@strapi/data-transfer';
import 'cli-progress';
import 'typescript';

const build = async (ctx)=>{
    const config = await resolveProductionConfig(ctx);
    const finalConfig = await mergeConfigWithUserConfig(config, ctx);
    ctx.logger.debug('Webpack config', finalConfig);
    return new Promise((resolve, reject)=>{
        webpack(finalConfig, (err, stats)=>{
            if (stats) {
                if (stats.hasErrors()) {
                    ctx.logger.error(stats.toString({
                        chunks: false,
                        colors: true
                    }));
                    reject();
                } else if (ctx.options.stats) {
                    ctx.logger.info(stats.toString({
                        chunks: false,
                        colors: true
                    }));
                }
                resolve(true);
            }
            if (err && isError(err)) {
                ctx.logger.error(err.message);
                reject();
            }
        });
    });
};

export { build };
//# sourceMappingURL=build-D5406b_w.mjs.map
