{"version":3,"file":"index-CUWnF77x.js","sources":["../../src/config/api.ts","../../src/utils/compress-files.ts","../../src/config/local.ts","../../src/services/cli-api.ts","../../src/services/strapi-info-save.ts","../../src/services/token.ts","../../src/services/logger.ts","../../src/utils/pkg.ts","../../src/create-project/utils/get-project-name-from-pkg.ts","../../src/utils/analytics.ts","../../src/login/action.ts","../../src/create-project/utils/project-questions.utils.ts","../../src/create-project/action.ts","../../src/services/notification.ts","../../src/services/build-logs.ts","../../src/deploy-project/action.ts","../../src/utils/helpers.ts","../../src/deploy-project/command.ts","../../src/deploy-project/index.ts","../../src/utils/get-local-config.ts","../../src/link/action.ts","../../src/link/command.ts","../../src/link/index.ts","../../src/login/command.ts","../../src/login/index.ts","../../src/logout/action.ts","../../src/logout/command.ts","../../src/logout/index.ts","../../src/create-project/command.ts","../../src/create-project/index.ts","../../src/list-projects/action.ts","../../src/list-projects/command.ts","../../src/list-projects/index.ts","../../src/environment/list/action.ts","../../src/cloud/command.ts","../../src/environment/command.ts","../../src/environment/list/command.ts","../../src/environment/list/index.ts","../../src/environment/link/action.ts","../../src/environment/link/command.ts","../../src/environment/link/index.ts","../../src/index.ts"],"sourcesContent":["import { env } from '@strapi/utils';\n\nexport const apiConfig = {\n  apiBaseUrl: env('STRAPI_CLI_CLOUD_API', 'https://cloud-cli-api.strapi.io'),\n  dashboardBaseUrl: env('STRAPI_CLI_CLOUD_DASHBOARD', 'https://cloud.strapi.io'),\n};\n","import * as fse from 'fs-extra';\nimport * as tar from 'tar';\nimport * as path from 'path';\nimport { minimatch } from 'minimatch';\n\nconst IGNORED_PATTERNS = [\n  '**/.git/**',\n  '**/node_modules/**',\n  '**/build/**',\n  '**/dist/**',\n  '**/.cache/**',\n  '**/.circleci/**',\n  '**/.github/**',\n  '**/.gitignore',\n  '**/.gitkeep',\n  '**/.gitlab-ci.yml',\n  '**/.idea/**',\n  '**/.vscode/**',\n];\n\nconst isIgnoredFile = (folderPath: string, file: string, ignorePatterns: string[]): boolean => {\n  ignorePatterns.push(...IGNORED_PATTERNS);\n  const relativeFilePath = path.join(folderPath, file);\n  let isIgnored = false;\n  for (const pattern of ignorePatterns) {\n    if (pattern.startsWith('!')) {\n      if (minimatch(relativeFilePath, pattern.slice(1), { matchBase: true, dot: true })) {\n        return false;\n      }\n    } else if (minimatch(relativeFilePath, pattern, { matchBase: true, dot: true })) {\n      if (path.basename(file) !== '.gitkeep') {\n        isIgnored = true;\n      }\n    }\n  }\n  return isIgnored;\n};\n\nconst getFiles = async (\n  dirPath: string,\n  ignorePatterns: string[] = [],\n  subfolder: string = ''\n): Promise<string[]> => {\n  const arrayOfFiles: string[] = [];\n  const entries = await fse.readdir(path.join(dirPath, subfolder));\n\n  for (const entry of entries) {\n    const entryPathFromRoot = path.join(subfolder, entry);\n    const entryPath = path.relative(dirPath, entryPathFromRoot);\n    const isIgnored = isIgnoredFile(dirPath, entryPathFromRoot, ignorePatterns);\n\n    if (!isIgnored) {\n      if (fse.statSync(entryPath).isDirectory()) {\n        const subFiles = await getFiles(dirPath, ignorePatterns, entryPathFromRoot);\n        arrayOfFiles.push(...subFiles);\n      } else {\n        arrayOfFiles.push(entryPath);\n      }\n    }\n  }\n  return arrayOfFiles;\n};\n\nconst readGitignore = async (folderPath: string): Promise<string[]> => {\n  const gitignorePath = path.resolve(folderPath, '.gitignore');\n  const pathExist = await fse.pathExists(gitignorePath);\n\n  if (!pathExist) return [];\n\n  const gitignoreContent = await fse.readFile(gitignorePath, 'utf8');\n\n  return gitignoreContent\n    .split(/\\r?\\n/)\n    .filter((line) => Boolean(line.trim()) && !line.startsWith('#'));\n};\n\nconst compressFilesToTar = async (\n  storagePath: string,\n  folderToCompress: string,\n  filename: string\n): Promise<void> => {\n  const ignorePatterns = await readGitignore(folderToCompress);\n  const filesToCompress = await getFiles(folderToCompress, ignorePatterns);\n\n  return tar.c(\n    {\n      gzip: true,\n      file: path.resolve(storagePath, filename),\n    },\n    filesToCompress\n  );\n};\n\nexport { compressFilesToTar, isIgnoredFile };\n","import path from 'path';\nimport os from 'os';\nimport fse from 'fs-extra';\nimport XDGAppPaths from 'xdg-app-paths';\n\nconst APP_FOLDER_NAME = 'com.strapi.cli';\n\nexport const CONFIG_FILENAME = 'config.json';\n\nexport type LocalConfig = {\n  token?: string;\n  deviceId?: string;\n};\n\nasync function checkDirectoryExists(directoryPath: string) {\n  try {\n    const fsStat = await fse.lstat(directoryPath);\n    return fsStat.isDirectory();\n  } catch (e) {\n    return false;\n  }\n}\n\n// Determine storage path based on the operating system\nexport async function getTmpStoragePath() {\n  const storagePath = path.join(os.tmpdir(), APP_FOLDER_NAME);\n  await fse.ensureDir(storagePath);\n  return storagePath;\n}\n\nasync function getConfigPath() {\n  const configDirs = XDGAppPaths(APP_FOLDER_NAME).configDirs();\n  const configPath = configDirs.find(checkDirectoryExists);\n\n  if (!configPath) {\n    await fse.ensureDir(configDirs[0]);\n    return configDirs[0];\n  }\n  return configPath;\n}\n\nexport async function getLocalConfig(): Promise<LocalConfig> {\n  const configPath = await getConfigPath();\n  const configFilePath = path.join(configPath, CONFIG_FILENAME);\n  await fse.ensureFile(configFilePath);\n  try {\n    return await fse.readJSON(configFilePath, { encoding: 'utf8', throws: true });\n  } catch (e) {\n    return {};\n  }\n}\n\nexport async function saveLocalConfig(data: LocalConfig) {\n  const configPath = await getConfigPath();\n  const configFilePath = path.join(configPath, CONFIG_FILENAME);\n  await fse.writeJson(configFilePath, data, { encoding: 'utf8', spaces: 2, mode: 0o600 });\n}\n","import axios, { type AxiosResponse } from 'axios';\nimport fse from 'fs-extra';\nimport os from 'os';\nimport { apiConfig } from '../config/api';\nimport type { CLIContext, CloudCliConfig, TrackPayload } from '../types';\nimport { getLocalConfig } from '../config/local';\n\nimport packageJson from '../../package.json';\n\nexport const VERSION = 'v1';\n\nexport type ProjectInfo = {\n  id: string;\n  name: string;\n  targetEnvironment?: string;\n  displayName?: string;\n  nodeVersion?: string;\n  region?: string;\n  plan?: string;\n  url?: string;\n};\n\nexport type EnvironmentInfo = Record<string, unknown>;\n\nexport type EnvironmentDetails = {\n  name: string;\n  hasLiveDeployment: boolean;\n  hasPendingDeployment: boolean;\n};\n\nexport type ProjectInput = Omit<ProjectInfo, 'id'>;\n\nexport type DeployResponse = {\n  build_id: string;\n  image: string;\n};\n\nexport type ListProjectsResponse = {\n  data: {\n    data: string;\n  };\n};\n\nexport type ListEnvironmentsResponse = {\n  data: {\n    data: EnvironmentInfo[] | Record<string, never>;\n  };\n};\n\nexport type ListLinkProjectsResponse = {\n  data: {\n    data: ProjectInfo[] | Record<string, never>;\n  };\n};\n\nexport type ListLinkEnvironmentsResponse = {\n  data: {\n    data: EnvironmentDetails[] | Record<string, never>;\n  };\n};\n\nexport type GetProjectResponse = {\n  data: {\n    displayName: string;\n    updatedAt: string;\n    suspendedAt?: string;\n    isTrial: boolean;\n    environments: string[];\n    environmentsDetails: EnvironmentDetails[];\n  };\n  metadata: {\n    dashboardUrls: {\n      project: string;\n      deployments: string;\n    };\n  };\n};\n\nexport interface CloudApiService {\n  deploy(\n    deployInput: {\n      filePath: string;\n      project: { name: string; targetEnvironment?: string };\n    },\n    {\n      onUploadProgress,\n    }: {\n      onUploadProgress: (progressEvent: { loaded: number; total?: number }) => void;\n    }\n  ): Promise<AxiosResponse<DeployResponse>>;\n\n  createProject(createProjectInput: ProjectInput): Promise<{\n    data: ProjectInput;\n    status: number;\n  }>;\n\n  getUserInfo(): Promise<AxiosResponse>;\n\n  config(): Promise<AxiosResponse<CloudCliConfig>>;\n\n  listProjects(): Promise<AxiosResponse<ListProjectsResponse>>;\n\n  listLinkProjects(): Promise<AxiosResponse<ListLinkProjectsResponse>>;\n\n  listEnvironments(project: { name: string }): Promise<AxiosResponse<ListEnvironmentsResponse>>;\n\n  listLinkEnvironments(project: {\n    name: string;\n  }): Promise<AxiosResponse<ListLinkEnvironmentsResponse>>;\n\n  getProject(project: { name: string }): Promise<AxiosResponse<GetProjectResponse>>;\n\n  track(event: string, payload?: TrackPayload): Promise<AxiosResponse<void>>;\n}\n\nexport async function cloudApiFactory(\n  { logger }: { logger: CLIContext['logger'] },\n  token?: string\n): Promise<CloudApiService> {\n  const localConfig = await getLocalConfig();\n  const customHeaders = {\n    'x-device-id': localConfig.deviceId,\n    'x-app-version': packageJson.version,\n    'x-os-name': os.type(),\n    'x-os-version': os.version(),\n    'x-language': Intl.DateTimeFormat().resolvedOptions().locale,\n    'x-node-version': process.versions.node,\n  };\n  const axiosCloudAPI = axios.create({\n    baseURL: `${apiConfig.apiBaseUrl}/${VERSION}`,\n    headers: {\n      'Content-Type': 'application/json',\n      ...customHeaders,\n    },\n  });\n\n  if (token) {\n    axiosCloudAPI.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return {\n    deploy({ filePath, project }, { onUploadProgress }) {\n      return axiosCloudAPI.post(\n        `/deploy/${project.name}`,\n        { file: fse.createReadStream(filePath), targetEnvironment: project.targetEnvironment },\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n          onUploadProgress,\n        }\n      );\n    },\n\n    async createProject({ name, nodeVersion, region, plan }) {\n      const response = await axiosCloudAPI.post('/project', {\n        projectName: name,\n        region,\n        nodeVersion,\n        plan,\n      });\n\n      return {\n        data: {\n          id: response.data.id,\n          name: response.data.name,\n          nodeVersion: response.data.nodeVersion,\n          region: response.data.region,\n        },\n        status: response.status,\n      };\n    },\n\n    getUserInfo() {\n      return axiosCloudAPI.get('/user');\n    },\n\n    async config(): Promise<AxiosResponse<CloudCliConfig>> {\n      try {\n        const response = await axiosCloudAPI.get('/config');\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud CLI config from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve the cloud CLI config from the server. Please try again.\"\n        );\n\n        throw error;\n      }\n    },\n\n    async listProjects(): Promise<AxiosResponse<ListProjectsResponse>> {\n      try {\n        const response = await axiosCloudAPI.get('/projects');\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud projects from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's list from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async listLinkProjects(): Promise<AxiosResponse<ListLinkProjectsResponse, unknown>> {\n      try {\n        const response = await axiosCloudAPI.get('/projects-linkable');\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud projects from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's list from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async listEnvironments({ name }): Promise<AxiosResponse<ListEnvironmentsResponse>> {\n      try {\n        const response = await axiosCloudAPI.get(`/projects/${name}/environments`);\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud environments from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's environments from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async listLinkEnvironments({ name }): Promise<AxiosResponse<ListLinkEnvironmentsResponse>> {\n      try {\n        const response = await axiosCloudAPI.get(`/projects/${name}/environments-linkable`);\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud environments from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's environments from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async getProject({ name }): Promise<AxiosResponse<GetProjectResponse>> {\n      try {\n        const response = await axiosCloudAPI.get(`/projects/${name}`);\n\n        if (response.status !== 200) {\n          throw new Error(\"Error fetching project's details.\");\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! There was a problem retrieving your project's details. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    track(event, payload = {}) {\n      return axiosCloudAPI.post<void>('/track', {\n        event,\n        payload,\n      });\n    },\n  };\n}\n","import fse from 'fs-extra';\nimport path from 'path';\nimport { merge } from 'lodash';\nimport type { ProjectInfo } from './cli-api';\n\nexport const LOCAL_SAVE_FILENAME = '.strapi-cloud.json';\n\nexport type LocalSave = {\n  project?: Omit<ProjectInfo, 'id'>;\n};\n\n// Utility type for making all properties optional recursively\ntype DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];\n};\n\nexport type LocalPatch = {\n  project?: DeepPartial<Omit<ProjectInfo, 'id'>>;\n};\n\nconst getFilePath = (directoryPath?: string): string =>\n  path.join(directoryPath || process.cwd(), LOCAL_SAVE_FILENAME);\n\nexport async function save(data: LocalSave, { directoryPath }: { directoryPath?: string } = {}) {\n  const pathToFile = getFilePath(directoryPath);\n  // Ensure the directory exists and creates it if not\n  await fse.ensureDir(path.dirname(pathToFile));\n  await fse.writeJson(pathToFile, data, { encoding: 'utf8' });\n}\n\nexport async function retrieve({\n  directoryPath,\n}: { directoryPath?: string } = {}): Promise<LocalSave> {\n  const pathToFile = getFilePath(directoryPath);\n  const pathExists = await fse.pathExists(pathToFile);\n  if (!pathExists) {\n    return {};\n  }\n  return fse.readJSON(pathToFile, { encoding: 'utf8' });\n}\n\nexport async function patch(\n  patchData: LocalPatch,\n  { directoryPath }: { directoryPath?: string } = {}\n) {\n  const pathToFile = getFilePath(directoryPath);\n  const existingData = await retrieve({ directoryPath });\n  if (!existingData) {\n    throw new Error('No configuration data found to patch.');\n  }\n  const newData = merge(existingData, patchData);\n  await fse.writeJson(pathToFile, newData, { encoding: 'utf8' });\n}\n\nexport async function deleteConfig({ directoryPath }: { directoryPath?: string } = {}) {\n  const pathToFile = getFilePath(directoryPath);\n  const pathExists = await fse.pathExists(pathToFile);\n  if (pathExists) {\n    await fse.remove(pathToFile);\n  }\n}\n","import jwksClient, { type JwksClient, type SigningKey } from 'jwks-rsa';\nimport type { JwtHeader, VerifyErrors } from 'jsonwebtoken';\nimport jwt from 'jsonwebtoken';\nimport { getLocalConfig, saveLocalConfig } from '../config/local';\nimport type { CloudCliConfig, CLIContext } from '../types';\nimport { cloudApiFactory } from './cli-api';\n\nlet cliConfig: CloudCliConfig;\n\ninterface DecodedToken {\n  [key: string]: any;\n}\n\nexport async function tokenServiceFactory({ logger }: { logger: CLIContext['logger'] }) {\n  const cloudApiService = await cloudApiFactory({ logger });\n\n  async function saveToken(str: string) {\n    const appConfig = await getLocalConfig();\n\n    if (!appConfig) {\n      logger.error('There was a problem saving your token. Please try again.');\n      return;\n    }\n\n    appConfig.token = str;\n\n    try {\n      await saveLocalConfig(appConfig);\n    } catch (e: Error | unknown) {\n      logger.debug(e);\n      logger.error('There was a problem saving your token. Please try again.');\n    }\n  }\n\n  async function retrieveToken() {\n    const appConfig = await getLocalConfig();\n    if (appConfig.token) {\n      // check if token is still valid\n      if (await isTokenValid(appConfig.token)) {\n        return appConfig.token;\n      }\n    }\n    return undefined;\n  }\n\n  async function validateToken(idToken: string, jwksUrl: string): Promise<void> {\n    const client: JwksClient = jwksClient({\n      jwksUri: jwksUrl,\n    });\n\n    // Get the Key from the JWKS using the token header's Key ID (kid)\n    const getKey = (header: JwtHeader, callback: (e: Error | null, key?: string) => void) => {\n      client.getSigningKey(header.kid, (e: Error | null, key?: SigningKey) => {\n        if (e) {\n          callback(e);\n        } else if (key) {\n          const publicKey = 'publicKey' in key ? key.publicKey : key.rsaPublicKey;\n          callback(null, publicKey);\n        } else {\n          callback(new Error('Key not found'));\n        }\n      });\n    };\n\n    const decodedToken = jwt.decode(idToken, { complete: true }) as DecodedToken;\n    if (!decodedToken) {\n      if (typeof idToken === 'undefined' || idToken === '') {\n        logger.warn('You need to be logged in to use this feature. Please log in and try again.');\n      } else {\n        logger.error(\n          'There seems to be a problem with your login information. Please try logging in again.'\n        );\n      }\n      return Promise.reject(new Error('Invalid token'));\n    }\n\n    // Verify the JWT token signature using the JWKS Key\n    return new Promise<void>((resolve, reject) => {\n      jwt.verify(idToken, getKey, (err: VerifyErrors | null) => {\n        if (err) {\n          reject(err);\n        }\n        if (decodedToken.payload.exp < Math.floor(Date.now() / 1000)) {\n          reject(new Error('Token is expired'));\n        }\n        resolve();\n      });\n    });\n  }\n\n  async function isTokenValid(token: string) {\n    try {\n      const config = await cloudApiService.config();\n\n      cliConfig = config.data;\n      if (token) {\n        await validateToken(token, cliConfig.jwksUrl);\n        return true;\n      }\n      return false;\n    } catch (e) {\n      logger.debug(e);\n      return false;\n    }\n  }\n\n  async function eraseToken() {\n    const appConfig = await getLocalConfig();\n    if (!appConfig) {\n      return;\n    }\n\n    delete appConfig.token;\n\n    try {\n      await saveLocalConfig(appConfig);\n    } catch (e: Error | unknown) {\n      logger.debug(e);\n      logger.error(\n        'There was an issue removing your login information. Please try logging out again.'\n      );\n      throw e;\n    }\n  }\n\n  async function getValidToken(\n    ctx: CLIContext,\n    loginAction: (ctx: CLIContext) => Promise<boolean>\n  ) {\n    let token = await retrieveToken();\n\n    while (!token || !(await isTokenValid(token))) {\n      logger.log(\n        token\n          ? 'Oops! Your token seems expired or invalid. Please login again.'\n          : \"We couldn't find a valid token. You need to be logged in to use this feature.\"\n      );\n      if (!(await loginAction(ctx))) return null;\n      token = await retrieveToken();\n    }\n\n    return token;\n  }\n\n  return {\n    saveToken,\n    retrieveToken,\n    validateToken,\n    isTokenValid,\n    eraseToken,\n    getValidToken,\n  };\n}\n","import chalk from 'chalk';\nimport stringify from 'fast-safe-stringify';\n\nimport ora from 'ora';\nimport * as cliProgress from 'cli-progress';\n\nexport interface LoggerOptions {\n  silent?: boolean;\n  debug?: boolean;\n  timestamp?: boolean;\n}\n\nexport interface Logger {\n  warnings: number;\n  errors: number;\n  debug: (...args: unknown[]) => void;\n  info: (...args: unknown[]) => void;\n  success: (...args: unknown[]) => void;\n  warn: (...args: unknown[]) => void;\n  error: (...args: unknown[]) => void;\n  log: (...args: unknown[]) => void;\n  spinner: (text: string) => Pick<ora.Ora, 'succeed' | 'fail' | 'start' | 'text' | 'isSpinning'>;\n  progressBar: (\n    totalSize: number,\n    text: string\n  ) => Pick<cliProgress.SingleBar, 'start' | 'stop' | 'update'>;\n}\n\nconst stringifyArg = (arg: unknown) => {\n  return typeof arg === 'object' ? stringify(arg) : arg;\n};\n\nconst createLogger = (options: LoggerOptions = {}): Logger => {\n  const { silent = false, debug = false, timestamp = true } = options;\n\n  const state = { errors: 0, warning: 0 };\n\n  return {\n    get warnings() {\n      return state.warning;\n    },\n\n    get errors() {\n      return state.errors;\n    },\n\n    async debug(...args) {\n      if (silent || !debug) {\n        return;\n      }\n\n      console.log(\n        chalk.cyan(`[DEBUG]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args.map(stringifyArg)\n      );\n    },\n\n    info(...args) {\n      if (silent) {\n        return;\n      }\n\n      console.info(\n        chalk.blue(`[INFO]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args.map(stringifyArg)\n      );\n    },\n\n    log(...args) {\n      if (silent) {\n        return;\n      }\n\n      console.info(\n        chalk.blue(`${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args.map(stringifyArg)\n      );\n    },\n\n    success(...args) {\n      if (silent) {\n        return;\n      }\n\n      console.info(\n        chalk.green(`[SUCCESS]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args.map(stringifyArg)\n      );\n    },\n\n    warn(...args) {\n      state.warning += 1;\n\n      if (silent) {\n        return;\n      }\n\n      console.warn(\n        chalk.yellow(`[WARN]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args.map(stringifyArg)\n      );\n    },\n\n    error(...args) {\n      state.errors += 1;\n\n      if (silent) {\n        return;\n      }\n\n      console.error(\n        chalk.red(`[ERROR]${timestamp ? `\\t[${new Date().toISOString()}]` : ''}`),\n        ...args.map(stringifyArg)\n      );\n    },\n\n    // @ts-expect-error – returning a subpart of ora is fine because the types tell us what is what.\n    spinner(text: string) {\n      if (silent) {\n        return {\n          succeed() {\n            return this;\n          },\n          fail() {\n            return this;\n          },\n          start() {\n            return this;\n          },\n          text: '',\n          isSpinning: false,\n        };\n      }\n\n      return ora(text);\n    },\n\n    progressBar(totalSize: number, text: string) {\n      if (silent) {\n        return {\n          start() {\n            return this;\n          },\n          stop() {\n            return this;\n          },\n          update() {\n            return this;\n          },\n        };\n      }\n\n      const progressBar = new cliProgress.SingleBar({\n        format: `${text ? `${text} |` : ''}${chalk.green('{bar}')}| {percentage}%`,\n        barCompleteChar: '\\u2588',\n        barIncompleteChar: '\\u2591',\n        hideCursor: true,\n        forceRedraw: true,\n      });\n\n      progressBar.start(totalSize, 0);\n\n      return progressBar;\n    },\n  };\n};\n\nexport { createLogger };\n","import * as fse from 'fs-extra';\nimport os from 'os';\nimport pkgUp from 'pkg-up';\nimport * as yup from 'yup';\nimport chalk from 'chalk';\nimport { Logger } from '../services/logger';\n\ninterface Export {\n  types?: string;\n  source: string;\n  module?: string;\n  import?: string;\n  require?: string;\n  default: string;\n}\n\nconst packageJsonSchema = yup.object({\n  name: yup.string().required(),\n  exports: yup.lazy((value) =>\n    yup\n      .object(\n        typeof value === 'object'\n          ? Object.entries(value).reduce(\n              (acc, [key, value]) => {\n                if (typeof value === 'object') {\n                  acc[key] = yup\n                    .object({\n                      types: yup.string().optional(),\n                      source: yup.string().required(),\n                      module: yup.string().optional(),\n                      import: yup.string().required(),\n                      require: yup.string().required(),\n                      default: yup.string().required(),\n                    })\n                    .noUnknown(true);\n                } else {\n                  acc[key] = yup\n                    .string()\n                    .matches(/^\\.\\/.*\\.json$/)\n                    .required();\n                }\n\n                return acc;\n              },\n              {} as Record<string, yup.SchemaOf<string> | yup.SchemaOf<Export>>\n            )\n          : undefined\n      )\n      .optional()\n  ),\n});\n\ntype PackageJson = yup.Asserts<typeof packageJsonSchema>;\n\n/**\n * @description being a task to load the package.json starting from the current working directory\n * using a shallow find for the package.json  and `fs` to read the file. If no package.json is found,\n * the process will throw with an appropriate error message.\n */\nconst loadPkg = async ({ cwd, logger }: { cwd: string; logger: Logger }): Promise<PackageJson> => {\n  const pkgPath = await pkgUp({ cwd });\n\n  if (!pkgPath) {\n    throw new Error('Could not find a package.json in the current directory');\n  }\n\n  const buffer = await fse.readFile(pkgPath);\n\n  const pkg = JSON.parse(buffer.toString());\n\n  logger.debug('Loaded package.json:', os.EOL, pkg);\n\n  return pkg;\n};\n\n/**\n * @description validate the package.json against a standardised schema using `yup`.\n * If the validation fails, the process will throw with an appropriate error message.\n */\nconst validatePkg = async ({ pkg }: { pkg: object }): Promise<PackageJson> => {\n  try {\n    return await packageJsonSchema.validate(pkg, {\n      strict: true,\n    });\n  } catch (err) {\n    if (err instanceof yup.ValidationError) {\n      switch (err.type) {\n        case 'required':\n          if (err.path) {\n            throw new Error(\n              `'${err.path}' in 'package.json' is required as type '${chalk.magenta(\n                yup.reach(packageJsonSchema, err.path).type\n              )}'`\n            );\n          }\n          break;\n        /**\n         * This will only be thrown if there are keys in the export map\n         * that we don't expect so we can therefore make some assumptions\n         */\n        case 'noUnknown':\n          if (err.path && err.params && 'unknown' in err.params) {\n            throw new Error(\n              `'${err.path}' in 'package.json' contains the unknown key ${chalk.magenta(\n                err.params.unknown\n              )}, for compatability only the following keys are allowed: ${chalk.magenta(\n                \"['types', 'source', 'import', 'require', 'default']\"\n              )}`\n            );\n          }\n          break;\n        default:\n          if (err.path && err.params && 'type' in err.params && 'value' in err.params) {\n            throw new Error(\n              `'${err.path}' in 'package.json' must be of type '${chalk.magenta(\n                err.params.type\n              )}' (recieved '${chalk.magenta(typeof err.params.value)}')`\n            );\n          }\n      }\n    }\n\n    throw err;\n  }\n};\n\nexport type { PackageJson, Export };\nexport { loadPkg, validatePkg };\n","import { CLIContext } from '../../types';\nimport { PackageJson, loadPkg } from '../../utils/pkg';\n\nexport async function getProjectNameFromPackageJson(ctx: CLIContext): Promise<string> {\n  try {\n    const packageJson = (await loadPkg(ctx)) as PackageJson;\n    return packageJson.name || 'my-strapi-project';\n  } catch (e) {\n    return 'my-strapi-project';\n  }\n}\n","import type { CLIContext, CloudApiService, TrackPayload } from '../types';\n\nconst trackEvent = async (\n  ctx: CLIContext,\n  cloudApiService: CloudApiService,\n  eventName: string,\n  eventData: TrackPayload\n) => {\n  try {\n    await cloudApiService.track(eventName, eventData);\n  } catch (e) {\n    ctx.logger.debug(`Failed to track ${eventName}`, e);\n  }\n};\n\nexport { trackEvent };\n","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport { tokenServiceFactory, cloudApiFactory } from '../services';\nimport type { CloudCliConfig, CLIContext } from '../types';\nimport { apiConfig } from '../config/api';\nimport { trackEvent } from '../utils/analytics';\n\nconst openModule = import('open');\n\nexport async function promptLogin(ctx: CLIContext) {\n  const response = await inquirer.prompt([\n    {\n      type: 'confirm',\n      name: 'login',\n      message: 'Would you like to login?',\n    },\n  ]);\n\n  if (response.login) {\n    const loginSuccessful = await loginAction(ctx);\n    return loginSuccessful;\n  }\n  return false;\n}\n\nexport default async function loginAction(ctx: CLIContext): Promise<boolean> {\n  const { logger } = ctx;\n  const tokenService = await tokenServiceFactory(ctx);\n  const existingToken = await tokenService.retrieveToken();\n  const cloudApiService = await cloudApiFactory(ctx, existingToken || undefined);\n\n  if (existingToken) {\n    const isTokenValid = await tokenService.isTokenValid(existingToken);\n    if (isTokenValid) {\n      try {\n        const userInfo = await cloudApiService.getUserInfo();\n        const { email } = userInfo.data.data;\n        if (email) {\n          logger.log(`You are already logged into your account (${email}).`);\n        } else {\n          logger.log('You are already logged in.');\n        }\n        logger.log(\n          'To access your dashboard, please copy and paste the following URL into your web browser:'\n        );\n        logger.log(chalk.underline(`${apiConfig.dashboardBaseUrl}/projects`));\n        return true;\n      } catch (e) {\n        logger.debug('Failed to fetch user info', e);\n      }\n    }\n  }\n\n  let cliConfig: CloudCliConfig;\n  try {\n    logger.info('🔌 Connecting to the Strapi Cloud API...');\n    const config = await cloudApiService.config();\n    cliConfig = config.data;\n  } catch (e: unknown) {\n    logger.error('🥲 Oops! Something went wrong while logging you in. Please try again.');\n    logger.debug(e);\n    return false;\n  }\n  await trackEvent(ctx, cloudApiService, 'willLoginAttempt', {});\n\n  logger.debug('🔐 Creating device authentication request...', {\n    client_id: cliConfig.clientId,\n    scope: cliConfig.scope,\n    audience: cliConfig.audience,\n  });\n  const deviceAuthResponse = (await axios\n    .post(cliConfig.deviceCodeAuthUrl, {\n      client_id: cliConfig.clientId,\n      scope: cliConfig.scope,\n      audience: cliConfig.audience,\n    })\n    .catch((e: AxiosError) => {\n      logger.error('There was an issue with the authentication process. Please try again.');\n      if (e.message) {\n        logger.debug(e.message, e);\n      } else {\n        logger.debug(e);\n      }\n    })) as AxiosResponse;\n\n  openModule.then((open) => {\n    open.default(deviceAuthResponse.data.verification_uri_complete).catch((e: Error) => {\n      logger.error('We encountered an issue opening the browser. Please try again later.');\n      logger.debug(e.message, e);\n    });\n  });\n\n  logger.log('If a browser tab does not open automatically, please follow the next steps:');\n  logger.log(\n    `1. Open this url in your device: ${deviceAuthResponse.data.verification_uri_complete}`\n  );\n  logger.log(\n    `2. Enter the following code: ${deviceAuthResponse.data.user_code} and confirm to login.\\n`\n  );\n\n  const tokenPayload = {\n    grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n    device_code: deviceAuthResponse.data.device_code,\n    client_id: cliConfig.clientId,\n  };\n\n  let isAuthenticated = false;\n\n  const authenticate = async () => {\n    const spinner = logger.spinner('Waiting for authentication');\n    spinner.start();\n    const spinnerFail = () => spinner.fail('Authentication failed!');\n\n    while (!isAuthenticated) {\n      try {\n        const tokenResponse = await axios.post(cliConfig.tokenUrl, tokenPayload);\n        const authTokenData = tokenResponse.data;\n\n        if (tokenResponse.status === 200) {\n          // Token validation\n          try {\n            logger.debug('🔐 Validating token...');\n            await tokenService.validateToken(authTokenData.id_token, cliConfig.jwksUrl);\n            logger.debug('🔐 Token validation successful!');\n          } catch (e: any) {\n            logger.debug(e);\n            spinnerFail();\n            throw new Error('Unable to proceed: Token validation failed');\n          }\n\n          logger.debug('🔍 Fetching user information...');\n          const cloudApiServiceWithToken = await cloudApiFactory(ctx, authTokenData.access_token);\n          // Call to get user info to create the user in DB if not exists\n          await cloudApiServiceWithToken.getUserInfo();\n          logger.debug('🔍 User information fetched successfully!');\n\n          try {\n            logger.debug('📝 Saving login information...');\n            await tokenService.saveToken(authTokenData.access_token);\n            logger.debug('📝 Login information saved successfully!');\n            isAuthenticated = true;\n          } catch (e) {\n            logger.error(\n              'There was a problem saving your login information. Please try logging in again.'\n            );\n            logger.debug(e);\n            spinnerFail();\n            return false;\n          }\n        }\n      } catch (e: any) {\n        if (e.message === 'Unable to proceed: Token validation failed') {\n          logger.error(\n            'There seems to be a problem with your login information. Please try logging in again.'\n          );\n          spinnerFail();\n          await trackEvent(ctx, cloudApiService, 'didNotLogin', { loginMethod: 'cli' });\n          return false;\n        }\n        if (\n          e.response?.data.error &&\n          !['authorization_pending', 'slow_down'].includes(e!.response.data.error)\n        ) {\n          logger.debug(e);\n          spinnerFail();\n          await trackEvent(ctx, cloudApiService, 'didNotLogin', { loginMethod: 'cli' });\n          return false;\n        }\n        // Await interval before retrying\n        await new Promise((resolve) => {\n          setTimeout(resolve, deviceAuthResponse.data.interval * 1000);\n        });\n      }\n    }\n    spinner.succeed('Authentication successful!');\n    logger.log('You are now logged into Strapi Cloud.');\n    logger.log(\n      'To access your dashboard, please copy and paste the following URL into your web browser:'\n    );\n    logger.log(chalk.underline(`${apiConfig.dashboardBaseUrl}/projects`));\n    await trackEvent(ctx, cloudApiService, 'didLogin', { loginMethod: 'cli' });\n  };\n\n  await authenticate();\n  return isAuthenticated;\n}\n","import { DistinctQuestion } from 'inquirer';\nimport type { ProjectAnswers } from '../../types';\n\n/**\n * Apply default values to questions based on the provided mapper\n * @param questionsMap - A partial object with keys matching the ProjectAnswers keys and values being the default value or a function to get the default value\n */\nexport function questionDefaultValuesMapper(\n  questionsMap: Partial<{\n    [K in keyof ProjectAnswers]:\n      | ((question: DistinctQuestion<ProjectAnswers>) => ProjectAnswers[K])\n      | ProjectAnswers[K];\n  }>\n) {\n  return (\n    questions: ReadonlyArray<DistinctQuestion<ProjectAnswers>>\n  ): ReadonlyArray<DistinctQuestion<ProjectAnswers>> => {\n    return questions.map((question) => {\n      const questionName = question.name as keyof ProjectAnswers;\n\n      // If the question is part of the mapper, apply the default value\n      if (questionName in questionsMap) {\n        const questionDefault = questionsMap[questionName];\n\n        // If the default value is a function, call it with the question and get the default value\n        if (typeof questionDefault === 'function') {\n          return {\n            ...question,\n            default: questionDefault(question),\n          };\n        }\n        // else we consider it as a static value\n        return {\n          ...question,\n          default: questionDefault,\n        };\n      }\n      // If the question is not part of the mapper, return the question as is\n      return question;\n    });\n  };\n}\n\n/**\n * Get default values from questions\n * @param questions - An array of questions for project creation\n */\nexport function getDefaultsFromQuestions(\n  questions: ReadonlyArray<DistinctQuestion<ProjectAnswers>>\n): Partial<ProjectAnswers> {\n  return questions.reduce((acc, question) => {\n    if (question.default && question.name) {\n      return { ...acc, [question.name]: question.default };\n    }\n    return acc;\n  }, {});\n}\n\n/**\n * Get the default node version based on the current node version if it is in the list of choices\n * @param question - The question for the node version in project creation\n */\nexport function getProjectNodeVersionDefault(question: DistinctQuestion<ProjectAnswers>): string {\n  const currentNodeVersion = process.versions.node.split('.')[0];\n\n  // Node Version question is set up as a list, but the type of inquirer is dynamic and the question can change in the future (it comes from API)\n  if (question.type === 'list' && Array.isArray(question.choices)) {\n    const choice = question.choices.find((choice) => choice.value === currentNodeVersion);\n    if (choice) {\n      return choice.value;\n    }\n  }\n  return question.default;\n}\n","import inquirer from 'inquirer';\nimport { AxiosError } from 'axios';\nimport { defaults } from 'lodash/fp';\nimport type { CLIContext, ProjectAnswers, ProjectInput } from '../types';\nimport { cloudApiFactory, local, tokenServiceFactory } from '../services';\nimport { getProjectNameFromPackageJson } from './utils/get-project-name-from-pkg';\nimport { promptLogin } from '../login/action';\nimport {\n  getDefaultsFromQuestions,\n  getProjectNodeVersionDefault,\n  questionDefaultValuesMapper,\n} from './utils/project-questions.utils';\n\nasync function handleError(ctx: CLIContext, error: Error) {\n  const { logger } = ctx;\n  logger.debug(error);\n  if (error instanceof AxiosError) {\n    const errorMessage = typeof error.response?.data === 'string' ? error.response.data : null;\n    switch (error.response?.status) {\n      case 403:\n        logger.error(\n          errorMessage ||\n            'You do not have permission to create a project. Please contact support for assistance.'\n        );\n        return;\n      case 400:\n        logger.error(errorMessage || 'Invalid input. Please check your inputs and try again.');\n        return;\n      case 503:\n        logger.error(\n          'Strapi Cloud project creation is currently unavailable. Please try again later.'\n        );\n        return;\n      default:\n        if (errorMessage) {\n          logger.error(errorMessage);\n          return;\n        }\n        break;\n    }\n  }\n  logger.error(\n    'We encountered an issue while creating your project. Please try again in a moment. If the problem persists, contact support for assistance.'\n  );\n}\n\nasync function createProject(ctx: CLIContext, cloudApi: any, projectInput: ProjectInput) {\n  const { logger } = ctx;\n  const spinner = logger.spinner('Setting up your project...').start();\n  try {\n    const { data } = await cloudApi.createProject(projectInput);\n    await local.save({ project: data });\n    spinner.succeed('Project created successfully!');\n    return data;\n  } catch (e: Error | unknown) {\n    spinner.fail('An error occurred while creating the project on Strapi Cloud.');\n    throw e;\n  }\n}\n\nexport default async (ctx: CLIContext) => {\n  const { logger } = ctx;\n  const { getValidToken, eraseToken } = await tokenServiceFactory(ctx);\n\n  const token = await getValidToken(ctx, promptLogin);\n  if (!token) {\n    return;\n  }\n\n  const cloudApi = await cloudApiFactory(ctx, token);\n  const { data: config } = await cloudApi.config();\n  const projectName = await getProjectNameFromPackageJson(ctx);\n\n  const defaultAnswersMapper = questionDefaultValuesMapper({\n    name: projectName,\n    nodeVersion: getProjectNodeVersionDefault,\n  });\n  const questions = defaultAnswersMapper(config.projectCreation.questions);\n  const defaultValues = {\n    ...config.projectCreation.defaults,\n    ...getDefaultsFromQuestions(questions),\n  };\n\n  const projectAnswersDefaulted = defaults(defaultValues);\n  const projectAnswers = await inquirer.prompt<ProjectAnswers>(questions);\n\n  const projectInput: ProjectInput = projectAnswersDefaulted(projectAnswers);\n\n  try {\n    return await createProject(ctx, cloudApi, projectInput);\n  } catch (e: Error | unknown) {\n    if (e instanceof AxiosError && e.response?.status === 401) {\n      logger.warn('Oops! Your session has expired. Please log in again to retry.');\n      await eraseToken();\n      if (await promptLogin(ctx)) {\n        return await createProject(ctx, cloudApi, projectInput);\n      }\n    } else {\n      await handleError(ctx, e as Error);\n    }\n  }\n};\n","import EventSource from 'eventsource';\nimport type { CLIContext, CloudCliConfig } from '../types';\n\ntype Event = {\n  type: string;\n  data: string;\n  lastEventId: string;\n  origin: string;\n};\n\nexport function notificationServiceFactory({ logger }: CLIContext) {\n  return (url: string, token: string, cliConfig: CloudCliConfig) => {\n    const CONN_TIMEOUT = Number(cliConfig.notificationsConnectionTimeout);\n\n    const es = new EventSource(url, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    let timeoutId: NodeJS.Timeout;\n\n    const resetTimeout = () => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => {\n        logger.log(\n          'We were unable to connect to the server at this time. This could be due to a temporary issue. Please try again in a moment.'\n        );\n        es.close();\n      }, CONN_TIMEOUT); // 5 minutes\n    };\n\n    es.onopen = resetTimeout;\n    es.onmessage = (event: Event) => {\n      resetTimeout();\n      const data = JSON.parse(event.data);\n\n      if (data.message) {\n        logger.log(data.message);\n      }\n\n      // Close connection when a specific event is received\n      if (data.event === 'deploymentFinished' || data.event === 'deploymentFailed') {\n        es.close();\n      }\n    };\n  };\n}\n","import EventSource from 'eventsource';\nimport { CLIContext, type CloudCliConfig } from '../types';\n\nconst buildLogsServiceFactory = ({ logger }: CLIContext) => {\n  return async (url: string, token: string, cliConfig: CloudCliConfig) => {\n    const CONN_TIMEOUT = Number(cliConfig.buildLogsConnectionTimeout);\n    const MAX_RETRIES = Number(cliConfig.buildLogsMaxRetries);\n\n    return new Promise((resolve, reject) => {\n      let timeoutId: NodeJS.Timeout | null = null;\n      let retries = 0;\n\n      const connect = (url: string) => {\n        const spinner = logger.spinner('Connecting to server to get build logs');\n        spinner.start();\n        const es = new EventSource(`${url}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        const clearExistingTimeout = () => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n        };\n\n        const resetTimeout = () => {\n          clearExistingTimeout();\n          timeoutId = setTimeout(() => {\n            if (spinner.isSpinning) {\n              spinner.fail(\n                'We were unable to connect to the server to get build logs at this time. This could be due to a temporary issue.'\n              );\n            }\n            es.close();\n            reject(new Error('Connection timed out'));\n          }, CONN_TIMEOUT);\n        };\n\n        es.onopen = resetTimeout;\n\n        es.addEventListener('finished', (event) => {\n          const data = JSON.parse(event.data);\n          logger.log(data.msg);\n          es.close();\n          clearExistingTimeout();\n          resolve(null);\n        });\n\n        es.addEventListener('log', (event) => {\n          if (spinner.isSpinning) {\n            spinner.succeed();\n          }\n          resetTimeout();\n          const data = JSON.parse(event.data);\n          logger.log(data.msg);\n        });\n\n        es.onerror = async () => {\n          retries += 1;\n          if (retries > MAX_RETRIES) {\n            spinner.fail('We were unable to connect to the server to get build logs at this time.');\n            es.close();\n            clearExistingTimeout(); // Important to clear the event loop from remaining timeout - avoid to wait for nothing while the timeout is running\n            reject(new Error('Max retries reached'));\n          }\n        };\n      };\n\n      connect(url);\n    });\n  };\n};\n\nexport { buildLogsServiceFactory };\n","import fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport boxen from 'boxen';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { AxiosError } from 'axios';\nimport * as crypto from 'node:crypto';\nimport { apiConfig } from '../config/api';\nimport { compressFilesToTar } from '../utils/compress-files';\nimport createProjectAction from '../create-project/action';\nimport type {\n  CLIContext,\n  CloudApiService,\n  CloudCliConfig,\n  EnvironmentDetails,\n  ProjectInfo,\n} from '../types';\nimport { getTmpStoragePath } from '../config/local';\nimport { cloudApiFactory, tokenServiceFactory, local } from '../services';\nimport { notificationServiceFactory } from '../services/notification';\nimport { loadPkg } from '../utils/pkg';\nimport { buildLogsServiceFactory } from '../services/build-logs';\nimport { promptLogin } from '../login/action';\nimport { trackEvent } from '../utils/analytics';\n\ntype PackageJson = {\n  name: string;\n  strapi?: {\n    uuid: string;\n  };\n};\n\ninterface CmdOptions {\n  env?: string;\n  force?: boolean;\n}\n\nconst boxenOptions: boxen.Options = {\n  padding: 1,\n  margin: 1,\n  align: 'center',\n  borderColor: 'yellow',\n  borderStyle: 'round',\n};\n\nconst QUIT_OPTION = 'Quit';\n\nasync function promptForEnvironment(environments: string[]): Promise<string> {\n  const choices = environments.map((env) => ({ name: env, value: env }));\n  const { selectedEnvironment } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'selectedEnvironment',\n      message: 'Select the environment to deploy:',\n      choices: [...choices, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\n    },\n  ]);\n  if (selectedEnvironment === null) {\n    process.exit(1);\n  }\n\n  return selectedEnvironment;\n}\n\nasync function upload(\n  ctx: CLIContext,\n  project: ProjectInfo,\n  token: string,\n  maxProjectFileSize: number\n) {\n  const cloudApi = await cloudApiFactory(ctx, token);\n  try {\n    const storagePath = await getTmpStoragePath();\n    const projectFolder = path.resolve(process.cwd());\n    const packageJson = (await loadPkg(ctx)) as PackageJson;\n\n    if (!packageJson) {\n      ctx.logger.error(\n        'Unable to deploy the project. Please make sure the package.json file is correctly formatted.'\n      );\n      return;\n    }\n\n    ctx.logger.log('📦 Compressing project...');\n    // hash packageJson.name to avoid conflicts\n    const hashname = crypto.createHash('sha512').update(packageJson.name).digest('hex');\n    const compressedFilename = `${hashname}.tar.gz`;\n    try {\n      ctx.logger.debug(\n        'Compression parameters\\n',\n        `Storage path: ${storagePath}\\n`,\n        `Project folder: ${projectFolder}\\n`,\n        `Compressed filename: ${compressedFilename}`\n      );\n      await compressFilesToTar(storagePath, projectFolder, compressedFilename);\n      ctx.logger.log('📦 Project compressed successfully!');\n    } catch (e: unknown) {\n      ctx.logger.error(\n        '⚠️ Project compression failed. Try again later or check for large/incompatible files.'\n      );\n      ctx.logger.debug(e);\n      process.exit(1);\n    }\n\n    const tarFilePath = path.resolve(storagePath, compressedFilename);\n    const fileStats = await fse.stat(tarFilePath);\n\n    if (fileStats.size > maxProjectFileSize) {\n      ctx.logger.log(\n        'Unable to proceed: Your project is too big to be transferred, please use a git repo instead.'\n      );\n      try {\n        await fse.remove(tarFilePath);\n      } catch (e: any) {\n        ctx.logger.log('Unable to remove file: ', tarFilePath);\n        ctx.logger.debug(e);\n      }\n      return;\n    }\n\n    ctx.logger.info('🚀 Uploading project...');\n    const progressBar = ctx.logger.progressBar(100, 'Upload Progress');\n\n    try {\n      const { data } = await cloudApi.deploy(\n        { filePath: tarFilePath, project },\n        {\n          onUploadProgress(progressEvent) {\n            const total = progressEvent.total || fileStats.size;\n            const percentage = Math.round((progressEvent.loaded * 100) / total);\n            progressBar.update(percentage);\n          },\n        }\n      );\n\n      progressBar.update(100);\n      progressBar.stop();\n      ctx.logger.success('✨ Upload finished!');\n      return data.build_id;\n    } catch (e: any) {\n      progressBar.stop();\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n      ctx.logger.debug(e);\n    } finally {\n      await fse.remove(tarFilePath);\n    }\n    process.exit(0);\n  } catch (e: any) {\n    ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n    ctx.logger.debug(e);\n    process.exit(1);\n  }\n}\n\nasync function getProject(ctx: CLIContext) {\n  const { project } = await local.retrieve();\n  if (!project) {\n    try {\n      return await createProjectAction(ctx);\n    } catch (e: any) {\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n      ctx.logger.debug(e);\n      process.exit(1);\n    }\n  }\n  return project;\n}\n\nasync function getConfig({\n  ctx,\n  cloudApiService,\n}: {\n  ctx: CLIContext;\n  cloudApiService: CloudApiService;\n}): Promise<CloudCliConfig | null> {\n  try {\n    const { data: cliConfig } = await cloudApiService.config();\n    return cliConfig;\n  } catch (e) {\n    ctx.logger.debug('Failed to get cli config', e);\n    return null;\n  }\n}\n\nfunction validateEnvironment(ctx: CLIContext, environment: string, environments: string[]): void {\n  if (!environments.includes(environment)) {\n    ctx.logger.error(`Environment ${environment} does not exist.`);\n    process.exit(1);\n  }\n}\n\nasync function getTargetEnvironment(\n  ctx: CLIContext,\n  opts: CmdOptions,\n  project: ProjectInfo,\n  environments: string[]\n): Promise<string> {\n  if (opts.env) {\n    validateEnvironment(ctx, opts.env, environments);\n    return opts.env;\n  }\n\n  if (project.targetEnvironment) {\n    return project.targetEnvironment;\n  }\n\n  if (environments.length > 1) {\n    return promptForEnvironment(environments);\n  }\n\n  return environments[0];\n}\n\nfunction hasPendingOrLiveDeployment(\n  environments: EnvironmentDetails[],\n  targetEnvironment: string\n): boolean {\n  const environment = environments.find((env) => env.name === targetEnvironment);\n  if (!environment) {\n    throw new Error(`Environment details ${targetEnvironment} not found.`);\n  }\n  return environment.hasPendingDeployment || environment.hasLiveDeployment || false;\n}\n\nexport default async (ctx: CLIContext, opts: CmdOptions) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  if (!token) {\n    return;\n  }\n\n  const project = await getProject(ctx);\n  if (!project) {\n    return;\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  let projectData;\n  let environments: string[];\n  let environmentsDetails: EnvironmentDetails[];\n\n  try {\n    const {\n      data: { data, metadata },\n    } = await cloudApiService.getProject({ name: project.name });\n    projectData = data;\n    environments = projectData.environments;\n    environmentsDetails = projectData.environmentsDetails;\n    const isProjectSuspended = projectData.suspendedAt;\n\n    if (isProjectSuspended) {\n      ctx.logger.log(\n        '\\n Oops! This project has been suspended. \\n\\n Please reactivate it from the dashboard to continue deploying: '\n      );\n      ctx.logger.log(chalk.underline(`${metadata.dashboardUrls.project}`));\n      return;\n    }\n  } catch (e: Error | unknown) {\n    if (e instanceof AxiosError && e.response?.data) {\n      if (e.response.status === 404) {\n        ctx.logger.warn(\n          `The project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\n            'link'\n          )} command before deploying.`\n        );\n      } else {\n        ctx.logger.error(e.response.data);\n      }\n    } else {\n      ctx.logger.error(\n        \"An error occurred while retrieving the project's information. Please try again later.\"\n      );\n    }\n    ctx.logger.debug(e);\n    return;\n  }\n\n  await trackEvent(ctx, cloudApiService, 'willDeployWithCLI', {\n    projectInternalName: project.name,\n  });\n\n  const notificationService = notificationServiceFactory(ctx);\n  const buildLogsService = buildLogsServiceFactory(ctx);\n\n  const cliConfig = await getConfig({ ctx, cloudApiService });\n  if (!cliConfig) {\n    ctx.logger.error(\n      'An error occurred while retrieving data from Strapi Cloud. Please check your network or try again later.'\n    );\n    return;\n  }\n\n  let maxSize: number = parseInt(cliConfig.maxProjectFileSize, 10);\n  if (Number.isNaN(maxSize)) {\n    ctx.logger.debug(\n      'An error occurred while parsing the maxProjectFileSize. Using default value.'\n    );\n    maxSize = 100000000;\n  }\n\n  project.targetEnvironment = await getTargetEnvironment(ctx, opts, project, environments);\n\n  if (!opts.force) {\n    const shouldDisplayWarning = hasPendingOrLiveDeployment(\n      environmentsDetails,\n      project.targetEnvironment\n    );\n    if (shouldDisplayWarning) {\n      ctx.logger.log(boxen(cliConfig.projectDeployment.confirmationText, boxenOptions));\n      const { confirm } = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: 'confirm',\n          message: `Do you want to proceed with deployment to ${chalk.cyan(projectData.displayName)} on ${chalk.cyan(project.targetEnvironment)} environment?`,\n        },\n      ]);\n      if (!confirm) {\n        process.exit(1);\n      }\n    }\n  }\n\n  const buildId = await upload(ctx, project, token, maxSize);\n\n  if (!buildId) {\n    return;\n  }\n\n  try {\n    ctx.logger.log(\n      `🚀 Deploying project to ${chalk.cyan(project.targetEnvironment ?? `production`)} environment...`\n    );\n    notificationService(`${apiConfig.apiBaseUrl}/notifications`, token, cliConfig);\n    await buildLogsService(`${apiConfig.apiBaseUrl}/v1/logs/${buildId}`, token, cliConfig);\n\n    ctx.logger.log(\n      'Visit the following URL for deployment logs. Your deployment will be available here shortly.'\n    );\n    ctx.logger.log(\n      chalk.underline(`${apiConfig.dashboardBaseUrl}/projects/${project.name}/deployments`)\n    );\n  } catch (e: Error | unknown) {\n    ctx.logger.debug(e);\n    if (e instanceof Error) {\n      ctx.logger.error(e.message);\n    } else {\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n    }\n  }\n};\n","import chalk from 'chalk';\nimport { has } from 'lodash/fp';\n\n// TODO: Remove duplicated code by extracting to a shared package\n\nconst assertCwdContainsStrapiProject = (name: string) => {\n  const logErrorAndExit = () => {\n    console.log(\n      `You need to run ${chalk.yellow(\n        `strapi ${name}`\n      )} in a Strapi project. Make sure you are in the right directory.`\n    );\n    process.exit(1);\n  };\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const pkgJSON = require(`${process.cwd()}/package.json`);\n    if (\n      !has('dependencies.@strapi/strapi', pkgJSON) &&\n      !has('devDependencies.@strapi/strapi', pkgJSON)\n    ) {\n      logErrorAndExit();\n    }\n  } catch (err) {\n    logErrorAndExit();\n  }\n};\n\nconst runAction =\n  (name: string, action: (...args: any[]) => Promise<unknown>) =>\n  (...args: unknown[]) => {\n    assertCwdContainsStrapiProject(name);\n\n    Promise.resolve()\n      .then(() => {\n        return action(...args);\n      })\n      .catch((error) => {\n        console.error(error);\n        process.exit(1);\n      });\n  };\n\nexport { runAction };\n","import { createCommand } from 'commander';\nimport { type StrapiCloudCommand } from '../types';\nimport { runAction } from '../utils/helpers';\nimport action from './action';\n\n/**\n * `$ deploy project to the cloud`\n */\nconst command: StrapiCloudCommand = ({ ctx }) => {\n  return createCommand('cloud:deploy')\n    .alias('deploy')\n    .description('Deploy a Strapi Cloud project')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .option('-f, --force', 'Skip confirmation to deploy')\n    .option('-e, --env <name>', 'Specify the environment to deploy')\n    .action((opts) => runAction('deploy', action)(ctx, opts));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../types';\n\nexport { action, command };\n\nexport default {\n  name: 'deploy-project',\n  description: 'Deploy a Strapi Cloud project',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import chalk from 'chalk';\nimport type { CLIContext } from '../types';\nimport { local } from '../services';\nimport { LocalSave } from '../services/strapi-info-save';\n\nasync function getLocalConfig(ctx: CLIContext): Promise<LocalSave | null> {\n  try {\n    return await local.retrieve();\n  } catch (e) {\n    ctx.logger.debug('Failed to get project config', e);\n    ctx.logger.error('An error occurred while retrieving config data from your local project.');\n    return null;\n  }\n}\n\nasync function getLocalProject(ctx: CLIContext) {\n  const localConfig = await getLocalConfig(ctx);\n\n  if (!localConfig || !localConfig.project) {\n    ctx.logger.warn(\n      `\\nWe couldn't find a valid local project config.\\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\n        'link'\n      )} command.`\n    );\n    process.exit(1);\n  }\n  return localConfig.project;\n}\n\nexport { getLocalConfig, getLocalProject };\n","import inquirer from 'inquirer';\nimport chalk from 'chalk';\n\nimport type { Answers } from 'inquirer';\nimport type { CLIContext } from '../types';\nimport type { CloudApiService } from '../services/cli-api';\n\nimport { LocalSave } from '../services/strapi-info-save';\nimport { cloudApiFactory, tokenServiceFactory, local } from '../services';\nimport { promptLogin } from '../login/action';\nimport { trackEvent } from '../utils/analytics';\nimport { getLocalConfig } from '../utils/get-local-config';\n\nconst QUIT_OPTION = 'Quit';\n\ninterface LinkProjectValue {\n  name: string;\n  displayName: string;\n}\n\ninterface LinkProjectAnswer extends Answers {\n  linkProject: LinkProjectValue;\n}\n\ninterface LinkProjectInput extends Answers {\n  linkProject: LinkProjectValue | string;\n}\n\ntype ProjectsList = {\n  name: string;\n  value: {\n    name: string;\n    displayName: string;\n  };\n}[];\n\ntype Project = {\n  name: string;\n  displayName: string;\n  isMaintainer: boolean;\n};\n\nasync function promptForRelink(\n  ctx: CLIContext,\n  cloudApiService: CloudApiService,\n  existingConfig: LocalSave | null\n) {\n  if (existingConfig && existingConfig.project) {\n    const { shouldRelink } = await inquirer.prompt([\n      {\n        type: 'confirm',\n        name: 'shouldRelink',\n        message: `A project named ${chalk.cyan(\n          existingConfig.project.displayName\n            ? existingConfig.project.displayName\n            : existingConfig.project.name\n        )} is already linked to this local folder. Do you want to update the link?`,\n        default: false,\n      },\n    ]);\n\n    if (!shouldRelink) {\n      await trackEvent(ctx, cloudApiService, 'didNotLinkProject', {\n        currentProjectName: existingConfig.project?.name,\n      });\n      return false;\n    }\n  }\n\n  return true;\n}\n\nasync function getProjectsList(\n  ctx: CLIContext,\n  cloudApiService: CloudApiService,\n  existingConfig: LocalSave | null\n) {\n  const spinner = ctx.logger.spinner('Fetching your projects...\\n').start();\n\n  try {\n    const {\n      data: { data: projectList },\n    } = await cloudApiService.listLinkProjects();\n    spinner.succeed();\n\n    if (!Array.isArray(projectList)) {\n      ctx.logger.log(\"We couldn't find any projects available for linking in Strapi Cloud.\");\n      return null;\n    }\n    const projects: ProjectsList = (projectList as unknown as Project[])\n      .filter(\n        (project: Project) =>\n          !(project.isMaintainer || project.name === existingConfig?.project?.name)\n      )\n      .map((project: Project) => {\n        return {\n          name: project.displayName,\n          value: { name: project.name, displayName: project.displayName },\n        };\n      });\n    if (projects.length === 0) {\n      ctx.logger.log(\"We couldn't find any projects available for linking in Strapi Cloud.\");\n      return null;\n    }\n    return projects;\n  } catch (e) {\n    spinner.fail('An error occurred while fetching your projects from Strapi Cloud.');\n    ctx.logger.debug('Failed to list projects', e);\n    return null;\n  }\n}\n\nasync function getUserSelection(\n  ctx: CLIContext,\n  projects: ProjectsList\n): Promise<LinkProjectAnswer | null> {\n  const { logger } = ctx;\n  try {\n    const answer: LinkProjectInput = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'linkProject',\n        message: 'Which project do you want to link?',\n        choices: [...projects, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\n      },\n    ]);\n\n    if (!answer.linkProject) {\n      return null;\n    }\n\n    return answer as LinkProjectAnswer;\n  } catch (e) {\n    logger.debug('Failed to get user input', e);\n    logger.error('An error occurred while trying to get your input.');\n    return null;\n  }\n}\n\nexport default async (ctx: CLIContext) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  const { logger } = ctx;\n\n  if (!token) {\n    return;\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n\n  const existingConfig: LocalSave | null = await getLocalConfig(ctx);\n  const shouldRelink = await promptForRelink(ctx, cloudApiService, existingConfig);\n\n  if (!shouldRelink) {\n    return;\n  }\n  await trackEvent(ctx, cloudApiService, 'willLinkProject', {});\n\n  const projects: ProjectsList | null | undefined = await getProjectsList(\n    ctx,\n    cloudApiService,\n    existingConfig\n  );\n\n  if (!projects) {\n    return;\n  }\n\n  const answer: LinkProjectAnswer | null = await getUserSelection(ctx, projects);\n\n  if (!answer) {\n    return;\n  }\n\n  try {\n    const { confirmAction } = await inquirer.prompt([\n      {\n        type: 'confirm',\n        name: 'confirmAction',\n        message:\n          'Warning: Once linked, deploying from CLI will replace the existing project and its data. Confirm to proceed:',\n        default: false,\n      },\n    ]);\n\n    if (!confirmAction) {\n      await trackEvent(ctx, cloudApiService, 'didNotLinkProject', {\n        cancelledProjectName: answer.linkProject.name,\n        currentProjectName: existingConfig ? existingConfig.project?.name : null,\n      });\n      return;\n    }\n\n    await local.save({ project: answer.linkProject });\n    logger.log(\n      ` You have successfully linked your project to ${chalk.cyan(answer.linkProject.displayName)}. You are now able to deploy your project.`\n    );\n    await trackEvent(ctx, cloudApiService, 'didLinkProject', {\n      projectInternalName: answer.linkProject,\n    });\n  } catch (e) {\n    logger.debug('Failed to link project', e);\n    logger.error('An error occurred while linking the project.');\n    await trackEvent(ctx, cloudApiService, 'didNotLinkProject', {\n      projectInternalName: answer.linkProject,\n    });\n  }\n};\n","import { type StrapiCloudCommand } from '../types';\nimport { runAction } from '../utils/helpers';\nimport action from './action';\n\n/**\n * `$ link local directory to project of the cloud`\n */\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\n  command\n    .command('cloud:link')\n    .alias('link')\n    .description('Link a local directory to a Strapi Cloud project')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('link', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../types';\n\nexport { action, command };\n\nexport default {\n  name: 'link-project',\n  description: 'Link a local directory to a Strapi Cloud project',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import { createCommand } from 'commander';\nimport type { StrapiCloudCommand } from '../types';\nimport { runAction } from '../utils/helpers';\nimport action from './action';\n\n/**\n * `$ cloud device flow login`\n */\nconst command: StrapiCloudCommand = ({ ctx }) => {\n  return createCommand('cloud:login')\n    .alias('login')\n    .description('Strapi Cloud Login')\n    .addHelpText(\n      'after',\n      '\\nAfter running this command, you will be prompted to enter your authentication information.'\n    )\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('login', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../types';\n\nexport { action, command };\n\nexport default {\n  name: 'login',\n  description: 'Strapi Cloud Login',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import type { CLIContext } from '../types';\nimport { tokenServiceFactory, cloudApiFactory } from '../services';\nimport { trackEvent } from '../utils/analytics';\n\nconst openModule = import('open');\n\nexport default async (ctx: CLIContext) => {\n  const { logger } = ctx;\n  const { retrieveToken, eraseToken } = await tokenServiceFactory(ctx);\n\n  const token = await retrieveToken();\n  if (!token) {\n    logger.log(\"You're already logged out.\");\n    return;\n  }\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  const config = await cloudApiService.config();\n  const cliConfig = config.data;\n\n  try {\n    await eraseToken();\n\n    openModule.then((open) => {\n      open\n        .default(\n          `${cliConfig.baseUrl}/oidc/logout?client_id=${encodeURIComponent(\n            cliConfig.clientId\n          )}&logout_hint=${encodeURIComponent(token)}\n          `\n        )\n        .catch((e: Error) => {\n          // Failing to open the logout URL is not a critical error, so we just log it\n          logger.debug(e.message, e);\n        });\n    });\n\n    logger.log(\n      '🔌 You have been logged out from the CLI. If you are on a shared computer, please make sure to log out from the Strapi Cloud Dashboard as well.'\n    );\n  } catch (e) {\n    logger.error('🥲 Oops! Something went wrong while logging you out. Please try again.');\n    logger.debug(e);\n  }\n  await trackEvent(ctx, cloudApiService, 'didLogout', { loginMethod: 'cli' });\n};\n","import { createCommand } from 'commander';\nimport type { StrapiCloudCommand } from '../types';\nimport { runAction } from '../utils/helpers';\nimport action from './action';\n\n/**\n * `$ cloud device flow logout`\n */\nconst command: StrapiCloudCommand = ({ ctx }) => {\n  return createCommand('cloud:logout')\n    .alias('logout')\n    .description('Strapi Cloud Logout')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('logout', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\n\nexport { action, command };\n\nexport default {\n  name: 'logout',\n  description: 'Strapi Cloud Logout',\n  action,\n  command,\n};\n","import { createCommand } from 'commander';\nimport { type StrapiCloudCommand } from '../types';\nimport { runAction } from '../utils/helpers';\nimport action from './action';\n\n/**\n * `$ create project in Strapi cloud`\n */\nconst command: StrapiCloudCommand = ({ ctx }) => {\n  return createCommand('cloud:create-project')\n    .description('Create a Strapi Cloud project')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('cloud:create-project', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../types';\n\nexport { action, command };\n\nexport default {\n  name: 'create-project',\n  description: 'Create a new project',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import type { CLIContext } from '../types';\nimport { cloudApiFactory, tokenServiceFactory } from '../services';\nimport { promptLogin } from '../login/action';\n\nexport default async (ctx: CLIContext) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  const { logger } = ctx;\n\n  if (!token) {\n    return;\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  const spinner = logger.spinner('Fetching your projects...').start();\n\n  try {\n    const {\n      data: { data: projectList },\n    } = await cloudApiService.listProjects();\n    spinner.succeed();\n    logger.log(projectList);\n  } catch (e) {\n    ctx.logger.debug('Failed to list projects', e);\n    spinner.fail('An error occurred while fetching your projects from Strapi Cloud.');\n  }\n};\n","import { type StrapiCloudCommand } from '../types';\nimport { runAction } from '../utils/helpers';\nimport action from './action';\n\n/**\n * `$ list project from the cloud`\n */\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\n  command\n    .command('cloud:projects')\n    .alias('projects')\n    .description('List Strapi Cloud projects')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('projects', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../types';\n\nexport { action, command };\n\nexport default {\n  name: 'list-projects',\n  description: 'List Strapi Cloud projects',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import chalk from 'chalk';\nimport type { CLIContext } from '../../types';\nimport { cloudApiFactory, tokenServiceFactory } from '../../services';\nimport { promptLogin } from '../../login/action';\nimport { trackEvent } from '../../utils/analytics';\nimport { getLocalProject } from '../../utils/get-local-config';\n\nexport default async (ctx: CLIContext) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  const { logger } = ctx;\n\n  if (!token) {\n    return;\n  }\n\n  const project = await getLocalProject(ctx);\n  if (!project) {\n    ctx.logger.debug(`No valid local project configuration was found.`);\n    return;\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  const spinner = logger.spinner('Fetching environments...').start();\n  await trackEvent(ctx, cloudApiService, 'willListEnvironment', {\n    projectInternalName: project.name,\n  });\n\n  try {\n    const {\n      data: { data: environmentsList },\n    } = await cloudApiService.listEnvironments({ name: project.name });\n    spinner.succeed();\n    logger.log(environmentsList);\n    await trackEvent(ctx, cloudApiService, 'didListEnvironment', {\n      projectInternalName: project.name,\n    });\n  } catch (e: any) {\n    if (e.response && e.response.status === 404) {\n      spinner.succeed();\n      logger.warn(\n        `\\nThe project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\n          'link'\n        )} command`\n      );\n    } else {\n      spinner.fail('An error occurred while fetching environments data from Strapi Cloud.');\n      logger.debug('Failed to list environments', e);\n    }\n    await trackEvent(ctx, cloudApiService, 'didNotListEnvironment', {\n      projectInternalName: project.name,\n    });\n  }\n};\n","import { Command } from 'commander';\nimport { runAction } from '../utils/helpers';\nimport listAction from '../environment/list/action';\n\nexport function defineCloudNamespace(command: Command, ctx: unknown): Command {\n  const cloud = command.command('cloud').description('Manage Strapi Cloud projects');\n\n  // Define cloud namespace aliases:\n  cloud\n    .command('environments')\n    .description('Alias for cloud environment list')\n    .action(() => runAction('list', listAction)(ctx));\n  return cloud;\n}\n","import { Command } from 'commander';\nimport { defineCloudNamespace } from '../cloud/command';\n\nlet environmentCmd: Command | null = null;\n\nexport const initializeEnvironmentCommand = (command: Command, ctx: unknown): Command => {\n  if (!environmentCmd) {\n    const cloud = defineCloudNamespace(command, ctx);\n    environmentCmd = cloud.command('environment').description('Manage environments');\n  }\n  return environmentCmd;\n};\n","import { type StrapiCloudCommand } from '../../types';\nimport { runAction } from '../../utils/helpers';\nimport action from './action';\nimport { initializeEnvironmentCommand } from '../command';\n\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\n  const environmentCmd = initializeEnvironmentCommand(command, ctx);\n\n  environmentCmd\n    .command('list')\n    .description('List Strapi Cloud project environments')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('list', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../../types';\n\nexport { action, command };\n\nexport default {\n  name: 'list-environments',\n  description: 'List Strapi Cloud environments',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import chalk from 'chalk';\nimport inquirer, { type Answers } from 'inquirer';\nimport { EnvironmentDetails, ProjectInput } from '../../services/cli-api';\nimport type { CLIContext, CloudApiService } from '../../types';\nimport { cloudApiFactory, tokenServiceFactory, local } from '../../services';\nimport { promptLogin } from '../../login/action';\nimport { trackEvent } from '../../utils/analytics';\nimport { getLocalProject } from '../../utils/get-local-config';\n\nconst QUIT_OPTION = 'Quit';\n\ninterface LinkEnvironmentAnswer extends Answers {\n  targetEnvironment: string;\n}\n\ninterface LinkEnvironmentInput extends Answers {\n  targetEnvironment: string;\n}\n\ntype EnvironmentsList = EnvironmentDetails[];\n\nexport default async (ctx: CLIContext) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  const { logger } = ctx;\n\n  if (!token) {\n    return;\n  }\n\n  const project = await getLocalProject(ctx);\n\n  if (!project) {\n    logger.debug(`No valid local project configuration was found.`);\n    return;\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  const environments = await getEnvironmentsList(ctx, cloudApiService, project);\n\n  if (!environments) {\n    logger.debug(`Fetching environments failed.`);\n    return;\n  }\n\n  if (environments.length === 0) {\n    logger.log(\n      `The only available environment is already linked. You can add a new one from your project settings on the Strapi Cloud dashboard.`\n    );\n    return;\n  }\n\n  const answer: LinkEnvironmentAnswer | null = await promptUserForEnvironment(ctx, environments);\n\n  if (!answer) {\n    return;\n  }\n\n  await trackEvent(ctx, cloudApiService, 'willLinkEnvironment', {\n    projectName: project.name,\n    environmentName: answer.targetEnvironment,\n  });\n\n  try {\n    await local.patch({ project: { targetEnvironment: answer.targetEnvironment } });\n  } catch (e) {\n    await trackEvent(ctx, cloudApiService, 'didNotLinkEnvironment', {\n      projectName: project.name,\n      environmentName: answer.targetEnvironment,\n    });\n    logger.debug('Failed to link environment', e);\n    logger.error(\n      'Failed to link the environment. If this issue persists, try re-linking your project or contact support.'\n    );\n    process.exit(1);\n  }\n\n  logger.log(\n    ` You have successfully linked your project to ${chalk.cyan(answer.targetEnvironment)}, on ${chalk.cyan(project.displayName)}. You are now able to deploy your project.`\n  );\n  await trackEvent(ctx, cloudApiService, 'didLinkEnvironment', {\n    projectName: project.name,\n    environmentName: answer.targetEnvironment,\n  });\n};\n\nasync function promptUserForEnvironment(\n  ctx: CLIContext,\n  environments: EnvironmentsList\n): Promise<LinkEnvironmentAnswer | null> {\n  const { logger } = ctx;\n\n  try {\n    const answer: LinkEnvironmentInput = await inquirer.prompt([\n      {\n        type: 'list',\n        name: 'targetEnvironment',\n        message: 'Which environment do you want to link?',\n        choices: [...environments, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\n      },\n    ]);\n\n    if (!answer.targetEnvironment) {\n      return null;\n    }\n\n    return answer;\n  } catch (e) {\n    logger.debug('Failed to get user input', e);\n    logger.error('An error occurred while trying to get your environment selection.');\n    return null;\n  }\n}\n\nasync function getEnvironmentsList(\n  ctx: CLIContext,\n  cloudApiService: CloudApiService,\n  project: ProjectInput\n) {\n  const spinner = ctx.logger.spinner('Fetching environments...\\n').start();\n\n  try {\n    const {\n      data: { data: environmentsList },\n    } = await cloudApiService.listLinkEnvironments({ name: project.name });\n\n    if (!Array.isArray(environmentsList) || environmentsList.length === 0) {\n      throw new Error('Environments not found in server response');\n    }\n    spinner.succeed();\n    return environmentsList.filter(\n      (environment: EnvironmentDetails) => environment.name !== project.targetEnvironment\n    );\n  } catch (e: any) {\n    if (e.response && e.response.status === 404) {\n      spinner.succeed();\n      ctx.logger.warn(\n        `\\nThe project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\n          'link'\n        )} command.`\n      );\n    } else {\n      spinner.fail('An error occurred while fetching environments data from Strapi Cloud.');\n      ctx.logger.debug('Failed to list environments', e);\n    }\n  }\n}\n","import { type StrapiCloudCommand } from '../../types';\nimport { runAction } from '../../utils/helpers';\nimport action from './action';\nimport { initializeEnvironmentCommand } from '../command';\n\nconst command: StrapiCloudCommand = ({ command, ctx }) => {\n  const environmentCmd = initializeEnvironmentCommand(command, ctx);\n\n  environmentCmd\n    .command('link')\n    .description('Link project to a specific Strapi Cloud project environment')\n    .option('-d, --debug', 'Enable debugging mode with verbose logs')\n    .option('-s, --silent', \"Don't log anything\")\n    .action(() => runAction('link', action)(ctx));\n};\n\nexport default command;\n","import action from './action';\nimport command from './command';\nimport type { StrapiCloudCommandInfo } from '../../types';\n\nexport { action, command };\n\nexport default {\n  name: 'link-environment',\n  description: 'Link Strapi Cloud environment to a local project',\n  action,\n  command,\n} as StrapiCloudCommandInfo;\n","import { Command } from 'commander';\nimport crypto from 'crypto';\nimport deployProject from './deploy-project';\nimport link from './link';\nimport login from './login';\nimport logout from './logout';\nimport createProject from './create-project';\nimport listProjects from './list-projects';\nimport listEnvironments from './environment/list';\nimport linkEnvironment from './environment/link';\nimport { CLIContext } from './types';\nimport { getLocalConfig, saveLocalConfig } from './config/local';\n\nexport const cli = {\n  deployProject,\n  link,\n  login,\n  logout,\n  createProject,\n  linkEnvironment,\n  listProjects,\n  listEnvironments,\n};\n\nconst cloudCommands = [\n  deployProject,\n  link,\n  login,\n  logout,\n  linkEnvironment,\n  listProjects,\n  listEnvironments,\n];\n\nasync function initCloudCLIConfig() {\n  const localConfig = await getLocalConfig();\n\n  if (!localConfig.deviceId) {\n    localConfig.deviceId = crypto.randomUUID();\n  }\n\n  await saveLocalConfig(localConfig);\n}\n\nexport async function buildStrapiCloudCommands({\n  command,\n  ctx,\n  argv,\n}: {\n  command: Command;\n  ctx: CLIContext;\n  argv: string[];\n}) {\n  await initCloudCLIConfig();\n  // Load all commands\n  for (const cloudCommand of cloudCommands) {\n    try {\n      // Add this command to the Commander command object\n      const subCommand = await cloudCommand.command({ command, ctx, argv });\n\n      if (subCommand) {\n        command.addCommand(subCommand);\n      }\n    } catch (e) {\n      console.error(`Failed to load command ${cloudCommand.name}`, e);\n    }\n  }\n}\n\nexport * as services from './services';\n\nexport * from './types';\n"],"names":["apiConfig","apiBaseUrl","env","dashboardBaseUrl","IGNORED_PATTERNS","isIgnoredFile","folderPath","file","ignorePatterns","push","relativeFilePath","path","join","isIgnored","pattern","startsWith","minimatch","slice","matchBase","dot","basename","getFiles","dirPath","subfolder","arrayOfFiles","entries","fse","readdir","entry","entryPathFromRoot","entryPath","relative","statSync","isDirectory","subFiles","readGitignore","gitignorePath","resolve","pathExist","pathExists","gitignoreContent","readFile","split","filter","line","Boolean","trim","compressFilesToTar","storagePath","folderToCompress","filename","filesToCompress","tar","c","gzip","APP_FOLDER_NAME","CONFIG_FILENAME","checkDirectoryExists","directoryPath","fsStat","lstat","e","getTmpStoragePath","os","tmpdir","ensureDir","getConfigPath","configDirs","XDGAppPaths","configPath","find","getLocalConfig","configFilePath","ensureFile","readJSON","encoding","throws","saveLocalConfig","data","writeJson","spaces","mode","VERSION","cloudApiFactory","logger","token","localConfig","customHeaders","deviceId","packageJson","version","type","Intl","DateTimeFormat","resolvedOptions","locale","process","versions","node","axiosCloudAPI","axios","create","baseURL","headers","defaults","Authorization","deploy","filePath","project","onUploadProgress","post","name","createReadStream","targetEnvironment","createProject","nodeVersion","region","plan","response","projectName","id","status","getUserInfo","get","config","Error","error","debug","listProjects","listLinkProjects","listEnvironments","listLinkEnvironments","getProject","track","event","payload","LOCAL_SAVE_FILENAME","getFilePath","cwd","save","pathToFile","dirname","retrieve","patch","patchData","existingData","newData","merge","deleteConfig","remove","cliConfig","tokenServiceFactory","cloudApiService","saveToken","str","appConfig","retrieveToken","isTokenValid","undefined","validateToken","idToken","jwksUrl","client","jwksClient","jwksUri","getKey","header","callback","getSigningKey","kid","key","publicKey","rsaPublicKey","decodedToken","jwt","decode","complete","warn","Promise","reject","verify","err","exp","Math","floor","Date","now","eraseToken","getValidToken","ctx","loginAction","log","stringifyArg","arg","stringify","createLogger","options","silent","timestamp","state","errors","warning","warnings","args","console","chalk","cyan","toISOString","map","info","blue","success","green","yellow","red","spinner","text","succeed","fail","start","isSpinning","ora","progressBar","totalSize","stop","update","cliProgress","SingleBar","format","barCompleteChar","barIncompleteChar","hideCursor","forceRedraw","yup","object","string","required","exports","lazy","value","Object","reduce","acc","types","optional","source","module","import","require","default","noUnknown","matches","loadPkg","pkgPath","pkgUp","buffer","pkg","JSON","parse","toString","EOL","getProjectNameFromPackageJson","trackEvent","eventName","eventData","openModule","promptLogin","inquirer","prompt","message","login","loginSuccessful","tokenService","existingToken","userInfo","email","underline","client_id","clientId","scope","audience","deviceAuthResponse","deviceCodeAuthUrl","catch","then","open","verification_uri_complete","user_code","tokenPayload","grant_type","device_code","isAuthenticated","authenticate","spinnerFail","tokenResponse","tokenUrl","authTokenData","id_token","cloudApiServiceWithToken","access_token","loginMethod","includes","setTimeout","interval","questionDefaultValuesMapper","questionsMap","questions","question","questionName","questionDefault","getDefaultsFromQuestions","getProjectNodeVersionDefault","currentNodeVersion","Array","isArray","choices","choice","handleError","AxiosError","errorMessage","cloudApi","projectInput","local","defaultAnswersMapper","projectCreation","defaultValues","projectAnswersDefaulted","projectAnswers","notificationServiceFactory","url","CONN_TIMEOUT","Number","notificationsConnectionTimeout","es","EventSource","timeoutId","resetTimeout","clearTimeout","close","onopen","onmessage","buildLogsServiceFactory","buildLogsConnectionTimeout","MAX_RETRIES","buildLogsMaxRetries","retries","connect","clearExistingTimeout","addEventListener","msg","onerror","boxenOptions","padding","margin","align","borderColor","borderStyle","QUIT_OPTION","promptForEnvironment","environments","selectedEnvironment","grey","exit","upload","maxProjectFileSize","projectFolder","hashname","crypto","createHash","digest","compressedFilename","tarFilePath","fileStats","stat","size","progressEvent","total","percentage","round","loaded","build_id","createProjectAction","getConfig","validateEnvironment","environment","getTargetEnvironment","opts","length","hasPendingOrLiveDeployment","hasPendingDeployment","hasLiveDeployment","projectData","environmentsDetails","metadata","isProjectSuspended","suspendedAt","dashboardUrls","projectInternalName","notificationService","buildLogsService","maxSize","parseInt","isNaN","force","shouldDisplayWarning","boxen","projectDeployment","confirmationText","confirm","displayName","buildId","assertCwdContainsStrapiProject","logErrorAndExit","pkgJSON","has","runAction","action","command","createCommand","alias","description","option","getLocalProject","promptForRelink","existingConfig","shouldRelink","currentProjectName","getProjectsList","projectList","projects","isMaintainer","getUserSelection","answer","linkProject","confirmAction","cancelledProjectName","addHelpText","baseUrl","encodeURIComponent","environmentsList","defineCloudNamespace","cloud","listAction","environmentCmd","initializeEnvironmentCommand","getEnvironmentsList","promptUserForEnvironment","environmentName","cli","deployProject","link","logout","linkEnvironment","cloudCommands","initCloudCLIConfig","randomUUID","buildStrapiCloudCommands","argv","cloudCommand","subCommand","addCommand"],"mappings":"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"}