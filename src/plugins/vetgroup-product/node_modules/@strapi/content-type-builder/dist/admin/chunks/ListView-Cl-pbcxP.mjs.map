{"version":3,"file":"ListView-Cl-pbcxP.mjs","sources":["../../../admin/src/components/BoxWrapper.tsx","../../../admin/src/components/Tr.tsx","../../../admin/src/components/ComponentList.tsx","../../../admin/src/components/ComponentCard/ComponentIcon/ComponentIcon.tsx","../../../admin/src/components/ComponentCard/ComponentCard.tsx","../../../admin/src/components/DynamicZoneList.tsx","../../../admin/src/components/NestedFooter.tsx","../../../admin/src/components/List.tsx","../../../admin/src/icons/Curve.tsx","../../../admin/src/components/DisplayedType.tsx","../../../admin/src/components/UpperFirst.tsx","../../../admin/src/components/ListRow.tsx","../../../admin/src/utils/getAttributeDisplayedType.ts","../../../admin/src/pages/ListView/LinkToCMSettingsView.tsx","../../../admin/src/pages/ListView/ListView.tsx"],"sourcesContent":["import { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nexport const BoxWrapper = styled(Box)`\n  table {\n    width: 100%;\n    white-space: nowrap;\n  }\n\n  thead {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.neutral150};\n\n    tr {\n      border-top: 0;\n    }\n  }\n\n  tr {\n    border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n\n    & td,\n    & th {\n      padding: ${({ theme }) => theme.spaces[4]};\n    }\n\n    & td:first-of-type,\n    & th:first-of-type {\n      padding: 0 ${({ theme }) => theme.spaces[1]};\n    }\n  }\n\n  th,\n  td {\n    vertical-align: middle;\n    text-align: left;\n    color: ${({ theme }) => theme.colors.neutral600};\n    outline-offset: -4px;\n  }\n`;\n","import { styled } from 'styled-components';\n\n// Keep component-row for css specificity\nexport const Tr = styled.tr<{\n  $isFromDynamicZone?: boolean;\n  $isChildOfDynamicZone?: boolean;\n}>`\n  &.component-row,\n  &.dynamiczone-row {\n    position: relative;\n    border-top: none !important;\n\n    table tr:first-child {\n      border-top: none;\n    }\n\n    > td:first-of-type {\n      padding: 0 0 0 2rem;\n      position: relative;\n\n      &::before {\n        content: '';\n        width: 0.4rem;\n        height: calc(100% - 40px);\n        position: absolute;\n        top: -7px;\n        left: 2.6rem;\n        border-radius: 4px;\n\n        ${({ $isFromDynamicZone, $isChildOfDynamicZone, theme }) => {\n          if ($isChildOfDynamicZone) {\n            return `background-color: ${theme.colors.primary200};`;\n          }\n\n          if ($isFromDynamicZone) {\n            return `background-color: ${theme.colors.primary200};`;\n          }\n\n          return `background: ${theme.colors.neutral150};`;\n        }}\n      }\n    }\n  }\n\n  &.dynamiczone-row > td:first-of-type {\n    padding: 0;\n  }\n`;\n","import get from 'lodash/get';\n\nimport { useDataManager } from '../hooks/useDataManager';\n\nimport { List } from './List';\nimport { Tr } from './Tr';\n\nimport type { Internal } from '@strapi/types';\n\ninterface ComponentListProps {\n  component: Internal.UID.Component;\n  customRowComponent: any;\n  firstLoopComponentUid?: string;\n  isFromDynamicZone?: boolean;\n  isNestedInDZComponent?: boolean;\n}\n\nexport const ComponentList = ({\n  customRowComponent,\n  component,\n  isFromDynamicZone = false,\n  isNestedInDZComponent = false,\n  firstLoopComponentUid,\n}: ComponentListProps) => {\n  const { modifiedData } = useDataManager();\n  const {\n    schema: { attributes },\n  } = get(modifiedData, ['components', component], {\n    schema: { attributes: [] },\n  });\n\n  return (\n    <Tr $isChildOfDynamicZone={isFromDynamicZone} className=\"component-row\">\n      <td colSpan={12}>\n        <List\n          customRowComponent={customRowComponent}\n          items={attributes}\n          targetUid={component}\n          firstLoopComponentUid={firstLoopComponentUid || component}\n          editTarget=\"components\"\n          isFromDynamicZone={isFromDynamicZone}\n          isNestedInDZComponent={isNestedInDZComponent}\n          isSub\n          secondLoopComponentUid={firstLoopComponentUid ? component : null}\n        />\n      </td>\n    </Tr>\n  );\n};\n","import { Flex } from '@strapi/design-system';\n\nimport { COMPONENT_ICONS } from '../../IconPicker/constants';\n\ninterface ComponentIconProps {\n  isActive?: boolean;\n  icon?: keyof typeof COMPONENT_ICONS;\n}\n\nexport const ComponentIcon = ({ isActive = false, icon = 'dashboard' }: ComponentIconProps) => {\n  const Icon = COMPONENT_ICONS[icon] || COMPONENT_ICONS.dashboard;\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      background={isActive ? 'primary200' : 'neutral200'}\n      justifyContent=\"center\"\n      height={8}\n      width={8}\n      borderRadius=\"50%\"\n    >\n      <Icon height=\"2rem\" width=\"2rem\" />\n    </Flex>\n  );\n};\n","import { Box, Flex, Typography } from '@strapi/design-system';\nimport { Cross } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../../hooks/useDataManager';\n\nimport { ComponentIcon } from './ComponentIcon';\n\ninterface ComponentCardProps {\n  component: string;\n  dzName: string;\n  index: number;\n  isActive?: boolean;\n  isInDevelopmentMode?: boolean;\n  onClick?: () => void;\n}\n\nconst CloseButton = styled(Box)`\n  position: absolute;\n  display: none;\n  top: 5px;\n  right: 0.8rem;\n\n  svg {\n    width: 1rem;\n    height: 1rem;\n\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\nconst ComponentBox = styled(Flex)`\n  width: 14rem;\n  height: 8rem;\n  position: relative;\n  border: 1px solid ${({ theme }) => theme.colors.neutral200};\n  background: ${({ theme }) => theme.colors.neutral100};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  max-width: 100%;\n\n  &.active,\n  &:focus,\n  &:hover {\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n    background: ${({ theme }) => theme.colors.primary100};\n    color: ${({ theme }) => theme.colors.primary600};\n\n    ${CloseButton} {\n      display: block;\n    }\n\n    /* > ComponentIcon */\n    > div:first-child {\n      background: ${({ theme }) => theme.colors.primary200};\n      color: ${({ theme }) => theme.colors.primary600};\n\n      svg {\n        path {\n          fill: ${({ theme }) => theme.colors.primary600};\n        }\n      }\n    }\n  }\n`;\n\nexport const ComponentCard = ({\n  component,\n  dzName,\n  index,\n  isActive = false,\n  isInDevelopmentMode = false,\n  onClick,\n}: ComponentCardProps) => {\n  const { modifiedData, removeComponentFromDynamicZone } = useDataManager();\n  const {\n    schema: { icon, displayName },\n  } = get(modifiedData, ['components', component], { schema: {} });\n\n  const onClose = (e: any) => {\n    e.stopPropagation();\n    removeComponentFromDynamicZone(dzName, index);\n  };\n\n  return (\n    <ComponentBox\n      alignItems=\"center\"\n      direction=\"column\"\n      className={isActive ? 'active' : ''}\n      borderRadius=\"borderRadius\"\n      justifyContent=\"center\"\n      paddingLeft={4}\n      paddingRight={4}\n      shrink={0}\n      onClick={onClick}\n      role=\"tab\"\n      tabIndex={isActive ? 0 : -1}\n      cursor=\"pointer\"\n      aria-selected={isActive}\n      aria-controls={`dz-${dzName}-panel-${index}`}\n      id={`dz-${dzName}-tab-${index}`}\n    >\n      <ComponentIcon icon={icon} isActive={isActive} />\n\n      <Box marginTop={1} maxWidth=\"100%\">\n        <Typography variant=\"pi\" fontWeight=\"bold\" ellipsis>\n          {displayName}\n        </Typography>\n      </Box>\n\n      {isInDevelopmentMode && (\n        <CloseButton tag=\"button\" onClick={onClose}>\n          <Cross />\n        </CloseButton>\n      )}\n    </ComponentBox>\n  );\n};\n","import { useState } from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { getTrad } from '../utils/getTrad';\n\nimport { ComponentCard } from './ComponentCard';\nimport { ComponentList } from './ComponentList';\nimport { Tr } from './Tr';\n\nimport type { Internal } from '@strapi/types';\n\ninterface DynamicZoneListProps {\n  addComponent: (name?: string) => void;\n  components: Array<string>;\n  customRowComponent?: () => void;\n  name?: string;\n  targetUid: Internal.UID.Component;\n}\n\nconst StyledAddIcon = styled(Plus)`\n  width: 3.2rem;\n  height: 3.2rem;\n  padding: 0.9rem;\n  border-radius: 6.4rem;\n  background: ${({ theme }) => theme.colors.primary100};\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nconst FixedBox = styled(Box)`\n  height: 9rem;\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n`;\n\nconst ScrollableStack = styled(Flex)`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nconst ComponentContentBox = styled(Box)`\n  padding-top: 9rem;\n`;\n\nconst ComponentStack = styled(Flex)`\n  flex-shrink: 0;\n  width: 14rem;\n  height: 8rem;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const DynamicZoneList = ({\n  customRowComponent,\n  components = [],\n  addComponent,\n  name,\n  targetUid,\n}: DynamicZoneListProps) => {\n  const { isInDevelopmentMode } = useDataManager();\n  const [activeTab, setActiveTab] = useState(0);\n  const { formatMessage } = useIntl();\n\n  const toggle = (tab: number) => {\n    if (activeTab !== tab) {\n      setActiveTab(tab);\n    }\n  };\n\n  const handleClickAdd = () => {\n    addComponent(name);\n  };\n\n  return (\n    <Tr className=\"dynamiczone-row\" $isFromDynamicZone>\n      <td colSpan={12}>\n        <FixedBox paddingLeft={8}>\n          <ScrollableStack gap={2}>\n            {isInDevelopmentMode && (\n              <button type=\"button\" onClick={handleClickAdd}>\n                <ComponentStack direction=\"column\" alignItems=\"stretch\" gap={1}>\n                  <StyledAddIcon />\n                  <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"primary600\">\n                    {formatMessage({\n                      id: getTrad('button.component.add'),\n                      defaultMessage: 'Add a component',\n                    })}\n                  </Typography>\n                </ComponentStack>\n              </button>\n            )}\n            <Flex role=\"tablist\" gap={2}>\n              {components.map((component, index) => {\n                return (\n                  <ComponentCard\n                    key={component}\n                    dzName={name || ''}\n                    index={index}\n                    component={component}\n                    isActive={activeTab === index}\n                    isInDevelopmentMode={isInDevelopmentMode}\n                    onClick={() => toggle(index)}\n                  />\n                );\n              })}\n            </Flex>\n          </ScrollableStack>\n        </FixedBox>\n        <ComponentContentBox>\n          {components.map((component, index) => {\n            const props = {\n              customRowComponent,\n              component,\n            };\n\n            return (\n              <Box\n                id={`dz-${name}-panel-${index}`}\n                role=\"tabpanel\"\n                aria-labelledby={`dz-${name}-tab-${index}`}\n                key={component}\n                style={{ display: activeTab === index ? 'block' : 'none' }}\n              >\n                <table>\n                  <tbody>\n                    <ComponentList\n                      {...props}\n                      isFromDynamicZone\n                      component={targetUid}\n                      key={component}\n                    />\n                  </tbody>\n                </table>\n              </Box>\n            );\n          })}\n        </ComponentContentBox>\n      </td>\n    </Tr>\n  );\n};\n","import type { ReactNode } from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst IconBox = styled(Box)`\n  height: 2.4rem;\n  width: 2.4rem;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  svg {\n    height: 1rem;\n    width: 1rem;\n  }\n\n  svg path {\n    fill: ${({ theme, color }) => theme.colors[`${color}600`]};\n  }\n`;\n\nconst ButtonBox = styled(Box)`\n  border-radius: 0 0 ${({ theme }) => theme.borderRadius} ${({ theme }) => theme.borderRadius};\n  display: block;\n  width: 100%;\n  border: none;\n  position: relative;\n  left: -0.4rem;\n`;\n\ninterface NestedTFooterProps {\n  color: string;\n  children: ReactNode;\n  icon: ReactNode;\n  onClick?: () => void;\n}\n\nexport const NestedTFooter = ({ children, icon, color, ...props }: NestedTFooterProps) => {\n  return (\n    <ButtonBox paddingBottom={4} paddingTop={4} tag=\"button\" type=\"button\" {...props}>\n      <Flex>\n        <IconBox color={color} aria-hidden background={`${color}200`}>\n          {icon}\n        </IconBox>\n        <Box paddingLeft={3}>\n          <Typography variant=\"pi\" fontWeight=\"bold\" textColor={`${color}600`}>\n            {children}\n          </Typography>\n        </Box>\n      </Flex>\n    </ButtonBox>\n  );\n};\n","import { ComponentType, Fragment } from 'react';\n\nimport { useTracking } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  EmptyStateLayout,\n  Table,\n  Tbody,\n  Td,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { useIntl } from 'react-intl';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { useFormModalNavigation } from '../hooks/useFormModalNavigation';\nimport { getTrad } from '../utils/getTrad';\n\nimport { BoxWrapper } from './BoxWrapper';\nimport { ComponentList } from './ComponentList';\nimport { DynamicZoneList } from './DynamicZoneList';\nimport { NestedTFooter } from './NestedFooter';\n\nimport type { SchemaType } from '../types';\nimport type { Internal } from '@strapi/types';\n\ninterface ListProps {\n  addComponentToDZ?: () => void;\n  customRowComponent: ComponentType<any>;\n  editTarget: SchemaType;\n  firstLoopComponentUid?: string;\n  isFromDynamicZone?: boolean;\n  isNestedInDZComponent?: boolean;\n  isMain?: boolean;\n  items: any[];\n  secondLoopComponentUid?: string | null;\n  targetUid?: Internal.UID.Schema;\n  isSub?: boolean;\n}\n\nexport const List = ({\n  addComponentToDZ,\n  customRowComponent,\n  editTarget,\n  firstLoopComponentUid,\n  isFromDynamicZone = false,\n  isMain = false,\n  isNestedInDZComponent = false,\n  isSub = false,\n  items = [],\n  secondLoopComponentUid,\n  targetUid,\n}: ListProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { isInDevelopmentMode, modifiedData, isInContentTypeView } = useDataManager();\n\n  const { onOpenModalAddField } = useFormModalNavigation();\n  const onClickAddField = () => {\n    trackUsage('hasClickedCTBAddFieldBanner');\n\n    onOpenModalAddField({ forTarget: editTarget, targetUid });\n  };\n\n  if (!targetUid) {\n    return (\n      <Table colCount={2} rowCount={2}>\n        <Thead>\n          <Tr>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n              </Typography>\n            </Th>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n              </Typography>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              <EmptyStateLayout\n                content={formatMessage({\n                  id: getTrad('table.content.create-first-content-type'),\n                  defaultMessage: 'Create your first Collection-Type',\n                })}\n                hasRadius\n                icon={<EmptyDocuments width=\"16rem\" />}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      </Table>\n    );\n  }\n\n  if (items.length === 0 && isMain) {\n    return (\n      <Table colCount={2} rowCount={2}>\n        <Thead>\n          <Tr>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n              </Typography>\n            </Th>\n            <Th>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n              </Typography>\n            </Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          <Tr>\n            <Td colSpan={2}>\n              <EmptyStateLayout\n                action={\n                  <Button\n                    onClick={onClickAddField}\n                    size=\"L\"\n                    startIcon={<Plus />}\n                    variant=\"secondary\"\n                  >\n                    {formatMessage({\n                      id: getTrad('table.button.no-fields'),\n                      defaultMessage: 'Add new field',\n                    })}\n                  </Button>\n                }\n                content={formatMessage(\n                  isInContentTypeView\n                    ? {\n                        id: getTrad('table.content.no-fields.collection-type'),\n                        defaultMessage: 'Add your first field to this Collection-Type',\n                      }\n                    : {\n                        id: getTrad('table.content.no-fields.component'),\n                        defaultMessage: 'Add your first field to this component',\n                      }\n                )}\n                hasRadius\n                icon={<EmptyDocuments width=\"16rem\" />}\n              />\n            </Td>\n          </Tr>\n        </Tbody>\n      </Table>\n    );\n  }\n\n  return (\n    <BoxWrapper>\n      <Box\n        paddingLeft={6}\n        paddingRight={isMain ? 6 : 0}\n        {...(isMain && { style: { overflowX: 'auto' } })}\n      >\n        <table>\n          {isMain && (\n            <thead>\n              <tr>\n                <th>\n                  <Typography variant=\"sigma\" textColor=\"neutral800\">\n                    {formatMessage({ id: 'global.name', defaultMessage: 'Name' })}\n                  </Typography>\n                </th>\n                <th colSpan={2}>\n                  <Typography variant=\"sigma\" textColor=\"neutral800\">\n                    {formatMessage({ id: 'global.type', defaultMessage: 'Type' })}\n                  </Typography>\n                </th>\n              </tr>\n            </thead>\n          )}\n          <tbody>\n            {items.map((item) => {\n              const { type } = item;\n              const CustomRow = customRowComponent;\n\n              return (\n                <Fragment key={item.name}>\n                  <CustomRow\n                    {...item}\n                    isNestedInDZComponent={isNestedInDZComponent}\n                    targetUid={targetUid}\n                    editTarget={editTarget}\n                    firstLoopComponentUid={firstLoopComponentUid}\n                    isFromDynamicZone={isFromDynamicZone}\n                    secondLoopComponentUid={secondLoopComponentUid}\n                  />\n\n                  {type === 'component' && (\n                    <ComponentList\n                      {...item}\n                      customRowComponent={customRowComponent}\n                      targetUid={targetUid}\n                      isNestedInDZComponent={isFromDynamicZone}\n                      editTarget={editTarget}\n                      firstLoopComponentUid={firstLoopComponentUid}\n                    />\n                  )}\n\n                  {type === 'dynamiczone' && (\n                    <DynamicZoneList\n                      {...item}\n                      customRowComponent={customRowComponent}\n                      addComponent={addComponentToDZ}\n                      targetUid={targetUid}\n                    />\n                  )}\n                </Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n      </Box>\n\n      {isMain && isInDevelopmentMode && (\n        <TFooter cursor=\"pointer\" icon={<Plus />} onClick={onClickAddField}>\n          {formatMessage({\n            id: getTrad(\n              `form.button.add.field.to.${\n                modifiedData.contentType\n                  ? modifiedData.contentType.schema.kind\n                  : editTarget || 'collectionType'\n              }`\n            ),\n            defaultMessage: 'Add another field',\n          })}\n        </TFooter>\n      )}\n      {isSub && isInDevelopmentMode && !isFromDynamicZone && (\n        <NestedTFooter\n          icon={<Plus />}\n          onClick={onClickAddField}\n          color={isFromDynamicZone ? 'primary' : 'neutral'}\n        >\n          {formatMessage({\n            id: getTrad(`form.button.add.field.to.component`),\n            defaultMessage: 'Add another field',\n          })}\n        </NestedTFooter>\n      )}\n    </BoxWrapper>\n  );\n};\n","import { Box } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nconst StyledBox = styled(Box)`\n  position: absolute;\n  left: -1.8rem;\n  top: 0px;\n\n  &:before {\n    content: '';\n    width: 0.4rem;\n    height: 1.2rem;\n    background: ${({ theme, color }) => theme.colors[color!]};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, color }) => theme.colors[color!]};\n  }\n`;\n\ninterface CurveProps {\n  color: string;\n}\n\nexport const Curve = (props: CurveProps) => (\n  <StyledBox>\n    <Svg\n      width=\"20\"\n      height=\"23\"\n      viewBox=\"0 0 20 23\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n      />\n    </Svg>\n  </StyledBox>\n);\n","import { Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../utils/getTrad';\n\ntype DisplayedTypeProps = {\n  type: string;\n  customField?: string | null;\n  repeatable?: boolean;\n};\n\nexport const DisplayedType = ({\n  type,\n  customField = null,\n  repeatable = false,\n}: DisplayedTypeProps) => {\n  const { formatMessage } = useIntl();\n\n  let readableType = type;\n\n  if (['integer', 'biginteger', 'float', 'decimal'].includes(type)) {\n    readableType = 'number';\n  } else if (['string'].includes(type)) {\n    readableType = 'text';\n  }\n\n  if (customField) {\n    return (\n      <Typography>\n        {formatMessage({\n          id: getTrad('attribute.customField'),\n          defaultMessage: 'Custom field',\n        })}\n      </Typography>\n    );\n  }\n\n  return (\n    <Typography textColor=\"neutral800\">\n      {formatMessage({\n        id: getTrad(`attribute.${readableType}`),\n        defaultMessage: type,\n      })}\n      &nbsp;\n      {repeatable &&\n        formatMessage({\n          id: getTrad('component.repeatable'),\n          defaultMessage: '(repeatable)',\n        })}\n    </Typography>\n  );\n};\n","import upperFirst from 'lodash/upperFirst';\n\nexport const UpperFirst = ({ content }: { content: string }) => <>{upperFirst(content)}</>;\n","import { memo } from 'react';\n\nimport { Box, Flex, IconButton, Typography } from '@strapi/design-system';\nimport { Lock, Pencil, Trash } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useDataManager } from '../hooks/useDataManager';\nimport { Curve } from '../icons/Curve';\nimport { getTrad } from '../utils/getTrad';\n\nimport { AttributeIcon, IconByType } from './AttributeIcon';\nimport { DisplayedType } from './DisplayedType';\nimport { UpperFirst } from './UpperFirst';\n\nimport type { SchemaType } from '../types';\n\nexport const BoxWrapper = styled(Box)`\n  position: relative;\n`;\n\ntype ListRowProps = {\n  configurable?: boolean;\n  customField?: string | null;\n  editTarget: SchemaType;\n  firstLoopComponentUid?: string | null;\n  isFromDynamicZone?: boolean;\n  name: string;\n  onClick: (\n    editTarget: string,\n    targetUid: string | null,\n    attributeName: string,\n    attributeType: string,\n    customField: string | null\n  ) => void;\n  relation?: string;\n  repeatable?: boolean;\n  secondLoopComponentUid?: string | null;\n  target?: string | null;\n  targetUid?: string | null;\n  type: IconByType;\n};\n\nexport const ListRow = memo(\n  ({\n    configurable = true,\n    customField = null,\n    editTarget,\n    firstLoopComponentUid = null,\n    isFromDynamicZone = false,\n    name,\n    onClick,\n    relation = '',\n    repeatable = false,\n    secondLoopComponentUid = null,\n    target = null,\n    targetUid = null,\n    type,\n  }: ListRowProps) => {\n    const { contentTypes, isInDevelopmentMode, removeAttribute } = useDataManager();\n    const { formatMessage } = useIntl();\n\n    const isMorph = type === 'relation' && relation.includes('morph');\n    const ico = ['integer', 'biginteger', 'float', 'decimal'].includes(type) ? 'number' : type;\n\n    const contentType = get(contentTypes, [target as keyof typeof contentTypes], {});\n    const contentTypeFriendlyName = get(contentType, ['schema', 'displayName'], '');\n    const isPluginContentType = get(contentType, 'plugin');\n\n    const src = target ? 'relation' : ico;\n\n    const handleClick = () => {\n      if (isMorph) {\n        return;\n      }\n\n      if (configurable !== false) {\n        const attrType = type;\n\n        onClick(\n          // Tells where the attribute is located in the main modifiedData object : contentType, component or components\n          editTarget,\n          // main data type uid\n          secondLoopComponentUid || firstLoopComponentUid || targetUid,\n          // Name of the attribute\n          name,\n          // Type of the attribute\n          attrType,\n          customField\n        );\n      }\n    };\n    let loopNumber;\n\n    if (secondLoopComponentUid && firstLoopComponentUid) {\n      loopNumber = 2;\n    } else if (firstLoopComponentUid) {\n      loopNumber = 1;\n    } else {\n      loopNumber = 0;\n    }\n\n    return (\n      <BoxWrapper\n        tag=\"tr\"\n        onClick={isInDevelopmentMode && configurable && !isMorph ? handleClick : undefined}\n      >\n        <td style={{ position: 'relative' }}>\n          {loopNumber !== 0 && <Curve color={isFromDynamicZone ? 'primary200' : 'neutral150'} />}\n          <Flex paddingLeft={2} gap={4}>\n            <AttributeIcon type={src} customField={customField} />\n            <Typography textColor=\"neutral800\" fontWeight=\"bold\">\n              {name}\n            </Typography>\n          </Flex>\n        </td>\n        <td>\n          {target ? (\n            <Typography textColor=\"neutral800\">\n              {formatMessage({\n                id: getTrad(\n                  `modelPage.attribute.${isMorph ? 'relation-polymorphic' : 'relationWith'}`\n                ),\n                defaultMessage: 'Relation with',\n              })}\n              &nbsp;\n              <span style={{ fontStyle: 'italic' }}>\n                <UpperFirst content={contentTypeFriendlyName} />\n                &nbsp;\n                {isPluginContentType &&\n                  `(${formatMessage({\n                    id: getTrad(`from`),\n                    defaultMessage: 'from',\n                  })}: ${isPluginContentType})`}\n              </span>\n            </Typography>\n          ) : (\n            <DisplayedType type={type} customField={customField} repeatable={repeatable} />\n          )}\n        </td>\n        <td>\n          {isInDevelopmentMode ? (\n            <Flex justifyContent=\"flex-end\" onClick={(e) => e.stopPropagation()}>\n              {configurable ? (\n                <Flex gap={1}>\n                  {!isMorph && (\n                    <IconButton\n                      onClick={handleClick}\n                      label={`${formatMessage({\n                        id: 'app.utils.edit',\n                        defaultMessage: 'Edit',\n                      })} ${name}`}\n                      variant=\"ghost\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  )}\n                  <IconButton\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      removeAttribute(\n                        editTarget,\n                        name,\n                        secondLoopComponentUid || firstLoopComponentUid || ''\n                      );\n                    }}\n                    label={`${formatMessage({\n                      id: 'global.delete',\n                      defaultMessage: 'Delete',\n                    })} ${name}`}\n                    variant=\"ghost\"\n                  >\n                    <Trash />\n                  </IconButton>\n                </Flex>\n              ) : (\n                <Lock />\n              )}\n            </Flex>\n          ) : (\n            /*\n            In production mode the edit icons aren't visible, therefore\n            we need to reserve the same space, otherwise the height of the\n            row might collapse, leading to bad positioned curve icons\n          */\n            <Box height=\"3.2rem\" />\n          )}\n        </td>\n      </BoxWrapper>\n    );\n  }\n);\n","export const getAttributeDisplayedType = (type: string) => {\n  let displayedType;\n\n  switch (type) {\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      displayedType = 'date';\n      break;\n    case 'integer':\n    case 'biginteger':\n    case 'decimal':\n    case 'float':\n      displayedType = 'number';\n      break;\n    case 'string':\n    case 'text':\n      displayedType = 'text';\n      break;\n    case '':\n      displayedType = 'relation';\n      break;\n    default:\n      displayedType = type;\n  }\n\n  return displayedType;\n};\n","import { memo } from 'react';\n\nimport { type Permission, useRBAC } from '@strapi/admin/strapi-admin';\nimport { Button } from '@strapi/design-system';\nimport { ListPlus } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nconst cmPermissions: Record<string, Permission[]> = {\n  collectionTypesConfigurations: [\n    {\n      action: 'plugin::content-manager.collection-types.configure-view',\n      subject: null,\n    },\n  ],\n  componentsConfigurations: [\n    {\n      action: 'plugin::content-manager.components.configure-layout',\n      subject: null,\n    },\n  ],\n  singleTypesConfigurations: [\n    {\n      action: 'plugin::content-manager.single-types.configure-view',\n      subject: null,\n    },\n  ],\n};\n\nconst getPermission = ({\n  isInContentTypeView,\n  contentTypeKind,\n}: {\n  isInContentTypeView: boolean;\n  contentTypeKind: string;\n}) => {\n  if (isInContentTypeView) {\n    if (contentTypeKind === 'singleType') {\n      return cmPermissions.singleTypesConfigurations;\n    }\n\n    return cmPermissions.collectionTypesConfigurations;\n  }\n\n  return cmPermissions.componentsConfigurations;\n};\n\ninterface LinkToCMSettingsViewProps {\n  disabled: boolean;\n  contentTypeKind?: string;\n  isInContentTypeView?: boolean;\n  targetUid?: string;\n}\n\nexport const LinkToCMSettingsView = memo(\n  ({\n    disabled,\n    isInContentTypeView = true,\n    contentTypeKind = 'collectionType',\n    targetUid = '',\n  }: LinkToCMSettingsViewProps) => {\n    const { formatMessage } = useIntl();\n    const navigate = useNavigate();\n    const permissionsToApply = getPermission({ isInContentTypeView, contentTypeKind });\n\n    const label = formatMessage({\n      id: 'content-type-builder.form.button.configure-view',\n      defaultMessage: 'Configure the view',\n    });\n\n    const handleClick = () => {\n      if (disabled) {\n        return false;\n      }\n\n      if (isInContentTypeView) {\n        navigate(`/content-manager/collection-types/${targetUid}/configurations/edit`);\n      } else {\n        navigate(`/content-manager/components/${targetUid}/configurations/edit`);\n      }\n\n      return false;\n    };\n\n    const { isLoading, allowedActions } = useRBAC({\n      viewConfig: permissionsToApply,\n    });\n\n    if (isLoading) {\n      return null;\n    }\n\n    if (!allowedActions.canConfigureView && !allowedActions.canConfigureLayout) {\n      return null;\n    }\n\n    return (\n      <Button startIcon={<ListPlus />} variant=\"tertiary\" onClick={handleClick} disabled={disabled}>\n        {label}\n      </Button>\n    );\n  }\n);\n","import { BackButton, useTracking, Layouts } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Flex } from '@strapi/design-system';\nimport { Check, Pencil, Plus } from '@strapi/icons';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEqual from 'lodash/isEqual';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { unstable_usePrompt as usePrompt, useMatch } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { List } from '../../components/List';\nimport { ListRow } from '../../components/ListRow';\nimport { useDataManager } from '../../hooks/useDataManager';\nimport { useFormModalNavigation } from '../../hooks/useFormModalNavigation';\nimport { getAttributeDisplayedType } from '../../utils/getAttributeDisplayedType';\nimport { getTrad } from '../../utils/getTrad';\n\nimport { LinkToCMSettingsView } from './LinkToCMSettingsView';\n\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\n  overflow-wrap: anywhere;\n`;\n\nconst ListView = () => {\n  const { initialData, modifiedData, isInDevelopmentMode, isInContentTypeView, submitData } =\n    useDataManager();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const match = useMatch('/plugins/content-type-builder/:kind/:currentUID');\n\n  const {\n    onOpenModalAddComponentsToDZ,\n    onOpenModalAddField,\n    onOpenModalEditField,\n    onOpenModalEditSchema,\n    onOpenModalEditCustomField,\n  } = useFormModalNavigation();\n\n  const firstMainDataPath = isInContentTypeView ? 'contentType' : 'component';\n  const mainDataTypeAttributesPath = [firstMainDataPath, 'schema', 'attributes'];\n  const targetUid = get(modifiedData, [firstMainDataPath, 'uid']);\n  const isTemporary = get(modifiedData, [firstMainDataPath, 'isTemporary'], false);\n  const contentTypeKind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], null);\n\n  const attributes = get(modifiedData, mainDataTypeAttributesPath, []);\n  const isFromPlugin = has(initialData, [firstMainDataPath, 'plugin']);\n  const hasModelBeenModified = !isEqual(modifiedData, initialData);\n\n  const forTarget = isInContentTypeView ? 'contentType' : 'component';\n\n  const handleClickAddComponentToDZ = (dynamicZoneTarget?: string) => {\n    onOpenModalAddComponentsToDZ({ dynamicZoneTarget, targetUid });\n  };\n\n  const handleClickEditField = async (\n    forTarget: string,\n    targetUid: string,\n    attributeName: string,\n    type: string,\n    customField: any\n  ) => {\n    const attributeType = getAttributeDisplayedType(type);\n    const step = type === 'component' ? '2' : null;\n\n    if (customField) {\n      onOpenModalEditCustomField({\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        customFieldUid: customField,\n      });\n    } else {\n      onOpenModalEditField({\n        forTarget,\n        targetUid,\n        attributeName,\n        attributeType,\n        step,\n      });\n    }\n  };\n\n  let label = get(modifiedData, [firstMainDataPath, 'schema', 'displayName'], '');\n  const kind = get(modifiedData, [firstMainDataPath, 'schema', 'kind'], '');\n\n  const isCreatingFirstContentType = match?.params.currentUID === 'create-content-type';\n\n  if (!label && isCreatingFirstContentType) {\n    label = formatMessage({\n      id: getTrad('button.model.create'),\n      defaultMessage: 'Create new collection type',\n    });\n  }\n\n  const onEdit = () => {\n    const contentType = kind || firstMainDataPath;\n\n    if (contentType === 'collectionType') {\n      trackUsage('willEditNameOfContentType');\n    }\n    if (contentType === 'singleType') {\n      trackUsage('willEditNameOfSingleType');\n    }\n\n    onOpenModalEditSchema({\n      modalType: firstMainDataPath,\n      forTarget: firstMainDataPath,\n      targetUid,\n      kind: contentType,\n    });\n  };\n\n  usePrompt({\n    when: hasModelBeenModified,\n    message: formatMessage({ id: getTrad('prompt.unsaved'), defaultMessage: 'Are you sure?' }),\n  });\n\n  const primaryAction = isInDevelopmentMode && (\n    <Flex gap={2} marginLeft={2}>\n      {/* DON'T display the add field button when the content type has not been created */}\n      {!isCreatingFirstContentType && (\n        <Button\n          startIcon={<Plus />}\n          variant=\"secondary\"\n          minWidth=\"max-content\"\n          onClick={() => {\n            onOpenModalAddField({ forTarget, targetUid });\n          }}\n        >\n          {formatMessage({\n            id: getTrad('button.attributes.add.another'),\n            defaultMessage: 'Add another field',\n          })}\n        </Button>\n      )}\n      <Button\n        startIcon={<Check />}\n        onClick={async () => await submitData()}\n        type=\"submit\"\n        disabled={isEqual(modifiedData, initialData)}\n      >\n        {formatMessage({\n          id: 'global.save',\n          defaultMessage: 'Save',\n        })}\n      </Button>\n    </Flex>\n  );\n\n  const secondaryAction = isInDevelopmentMode && !isFromPlugin && !isCreatingFirstContentType && (\n    <Button startIcon={<Pencil />} variant=\"tertiary\" onClick={onEdit}>\n      {formatMessage({\n        id: 'app.utils.edit',\n        defaultMessage: 'Edit',\n      })}\n    </Button>\n  );\n\n  return (\n    <>\n      <LayoutsHeaderCustom\n        id=\"title\"\n        primaryAction={primaryAction}\n        secondaryAction={secondaryAction}\n        title={upperFirst(label)}\n        subtitle={formatMessage({\n          id: getTrad('listView.headerLayout.description'),\n          defaultMessage: 'Build the data architecture of your content',\n        })}\n        navigationAction={<BackButton />}\n      />\n      <Layouts.Content>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n          <Flex justifyContent=\"flex-end\">\n            <Flex gap={2}>\n              <LinkToCMSettingsView\n                key=\"link-to-cm-settings-view\"\n                targetUid={targetUid}\n                isInContentTypeView={isInContentTypeView}\n                contentTypeKind={contentTypeKind}\n                disabled={isCreatingFirstContentType || isTemporary}\n              />\n            </Flex>\n          </Flex>\n          <Box background=\"neutral0\" shadow=\"filterShadow\" hasRadius>\n            <List\n              items={attributes}\n              customRowComponent={(props) => <ListRow {...props} onClick={handleClickEditField} />}\n              addComponentToDZ={handleClickAddComponentToDZ}\n              targetUid={targetUid}\n              editTarget={forTarget}\n              isMain\n            />\n          </Box>\n        </Flex>\n      </Layouts.Content>\n    </>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default ListView;\n"],"names":["BoxWrapper","styled","Box","theme","colors","neutral150","spaces","neutral600","Tr","tr","$isFromDynamicZone","$isChildOfDynamicZone","primary200","ComponentList","customRowComponent","component","isFromDynamicZone","isNestedInDZComponent","firstLoopComponentUid","modifiedData","useDataManager","schema","attributes","get","_jsx","className","td","colSpan","List","items","targetUid","editTarget","isSub","secondLoopComponentUid","ComponentIcon","isActive","icon","Icon","COMPONENT_ICONS","dashboard","Flex","alignItems","background","justifyContent","height","width","borderRadius","CloseButton","primary600","ComponentBox","neutral200","neutral100","primary100","ComponentCard","dzName","index","isInDevelopmentMode","onClick","removeComponentFromDynamicZone","displayName","onClose","e","stopPropagation","_jsxs","direction","paddingLeft","paddingRight","shrink","role","tabIndex","cursor","aria-selected","aria-controls","id","marginTop","maxWidth","Typography","variant","fontWeight","ellipsis","tag","Cross","StyledAddIcon","Plus","FixedBox","ScrollableStack","ComponentContentBox","ComponentStack","DynamicZoneList","components","addComponent","name","activeTab","setActiveTab","useState","formatMessage","useIntl","toggle","tab","handleClickAdd","gap","button","type","textColor","getTrad","defaultMessage","map","props","aria-labelledby","style","display","table","tbody","_createElement","key","IconBox","color","ButtonBox","NestedTFooter","children","paddingBottom","paddingTop","aria-hidden","addComponentToDZ","isMain","trackUsage","useTracking","isInContentTypeView","onOpenModalAddField","useFormModalNavigation","onClickAddField","forTarget","Table","colCount","rowCount","Thead","Th","Tbody","Td","EmptyStateLayout","content","hasRadius","EmptyDocuments","length","action","Button","size","startIcon","overflowX","thead","th","item","CustomRow","Fragment","TFooter","contentType","kind","StyledBox","Svg","svg","Curve","viewBox","fill","xmlns","path","fillRule","clipRule","d","DisplayedType","customField","repeatable","readableType","includes","UpperFirst","_Fragment","upperFirst","ListRow","memo","configurable","relation","target","contentTypes","removeAttribute","isMorph","ico","contentTypeFriendlyName","isPluginContentType","src","handleClick","attrType","loopNumber","undefined","position","AttributeIcon","span","fontStyle","IconButton","label","Pencil","Trash","Lock","getAttributeDisplayedType","displayedType","cmPermissions","collectionTypesConfigurations","subject","componentsConfigurations","singleTypesConfigurations","getPermission","contentTypeKind","LinkToCMSettingsView","disabled","navigate","useNavigate","permissionsToApply","isLoading","allowedActions","useRBAC","viewConfig","canConfigureView","canConfigureLayout","ListPlus","LayoutsHeaderCustom","Layouts","Header","ListView","initialData","submitData","match","useMatch","onOpenModalAddComponentsToDZ","onOpenModalEditField","onOpenModalEditSchema","onOpenModalEditCustomField","firstMainDataPath","mainDataTypeAttributesPath","isTemporary","isFromPlugin","has","hasModelBeenModified","isEqual","handleClickAddComponentToDZ","dynamicZoneTarget","handleClickEditField","attributeName","attributeType","step","customFieldUid","isCreatingFirstContentType","params","currentUID","onEdit","modalType","usePrompt","when","message","primaryAction","marginLeft","minWidth","Check","secondaryAction","title","subtitle","navigationAction","BackButton","Content","shadow"],"mappings":"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"}