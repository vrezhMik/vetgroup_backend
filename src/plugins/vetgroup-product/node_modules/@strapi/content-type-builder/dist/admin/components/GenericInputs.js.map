{"version":3,"file":"GenericInputs.js","sources":["../../../admin/src/components/GenericInputs.tsx"],"sourcesContent":["/**\n * TODO: we should be using the FormRenderer from the admin to do this,\n * but the CTB has no tests or types, so we can't refactor it safely.\n * So we're just adding this to the tech debt.\n */\n\nimport * as React from 'react';\n\nimport {\n  Checkbox,\n  DatePicker,\n  DateTimePicker,\n  Field,\n  JSONInput,\n  NumberInput,\n  SingleSelect,\n  SingleSelectOption,\n  Textarea,\n  TextInput,\n  TimePicker,\n  Toggle,\n} from '@strapi/design-system';\nimport { Eye, EyeStriked } from '@strapi/icons';\nimport formatISO from 'date-fns/formatISO';\nimport isEqual from 'lodash/isEqual';\nimport { type MessageDescriptor, type PrimitiveType, useIntl } from 'react-intl';\n\nimport { parseDateValue } from '../utils/parseDateValue';\nimport { handleTimeChange, handleTimeChangeEvent } from '../utils/timeFormat';\n\nimport type { Schema } from '@strapi/types';\n\ninterface TranslationMessage extends MessageDescriptor {\n  values?: Record<string, PrimitiveType>;\n}\n\ninterface InputOption {\n  metadatas: {\n    intlLabel: TranslationMessage;\n    disabled: boolean;\n    hidden: boolean;\n  };\n  key: string;\n  value: string;\n}\n\ninterface CustomInputProps<TAttribute extends Schema.Attribute.AnyAttribute>\n  extends Omit<GenericInputProps<TAttribute>, 'customInputs'> {\n  ref?: React.Ref<HTMLElement>;\n  hint?: string | React.JSX.Element | (string | React.JSX.Element)[];\n}\n\ninterface GenericInputProps<\n  TAttribute extends Schema.Attribute.AnyAttribute = Schema.Attribute.AnyAttribute,\n> {\n  attribute?: TAttribute;\n  autoComplete?: string;\n  customInputs?: Record<string, React.ComponentType<CustomInputProps<TAttribute>>>;\n  description?: TranslationMessage;\n  disabled?: boolean;\n  error?: string | TranslationMessage;\n  intlLabel: TranslationMessage;\n  labelAction?: React.ReactNode;\n  name: string;\n  onChange: (\n    payload: {\n      target: {\n        name: string;\n        value: Schema.Attribute.Value<TAttribute>;\n        type?: string;\n      };\n    },\n    shouldSetInitialValue?: boolean\n  ) => void;\n  options?: InputOption[];\n  placeholder?: TranslationMessage;\n  required?: boolean;\n  step?: number;\n  type: string;\n  // TODO: The value depends on the input type, too complicated to handle all cases here\n  value?: Schema.Attribute.Value<TAttribute>;\n  isNullable?: boolean;\n  autoFocus?: boolean;\n}\n\nconst GenericInput = ({\n  autoComplete,\n  customInputs,\n  description,\n  disabled,\n  intlLabel,\n  labelAction,\n  error,\n  name,\n  onChange,\n  options = [],\n  placeholder,\n  required,\n  step,\n  type,\n  value: defaultValue,\n  isNullable,\n  autoFocus,\n  attribute,\n  ...rest\n}: GenericInputProps) => {\n  const { formatMessage } = useIntl();\n\n  // TODO: Workaround to get the field hint values if they exist on the type\n  const getFieldHintValue = (\n    attribute?: Schema.Attribute.AnyAttribute,\n    key?: keyof FieldSchema\n  ) => {\n    if (!attribute) return;\n\n    if (key === 'minLength' && key in attribute) {\n      return attribute[key];\n    }\n\n    if (key === 'maxLength' && key in attribute) {\n      return attribute[key];\n    }\n\n    if (key === 'max' && key in attribute) {\n      return attribute[key];\n    }\n\n    if (key === 'min' && key in attribute) {\n      return attribute[key];\n    }\n  };\n\n  const { hint } = useFieldHint({\n    description,\n    fieldSchema: {\n      minLength: getFieldHintValue(attribute, 'minLength'),\n      maxLength: getFieldHintValue(attribute, 'maxLength'),\n      max: getFieldHintValue(attribute, 'max'),\n      min: getFieldHintValue(attribute, 'min'),\n    },\n    type: attribute?.type || type,\n  });\n\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const CustomInput = customInputs ? customInputs[type] : null;\n\n  // the API always returns null, which throws an error in React,\n  // therefore we cast this case to undefined\n  const value = defaultValue ?? undefined;\n\n  /*\n   TODO: ideally we should pass in `defaultValue` and `value` for\n   inputs, in order to make them controlled components. This variable\n   acts as a fallback for now, to prevent React errors in devopment mode\n\n   See: https://github.com/strapi/strapi/pull/12861\n  */\n  const valueWithEmptyStringFallback = value ?? '';\n\n  function getErrorMessage(error: string | TranslationMessage | undefined) {\n    if (!error) {\n      return null;\n    }\n\n    if (typeof error === 'string') {\n      return formatMessage({ id: error, defaultMessage: error });\n    }\n\n    const values = {\n      ...error.values,\n    };\n\n    return formatMessage(\n      {\n        id: error.id,\n        defaultMessage: error?.defaultMessage ?? error.id,\n      },\n      values\n    );\n  }\n\n  const errorMessage = getErrorMessage(error) ?? undefined;\n\n  if (CustomInput) {\n    return (\n      <CustomInput\n        {...rest}\n        attribute={attribute}\n        description={description}\n        hint={hint}\n        disabled={disabled}\n        intlLabel={intlLabel}\n        labelAction={labelAction}\n        error={errorMessage || ''}\n        name={name}\n        onChange={onChange}\n        options={options}\n        required={required}\n        placeholder={placeholder}\n        type={type}\n        value={value}\n        autoFocus={autoFocus}\n      />\n    );\n  }\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const formattedPlaceholder = placeholder\n    ? formatMessage(\n        { id: placeholder.id, defaultMessage: placeholder.defaultMessage },\n        { ...placeholder.values }\n      )\n    : '';\n\n  const getComponent = () => {\n    switch (type) {\n      case 'json': {\n        return (\n          <JSONInput\n            value={value}\n            disabled={disabled}\n            onChange={(json) => {\n              // Default to null when the field is not required and there is no input value\n              const value =\n                attribute && 'required' in attribute && !attribute?.required && !json.length\n                  ? null\n                  : json;\n              onChange({ target: { name, value } }, false);\n            }}\n            minHeight=\"25.2rem\"\n            maxHeight=\"50.4rem\"\n          />\n        );\n      }\n      case 'bool': {\n        return (\n          <Toggle\n            checked={defaultValue === null ? null : defaultValue || false}\n            disabled={disabled}\n            offLabel={formatMessage({\n              id: 'app.components.ToggleCheckbox.off-label',\n              defaultMessage: 'False',\n            })}\n            onLabel={formatMessage({\n              id: 'app.components.ToggleCheckbox.on-label',\n              defaultMessage: 'True',\n            })}\n            onChange={(e) => {\n              onChange({ target: { name, value: e.target.checked } });\n            }}\n          />\n        );\n      }\n      case 'checkbox': {\n        return (\n          <Checkbox\n            disabled={disabled}\n            onCheckedChange={(value) => {\n              onChange({ target: { name, value } });\n            }}\n            checked={Boolean(value)}\n          >\n            {label}\n          </Checkbox>\n        );\n      }\n      case 'datetime': {\n        const dateValue = parseDateValue(value);\n        return (\n          <DateTimePicker\n            clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\n            disabled={disabled}\n            onChange={(date) => {\n              // check if date is not null or undefined\n              const formattedDate = date ? date.toISOString() : null;\n\n              onChange({ target: { name, value: formattedDate, type } });\n            }}\n            onClear={() => onChange({ target: { name, value: null, type } })}\n            placeholder={formattedPlaceholder}\n            value={dateValue}\n          />\n        );\n      }\n      case 'date': {\n        const dateValue = parseDateValue(value);\n        return (\n          <DatePicker\n            clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\n            disabled={disabled}\n            onChange={(date) => {\n              onChange({\n                target: {\n                  name,\n                  value: date ? formatISO(date, { representation: 'date' }) : null,\n                  type,\n                },\n              });\n            }}\n            onClear={() => onChange({ target: { name, value: null, type } })}\n            placeholder={formattedPlaceholder}\n            value={dateValue}\n          />\n        );\n      }\n      case 'number': {\n        return (\n          <NumberInput\n            disabled={disabled}\n            onValueChange={(value) => {\n              onChange({ target: { name, value, type } });\n            }}\n            placeholder={formattedPlaceholder}\n            step={step}\n            value={value}\n            autoFocus={autoFocus}\n          />\n        );\n      }\n      case 'email': {\n        return (\n          <TextInput\n            autoComplete={autoComplete}\n            disabled={disabled}\n            onChange={(e) => {\n              onChange({ target: { name, value: e.target.value, type } });\n            }}\n            placeholder={formattedPlaceholder}\n            type=\"email\"\n            value={valueWithEmptyStringFallback}\n            autoFocus={autoFocus}\n          />\n        );\n      }\n      case 'timestamp':\n      case 'text':\n      case 'string': {\n        return (\n          <TextInput\n            autoComplete={autoComplete}\n            disabled={disabled}\n            onChange={(e) => {\n              onChange({ target: { name, value: e.target.value, type } });\n            }}\n            placeholder={formattedPlaceholder}\n            type=\"text\"\n            value={valueWithEmptyStringFallback}\n            autoFocus={autoFocus}\n          />\n        );\n      }\n      case 'password': {\n        return (\n          <TextInput\n            autoComplete={autoComplete}\n            disabled={disabled}\n            endAction={\n              <button\n                aria-label={formatMessage({\n                  id: 'Auth.form.password.show-password',\n                  defaultMessage: 'Show password',\n                })}\n                onClick={() => {\n                  setShowPassword((prev) => !prev);\n                }}\n                style={{\n                  border: 'none',\n                  padding: 0,\n                  background: 'transparent',\n                }}\n                type=\"button\"\n              >\n                {showPassword ? <Eye fill=\"neutral500\" /> : <EyeStriked fill=\"neutral500\" />}\n              </button>\n            }\n            onChange={(e) => {\n              onChange({ target: { name, value: e.target.value, type } });\n            }}\n            placeholder={formattedPlaceholder}\n            type={showPassword ? 'text' : 'password'}\n            value={valueWithEmptyStringFallback}\n          />\n        );\n      }\n      case 'select': {\n        return (\n          <SingleSelect\n            disabled={disabled}\n            onChange={(value) => {\n              onChange({ target: { name, value, type: 'select' } });\n            }}\n            placeholder={formattedPlaceholder}\n            value={value}\n          >\n            {options.map(({ metadatas: { intlLabel, disabled, hidden }, key, value }) => {\n              return (\n                <SingleSelectOption key={key} value={value} disabled={disabled} hidden={hidden}>\n                  {formatMessage(intlLabel)}\n                </SingleSelectOption>\n              );\n            })}\n          </SingleSelect>\n        );\n      }\n      case 'textarea': {\n        return (\n          <Textarea\n            disabled={disabled}\n            onChange={(event) => onChange({ target: { name, value: event.target.value, type } })}\n            placeholder={formattedPlaceholder}\n            value={valueWithEmptyStringFallback}\n          />\n        );\n      }\n      case 'time': {\n        const formattedValue = handleTimeChange({ value, onChange, name, type });\n\n        return (\n          <TimePicker\n            clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\n            disabled={disabled}\n            onChange={(time) => handleTimeChangeEvent(onChange, name, type, time)}\n            onClear={() => handleTimeChangeEvent(onChange, name, type, undefined)}\n            value={formattedValue}\n          />\n        );\n      }\n      default: {\n        /**\n         * If there's no component for the given type, we return a disabled text input\n         * showing a \"Not supported\" title to illustrate the issue.\n         */\n        return <TextInput disabled placeholder=\"Not supported\" type=\"text\" value=\"\" />;\n      }\n    }\n  };\n\n  return (\n    <Field.Root error={errorMessage} name={name} hint={hint} required={required}>\n      {type !== 'checkbox' ? <Field.Label action={labelAction}>{label}</Field.Label> : null}\n      {getComponent()}\n      <Field.Error />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\ntype FieldSchema = {\n  minLength?: number | string;\n  maxLength?: number | string;\n  max?: number | string;\n  min?: number | string;\n};\ninterface UseFieldHintProps {\n  description?: MessageDescriptor & { values?: Record<string, PrimitiveType> };\n  fieldSchema?: FieldSchema;\n  type?: string;\n}\n\n/**\n * @description\n * A hook for generating the hint for a field\n */\nconst useFieldHint = ({ description, fieldSchema, type }: UseFieldHintProps) => {\n  const { formatMessage } = useIntl();\n\n  const buildDescription = () =>\n    description?.id\n      ? formatMessage(\n          { id: description.id, defaultMessage: description.defaultMessage },\n          { ...description.values }\n        )\n      : '';\n\n  const buildHint = () => {\n    const { maximum, minimum } = getMinMax(fieldSchema);\n    const units = getFieldUnits({\n      type,\n      minimum,\n      maximum,\n    });\n\n    const minIsNumber = typeof minimum === 'number';\n    const maxIsNumber = typeof maximum === 'number';\n    const hasMinAndMax = maxIsNumber && minIsNumber;\n    const hasMinOrMax = maxIsNumber || minIsNumber;\n\n    if (!description?.id && !hasMinOrMax) {\n      return '';\n    }\n\n    return formatMessage(\n      {\n        id: 'content-manager.form.Input.hint.text',\n        defaultMessage:\n          '{min, select, undefined {} other {min. {min}}}{divider}{max, select, undefined {} other {max. {max}}}{unit}{br}{description}',\n      },\n      {\n        min: minimum,\n        max: maximum,\n        description: buildDescription(),\n        unit: units?.message && hasMinOrMax ? formatMessage(units.message, units.values) : null,\n        divider: hasMinAndMax\n          ? formatMessage({\n              id: 'content-manager.form.Input.hint.minMaxDivider',\n              defaultMessage: ' / ',\n            })\n          : null,\n        br: hasMinOrMax ? <br /> : null,\n      }\n    );\n  };\n\n  return { hint: buildHint() };\n};\n\nconst getFieldUnits = ({\n  type,\n  minimum,\n  maximum,\n}: {\n  type?: string;\n  minimum?: number;\n  maximum?: number;\n}) => {\n  if (type && ['biginteger', 'integer', 'number'].includes(type)) {\n    return {};\n  }\n  const maxValue = Math.max(minimum || 0, maximum || 0);\n\n  return {\n    message: {\n      id: 'content-manager.form.Input.hint.character.unit',\n      defaultMessage: '{maxValue, plural, one { character} other { characters}}',\n    },\n    values: {\n      maxValue,\n    },\n  };\n};\n\nconst getMinMax = (fieldSchema?: FieldSchema) => {\n  if (!fieldSchema) {\n    return { maximum: undefined, minimum: undefined };\n  }\n\n  const { minLength, maxLength, max, min } = fieldSchema;\n\n  let minimum;\n  let maximum;\n\n  const parsedMin = Number(min);\n  const parsedMinLength = Number(minLength);\n\n  if (!Number.isNaN(parsedMin)) {\n    minimum = parsedMin;\n  } else if (!Number.isNaN(parsedMinLength)) {\n    minimum = parsedMinLength;\n  }\n\n  const parsedMax = Number(max);\n  const parsedMaxLength = Number(maxLength);\n\n  if (!Number.isNaN(parsedMax)) {\n    maximum = parsedMax;\n  } else if (!Number.isNaN(parsedMaxLength)) {\n    maximum = parsedMaxLength;\n  }\n\n  return { maximum, minimum };\n};\n\n/**\n * we've memoized this component because we use a context to store all the data in our form in the content-manager.\n * This then causes _every_ component to re-render because there are no selects incurring performance issues\n * in content-types as the content-type gets more complicated.\n */\nconst MemoizedGenericInput = React.memo(GenericInput, isEqual);\n\nexport type { GenericInputProps, CustomInputProps };\nexport { MemoizedGenericInput as GenericInput };\n"],"names":["GenericInput","autoComplete","customInputs","description","disabled","intlLabel","labelAction","error","name","onChange","options","placeholder","required","step","type","value","defaultValue","isNullable","autoFocus","attribute","rest","formatMessage","useIntl","getFieldHintValue","key","hint","useFieldHint","fieldSchema","minLength","maxLength","max","min","showPassword","setShowPassword","React","useState","CustomInput","undefined","valueWithEmptyStringFallback","getErrorMessage","id","defaultMessage","values","errorMessage","_jsx","label","formattedPlaceholder","getComponent","JSONInput","json","length","target","minHeight","maxHeight","Toggle","checked","offLabel","onLabel","e","Checkbox","onCheckedChange","Boolean","dateValue","parseDateValue","DateTimePicker","clearLabel","date","formattedDate","toISOString","onClear","DatePicker","formatISO","representation","NumberInput","onValueChange","TextInput","endAction","button","aria-label","onClick","prev","style","border","padding","background","Eye","fill","EyeStriked","SingleSelect","map","metadatas","hidden","SingleSelectOption","Textarea","event","formattedValue","handleTimeChange","TimePicker","time","handleTimeChangeEvent","_jsxs","Field","Root","Label","action","Error","Hint","buildDescription","buildHint","maximum","minimum","getMinMax","units","getFieldUnits","minIsNumber","maxIsNumber","hasMinAndMax","hasMinOrMax","unit","message","divider","br","includes","maxValue","Math","parsedMin","Number","parsedMinLength","isNaN","parsedMax","parsedMaxLength","MemoizedGenericInput","memo","isEqual"],"mappings":"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"}