{"version":3,"file":"content-type-builder.mjs","sources":["../../../../server/src/services/schema-builder/content-type-builder.ts"],"sourcesContent":["import path from 'path';\nimport _ from 'lodash';\n\nimport { strings, errors } from '@strapi/utils';\nimport type { Schema, Internal } from '@strapi/types';\nimport { isRelation, isConfigurable } from '../../utils/attributes';\nimport { typeKinds } from '../constants';\nimport createSchemaHandler from './schema-handler';\nimport { CreateContentTypeInput } from '../../controllers/validation/content-type';\n\nconst { ApplicationError } = errors;\n\nconst reuseUnsetPreviousProperties = (\n  newAttribute: Schema.Attribute.AnyAttribute,\n  oldAttribute: Schema.Attribute.AnyAttribute\n) => {\n  _.defaults(\n    newAttribute,\n    _.omit(oldAttribute, [\n      'configurable',\n      'required',\n      'private',\n      'unique',\n      'pluginOptions',\n      'inversedBy',\n      'mappedBy',\n    ])\n  );\n};\n\nexport default function createComponentBuilder() {\n  return {\n    setRelation(this: any, { key, uid, attribute }: any) {\n      if (!_.has(attribute, 'target')) {\n        return;\n      }\n\n      const targetCT = this.contentTypes.get(attribute.target);\n\n      if (!targetCT) {\n        throw new ApplicationError(`Content type ${attribute.target} not found`);\n      }\n\n      const targetAttribute = targetCT.getAttribute(attribute.targetAttribute);\n\n      if (!attribute.targetAttribute) {\n        return;\n      }\n\n      targetCT.setAttribute(\n        attribute.targetAttribute,\n        generateRelation({ key, attribute, uid, targetAttribute })\n      );\n    },\n\n    unsetRelation(this: any, attribute: any) {\n      if (!_.has(attribute, 'target')) {\n        return;\n      }\n\n      const targetCT = this.contentTypes.get(attribute.target);\n\n      const targetAttributeName = attribute.inversedBy || attribute.mappedBy;\n      const targetAttribute = targetCT.getAttribute(targetAttributeName);\n\n      if (!targetAttribute) return;\n\n      return targetCT.deleteAttribute(targetAttributeName);\n    },\n\n    createContentTypeAttributes(\n      this: any,\n      uid: string,\n      attributes: CreateContentTypeInput['attributes']\n    ) {\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      const contentType = this.contentTypes.get(uid);\n\n      // support self referencing content type relation\n      Object.keys(attributes).forEach((key) => {\n        const { target } = attributes[key];\n        if (target === '__self__') {\n          attributes[key].target = uid;\n        }\n      });\n\n      contentType.setAttributes(this.convertAttributes(attributes));\n\n      Object.keys(attributes).forEach((key) => {\n        const attribute = attributes[key];\n\n        if (isRelation(attribute)) {\n          if (['manyToMany', 'oneToOne'].includes(attribute.relation)) {\n            if (attribute.target === uid && attribute.targetAttribute !== undefined) {\n              // self referencing relation\n              const targetAttribute = attributes[attribute.targetAttribute];\n\n              if (targetAttribute.dominant === undefined) {\n                attribute.dominant = true;\n              } else {\n                attribute.dominant = false;\n              }\n            } else {\n              attribute.dominant = true;\n            }\n          }\n\n          this.setRelation({\n            key,\n            uid,\n            attribute,\n          });\n        }\n      });\n\n      return contentType;\n    },\n\n    /**\n     * Creates a content type in memory to be written to files later on\n     */\n    createContentType(this: any, infos: CreateContentTypeInput) {\n      // TODO:: check for unique uid / singularName & pluralName & collectionName\n\n      if (infos.uid && infos.uid !== createContentTypeUID(infos)) {\n        throw new ApplicationError('contentType.invalidUID');\n      }\n\n      const uid = infos.uid ?? createContentTypeUID(infos);\n\n      if (this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.alreadyExists');\n      }\n\n      const contentType = createSchemaHandler({\n        modelName: infos.singularName,\n        dir: path.join(\n          strapi.dirs.app.api,\n          infos.singularName,\n          'content-types',\n          infos.singularName\n        ),\n        filename: `schema.json`,\n      });\n\n      this.contentTypes.set(uid, contentType);\n\n      contentType\n        .setUID(uid)\n        .set('kind', infos.kind || typeKinds.COLLECTION_TYPE)\n        .set(\n          'collectionName',\n          infos.collectionName || strings.nameToCollectionName(infos.pluralName)\n        )\n        .set('info', {\n          singularName: infos.singularName,\n          pluralName: infos.pluralName,\n          displayName: infos.displayName,\n          description: infos.description,\n        })\n        .set('options', {\n          ...(infos.options ?? {}),\n          draftAndPublish: infos.draftAndPublish,\n        })\n        .set('pluginOptions', infos.pluginOptions)\n        .set('config', infos.config);\n\n      this.createContentTypeAttributes(uid, infos.attributes);\n\n      return contentType;\n    },\n\n    editContentType(this: any, infos: any) {\n      const { uid } = infos;\n\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      const contentType = this.contentTypes.get(uid);\n\n      const oldAttributes = contentType.schema.attributes;\n\n      const newAttributes = _.omitBy(infos.attributes, (attr, key) => {\n        return _.has(oldAttributes, key) && !isConfigurable(oldAttributes[key]);\n      });\n\n      const newKeys = _.difference(Object.keys(newAttributes), Object.keys(oldAttributes));\n      const deletedKeys = _.difference(Object.keys(oldAttributes), Object.keys(newAttributes));\n      const remainingKeys = _.intersection(Object.keys(oldAttributes), Object.keys(newAttributes));\n\n      // remove old relations\n      deletedKeys.forEach((key) => {\n        const attribute = oldAttributes[key];\n\n        const targetAttributeName = attribute.inversedBy || attribute.mappedBy;\n\n        // if the old relation has a target attribute. we need to remove it in the target type\n        if (isConfigurable(attribute) && isRelation(attribute) && !_.isNil(targetAttributeName)) {\n          this.unsetRelation(attribute);\n        }\n      });\n\n      remainingKeys.forEach((key) => {\n        const oldAttribute = oldAttributes[key];\n        const newAttribute = newAttributes[key];\n\n        if (!isRelation(oldAttribute) && isRelation(newAttribute)) {\n          return this.setRelation({\n            key,\n            uid,\n            attribute: newAttributes[key],\n          });\n        }\n\n        if (isRelation(oldAttribute) && !isRelation(newAttribute)) {\n          return this.unsetRelation(oldAttribute);\n        }\n\n        if (isRelation(oldAttribute) && isRelation(newAttribute)) {\n          const oldTargetAttributeName = oldAttribute.inversedBy || oldAttribute.mappedBy;\n\n          const sameRelation = oldAttribute.relation === newAttribute.relation;\n          const targetAttributeHasChanged = oldTargetAttributeName !== newAttribute.targetAttribute;\n\n          if (!sameRelation || targetAttributeHasChanged) {\n            this.unsetRelation(oldAttribute);\n          }\n\n          // keep extra options that were set manually on oldAttribute\n          reuseUnsetPreviousProperties(newAttribute, oldAttribute);\n\n          if (oldAttribute.inversedBy) {\n            newAttribute.dominant = true;\n          } else if (oldAttribute.mappedBy) {\n            newAttribute.dominant = false;\n          }\n\n          return this.setRelation({\n            key,\n            uid,\n            attribute: newAttribute,\n          });\n        }\n      });\n\n      // add new relations\n      newKeys.forEach((key) => {\n        const attribute = newAttributes[key];\n\n        if (isRelation(attribute)) {\n          if (['manyToMany', 'oneToOne'].includes(attribute.relation)) {\n            if (attribute.target === uid && attribute.targetAttribute !== undefined) {\n              // self referencing relation\n              const targetAttribute = newAttributes[attribute.targetAttribute];\n\n              if (targetAttribute.dominant === undefined) {\n                attribute.dominant = true;\n              } else {\n                attribute.dominant = false;\n              }\n            } else {\n              attribute.dominant = true;\n            }\n          }\n\n          this.setRelation({\n            key,\n            uid,\n            attribute,\n          });\n        }\n      });\n\n      contentType\n        .set('kind', infos.kind || contentType.schema.kind)\n        .set(['info', 'displayName'], infos.displayName)\n        .set(['info', 'description'], infos.description)\n        .set('options', {\n          ...(infos.options ?? {}),\n          draftAndPublish: infos.draftAndPublish,\n        })\n        .set('pluginOptions', infos.pluginOptions)\n        .setAttributes(this.convertAttributes(newAttributes));\n\n      return contentType;\n    },\n\n    deleteContentType(this: any, uid: string) {\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      this.components.forEach((compo: any) => {\n        compo.removeContentType(uid);\n      });\n\n      this.contentTypes.forEach((ct: any) => {\n        ct.removeContentType(uid);\n      });\n\n      return this.contentTypes.get(uid).delete();\n    },\n  };\n}\n\n/**\n * Returns a uid from a content type infos\n *\n * @param {object} options options\n * @param {string} options.singularName content-type singularName\n * @returns {string} uid\n */\nconst createContentTypeUID = ({\n  singularName,\n}: {\n  singularName: string;\n}): Internal.UID.ContentType => `api::${singularName}.${singularName}`;\n\nconst generateRelation = ({ key, attribute, uid, targetAttribute = {} }: any) => {\n  const opts: any = {\n    type: 'relation',\n    target: uid,\n    private: targetAttribute.private || undefined,\n    pluginOptions: targetAttribute.pluginOptions || undefined,\n  };\n\n  switch (attribute.relation) {\n    case 'oneToOne': {\n      opts.relation = 'oneToOne';\n\n      if (attribute.dominant) {\n        opts.mappedBy = key;\n      } else {\n        opts.inversedBy = key;\n      }\n      break;\n    }\n    case 'oneToMany': {\n      opts.relation = 'manyToOne';\n      opts.inversedBy = key;\n      break;\n    }\n    case 'manyToOne': {\n      opts.relation = 'oneToMany';\n      opts.mappedBy = key;\n      break;\n    }\n    case 'manyToMany': {\n      opts.relation = 'manyToMany';\n\n      if (attribute.dominant) {\n        opts.mappedBy = key;\n      } else {\n        opts.inversedBy = key;\n      }\n\n      break;\n    }\n    default:\n  }\n\n  // we do this just to make sure we have the same key order when writing to files\n  const { type, relation, target, ...restOptions } = opts;\n\n  return {\n    type,\n    relation,\n    target,\n    ...restOptions,\n  };\n};\n"],"names":["ApplicationError","errors","reuseUnsetPreviousProperties","newAttribute","oldAttribute","_","defaults","omit","createComponentBuilder","setRelation","key","uid","attribute","has","targetCT","contentTypes","get","target","targetAttribute","getAttribute","setAttribute","generateRelation","unsetRelation","targetAttributeName","inversedBy","mappedBy","deleteAttribute","createContentTypeAttributes","attributes","contentType","Object","keys","forEach","setAttributes","convertAttributes","isRelation","includes","relation","undefined","dominant","createContentType","infos","createContentTypeUID","createSchemaHandler","modelName","singularName","dir","path","join","strapi","dirs","app","api","filename","set","setUID","kind","typeKinds","COLLECTION_TYPE","collectionName","strings","nameToCollectionName","pluralName","displayName","description","options","draftAndPublish","pluginOptions","config","editContentType","oldAttributes","schema","newAttributes","omitBy","attr","isConfigurable","newKeys","difference","deletedKeys","remainingKeys","intersection","isNil","oldTargetAttributeName","sameRelation","targetAttributeHasChanged","deleteContentType","components","compo","removeContentType","ct","delete","opts","type","private","restOptions"],"mappings":"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"}