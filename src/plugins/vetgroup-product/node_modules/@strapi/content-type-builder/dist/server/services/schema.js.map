{"version":3,"file":"schema.js","sources":["../../../server/src/services/schema.ts"],"sourcesContent":["import utils from '@strapi/utils';\nimport { mapValues } from 'lodash/fp';\n\nimport type { Schema } from '@strapi/types';\n\nimport createBuilder from './schema-builder';\nimport { getService } from '../utils';\nimport type { Schema as CTBSchema } from '../controllers/validation/schema';\nimport { getRestrictRelationsTo, isContentTypeVisible } from './content-types';\n\nconst removeEmptyDefaultsOnUpdates = (schema: CTBSchema) => {\n  schema.components.forEach((component) => {\n    if (component.action === 'delete') {\n      return;\n    }\n\n    component.attributes.forEach((attribute) => {\n      if (attribute.action === 'update') {\n        const { properties } = attribute;\n\n        if ('default' in properties && properties.default === '') {\n          properties.default = undefined;\n        }\n      }\n    });\n  });\n\n  schema.contentTypes.forEach((contentType) => {\n    if (contentType.action === 'delete') {\n      return;\n    }\n\n    contentType.attributes.forEach((attribute) => {\n      if (attribute.action === 'update') {\n        const { properties } = attribute;\n\n        if ('default' in properties && properties.default === '') {\n          properties.default = undefined;\n        }\n      }\n    });\n  });\n};\n\nconst removeDeletedUIDTargetFieldsOnUpdates = (schema: CTBSchema) => {\n  schema.contentTypes.forEach((contentType) => {\n    if (contentType.action === 'delete') {\n      return;\n    }\n\n    contentType.attributes.forEach((attribute) => {\n      if (attribute.action === 'update') {\n        const { properties } = attribute;\n\n        if (\n          properties.type === 'uid' &&\n          properties.targetField &&\n          !contentType.attributes.find((attr) => attr.name === properties.targetField)\n        ) {\n          properties.targetField = undefined;\n        }\n      }\n    });\n  });\n};\n\nconst formatAttributes = (model: any) => {\n  const { getVisibleAttributes } = utils.contentTypes;\n\n  // only get attributes that can be seen in the CTB\n  return getVisibleAttributes(model).map((key) => {\n    return { ...formatAttribute(model.attributes[key]), name: key };\n  });\n};\n\nexport const formatAttribute = (attribute: Schema.Attribute.AnyAttribute & Record<string, any>) => {\n  if (attribute.type === 'relation') {\n    return {\n      ...attribute,\n      targetAttribute: attribute.inversedBy || attribute.mappedBy || null,\n    };\n  }\n\n  return attribute;\n};\n\nexport const getSchema = async () => {\n  const contentTypes = mapValues((contentType) => {\n    const {\n      uid,\n      options,\n      globalId,\n      pluginOptions,\n      kind,\n      modelName,\n      plugin,\n      collectionName,\n      info,\n      modelType,\n    } = contentType;\n\n    return {\n      uid,\n      modelName,\n      kind,\n      globalId,\n      options,\n      pluginOptions,\n      plugin,\n      collectionName,\n      info,\n      modelType,\n      attributes: formatAttributes(contentType),\n      visible: isContentTypeVisible(contentType),\n      restrictRelationsTo: getRestrictRelationsTo(contentType),\n    };\n  }, strapi.contentTypes);\n\n  const components = mapValues((component) => {\n    const { uid, globalId, modelName, collectionName, info, category, modelType } = component;\n\n    return {\n      uid,\n      modelName,\n      globalId,\n      modelType,\n      collectionName,\n      category,\n      info,\n      attributes: formatAttributes(component),\n    };\n  }, strapi.components);\n\n  return {\n    contentTypes,\n    components,\n  };\n};\n\nexport const updateSchema = async (schema: CTBSchema) => {\n  const builder = createBuilder();\n  const apiHandler = getService('api-handler');\n\n  const { components, contentTypes } = schema;\n\n  // pre-process data\n  removeEmptyDefaultsOnUpdates(schema);\n  removeDeletedUIDTargetFieldsOnUpdates(schema);\n\n  // we pre create empty typesk\n  for (const contentType of contentTypes) {\n    if (contentType.action === 'create') {\n      builder.createContentType({\n        ...contentType,\n        attributes: {},\n      });\n    }\n  }\n\n  // we pre create empty types\n  for (const component of components) {\n    if (component.action === 'create') {\n      builder.createComponent({\n        ...component,\n        attributes: {},\n      });\n    }\n  }\n\n  for (const contentType of contentTypes) {\n    const { action, uid } = contentType;\n\n    if (action === 'create') {\n      builder.createContentTypeAttributes(\n        uid,\n        contentType.attributes.reduce((acc: any, attr: any) => {\n          acc[attr.name] = attr.properties;\n          return acc;\n        }, {})\n      );\n\n      await getService('content-types').generateAPI({\n        displayName: contentType!.displayName,\n        singularName: contentType!.singularName,\n        pluralName: contentType!.pluralName,\n        kind: contentType!.kind,\n      });\n    }\n\n    if (action === 'update') {\n      builder.editContentType({\n        ...contentType,\n        attributes: contentType.attributes.reduce((acc: any, attr: any) => {\n          // NOTE: handle renaming migrations here by comparing attr name & attr.properties.name\n\n          if (attr.action === 'delete') {\n            return acc;\n          }\n\n          acc[attr.name] = attr.properties;\n          return acc;\n        }, {}),\n      });\n    }\n\n    if (action === 'delete') {\n      builder.deleteContentType(uid);\n      await apiHandler.backup(uid);\n    }\n  }\n\n  for (const component of components) {\n    const { action, uid } = component;\n\n    if (action === 'create') {\n      builder.createComponentAttributes(\n        uid,\n        component.attributes.reduce((acc: any, attr: any) => {\n          acc[attr.name] = attr.properties;\n          return acc;\n        }, {})\n      );\n    }\n\n    if (action === 'update') {\n      builder.editComponent({\n        ...component,\n        attributes: component.attributes.reduce((acc: any, attr: any) => {\n          if (attr.action === 'delete') {\n            return acc;\n          }\n\n          acc[attr.name] = attr.properties;\n          return acc;\n        }, {}),\n      });\n    }\n\n    if (action === 'delete') {\n      builder.deleteComponent(uid);\n    }\n  }\n\n  // run sanity checks on the schema\n  // Relations target existing types\n  // Bidirectional relation have their counterpart in the schema\n  // Components target existing components\n  // Nested components target existing components\n  // Dynamic zones target existing components\n\n  const APIsToDelete = contentTypes\n    .filter((ct: any) => ct.action === 'delete')\n    .map((ct: any) => ct.uid);\n\n  await builder.writeFiles();\n\n  try {\n    for (const uid of APIsToDelete) {\n      await apiHandler.clear(uid);\n    }\n  } catch (error) {\n    strapi.log.error(error);\n    for (const uid of APIsToDelete) {\n      await apiHandler.rollback(uid);\n    }\n  }\n\n  for (const contentType of contentTypes) {\n    if (contentType.action === 'delete') {\n      strapi.eventHub.emit('content-type.delete', {\n        contentType: builder.contentTypes.get(contentType.uid),\n      });\n    }\n\n    if (contentType.action === 'update') {\n      strapi.eventHub.emit('content-type.update', {\n        contentType: builder.contentTypes.get(contentType.uid),\n      });\n    }\n\n    if (contentType.action === 'create') {\n      strapi.eventHub.emit('content-type.create', {\n        contentType: builder.contentTypes.get(contentType.uid),\n      });\n    }\n  }\n\n  for (const component of components) {\n    if (component.action === 'delete') {\n      strapi.eventHub.emit('component.delete', {\n        component: builder.components.get(component.uid),\n      });\n    }\n\n    if (component.action === 'update') {\n      strapi.eventHub.emit('component.update', {\n        component: builder.components.get(component.uid),\n      });\n    }\n\n    if (component.action === 'create') {\n      strapi.eventHub.emit('component.create', {\n        component: builder.components.get(component.uid),\n      });\n    }\n  }\n};\n"],"names":["removeEmptyDefaultsOnUpdates","schema","components","forEach","component","action","attributes","attribute","properties","default","undefined","contentTypes","contentType","removeDeletedUIDTargetFieldsOnUpdates","type","targetField","find","attr","name","formatAttributes","model","getVisibleAttributes","utils","map","key","formatAttribute","targetAttribute","inversedBy","mappedBy","getSchema","mapValues","uid","options","globalId","pluginOptions","kind","modelName","plugin","collectionName","info","modelType","visible","isContentTypeVisible","restrictRelationsTo","getRestrictRelationsTo","strapi","category","updateSchema","builder","createBuilder","apiHandler","getService","createContentType","createComponent","createContentTypeAttributes","reduce","acc","generateAPI","displayName","singularName","pluralName","editContentType","deleteContentType","backup","createComponentAttributes","editComponent","deleteComponent","APIsToDelete","filter","ct","writeFiles","clear","error","log","rollback","eventHub","emit","get"],"mappings":"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"}