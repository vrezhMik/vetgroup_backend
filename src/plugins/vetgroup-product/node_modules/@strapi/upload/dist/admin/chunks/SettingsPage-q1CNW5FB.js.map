{"version":3,"file":"SettingsPage-q1CNW5FB.js","sources":["../../../admin/src/pages/SettingsPage/init.ts","../../../admin/src/pages/SettingsPage/reducer.ts","../../../admin/src/pages/SettingsPage/SettingsPage.tsx"],"sourcesContent":["import type { InitialState } from './reducer';\n\nexport const init = (initialState: InitialState) => {\n  return initialState;\n};\n","import { produce } from 'immer';\nimport set from 'lodash/set';\n\nexport type InitialState = {\n  initialData: {\n    responsiveDimensions?: boolean;\n    sizeOptimization?: boolean;\n    autoOrientation?: boolean;\n    videoPreview?: boolean;\n  } | null;\n  modifiedData: {\n    responsiveDimensions?: boolean;\n    sizeOptimization?: boolean;\n    autoOrientation?: boolean;\n    videoPreview?: boolean;\n  } | null;\n};\n\ninterface ActionGetDataSucceeded {\n  type: 'GET_DATA_SUCCEEDED';\n  data: InitialState['initialData'];\n}\n\ninterface ActionOnChange {\n  type: 'ON_CHANGE';\n  keys: keyof NonNullable<InitialState['initialData']>;\n  value: boolean;\n}\n\nexport type Action = ActionGetDataSucceeded | ActionOnChange;\n\nconst initialState: InitialState = {\n  initialData: {\n    responsiveDimensions: true,\n    sizeOptimization: true,\n    autoOrientation: false,\n    videoPreview: false,\n  },\n  modifiedData: {\n    responsiveDimensions: true,\n    sizeOptimization: true,\n    autoOrientation: false,\n    videoPreview: false,\n  },\n};\n\nconst reducer = (state: InitialState, action: Action) =>\n  produce(state, (drafState) => {\n    switch (action.type) {\n      case 'GET_DATA_SUCCEEDED': {\n        drafState.initialData = action.data;\n        drafState.modifiedData = action.data;\n        break;\n      }\n      case 'ON_CHANGE': {\n        set(drafState, ['modifiedData', ...action.keys.split('.')], action.value);\n        break;\n      }\n      default:\n        return state;\n    }\n  });\n\nexport { initialState, reducer };\n","// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { Page, useNotification, useFetchClient, Layouts } from '@strapi/admin/strapi-admin';\nimport { Box, Button, Flex, Grid, Toggle, Typography, Field } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport isEqual from 'lodash/isEqual';\nimport { useIntl } from 'react-intl';\nimport { useMutation, useQuery } from 'react-query';\n\nimport { UpdateSettings } from '../../../../shared/contracts/settings';\nimport { PERMISSIONS } from '../../constants';\nimport { getTrad } from '../../utils';\n\nimport { init } from './init';\nimport { initialState, reducer } from './reducer';\n\nimport type { InitialState } from './reducer';\n\nexport const SettingsPage = () => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { get, put } = useFetchClient();\n\n  const [{ initialData, modifiedData }, dispatch] = React.useReducer(reducer, initialState, init);\n\n  const { data, isLoading, refetch } = useQuery({\n    queryKey: ['upload', 'settings'],\n    async queryFn() {\n      const {\n        data: { data },\n      } = await get('/upload/settings');\n\n      return data;\n    },\n  });\n\n  React.useEffect(() => {\n    if (data) {\n      dispatch({\n        type: 'GET_DATA_SUCCEEDED',\n        data,\n      });\n    }\n  }, [data]);\n\n  const isSaveButtonDisabled = isEqual(initialData, modifiedData);\n\n  const { mutateAsync, isLoading: isSubmitting } = useMutation<\n    UpdateSettings.Response['data'],\n    UpdateSettings.Response['error'],\n    UpdateSettings.Request['body']\n  >(\n    async (body) => {\n      const { data } = await put('/upload/settings', body);\n\n      return data;\n    },\n    {\n      onSuccess() {\n        refetch();\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'notification.form.success.fields' }),\n        });\n      },\n      onError(err) {\n        console.error(err);\n      },\n    }\n  );\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (isSaveButtonDisabled) {\n      return;\n    }\n\n    await mutateAsync(modifiedData!);\n  };\n\n  const handleChange = ({\n    target: { name, value },\n  }: {\n    target: { name: keyof NonNullable<InitialState['initialData']>; value: boolean };\n  }) => {\n    dispatch({\n      type: 'ON_CHANGE',\n      keys: name,\n      value,\n    });\n  };\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main tabIndex={-1}>\n      <Page.Title>\n        {formatMessage({\n          id: getTrad('page.title'),\n          defaultMessage: 'Settings - Media Libray',\n        })}\n      </Page.Title>\n      <form onSubmit={handleSubmit}>\n        <Layouts.Header\n          title={formatMessage({\n            id: getTrad('settings.header.label'),\n            defaultMessage: 'Media Library',\n          })}\n          primaryAction={\n            <Button\n              disabled={isSaveButtonDisabled}\n              loading={isSubmitting}\n              type=\"submit\"\n              startIcon={<Check />}\n              size=\"S\"\n            >\n              {formatMessage({\n                id: 'global.save',\n                defaultMessage: 'Save',\n              })}\n            </Button>\n          }\n          subtitle={formatMessage({\n            id: getTrad('settings.sub-header.label'),\n            defaultMessage: 'Configure the settings for the Media Library',\n          })}\n        />\n        <Layouts.Content>\n          <Layouts.Root>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={12}>\n              <Box background=\"neutral0\" padding={6} shadow=\"filterShadow\" hasRadius>\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                  <Flex>\n                    <Typography variant=\"delta\" tag=\"h2\">\n                      {formatMessage({\n                        id: getTrad('settings.blockTitle'),\n                        defaultMessage: 'Asset management',\n                      })}\n                    </Typography>\n                  </Flex>\n                  <Grid.Root gap={6}>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.responsiveDimensions.description'),\n                          defaultMessage:\n                            'Enabling this option will generate multiple formats (small, medium and large) of the uploaded asset.',\n                        })}\n                        name=\"responsiveDimensions\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.responsiveDimensions.label'),\n                            defaultMessage: 'Responsive friendly upload',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.responsiveDimensions}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'responsiveDimensions', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.sizeOptimization.description'),\n                          defaultMessage:\n                            'Enabling this option will reduce the image size and slightly reduce its quality.',\n                        })}\n                        name=\"sizeOptimization\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.sizeOptimization.label'),\n                            defaultMessage: 'Size optimization',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.sizeOptimization}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'sizeOptimization', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                    <Grid.Item col={6} s={12} direction=\"column\" alignItems=\"stretch\">\n                      <Field.Root\n                        hint={formatMessage({\n                          id: getTrad('settings.form.autoOrientation.description'),\n                          defaultMessage:\n                            'Enabling this option will automatically rotate the image according to EXIF orientation tag.',\n                        })}\n                        name=\"autoOrientation\"\n                      >\n                        <Field.Label>\n                          {formatMessage({\n                            id: getTrad('settings.form.autoOrientation.label'),\n                            defaultMessage: 'Auto orientation',\n                          })}\n                        </Field.Label>\n                        <Toggle\n                          checked={modifiedData?.autoOrientation}\n                          offLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.off-label',\n                            defaultMessage: 'Off',\n                          })}\n                          onLabel={formatMessage({\n                            id: 'app.components.ToggleCheckbox.on-label',\n                            defaultMessage: 'On',\n                          })}\n                          onChange={(e) => {\n                            handleChange({\n                              target: { name: 'autoOrientation', value: e.target.checked },\n                            });\n                          }}\n                        />\n                        <Field.Hint />\n                      </Field.Root>\n                    </Grid.Item>\n                  </Grid.Root>\n                </Flex>\n              </Box>\n            </Flex>\n          </Layouts.Root>\n        </Layouts.Content>\n      </form>\n    </Page.Main>\n  );\n};\n\nexport const ProtectedSettingsPage = () => (\n  <Page.Protect permissions={PERMISSIONS.settings}>\n    <SettingsPage />\n  </Page.Protect>\n);\n"],"names":["init","initialState","initialData","responsiveDimensions","sizeOptimization","autoOrientation","videoPreview","modifiedData","reducer","state","action","produce","drafState","type","data","set","keys","split","value","SettingsPage","formatMessage","useIntl","toggleNotification","useNotification","get","put","useFetchClient","dispatch","React","useReducer","isLoading","refetch","useQuery","queryKey","queryFn","useEffect","isSaveButtonDisabled","isEqual","mutateAsync","isSubmitting","useMutation","body","onSuccess","message","id","onError","err","console","error","handleSubmit","e","preventDefault","handleChange","target","name","_jsx","Page","Loading","_jsxs","Main","tabIndex","Title","getTrad","defaultMessage","form","onSubmit","Layouts","Header","title","primaryAction","Button","disabled","loading","startIcon","Check","size","subtitle","Content","Root","Flex","direction","alignItems","gap","Box","background","padding","shadow","hasRadius","Typography","variant","tag","Grid","Item","col","s","Field","hint","Label","Toggle","checked","offLabel","onLabel","onChange","Hint","ProtectedSettingsPage","Protect","permissions","PERMISSIONS","settings"],"mappings":"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"}