'use strict';

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var strapiAdmin = require('@strapi/admin/strapi-admin');
var designSystem = require('@strapi/design-system');
var icons = require('@strapi/icons');
var isEqual = require('lodash/isEqual');
var reactIntl = require('react-intl');
var reactRouterDom = require('react-router-dom');
var index = require('./index-DVQTOPLi.js');
require('byte-size');
require('date-fns');
require('qs');
var immer = require('immer');
var get = require('lodash/get');
var set = require('lodash/set');
require('styled-components');
require('react-query');
require('yup');
require('formik');
require('react-select');
require('cropperjs');
require('@mux/mux-player-react');
require('cropperjs/dist/cropper.css');
require('lodash/isEmpty');
require('react-dnd');
require('@strapi/icons/symbols');
require('date-fns/parseISO');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

const Settings = ({ sort = '', pageSize = 10, onChange })=>{
    const { formatMessage } = reactIntl.useIntl();
    return /*#__PURE__*/ jsxRuntime.jsx(designSystem.Box, {
        background: "neutral0",
        hasRadius: true,
        shadow: "tableShadow",
        paddingTop: 6,
        paddingBottom: 6,
        paddingLeft: 7,
        paddingRight: 7,
        children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Grid.Root, {
            gap: 4,
            children: [
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Item, {
                    s: 12,
                    col: 6,
                    direction: "column",
                    alignItems: "stretch",
                    children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
                        hint: formatMessage({
                            id: index.getTrad('config.entries.note'),
                            defaultMessage: 'Number of assets displayed by default in the Media Library'
                        }),
                        name: "pageSize",
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                                children: formatMessage({
                                    id: index.getTrad('config.entries.title'),
                                    defaultMessage: 'Entries per page'
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelect, {
                                onChange: (value)=>onChange({
                                        target: {
                                            name: 'pageSize',
                                            value
                                        }
                                    }),
                                value: pageSize,
                                children: index.pageSizes.map((pageSize)=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                                        value: pageSize,
                                        children: pageSize
                                    }, pageSize))
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {})
                        ]
                    })
                }),
                /*#__PURE__*/ jsxRuntime.jsx(designSystem.Grid.Item, {
                    s: 12,
                    col: 6,
                    direction: "column",
                    alignItems: "stretch",
                    children: /*#__PURE__*/ jsxRuntime.jsxs(designSystem.Field.Root, {
                        hint: formatMessage({
                            id: index.getTrad('config.note'),
                            defaultMessage: 'Note: You can override this value in the media library.'
                        }),
                        name: "sort",
                        children: [
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Label, {
                                children: formatMessage({
                                    id: index.getTrad('config.sort.title'),
                                    defaultMessage: 'Default sort order'
                                })
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelect, {
                                onChange: (value)=>onChange({
                                        target: {
                                            name: 'sort',
                                            value
                                        }
                                    }),
                                value: sort,
                                "test-sort": sort,
                                "data-testid": "sort-select",
                                children: index.sortOptions.map((filter)=>/*#__PURE__*/ jsxRuntime.jsx(designSystem.SingleSelectOption, {
                                        "data-testid": `sort-option-${filter.value}`,
                                        value: filter.value,
                                        children: formatMessage({
                                            id: index.getTrad(filter.key),
                                            defaultMessage: `${filter.value}`
                                        })
                                    }, filter.key))
                            }),
                            /*#__PURE__*/ jsxRuntime.jsx(designSystem.Field.Hint, {})
                        ]
                    })
                })
            ]
        })
    });
};

const ON_CHANGE = `${index.pluginId}/ON_CHANGE`;
const SET_LOADED = `${index.pluginId}/SET_LOADED`;

const onChange = ({ name, value })=>({
        type: ON_CHANGE,
        keys: name,
        value
    });
const setLoaded = ()=>({
        type: SET_LOADED
    });

const initialState = {
    initialData: {},
    modifiedData: {}
};
const init = (configData)=>{
    return {
        ...initialState,
        initialData: configData,
        modifiedData: configData
    };
};

const reducer = (state = initialState, action = {
    type: ''
})=>// eslint-disable-next-line consistent-return
    immer.produce(state, (draftState)=>{
        switch(action.type){
            case ON_CHANGE:
                {
                    if ('keys' in action && 'value' in action && action.keys) {
                        set(draftState, [
                            'modifiedData',
                            ...action.keys.split('.')
                        ], action.value);
                    }
                    break;
                }
            case SET_LOADED:
                {
                    // This action re-initialises the state using the current modifiedData.
                    const reInitialise = init(get(draftState, [
                        'modifiedData'
                    ], {}));
                    draftState.initialData = reInitialise.initialData;
                    draftState.modifiedData = reInitialise.modifiedData;
                    break;
                }
            default:
                return draftState;
        }
    });

// TODO: find a better naming convention for the file that was an index file before
const ConfigureTheView = ({ config })=>{
    const { trackUsage } = strapiAdmin.useTracking();
    const { formatMessage } = reactIntl.useIntl();
    const { toggleNotification } = strapiAdmin.useNotification();
    const { mutateConfig } = index.useConfig();
    const { isLoading: isSubmittingForm } = mutateConfig;
    const [showWarningSubmit, setWarningSubmit] = React__namespace.useState(false);
    const toggleWarningSubmit = ()=>setWarningSubmit((prevState)=>!prevState);
    const [reducerState, dispatch] = React__namespace.useReducer(reducer, initialState, ()=>init(config));
    const typedDispatch = dispatch;
    const { initialData, modifiedData } = reducerState;
    const handleSubmit = (e)=>{
        e.preventDefault();
        toggleWarningSubmit();
    };
    const handleConfirm = async ()=>{
        trackUsage('willEditMediaLibraryConfig');
        await mutateConfig.mutateAsync(modifiedData);
        setWarningSubmit(false);
        typedDispatch(setLoaded());
        toggleNotification({
            type: 'success',
            message: formatMessage({
                id: 'notification.form.success.fields',
                defaultMessage: 'Changes saved'
            })
        });
    };
    const handleChange = ({ target: { name, value } })=>{
        typedDispatch(onChange({
            name,
            value
        }));
    };
    return /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Layouts.Root, {
        children: /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Page.Main, {
            "aria-busy": isSubmittingForm,
            children: /*#__PURE__*/ jsxRuntime.jsxs("form", {
                onSubmit: handleSubmit,
                children: [
                    /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Layouts.Header, {
                        navigationAction: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Link, {
                            tag: reactRouterDom.NavLink,
                            startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.ArrowLeft, {}),
                            to: `/plugins/${index.pluginId}`,
                            id: "go-back",
                            children: formatMessage({
                                id: index.getTrad('config.back'),
                                defaultMessage: 'Back'
                            })
                        }),
                        primaryAction: /*#__PURE__*/ jsxRuntime.jsx(designSystem.Button, {
                            size: "S",
                            startIcon: /*#__PURE__*/ jsxRuntime.jsx(icons.Check, {}),
                            disabled: isEqual(modifiedData, initialData),
                            type: "submit",
                            children: formatMessage({
                                id: 'global.save',
                                defaultMessage: 'Save'
                            })
                        }),
                        subtitle: formatMessage({
                            id: index.getTrad('config.subtitle'),
                            defaultMessage: 'Define the view settings of the media library.'
                        }),
                        title: formatMessage({
                            id: index.getTrad('config.title'),
                            defaultMessage: 'Configure the view - Media Library'
                        })
                    }),
                    /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.Layouts.Content, {
                        children: /*#__PURE__*/ jsxRuntime.jsx(Settings, {
                            "data-testid": "settings",
                            pageSize: modifiedData.pageSize || '',
                            sort: modifiedData.sort || '',
                            onChange: handleChange
                        })
                    }),
                    "x",
                    /*#__PURE__*/ jsxRuntime.jsx(designSystem.Dialog.Root, {
                        open: showWarningSubmit,
                        onOpenChange: toggleWarningSubmit,
                        children: /*#__PURE__*/ jsxRuntime.jsx(strapiAdmin.ConfirmDialog, {
                            onConfirm: handleConfirm,
                            variant: "default",
                            children: formatMessage({
                                id: index.getTrad('config.popUpWarning.warning.updateAllSettings'),
                                defaultMessage: 'This will modify all your settings'
                            })
                        })
                    })
                ]
            })
        })
    });
};

exports.ConfigureTheView = ConfigureTheView;
//# sourceMappingURL=ConfigureTheView-BDPODrq9.js.map
