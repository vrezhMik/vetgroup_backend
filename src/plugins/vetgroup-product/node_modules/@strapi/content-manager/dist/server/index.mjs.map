{"version":3,"file":"index.mjs","sources":["../../server/src/utils/index.ts","../../server/src/history/utils.ts","../../server/src/history/controllers/validation/history-version.ts","../../server/src/history/controllers/history-version.ts","../../server/src/history/controllers/index.ts","../../server/src/history/constants.ts","../../server/src/history/services/utils.ts","../../server/src/history/services/history.ts","../../server/src/history/services/lifecycles.ts","../../server/src/history/services/index.ts","../../server/src/history/routes/history-version.ts","../../server/src/history/routes/index.ts","../../server/src/history/models/history-version.ts","../../server/src/history/index.ts","../../server/src/preview/routes/preview.ts","../../server/src/preview/routes/index.ts","../../server/src/preview/utils.ts","../../server/src/preview/controllers/validation/preview.ts","../../server/src/preview/controllers/preview.ts","../../server/src/preview/controllers/index.ts","../../server/src/preview/services/preview.ts","../../server/src/preview/services/preview-config.ts","../../server/src/preview/services/index.ts","../../server/src/preview/index.ts","../../server/src/register.ts","../../server/src/constants/index.ts","../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/middlewares/routing.ts","../../server/src/routes/admin.ts","../../server/src/routes/index.ts","../../server/src/validation/policies/hasPermissions.ts","../../server/src/policies/hasPermissions.ts","../../server/src/policies/index.ts","../../server/src/services/utils/configuration/attributes.ts","../../server/src/services/utils/configuration/settings.ts","../../server/src/controllers/validation/model-configuration.ts","../../server/src/controllers/validation/index.ts","../../server/src/controllers/utils/clone.ts","../../server/src/controllers/validation/dimensions.ts","../../server/src/controllers/utils/metadata.ts","../../server/src/controllers/collection-types.ts","../../server/src/controllers/components.ts","../../server/src/controllers/content-types.ts","../../server/src/controllers/init.ts","../../server/src/controllers/validation/relations.ts","../../server/src/controllers/relations.ts","../../server/src/controllers/single-types.ts","../../server/src/controllers/uid.ts","../../server/src/controllers/index.ts","../../server/src/services/utils/store.ts","../../server/src/services/utils/configuration/metadatas.ts","../../server/src/services/utils/configuration/layouts.ts","../../server/src/services/utils/configuration/index.ts","../../server/src/services/configuration.ts","../../server/src/services/components.ts","../../server/src/services/content-types.ts","../../server/src/services/data-mapper.ts","../../server/src/services/field-sizes.ts","../../server/src/services/metrics.ts","../../server/src/services/permission-checker.ts","../../server/src/services/permission.ts","../../server/src/services/utils/populate.ts","../../server/src/services/populate-builder.ts","../../server/src/services/uid.ts","../../server/src/services/document-metadata.ts","../../server/src/services/utils/draft.ts","../../server/src/services/document-manager.ts","../../server/src/services/index.ts","../../server/src/index.ts"],"sourcesContent":["import '@strapi/types';\n\nimport { DocumentManagerService } from 'src/services/document-manager';\nimport DocumentMetadata from 'src/services/document-metadata';\n\ntype Services = {\n  'document-manager': DocumentManagerService;\n  'document-metadata': typeof DocumentMetadata;\n  [key: string]: any;\n};\n\nconst getService = <TName extends keyof Services>(name: TName): ReturnType<Services[TName]> => {\n  return strapi.plugin('content-manager').service(name as string);\n};\n\nexport { getService };\n","import type { Core } from '@strapi/types';\n\ntype HistoryServices = typeof import('./services').services;\n\nfunction getService<T extends keyof HistoryServices>(strapi: Core.Strapi, name: T) {\n  // Cast is needed because the return type of strapi.service is too vague\n  return strapi.service(`plugin::content-manager.${name}`) as ReturnType<HistoryServices[T]>;\n}\n\nexport { getService };\n","import * as yup from 'yup';\nimport { validateYupSchema } from '@strapi/utils';\n\nconst historyRestoreVersionSchema = yup\n  .object()\n  .shape({\n    contentType: yup.string().trim().required(),\n  })\n  .required();\n\nexport const validateRestoreVersion = validateYupSchema(historyRestoreVersionSchema);\n","import { async, errors } from '@strapi/utils';\nimport type { Core, UID } from '@strapi/types';\nimport { pick } from 'lodash/fp';\nimport { getService as getContentManagerService } from '../../utils';\nimport { getService } from '../utils';\nimport type { HistoryVersions } from '../../../../shared/contracts';\nimport { validateRestoreVersion } from './validation/history-version';\n\n/**\n * Parses pagination params and makes sure they're within valid ranges\n */\nconst getValidPagination = ({ page, pageSize }: { page: any; pageSize: any }) => {\n  let pageNumber = 1;\n  let pageSizeNumber = 20;\n\n  if (page) {\n    const parsedPage = parseInt(page, 10);\n    pageNumber = parseInt(page, 10);\n\n    if (!Number.isNaN(parsedPage) && parsedPage >= 1) {\n      pageNumber = parsedPage;\n    }\n  }\n\n  if (pageSize) {\n    const parsedPageSize = parseInt(pageSize, 10);\n\n    if (!Number.isNaN(parsedPageSize) && parsedPageSize >= 1 && parsedPageSize <= 100) {\n      pageSizeNumber = parsedPageSize;\n    }\n  }\n\n  return { page: pageNumber, pageSize: pageSizeNumber };\n};\n\nconst createHistoryVersionController = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    async findMany(ctx) {\n      const contentTypeUid = ctx.query.contentType as UID.ContentType;\n      const isSingleType = strapi.getModel(contentTypeUid)?.kind === 'singleType';\n\n      if (isSingleType && !contentTypeUid) {\n        throw new errors.ForbiddenError('contentType is required');\n      }\n\n      if (!isSingleType && (!contentTypeUid || !ctx.query.documentId)) {\n        throw new errors.ForbiddenError('contentType and documentId are required');\n      }\n\n      /**\n       * There are no permissions specifically for history versions,\n       * but we need to check that the user can read the content type\n       */\n      const permissionChecker = getContentManagerService('permission-checker').create({\n        userAbility: ctx.state.userAbility,\n        model: ctx.query.contentType,\n      });\n\n      if (permissionChecker.cannot.read()) {\n        return ctx.forbidden();\n      }\n\n      const query: HistoryVersions.GetHistoryVersions.Request['query'] =\n        await permissionChecker.sanitizeQuery(ctx.query);\n\n      const { results, pagination } = await getService(strapi, 'history').findVersionsPage({\n        query: {\n          ...query,\n          ...getValidPagination({ page: query.page, pageSize: query.pageSize }),\n        },\n        state: { userAbility: ctx.state.userAbility },\n      });\n\n      const sanitizedResults = await async.map(\n        results,\n        async (version: HistoryVersions.HistoryVersionDataResponse & { locale: string }) => {\n          return {\n            ...version,\n            data: await permissionChecker.sanitizeOutput(version.data),\n            createdBy: version.createdBy\n              ? pick(['id', 'firstname', 'lastname', 'username', 'email'], version.createdBy)\n              : undefined,\n          };\n        }\n      );\n\n      return {\n        data: sanitizedResults,\n        meta: { pagination },\n      };\n    },\n\n    async restoreVersion(ctx) {\n      const request = ctx.request as unknown as HistoryVersions.RestoreHistoryVersion.Request;\n\n      await validateRestoreVersion(request.body, 'contentType is required');\n\n      const permissionChecker = getContentManagerService('permission-checker').create({\n        userAbility: ctx.state.userAbility,\n        model: request.body.contentType,\n      });\n\n      if (permissionChecker.cannot.update()) {\n        throw new errors.ForbiddenError();\n      }\n\n      const restoredDocument = await getService(strapi, 'history').restoreVersion(\n        request.params.versionId\n      );\n\n      return {\n        data: { documentId: restoredDocument.documentId },\n      } satisfies HistoryVersions.RestoreHistoryVersion.Response;\n    },\n  } satisfies Core.Controller;\n};\n\nexport { createHistoryVersionController };\n","import type { Plugin } from '@strapi/types';\nimport { createHistoryVersionController } from './history-version';\n\nexport const controllers = {\n  'history-version': createHistoryVersionController,\n  /**\n   * Casting is needed because the types aren't aware that Strapi supports\n   * passing a controller factory as the value, instead of a controller object directly\n   */\n} as unknown as Plugin.LoadedPlugin['controllers'];\n","export const HISTORY_VERSION_UID = 'plugin::content-manager.history-version';\nexport const FIELDS_TO_IGNORE = [\n  'createdAt',\n  'updatedAt',\n  'publishedAt',\n  'createdBy',\n  'updatedBy',\n  'strapi_stage',\n  'strapi_assignee',\n];\n","import { difference, omit } from 'lodash/fp';\nimport { contentTypes } from '@strapi/utils';\nimport type { Core, Modules, Schema, Data, Struct, UID } from '@strapi/types';\n\nimport { FIELDS_TO_IGNORE } from '../constants';\nimport type { CreateHistoryVersion } from '../../../../shared/contracts/history-versions';\nimport type { HistoryVersions } from '../../../../shared/contracts';\nimport type { RelationResult } from '../../../../shared/contracts/relations';\n\nconst DEFAULT_RETENTION_DAYS = 90;\n\ntype RelationResponse = {\n  results: RelationResult[];\n  meta: { missingCount: number };\n};\n\nexport const createServiceUtils = ({ strapi }: { strapi: Core.Strapi }) => {\n  /**\n   * @description\n   * Get the difference between the version schema and the content type schema\n   */\n  const getSchemaAttributesDiff = (\n    versionSchemaAttributes: CreateHistoryVersion['schema'],\n    contentTypeSchemaAttributes: Struct.SchemaAttributes\n  ) => {\n    // Omit the same fields that were omitted when creating a history version\n    const sanitizedContentTypeSchemaAttributes = omit(\n      FIELDS_TO_IGNORE,\n      contentTypeSchemaAttributes\n    );\n\n    const reduceDifferenceToAttributesObject = (\n      diffKeys: string[],\n      source: CreateHistoryVersion['schema']\n    ) => {\n      return diffKeys.reduce<CreateHistoryVersion['schema']>(\n        (previousAttributesObject, diffKey) => {\n          previousAttributesObject[diffKey] = source[diffKey];\n\n          return previousAttributesObject;\n        },\n        {}\n      );\n    };\n\n    const versionSchemaKeys = Object.keys(versionSchemaAttributes);\n    const contentTypeSchemaAttributesKeys = Object.keys(sanitizedContentTypeSchemaAttributes);\n    // The attribute is new if it's on the content type schema but not on the version schema\n    const uniqueToContentType = difference(contentTypeSchemaAttributesKeys, versionSchemaKeys);\n    const added = reduceDifferenceToAttributesObject(\n      uniqueToContentType,\n      sanitizedContentTypeSchemaAttributes\n    );\n    // The attribute was removed or renamed if it's on the version schema but not on the content type schema\n    const uniqueToVersion = difference(versionSchemaKeys, contentTypeSchemaAttributesKeys);\n    const removed = reduceDifferenceToAttributesObject(uniqueToVersion, versionSchemaAttributes);\n\n    return { added, removed };\n  };\n\n  /**\n   * @description\n   * Gets the value to set for a relation when restoring a document\n   * @returns\n   * The relation if it exists or null\n   */\n  const getRelationRestoreValue = async (\n    versionRelationData: Modules.Documents.AnyDocument | Modules.Documents.AnyDocument[],\n    attribute: Schema.Attribute.RelationWithTarget\n  ) => {\n    if (Array.isArray(versionRelationData)) {\n      if (versionRelationData.length === 0) return versionRelationData;\n\n      const existingAndMissingRelations = await Promise.all(\n        versionRelationData.map((relation) => {\n          return strapi.documents(attribute.target).findOne({\n            documentId: relation.documentId,\n            locale: relation.locale || undefined,\n          });\n        })\n      );\n\n      return existingAndMissingRelations.filter((relation) => relation !== null);\n    }\n\n    return strapi.documents(attribute.target).findOne({\n      documentId: versionRelationData.documentId,\n      locale: versionRelationData.locale || undefined,\n    });\n  };\n\n  /**\n   * @description\n   * Gets the value to set for a media asset when restoring a document\n   * @returns\n   * The media asset if it exists or null\n   */\n  const getMediaRestoreValue = async (\n    versionRelationData: Modules.Documents.AnyDocument | Modules.Documents.AnyDocument[]\n  ) => {\n    if (Array.isArray(versionRelationData)) {\n      const existingAndMissingMedias = await Promise.all(\n        versionRelationData.map((media) => {\n          return strapi.db.query('plugin::upload.file').findOne({ where: { id: media.id } });\n        })\n      );\n\n      return existingAndMissingMedias.filter((media) => media != null);\n    }\n\n    return strapi.db\n      .query('plugin::upload.file')\n      .findOne({ where: { id: versionRelationData.id } });\n  };\n\n  const localesService = strapi.plugin('i18n')?.service('locales');\n  const i18nContentTypeService = strapi.plugin('i18n')?.service('content-types');\n\n  const getDefaultLocale = async () => (localesService ? localesService.getDefaultLocale() : null);\n\n  const isLocalizedContentType = (model: Schema.ContentType) =>\n    i18nContentTypeService ? i18nContentTypeService.isLocalizedContentType(model) : false;\n\n  /**\n   *\n   * @description\n   * Creates a dictionary of all locales available\n   */\n  const getLocaleDictionary = async (): Promise<{\n    [key: string]: { name: string; code: string };\n  }> => {\n    if (!localesService) return {};\n\n    const locales = (await localesService.find()) || [];\n    return locales.reduce(\n      (\n        acc: Record<string, NonNullable<HistoryVersions.HistoryVersionDataResponse['locale']>>,\n        locale: NonNullable<HistoryVersions.HistoryVersionDataResponse['locale']>\n      ) => {\n        acc[locale.code] = { name: locale.name, code: locale.code };\n\n        return acc;\n      },\n      {}\n    );\n  };\n\n  /**\n   *\n   * @description\n   * Gets the number of retention days defined on the license or configured by the user\n   */\n  const getRetentionDays = () => {\n    const featureConfig = strapi.ee.features.get('cms-content-history');\n    const licenseRetentionDays =\n      typeof featureConfig === 'object' && featureConfig?.options.retentionDays;\n    const userRetentionDays: number = strapi.config.get('admin.history.retentionDays');\n\n    // Allow users to override the license retention days, but not to increase it\n    if (userRetentionDays && userRetentionDays < licenseRetentionDays) {\n      return userRetentionDays;\n    }\n\n    // User didn't provide retention days value, use the license or fallback to default\n    return Math.min(licenseRetentionDays, DEFAULT_RETENTION_DAYS);\n  };\n\n  const getVersionStatus = async (\n    contentTypeUid: HistoryVersions.CreateHistoryVersion['contentType'],\n    document: Modules.Documents.AnyDocument | null\n  ) => {\n    const documentMetadataService = strapi.plugin('content-manager').service('document-metadata');\n    const meta = await documentMetadataService.getMetadata(contentTypeUid, document);\n\n    return documentMetadataService.getStatus(document, meta.availableStatus);\n  };\n\n  /**\n   * Lists all the fields of a component, excepts those that will be populated.\n   * The goal is to exclude the ID, because when restoring a component,\n   * referencing an ID for a component db row that was deleted creates an error.\n   * So we never store component IDs to ensure they're re-created while restoring a version.\n   */\n  const getComponentFields = (componentUID: UID.Component): string[] => {\n    return Object.entries(strapi.getModel(componentUID).attributes).reduce<string[]>(\n      (fieldsAcc, [key, attribute]) => {\n        if (!['relation', 'media', 'component', 'dynamiczone'].includes(attribute.type)) {\n          fieldsAcc.push(key);\n        }\n\n        return fieldsAcc;\n      },\n      []\n    );\n  };\n\n  /**\n   * @description\n   * Creates a populate object that looks for all the relations that need\n   * to be saved in history, and populates only the fields needed to later retrieve the content.\n   *\n   * @param uid - The content type UID\n   * @param useDatabaseSyntax - Whether to use the database syntax for populate, defaults to false\n   */\n  const getDeepPopulate = (uid: UID.Schema, useDatabaseSyntax = false) => {\n    const model = strapi.getModel(uid);\n    const attributes = Object.entries(model.attributes);\n    const fieldSelector = useDatabaseSyntax ? 'select' : 'fields';\n\n    return attributes.reduce((acc: any, [attributeName, attribute]) => {\n      switch (attribute.type) {\n        case 'relation': {\n          // TODO: Support polymorphic relations\n          const isMorphRelation = attribute.relation.toLowerCase().startsWith('morph');\n          if (isMorphRelation) {\n            break;\n          }\n\n          const isVisible = contentTypes.isVisibleAttribute(model, attributeName);\n          if (isVisible) {\n            acc[attributeName] = { [fieldSelector]: ['documentId', 'locale', 'publishedAt'] };\n          }\n          break;\n        }\n\n        case 'media': {\n          acc[attributeName] = { [fieldSelector]: ['id'] };\n          break;\n        }\n\n        case 'component': {\n          const populate = getDeepPopulate(attribute.component);\n          acc[attributeName] = {\n            populate,\n            [fieldSelector]: getComponentFields(attribute.component),\n          };\n          break;\n        }\n\n        case 'dynamiczone': {\n          // Use fragments to populate the dynamic zone components\n          const populatedComponents = (attribute.components || []).reduce(\n            (acc: any, componentUID: UID.Component) => {\n              acc[componentUID] = {\n                populate: getDeepPopulate(componentUID),\n                [fieldSelector]: getComponentFields(componentUID),\n              };\n              return acc;\n            },\n            {}\n          );\n\n          acc[attributeName] = { on: populatedComponents };\n          break;\n        }\n        default:\n          break;\n      }\n\n      return acc;\n    }, {});\n  };\n\n  /**\n   * @description\n   * Builds a response object for relations containing the related data and a count of missing relations\n   */\n  const buildMediaResponse = async (values: { id: Data.ID }[]): Promise<RelationResponse> => {\n    return (\n      values\n        // Until we implement proper pagination, limit relations to an arbitrary amount\n        .slice(0, 25)\n        .reduce(\n          async (currentRelationDataPromise, entry) => {\n            const currentRelationData = await currentRelationDataPromise;\n\n            // Entry can be null if it's a toOne relation\n            if (!entry) {\n              return currentRelationData;\n            }\n\n            const relatedEntry = await strapi.db\n              .query('plugin::upload.file')\n              .findOne({ where: { id: entry.id } });\n\n            if (relatedEntry) {\n              currentRelationData.results.push(relatedEntry);\n            } else {\n              // The related content has been deleted\n              currentRelationData.meta.missingCount += 1;\n            }\n\n            return currentRelationData;\n          },\n          Promise.resolve<RelationResponse>({\n            results: [],\n            meta: { missingCount: 0 },\n          })\n        )\n    );\n  };\n\n  /**\n   * @description\n   * Builds a response object for media containing the media assets data and a count of missing media assets\n   */\n  const buildRelationReponse = async (\n    values: {\n      documentId: string;\n      locale: string | null;\n    }[],\n    attributeSchema: Schema.Attribute.RelationWithTarget\n  ): Promise<RelationResponse> => {\n    return (\n      values\n        // Until we implement proper pagination, limit relations to an arbitrary amount\n        .slice(0, 25)\n        .reduce(\n          async (currentRelationDataPromise, entry) => {\n            const currentRelationData = await currentRelationDataPromise;\n\n            // Entry can be null if it's a toOne relation\n            if (!entry) {\n              return currentRelationData;\n            }\n            const relatedEntry = await strapi\n              .documents(attributeSchema.target)\n              .findOne({ documentId: entry.documentId, locale: entry.locale || undefined });\n\n            if (relatedEntry) {\n              currentRelationData.results.push({\n                ...relatedEntry,\n                status: await getVersionStatus(attributeSchema.target, relatedEntry),\n              });\n            } else {\n              // The related content has been deleted\n              currentRelationData.meta.missingCount += 1;\n            }\n\n            return currentRelationData;\n          },\n          Promise.resolve<RelationResponse>({\n            results: [],\n            meta: { missingCount: 0 },\n          })\n        )\n    );\n  };\n\n  return {\n    getSchemaAttributesDiff,\n    getRelationRestoreValue,\n    getMediaRestoreValue,\n    getDefaultLocale,\n    isLocalizedContentType,\n    getLocaleDictionary,\n    getRetentionDays,\n    getVersionStatus,\n    getDeepPopulate,\n    buildMediaResponse,\n    buildRelationReponse,\n  };\n};\n","import type { Core, Data, Modules, Schema } from '@strapi/types';\nimport { errors, traverseEntity } from '@strapi/utils';\nimport { omit } from 'lodash/fp';\n\nimport { FIELDS_TO_IGNORE, HISTORY_VERSION_UID } from '../constants';\nimport type { HistoryVersions } from '../../../../shared/contracts';\nimport type {\n  CreateHistoryVersion,\n  HistoryVersionDataResponse,\n} from '../../../../shared/contracts/history-versions';\nimport { createServiceUtils } from './utils';\nimport { getService as getContentManagerService } from '../../utils';\n\n// Needed because the query engine doesn't return any types yet\ntype HistoryVersionQueryResult = Omit<HistoryVersionDataResponse, 'locale'> &\n  Pick<CreateHistoryVersion, 'locale'>;\n\nconst createHistoryService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const query = strapi.db.query(HISTORY_VERSION_UID);\n  const serviceUtils = createServiceUtils({ strapi });\n\n  return {\n    async createVersion(historyVersionData: HistoryVersions.CreateHistoryVersion) {\n      await query.create({\n        data: {\n          ...historyVersionData,\n          createdAt: new Date(),\n          createdBy: strapi.requestContext.get()?.state?.user.id,\n        },\n      });\n    },\n\n    async findVersionsPage(params: HistoryVersions.GetHistoryVersions.Request): Promise<{\n      results: HistoryVersions.HistoryVersionDataResponse[];\n      pagination: HistoryVersions.Pagination;\n    }> {\n      const schema = strapi.getModel(params.query.contentType);\n      const isLocalizedContentType = serviceUtils.isLocalizedContentType(schema);\n      const defaultLocale = await serviceUtils.getDefaultLocale();\n\n      let locale = null;\n      if (isLocalizedContentType) {\n        locale = params.query.locale || defaultLocale;\n      }\n\n      const [{ results, pagination }, localeDictionary] = await Promise.all([\n        query.findPage({\n          ...params.query,\n          where: {\n            $and: [\n              { contentType: params.query.contentType },\n              ...(params.query.documentId ? [{ relatedDocumentId: params.query.documentId }] : []),\n              ...(locale ? [{ locale }] : []),\n            ],\n          },\n          populate: ['createdBy'],\n          orderBy: [{ createdAt: 'desc' }],\n        }),\n        serviceUtils.getLocaleDictionary(),\n      ]);\n\n      const populateEntry = async (entry: HistoryVersionQueryResult) => {\n        return traverseEntity(\n          async (options, utils) => {\n            if (!options.attribute) return;\n            if (!options.value) return;\n\n            const currentValue: any[] = Array.isArray(options.value)\n              ? options.value\n              : [options.value];\n\n            if (options.attribute.type === 'component') {\n              // Ids on components throw an error when restoring\n              utils.remove('id');\n            }\n\n            if (\n              options.attribute.type === 'relation' &&\n              // TODO: handle polymorphic relations\n              options.attribute.relation !== 'morphToOne' &&\n              options.attribute.relation !== 'morphToMany'\n            ) {\n              if (options.attribute.target === 'admin::user') {\n                const adminUsers = await Promise.all(\n                  currentValue.map((userToPopulate) => {\n                    if (userToPopulate == null) {\n                      return null;\n                    }\n\n                    return strapi.query('admin::user').findOne({\n                      where: {\n                        ...(userToPopulate.id ? { id: userToPopulate.id } : {}),\n                        ...(userToPopulate.documentId\n                          ? { documentId: userToPopulate.documentId }\n                          : {}),\n                      },\n                    });\n                  })\n                );\n\n                utils.set(options.key, adminUsers as any);\n              }\n\n              const permissionChecker = getContentManagerService('permission-checker').create({\n                userAbility: params.state.userAbility,\n                model: options.attribute.target,\n              });\n\n              const response = await serviceUtils.buildRelationReponse(\n                currentValue,\n                options.attribute as Schema.Attribute.RelationWithTarget\n              );\n              const sanitizedResults = await Promise.all(\n                response.results.map((media) => permissionChecker.sanitizeOutput(media))\n              );\n\n              utils.set(options.key, {\n                results: sanitizedResults,\n                meta: response.meta,\n              });\n            }\n\n            if (options.attribute.type === 'media') {\n              const permissionChecker = getContentManagerService('permission-checker').create({\n                userAbility: params.state.userAbility,\n                model: 'plugin::upload.file',\n              });\n\n              const response = await serviceUtils.buildMediaResponse(currentValue);\n              const sanitizedResults = await Promise.all(\n                response.results.map((media) => permissionChecker.sanitizeOutput(media))\n              );\n\n              utils.set(options.key, {\n                results: sanitizedResults,\n                meta: response.meta,\n              });\n            }\n          },\n          {\n            schema,\n            getModel: strapi.getModel.bind(strapi),\n          },\n          entry.data\n        );\n      };\n\n      const formattedResults: any[] = await Promise.all(\n        (results as HistoryVersionQueryResult[]).map(async (result) => {\n          return {\n            ...result,\n            data: await populateEntry(result),\n            meta: {\n              unknownAttributes: serviceUtils.getSchemaAttributesDiff(\n                result.schema,\n                strapi.getModel(params.query.contentType).attributes\n              ),\n            },\n            locale: result.locale ? localeDictionary[result.locale] : null,\n          };\n        })\n      );\n\n      return {\n        results: formattedResults,\n        pagination,\n      };\n    },\n\n    async restoreVersion(versionId: Data.ID) {\n      const version = await query.findOne({ where: { id: versionId } });\n      const contentTypeSchemaAttributes = strapi.getModel(version.contentType).attributes;\n      const schemaDiff = serviceUtils.getSchemaAttributesDiff(\n        version.schema,\n        contentTypeSchemaAttributes\n      );\n\n      // Set all added attribute values to null\n      const dataWithoutAddedAttributes = Object.keys(schemaDiff.added).reduce(\n        (currentData, addedKey) => {\n          currentData[addedKey] = null;\n          return currentData;\n        },\n        // Clone to avoid mutating the original version data\n        structuredClone(version.data)\n      );\n\n      // Remove the schema attributes history should ignore\n      const schema = structuredClone(version.schema);\n      schema.attributes = omit(FIELDS_TO_IGNORE, contentTypeSchemaAttributes);\n\n      const dataWithoutMissingRelations = await traverseEntity(\n        async (options, utils) => {\n          if (!options.attribute) return;\n\n          if (options.attribute.type === 'component') {\n            // Ids on components throw an error when restoring\n            utils.remove('id');\n\n            if (options.attribute.repeatable && options.value === null) {\n              // Repeatable Components should always be an array\n              utils.set(options.key, [] as any);\n            }\n          }\n\n          if (options.attribute.type === 'dynamiczone') {\n            if (options.value === null) {\n              // Dynamic zones should always be an array\n              utils.set(options.key, [] as any);\n            }\n          }\n\n          if (\n            options.attribute.type === 'relation' &&\n            // TODO: handle polymorphic relations\n            options.attribute.relation !== 'morphToOne' &&\n            options.attribute.relation !== 'morphToMany'\n          ) {\n            if (!options.value) return;\n\n            const data = await serviceUtils.getRelationRestoreValue(\n              options.value as Modules.Documents.AnyDocument,\n              options.attribute as Schema.Attribute.RelationWithTarget\n            );\n\n            utils.set(options.key, data as Modules.Documents.AnyDocument);\n          }\n\n          if (options.attribute.type === 'media') {\n            if (!options.value) return;\n\n            const data = await serviceUtils.getMediaRestoreValue(\n              options.value as Modules.Documents.AnyDocument\n            );\n\n            utils.set(options.key, data);\n          }\n        },\n        {\n          schema,\n          getModel: strapi.getModel.bind(strapi),\n        },\n        dataWithoutAddedAttributes\n      );\n\n      const data = omit(['id', ...Object.keys(schemaDiff.removed)], dataWithoutMissingRelations);\n      const restoredDocument = await strapi.documents(version.contentType).update({\n        documentId: version.relatedDocumentId,\n        locale: version.locale,\n        data,\n      });\n\n      if (!restoredDocument) {\n        throw new errors.ApplicationError('Failed to restore version');\n      }\n\n      return restoredDocument;\n    },\n  };\n};\n\nexport { createHistoryService };\n","import type { Core, Modules, UID } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\n\nimport { omit, castArray } from 'lodash/fp';\n\nimport { scheduleJob } from 'node-schedule';\n\nimport { getService } from '../utils';\nimport { FIELDS_TO_IGNORE, HISTORY_VERSION_UID } from '../constants';\n\nimport type { CreateHistoryVersion } from '../../../../shared/contracts/history-versions';\nimport { createServiceUtils } from './utils';\n\n/**\n * Filters out actions that should not create a history version.\n */\nconst shouldCreateHistoryVersion = (\n  context: Modules.Documents.Middleware.Context\n): context is Modules.Documents.Middleware.Context & {\n  action: 'create' | 'update' | 'clone' | 'publish' | 'unpublish' | 'discardDraft';\n  contentType: UID.CollectionType;\n} => {\n  // Ignore requests that are not related to the content manager\n  if (!strapi.requestContext.get()?.request.url.startsWith('/content-manager')) {\n    return false;\n  }\n\n  // NOTE: cannot do type narrowing with array includes\n  if (\n    context.action !== 'create' &&\n    context.action !== 'update' &&\n    context.action !== 'clone' &&\n    context.action !== 'publish' &&\n    context.action !== 'unpublish' &&\n    context.action !== 'discardDraft'\n  ) {\n    return false;\n  }\n\n  /**\n   * When a document is published, the draft version of the document is also updated.\n   * It creates confusion for users because they see two history versions each publish action.\n   * To avoid this, we silence the update action during a publish request,\n   * so that they only see the published version of the document in the history.\n   */\n  if (\n    context.action === 'update' &&\n    strapi.requestContext.get()?.request.url.endsWith('/actions/publish')\n  ) {\n    return false;\n  }\n\n  // Ignore content types not created by the user\n  if (!context.contentType.uid.startsWith('api::')) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Returns the content type schema (and its components schemas).\n * Used to determine if changes were made in the content type builder since a history version was created.\n * And therefore which fields can be restored and which cannot.\n */\nconst getSchemas = (uid: UID.CollectionType) => {\n  const attributesSchema = strapi.getModel(uid).attributes;\n\n  // TODO: Handle nested components\n  const componentsSchemas = Object.keys(attributesSchema).reduce(\n    (currentComponentSchemas, key) => {\n      const fieldSchema = attributesSchema[key];\n\n      if (fieldSchema.type === 'component') {\n        const componentSchema = strapi.getModel(fieldSchema.component).attributes;\n        return {\n          ...currentComponentSchemas,\n          [fieldSchema.component]: componentSchema,\n        };\n      }\n\n      // Ignore anything that's not a component\n      return currentComponentSchemas;\n    },\n    {} as CreateHistoryVersion['componentsSchemas']\n  );\n\n  return {\n    schema: omit(FIELDS_TO_IGNORE, attributesSchema) as CreateHistoryVersion['schema'],\n    componentsSchemas,\n  };\n};\n\nconst createLifecyclesService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const state: {\n    deleteExpiredJob: ReturnType<typeof scheduleJob> | null;\n    isInitialized: boolean;\n  } = {\n    deleteExpiredJob: null,\n    isInitialized: false,\n  };\n\n  const serviceUtils = createServiceUtils({ strapi });\n\n  return {\n    async bootstrap() {\n      // Prevent initializing the service twice\n      if (state.isInitialized) {\n        return;\n      }\n\n      strapi.documents.use(async (context, next) => {\n        const result = (await next()) as any;\n\n        if (!shouldCreateHistoryVersion(context)) {\n          return result;\n        }\n\n        // On create/clone actions, the documentId is not available before creating the action is executed\n        const documentId =\n          context.action === 'create' || context.action === 'clone'\n            ? result.documentId\n            : context.params.documentId;\n\n        // Apply default locale if not available in the request\n        const defaultLocale = await serviceUtils.getDefaultLocale();\n        const locales = castArray(context.params?.locale || defaultLocale);\n        if (!locales.length) {\n          return result;\n        }\n\n        // All schemas related to the content type\n        const uid = context.contentType.uid;\n        const schemas = getSchemas(uid);\n        const model = strapi.getModel(uid);\n\n        const isLocalizedContentType = serviceUtils.isLocalizedContentType(model);\n\n        // Find all affected entries\n        const localeEntries = await strapi.db.query(uid).findMany({\n          where: {\n            documentId,\n            ...(isLocalizedContentType ? { locale: { $in: locales } } : {}),\n            ...(contentTypes.hasDraftAndPublish(strapi.contentTypes[uid])\n              ? { publishedAt: null }\n              : {}),\n          },\n          populate: serviceUtils.getDeepPopulate(uid, true /* use database syntax */),\n        });\n\n        await strapi.db.transaction(async ({ onCommit }) => {\n          // .createVersion() is executed asynchronously,\n          // onCommit prevents creating a history version\n          // when the transaction has already been committed\n          onCommit(async () => {\n            for (const entry of localeEntries) {\n              const status = await serviceUtils.getVersionStatus(uid, entry);\n\n              await getService(strapi, 'history').createVersion({\n                contentType: uid,\n                data: omit(FIELDS_TO_IGNORE, entry) as Modules.Documents.AnyDocument,\n                relatedDocumentId: documentId,\n                locale: entry.locale,\n                status,\n                ...schemas,\n              });\n            }\n          });\n        });\n\n        return result;\n      });\n\n      // Schedule a job to delete expired history versions every day at midnight\n      state.deleteExpiredJob = scheduleJob('historyDaily', '0 0 * * *', () => {\n        const retentionDaysInMilliseconds = serviceUtils.getRetentionDays() * 24 * 60 * 60 * 1000;\n        const expirationDate = new Date(Date.now() - retentionDaysInMilliseconds);\n\n        strapi.db\n          .query(HISTORY_VERSION_UID)\n          .deleteMany({\n            where: {\n              created_at: {\n                $lt: expirationDate,\n              },\n            },\n          })\n          .catch((error) => {\n            if (error instanceof Error) {\n              strapi.log.error('Error deleting expired history versions', error.message);\n            }\n          });\n      });\n\n      state.isInitialized = true;\n    },\n\n    async destroy() {\n      if (state.deleteExpiredJob) {\n        state.deleteExpiredJob.cancel();\n      }\n    },\n  };\n};\n\nexport { createLifecyclesService };\n","import type { Plugin } from '@strapi/types';\nimport { createHistoryService } from './history';\nimport { createLifecyclesService } from './lifecycles';\n\nexport const services = {\n  history: createHistoryService,\n  lifecycles: createLifecyclesService,\n} satisfies Plugin.LoadedPlugin['services'];\n","import type { Plugin } from '@strapi/types';\n\nconst info = { pluginName: 'content-manager', type: 'admin' };\n\nconst historyVersionRouter: Plugin.LoadedPlugin['routes'][string] = {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      info,\n      path: '/history-versions',\n      handler: 'history-version.findMany',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'PUT',\n      info,\n      path: '/history-versions/:versionId/restore',\n      handler: 'history-version.restoreVersion',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n  ],\n};\n\nexport { historyVersionRouter };\n","import type { Plugin } from '@strapi/types';\nimport { historyVersionRouter } from './history-version';\n\n/**\n * The routes will me merged with the other Content Manager routers,\n * so we need to avoid conficts in the router name, and to prefix the path for each route.\n */\nexport const routes = {\n  'history-version': historyVersionRouter,\n} satisfies Plugin.LoadedPlugin['routes'];\n","import type { Model } from '@strapi/database';\nimport { HISTORY_VERSION_UID } from '../constants';\n\nconst historyVersion: Model = {\n  uid: HISTORY_VERSION_UID,\n  tableName: 'strapi_history_versions',\n  singularName: 'history-version',\n  attributes: {\n    id: {\n      type: 'increments',\n    },\n    contentType: {\n      type: 'string',\n      column: { notNullable: true },\n    },\n    relatedDocumentId: {\n      type: 'string',\n      // TODO: notNullable should be true once history can record publish actions\n      column: { notNullable: false },\n    },\n    locale: {\n      type: 'string',\n    },\n    status: {\n      type: 'enumeration',\n      enum: ['draft', 'published', 'modified'],\n    },\n    data: {\n      type: 'json',\n    },\n    schema: {\n      type: 'json',\n    },\n    createdAt: {\n      type: 'datetime',\n      default: () => new Date(),\n    },\n    // FIXME: joinTable should be optional\n    // @ts-expect-error database model is not yet updated to support useJoinTable\n    createdBy: {\n      type: 'relation',\n      relation: 'oneToOne',\n      target: 'admin::user',\n      useJoinTable: false,\n    },\n  },\n};\n\nexport { historyVersion };\n","import type { Plugin } from '@strapi/types';\nimport { controllers } from './controllers';\nimport { services } from './services';\nimport { routes } from './routes';\nimport { getService } from './utils';\nimport { historyVersion } from './models/history-version';\n\n/**\n * Check once if the feature is enabled before loading it,\n * so that we can assume it is enabled in the other files.\n */\nconst getFeature = (): Partial<Plugin.LoadedPlugin> => {\n  if (strapi.ee.features.isEnabled('cms-content-history')) {\n    return {\n      register({ strapi }) {\n        strapi.get('models').add(historyVersion);\n      },\n      bootstrap({ strapi }) {\n        // Start recording history and saving history versions\n        getService(strapi, 'lifecycles').bootstrap();\n      },\n      destroy({ strapi }) {\n        getService(strapi, 'lifecycles').destroy();\n      },\n      controllers,\n      services,\n      routes,\n    };\n  }\n\n  /**\n   * Keep registering the model to avoid losing the data if the feature is disabled,\n   * or if the license expires.\n   */\n  return {\n    register({ strapi }) {\n      strapi.get('models').add(historyVersion);\n    },\n  };\n};\n\nexport default getFeature();\n","import type { Plugin } from '@strapi/types';\n\nconst info = { pluginName: 'content-manager', type: 'admin' };\n\nconst previewRouter: Plugin.LoadedPlugin['routes'][string] = {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      info,\n      path: '/preview/url/:contentType',\n      handler: 'preview.getPreviewUrl',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n  ],\n};\n\nexport { previewRouter };\n","import type { Plugin } from '@strapi/types';\nimport { previewRouter } from './preview';\n\n/**\n * The routes will be merged with the other Content Manager routers,\n * so we need to avoid conficts in the router name, and to prefix the path for each route.\n */\nexport const routes = {\n  preview: previewRouter,\n} satisfies Plugin.LoadedPlugin['routes'];\n","import type { Core } from '@strapi/types';\n\ntype PreviewServices = typeof import('./services').services;\n\nfunction getService<T extends keyof PreviewServices>(strapi: Core.Strapi, name: T) {\n  // Cast is needed because the return type of strapi.service is too vague\n  return strapi.service(`plugin::content-manager.${name}`) as ReturnType<PreviewServices[T]>;\n}\n\nexport { getService };\n","import * as yup from 'yup';\nimport { pick } from 'lodash/fp';\n\nimport type { Core, UID } from '@strapi/types';\nimport { validateYupSchema, errors } from '@strapi/utils';\n\nimport { Preview } from '../../../../../shared/contracts';\nimport type { HandlerParams } from '../../services/preview-config';\n\nconst getPreviewUrlSchema = yup\n  .object()\n  .shape({\n    // Will be undefined for single types\n    documentId: yup.string(),\n    locale: yup.string().nullable(),\n    status: yup.string(),\n  })\n  .required();\n\nexport const validatePreviewUrl = async (\n  strapi: Core.Strapi,\n  uid: UID.ContentType,\n  params: Preview.GetPreviewUrl.Request['query']\n): Promise<HandlerParams> => {\n  // Validate the request parameters format\n  await validateYupSchema(getPreviewUrlSchema)(params);\n\n  const newParams = pick(['documentId', 'locale', 'status'], params) as HandlerParams;\n  const model = strapi.getModel(uid);\n\n  // If it's not a collection type or single type\n  if (!model || model.modelType !== 'contentType') {\n    throw new errors.ValidationError('Invalid content type');\n  }\n\n  // Document id is not required for single types\n  const isSingleType = model?.kind === 'singleType';\n  if (!isSingleType && !params.documentId) {\n    throw new errors.ValidationError('documentId is required for Collection Types');\n  }\n\n  // Fill the documentId if it's a single type\n  if (isSingleType) {\n    const doc = await strapi.documents(uid).findFirst();\n\n    if (!doc) {\n      throw new errors.NotFoundError('Document not found');\n    }\n\n    newParams.documentId = doc?.documentId;\n  }\n\n  /**\n   * If status is not specified, follow the following rules:\n   * - D&P disabled: status is considered published\n   * - D&P enabled: status is considered draft\n   */\n  if (!newParams.status) {\n    const isDPEnabled = model?.options?.draftAndPublish;\n    newParams.status = isDPEnabled ? 'draft' : 'published';\n  }\n\n  return newParams;\n};\n","import type { Core, UID } from '@strapi/types';\n\nimport { Preview } from '../../../../shared/contracts';\n\nimport { getService } from '../utils';\nimport { validatePreviewUrl } from './validation/preview';\n\nconst createPreviewController = () => {\n  return {\n    /**\n     * Transforms an entry into a preview URL, so that it can be previewed\n     * in the Content Manager.\n     */\n    async getPreviewUrl(ctx) {\n      const uid = ctx.params.contentType as UID.ContentType;\n      const query = ctx.request.query as Preview.GetPreviewUrl.Request['query'];\n\n      // Validate the request parameters\n      const params = await validatePreviewUrl(strapi, uid, query);\n\n      // TODO: Permissions to preview content\n\n      // Get the preview URL by using the user-defined config handler\n      const previewService = getService(strapi, 'preview');\n      const url = await previewService.getPreviewUrl(uid, params);\n\n      // If no url is found, set status to 204\n      if (!url) {\n        ctx.status = 204;\n      }\n\n      return {\n        data: { url },\n      } satisfies Preview.GetPreviewUrl.Response;\n    },\n  } satisfies Core.Controller;\n};\n\nexport { createPreviewController };\n","import type { Plugin } from '@strapi/types';\nimport { createPreviewController } from './preview';\n\nexport const controllers = {\n  preview: createPreviewController,\n  /**\n   * Casting is needed because the types aren't aware that Strapi supports\n   * passing a controller factory as the value, instead of a controller object directly\n   */\n} as unknown as Plugin.LoadedPlugin['controllers'];\n","import type { Core, UID } from '@strapi/types';\nimport { errors } from '@strapi/utils';\n\nimport { getService } from '../utils';\nimport type { HandlerParams } from './preview-config';\n\n/**\n * Responsible of routing an entry to a preview URL.\n */\nconst createPreviewService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const config = getService(strapi, 'preview-config');\n\n  return {\n    async getPreviewUrl(uid: UID.ContentType, params: HandlerParams) {\n      const handler = config.getPreviewHandler();\n\n      try {\n        // Try to get the preview URL from the user-defined handler\n        return handler(uid, params);\n      } catch (error) {\n        // Log the error and throw a generic error\n        strapi.log.error(`Failed to get preview URL: ${error}`);\n        throw new errors.ApplicationError('Failed to get preview URL');\n      }\n\n      return;\n    },\n  };\n};\n\nexport { createPreviewService };\n","import { mergeWith } from 'lodash/fp';\n\nimport type { Core, UID } from '@strapi/types';\nimport { errors } from '@strapi/utils';\n\nexport type HandlerParams = {\n  documentId: string;\n  locale: string;\n  status: 'published' | 'draft';\n};\n\nexport interface PreviewConfig {\n  enabled: boolean;\n  config: {\n    // List of CSP allowed origins. This is a shortcut to setting it up inside `config/middlewares.js`\n    allowedOrigins: string[];\n    handler: (uid: UID.Schema, params: HandlerParams) => string | undefined;\n  };\n}\n\n/**\n * Utility to extend Strapi configuration middlewares. Mainly used to extend the CSP directives from the security middleware.\n */\nconst extendMiddlewareConfiguration = (middleware = { name: '', config: {} }) => {\n  const middlewares = strapi.config.get('middlewares') as (string | object)[];\n\n  const configuredMiddlewares = middlewares.map((currentMiddleware) => {\n    if (currentMiddleware === middleware.name) {\n      // Use the new config object if the middleware has no config property yet\n      return middleware;\n    }\n\n    // @ts-expect-error - currentMiddleware is not a string\n    if (currentMiddleware.name === middleware.name) {\n      // Deep merge (+ concat arrays) the new config with the current middleware config\n      return mergeWith(\n        (objValue, srcValue) => {\n          if (Array.isArray(objValue)) {\n            return objValue.concat(srcValue);\n          }\n\n          return undefined;\n        },\n        currentMiddleware,\n        middleware\n      );\n    }\n\n    return currentMiddleware;\n  });\n\n  strapi.config.set('middlewares', configuredMiddlewares);\n};\n\n/**\n * Read configuration for static preview\n */\nconst createPreviewConfigService = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    register() {\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      const config = strapi.config.get('admin.preview') as PreviewConfig;\n\n      /**\n       * Register the allowed origins for CSP, so the preview URL can be displayed\n       */\n      if (config.config?.allowedOrigins) {\n        extendMiddlewareConfiguration({\n          name: 'strapi::security',\n          config: {\n            contentSecurityPolicy: {\n              directives: {\n                'frame-src': config.config.allowedOrigins,\n              },\n            },\n          },\n        });\n      }\n    },\n\n    isEnabled() {\n      const config = strapi.config.get('admin.preview') as PreviewConfig;\n\n      if (!config) {\n        return false;\n      }\n\n      return config?.enabled ?? true;\n    },\n\n    /**\n     * Validate if the configuration is valid\n     */\n    validate() {\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      const handler = this.getPreviewHandler();\n\n      // Handler must be a function\n      if (typeof handler !== 'function') {\n        throw new errors.ValidationError(\n          'Preview configuration is invalid. Handler must be a function'\n        );\n      }\n    },\n\n    /**\n     * Utility to get the preview handler from the configuration\n     */\n    getPreviewHandler(): PreviewConfig['config']['handler'] {\n      const config = strapi.config.get('admin.preview') as PreviewConfig;\n\n      const emptyHandler = () => {\n        return undefined;\n      };\n\n      if (!this.isEnabled()) {\n        return emptyHandler;\n      }\n\n      return config?.config?.handler || emptyHandler;\n    },\n  };\n};\n\nexport { createPreviewConfigService };\n","import type { Plugin } from '@strapi/types';\n\nimport { createPreviewService } from './preview';\nimport { createPreviewConfigService } from './preview-config';\n\nexport const services = {\n  preview: createPreviewService,\n  'preview-config': createPreviewConfigService,\n} satisfies Plugin.LoadedPlugin['services'];\n","import type { Plugin } from '@strapi/types';\n\nimport { routes } from './routes';\nimport { controllers } from './controllers';\nimport { services } from './services';\nimport { getService } from './utils';\n\n/**\n * Check once if the feature is enabled before loading it,\n * so that we can assume it is enabled in the other files.\n */\nconst getFeature = (): Partial<Plugin.LoadedPlugin> => {\n  return {\n    register() {\n      const config = getService(strapi, 'preview-config');\n      config.validate();\n      config.register();\n    },\n    bootstrap() {},\n    routes,\n    controllers,\n    services,\n  };\n};\n\nexport default getFeature();\n","import type { Plugin } from '@strapi/types';\nimport history from './history';\nimport preview from './preview';\n\nconst register: Plugin.LoadedPlugin['register'] = async ({ strapi }) => {\n  await history.register?.({ strapi });\n  await preview.register?.({ strapi });\n};\n\nexport default register;\n","const ALLOWED_WEBHOOK_EVENTS = {\n  ENTRY_PUBLISH: 'entry.publish',\n  ENTRY_UNPUBLISH: 'entry.unpublish',\n};\n\nexport { ALLOWED_WEBHOOK_EVENTS };\n","import { getService } from './utils';\nimport { ALLOWED_WEBHOOK_EVENTS } from './constants';\nimport history from './history';\nimport preview from './preview';\n\nexport default async () => {\n  Object.entries(ALLOWED_WEBHOOK_EVENTS).forEach(([key, value]) => {\n    strapi.get('webhookStore').addAllowedEvent(key, value);\n  });\n\n  getService('field-sizes').setCustomFieldInputSizes();\n  await getService('components').syncConfigurations();\n  await getService('content-types').syncConfigurations();\n  await getService('permission').registerPermissions();\n\n  await history.bootstrap?.({ strapi });\n  await preview.bootstrap?.({ strapi });\n};\n","import type { Plugin } from '@strapi/types';\nimport history from './history';\n\nconst destroy: Plugin.LoadedPlugin['destroy'] = async ({ strapi }) => {\n  await history.destroy?.({ strapi });\n};\n\nexport default destroy;\n","import type { UID, Core, Struct } from '@strapi/types';\nimport type { Context, Next } from 'koa';\nimport isNil from 'lodash/isNil';\n\ninterface ContentType extends Struct.ContentTypeSchema {\n  plugin?: string;\n}\n\nexport default async (ctx: Context, next: Next) => {\n  const { model }: { model: UID.ContentType } = ctx.params;\n\n  const ct: ContentType = strapi.contentTypes[model];\n\n  if (!ct) {\n    return ctx.send({ error: 'contentType.notFound' }, 404);\n  }\n\n  let controllers;\n  if (!ct.plugin || ct.plugin === 'admin') {\n    controllers = strapi.admin.controllers;\n  } else {\n    controllers = strapi.plugin(ct.plugin).controllers;\n  }\n\n  const { route }: { route: Core.Route } = ctx.state;\n\n  if (typeof route.handler !== 'string') {\n    return next();\n  }\n\n  const [, action] = route.handler.split('.');\n\n  let actionConfig: any;\n  if (!ct.plugin || ct.plugin === 'admin') {\n    actionConfig = strapi.config.get(`admin.layout.${ct.modelName}.actions.${action}`);\n  } else {\n    actionConfig = strapi.plugin(ct.plugin).config(`layout.${ct.modelName}.actions.${action}`);\n  }\n\n  if (!isNil(actionConfig)) {\n    const [controller, action] = actionConfig.split('.');\n\n    if (controller && action) {\n      return controllers[controller.toLowerCase()][action](ctx, next);\n    }\n  }\n\n  await next();\n};\n","import { routing } from '../middlewares';\n\nexport default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/init',\n      handler: 'init.getInitData',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/content-types',\n      handler: 'content-types.findContentTypes',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/content-types-settings',\n      handler: 'content-types.findContentTypesSettings',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/content-types/:uid/configuration',\n      handler: 'content-types.findContentTypeConfiguration',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/content-types/:uid/configuration',\n      handler: 'content-types.updateContentTypeConfiguration',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n\n    {\n      method: 'GET',\n      path: '/components',\n      handler: 'components.findComponents',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/components/:uid/configuration',\n      handler: 'components.findComponentConfiguration',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/components/:uid/configuration',\n      handler: 'components.updateComponentConfiguration',\n      config: {\n        policies: [],\n      },\n    },\n\n    {\n      method: 'POST',\n      path: '/uid/generate',\n      handler: 'uid.generateUID',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/uid/check-availability',\n      handler: 'uid.checkUIDAvailability',\n      config: {\n        policies: [],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/relations/:model/:targetField',\n      handler: 'relations.findAvailable',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/relations/:model/:id/:targetField',\n      handler: 'relations.findExisting',\n      config: {\n        policies: ['admin::isAuthenticatedAdmin'],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/single-types/:model',\n      handler: 'single-types.find',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/single-types/:model',\n      handler: 'single-types.createOrUpdate',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: {\n              actions: [\n                'plugin::content-manager.explorer.create',\n                'plugin::content-manager.explorer.update',\n              ],\n              hasAtLeastOne: true,\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/single-types/:model',\n      handler: 'single-types.delete',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.delete'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/single-types/:model/actions/publish',\n      handler: 'single-types.publish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/single-types/:model/actions/unpublish',\n      handler: 'single-types.unpublish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/single-types/:model/actions/discard',\n      handler: 'single-types.discard',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.update'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/single-types/:model/actions/countDraftRelations',\n      handler: 'single-types.countDraftRelations',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/collection-types/:model',\n      handler: 'collection-types.find',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model',\n      handler: 'collection-types.create',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.create'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/clone/:sourceId',\n      handler: 'collection-types.clone',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.create'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/auto-clone/:sourceId',\n      handler: 'collection-types.autoClone',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.create'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/collection-types/:model/:id',\n      handler: 'collection-types.findOne',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/collection-types/:model/:id',\n      handler: 'collection-types.update',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.update'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/collection-types/:model/:id',\n      handler: 'collection-types.delete',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.delete'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/actions/publish',\n      handler: 'collection-types.publish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/:id/actions/publish',\n      handler: 'collection-types.publish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/:id/actions/unpublish',\n      handler: 'collection-types.unpublish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/:id/actions/discard',\n      handler: 'collection-types.discard',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.update'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/actions/bulkDelete',\n      handler: 'collection-types.bulkDelete',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.delete'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/actions/bulkPublish',\n      handler: 'collection-types.bulkPublish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/collection-types/:model/actions/bulkUnpublish',\n      handler: 'collection-types.bulkUnpublish',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.publish'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/collection-types/:model/:id/actions/countDraftRelations',\n      handler: 'collection-types.countDraftRelations',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.read'] },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/collection-types/:model/actions/countManyEntriesDraftRelations',\n      handler: 'collection-types.countManyEntriesDraftRelations',\n      config: {\n        middlewares: [routing],\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'plugin::content-manager.hasPermissions',\n            config: { actions: ['plugin::content-manager.explorer.read'] },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import admin from './admin';\nimport history from '../history';\nimport preview from '../preview';\n\nexport default {\n  admin,\n  ...(history.routes ? history.routes : {}),\n  ...(preview.routes ? preview.routes : {}),\n};\n","import { yup, validateYupSchemaSync } from '@strapi/utils';\n\nconst hasPermissionsSchema = yup.object({\n  actions: yup.array().of(yup.string()),\n  hasAtLeastOne: yup.boolean(),\n});\n\nexport const validateHasPermissionsInput = validateYupSchemaSync(hasPermissionsSchema);\n","import type { Context } from 'koa';\nimport { policy } from '@strapi/utils';\nimport { validateHasPermissionsInput } from '../validation/policies/hasPermissions';\n\nconst { createPolicy } = policy;\n\nexport default createPolicy({\n  name: 'plugin::content-manager.hasPermissions',\n  validator: validateHasPermissionsInput,\n  /**\n   * NOTE: Action aliases are currently not checked at this level (policy).\n   *       This is currently the intended behavior to avoid changing the behavior of API related permissions.\n   *       If you want to add support for it, please create a dedicated RFC with a list of potential side effect this could have.\n   */\n  handler(ctx: Context, config = {}) {\n    const { actions = [], hasAtLeastOne = false }: { actions: string[]; hasAtLeastOne: boolean } =\n      config;\n\n    const { userAbility } = ctx.state;\n    const { model }: { model: string } = ctx.params;\n\n    const isAuthorized = hasAtLeastOne\n      ? actions.some((action) => userAbility.can(action, model))\n      : actions.every((action) => userAbility.can(action, model));\n\n    return isAuthorized;\n  },\n});\n","import hasPermissions from './hasPermissions';\n\nexport default {\n  hasPermissions,\n};\n","import _ from 'lodash';\nimport { intersection } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils } from '@strapi/utils';\n\nconst { getNonVisibleAttributes, getWritableAttributes } = contentTypesUtils;\nconst { PUBLISHED_AT_ATTRIBUTE, CREATED_BY_ATTRIBUTE, UPDATED_BY_ATTRIBUTE } =\n  contentTypesUtils.constants;\n\nconst NON_SORTABLES = ['component', 'json', 'media', 'richtext', 'dynamiczone', 'blocks'];\nconst SORTABLE_RELATIONS = ['oneToOne', 'manyToOne'];\n\nconst NON_LISTABLES = ['json', 'password', 'richtext', 'dynamiczone', 'blocks'];\nconst LISTABLE_RELATIONS = ['oneToOne', 'oneToMany', 'manyToOne', 'manyToMany'];\n\n// hidden fields are fields that are configured to be hidden from list, and edit views\nconst isHidden = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  const isHidden = _.get(schema, ['config', 'attributes', name, 'hidden'], false);\n  if (isHidden === true) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isListable = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  if (isHidden(schema, name)) {\n    return false;\n  }\n\n  const attribute = schema.attributes[name];\n  if (NON_LISTABLES.includes(attribute.type)) {\n    return false;\n  }\n\n  if (isRelation(attribute) && !LISTABLE_RELATIONS.includes(attribute.relationType)) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isSortable = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  if (schema.modelType === 'component' && name === 'id') return false;\n\n  const attribute = schema.attributes[name];\n  if (NON_SORTABLES.includes(attribute.type)) {\n    return false;\n  }\n\n  if (isRelation(attribute) && !SORTABLE_RELATIONS.includes(attribute.relationType)) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isSearchable = (schema: any, name: any) => {\n  return isSortable(schema, name);\n};\n\nconst isVisible = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  if (isHidden(schema, name)) {\n    return false;\n  }\n\n  if (isTimestamp(schema, name) || name === 'id') {\n    return false;\n  }\n\n  if (isPublicationField(name)) {\n    return false;\n  }\n\n  if (isCreatorField(schema, name)) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isPublicationField = (name: any) => PUBLISHED_AT_ATTRIBUTE === name;\n\nconst isTimestamp = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  const timestamps = contentTypesUtils.getTimestamps(schema);\n  if (!timestamps || !Array.isArray(timestamps)) {\n    return false;\n  }\n\n  if (timestamps.includes(name)) {\n    return true;\n  }\n};\n\nconst isCreatorField = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  const creatorFields = contentTypesUtils.getCreatorFields(schema);\n  if (!creatorFields || !Array.isArray(creatorFields)) {\n    return false;\n  }\n\n  if (creatorFields.includes(name)) {\n    return true;\n  }\n};\n\nconst isRelation = (attribute: any) => attribute.type === 'relation';\n\nconst hasRelationAttribute = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  if (isHidden(schema, name)) {\n    return false;\n  }\n\n  if (!isVisible(schema, name)) {\n    return false;\n  }\n\n  return isRelation(schema.attributes[name]);\n};\n\nconst hasEditableAttribute = (schema: any, name: any) => {\n  if (!_.has(schema.attributes, name)) {\n    return false;\n  }\n\n  if (isHidden(schema, name)) {\n    return false;\n  }\n\n  if (!isVisible(schema, name)) {\n    return false;\n  }\n\n  return true;\n};\n\nconst findFirstStringAttribute = (schema: any) => {\n  return Object.keys(schema.attributes || {}).find((key) => {\n    const { type } = schema.attributes[key];\n    return type === 'string' && key !== 'id';\n  });\n};\n\nconst getDefaultMainField = (schema: any) => findFirstStringAttribute(schema) || 'id';\n\n/**\n * Returns list of all sortable attributes for a given content type schema\n * TODO V5: Refactor non visible fields to be a part of content-manager schema so we can use isSortable instead\n * @param {*} schema\n * @returns\n */\nconst getSortableAttributes = (schema: any) => {\n  const validAttributes = Object.keys(schema.attributes).filter((key) => isListable(schema, key));\n\n  const model = strapi.getModel(schema.uid);\n  const nonVisibleWritableAttributes = intersection(\n    getNonVisibleAttributes(model),\n    getWritableAttributes(model)\n  );\n\n  return [\n    'id',\n    ...validAttributes,\n    ...nonVisibleWritableAttributes,\n    CREATED_BY_ATTRIBUTE,\n    UPDATED_BY_ATTRIBUTE,\n  ];\n};\n\nexport {\n  isSortable,\n  isVisible,\n  isSearchable,\n  isRelation,\n  isListable,\n  hasEditableAttribute,\n  hasRelationAttribute,\n  getDefaultMainField,\n  getSortableAttributes,\n};\n","import { isEmpty, pick, pipe, propOr, isEqual } from 'lodash/fp';\nimport { traverse } from '@strapi/utils';\nimport qs from 'qs';\nimport { isSortable, getDefaultMainField, getSortableAttributes } from './attributes';\n\n/** General settings */\nconst DEFAULT_SETTINGS = {\n  bulkable: true,\n  filterable: true,\n  searchable: true,\n  pageSize: 10,\n};\n\nconst settingsFields = [\n  'searchable',\n  'filterable',\n  'bulkable',\n  'pageSize',\n  'mainField',\n  'defaultSortBy',\n  'defaultSortOrder',\n];\n\nconst getModelSettings = pipe([propOr({}, 'config.settings'), pick(settingsFields)]);\n\nasync function isValidDefaultSort(schema: any, value: any) {\n  const parsedValue = qs.parse(value);\n\n  const omitNonSortableAttributes = ({ schema, key }: any, { remove }: any) => {\n    const sortableAttributes = getSortableAttributes(schema);\n    if (!sortableAttributes.includes(key)) {\n      remove(key);\n    }\n  };\n\n  const sanitizedValue = await traverse.traverseQuerySort(\n    omitNonSortableAttributes,\n    { schema, getModel: strapi.getModel.bind(strapi) },\n    parsedValue\n  );\n\n  // If any of the keys has been removed, the sort attribute is not valid\n  return isEqual(parsedValue, sanitizedValue);\n}\n\nconst createDefaultSettings = async (schema: any) => {\n  const defaultField = getDefaultMainField(schema);\n\n  return {\n    ...DEFAULT_SETTINGS,\n    mainField: defaultField,\n    defaultSortBy: defaultField,\n    defaultSortOrder: 'ASC',\n    ...getModelSettings(schema),\n  };\n};\n\nconst syncSettings = async (configuration: any, schema: any) => {\n  if (isEmpty(configuration.settings)) return createDefaultSettings(schema);\n\n  const defaultField = getDefaultMainField(schema);\n\n  const { mainField = defaultField, defaultSortBy = defaultField } = configuration.settings || {};\n\n  return {\n    ...configuration.settings,\n    mainField: isSortable(schema, mainField) ? mainField : defaultField,\n    defaultSortBy: (await isValidDefaultSort(schema, defaultSortBy)) ? defaultSortBy : defaultField,\n  };\n};\n\nexport { isValidDefaultSort, createDefaultSettings, syncSettings };\n","import { yup } from '@strapi/utils';\nimport { getService } from '../../utils';\nimport { isListable, hasEditableAttribute } from '../../services/utils/configuration/attributes';\nimport { isValidDefaultSort } from '../../services/utils/configuration/settings';\n\n/**\n * Creates the validation schema for content-type configurations\n */\nexport default (schema: any, opts = {}) =>\n  yup\n    .object()\n    .shape({\n      settings: createSettingsSchema(schema).default(null).nullable(),\n      metadatas: createMetadasSchema(schema).default(null).nullable(),\n      layouts: createLayoutsSchema(schema, opts).default(null).nullable(),\n      options: yup.object().optional(),\n    })\n    .noUnknown();\n\nconst createSettingsSchema = (schema: any) => {\n  const validAttributes = Object.keys(schema.attributes).filter((key) => isListable(schema, key));\n\n  return yup\n    .object()\n    .shape({\n      bulkable: yup.boolean().required(),\n      filterable: yup.boolean().required(),\n      pageSize: yup.number().integer().min(10).max(100).required(),\n      searchable: yup.boolean().required(),\n      // should be reset when the type changes\n      mainField: yup.string().oneOf(validAttributes.concat('id')).default('id'),\n      // should be reset when the type changes\n      defaultSortBy: yup\n        .string()\n        .test('is-valid-sort-attribute', '${path} is not a valid sort attribute', async (value) =>\n          isValidDefaultSort(schema, value)\n        )\n        .default('id'),\n      defaultSortOrder: yup.string().oneOf(['ASC', 'DESC']).default('ASC'),\n    })\n    .noUnknown();\n};\n\nconst createMetadasSchema = (schema: any) => {\n  return yup.object().shape(\n    Object.keys(schema.attributes).reduce((acc: any, key) => {\n      acc[key] = yup\n        .object()\n        .shape({\n          edit: yup\n            .object()\n            .shape({\n              label: yup.string(),\n              description: yup.string(),\n              placeholder: yup.string(),\n              editable: yup.boolean(),\n              visible: yup.boolean(),\n              mainField: yup.lazy((value) => {\n                if (!value) {\n                  return yup.string();\n                }\n\n                const targetSchema = getService('content-types').findContentType(\n                  schema.attributes[key].targetModel\n                );\n\n                if (!targetSchema) {\n                  return yup.string();\n                }\n\n                const validAttributes = Object.keys(targetSchema.attributes).filter((key) =>\n                  isListable(targetSchema, key)\n                );\n\n                return yup.string().oneOf(validAttributes.concat('id')).default('id');\n              }),\n            })\n            .noUnknown()\n            .required(),\n          list: yup\n            .object()\n            .shape({\n              label: yup.string(),\n              searchable: yup.boolean(),\n              sortable: yup.boolean(),\n            })\n            .noUnknown()\n            .required(),\n        })\n        .noUnknown();\n\n      return acc;\n    }, {})\n  );\n};\n\nconst createArrayTest = ({ allowUndefined = false } = {}) => ({\n  name: 'isArray',\n  message: '${path} is required and must be an array',\n  test: (val: any) => (allowUndefined === true && val === undefined ? true : Array.isArray(val)),\n});\n\nconst createLayoutsSchema = (schema: any, opts = {}) => {\n  const validAttributes = Object.keys(schema.attributes).filter((key) => isListable(schema, key));\n\n  const editAttributes = Object.keys(schema.attributes).filter((key) =>\n    hasEditableAttribute(schema, key)\n  );\n\n  return yup.object().shape({\n    edit: yup\n      .array()\n      .of(\n        yup.array().of(\n          yup\n            .object()\n            .shape({\n              name: yup.string().oneOf(editAttributes).required(),\n              size: yup.number().integer().positive().required(),\n            })\n            .noUnknown()\n        )\n      )\n      .test(createArrayTest(opts)),\n    list: yup.array().of(yup.string().oneOf(validAttributes)).test(createArrayTest(opts)),\n  });\n};\n","import _ from 'lodash';\nimport { yup, validateYupSchema, errors } from '@strapi/utils';\nimport createModelConfigurationSchema from './model-configuration';\n\nconst { PaginationError, ValidationError } = errors;\nconst TYPES = ['singleType', 'collectionType'];\n\n/**\n * Validates type kind\n */\nconst kindSchema = yup.string().oneOf(TYPES).nullable();\n\nconst bulkActionInputSchema = yup\n  .object({\n    documentIds: yup.array().of(yup.strapiID()).min(1).required(),\n  })\n  .required();\n\nconst generateUIDInputSchema = yup.object({\n  contentTypeUID: yup.string().required(),\n  field: yup.string().required(),\n  data: yup.object().required(),\n});\n\nconst checkUIDAvailabilityInputSchema = yup.object({\n  contentTypeUID: yup.string().required(),\n  field: yup.string().required(),\n  value: yup\n    .string()\n    .matches(/^[A-Za-z0-9-_.~]*$/)\n    .required(),\n});\n\nconst validateUIDField = (contentTypeUID: any, field: any) => {\n  const model = strapi.contentTypes[contentTypeUID];\n\n  if (!model) {\n    throw new ValidationError('ContentType not found');\n  }\n\n  if (\n    !_.has(model, ['attributes', field]) ||\n    _.get(model, ['attributes', field, 'type']) !== 'uid'\n  ) {\n    throw new ValidationError(`${field} must be a valid \\`uid\\` attribute`);\n  }\n};\n\nconst validatePagination = ({ page, pageSize }: any) => {\n  const pageNumber = parseInt(page, 10);\n  const pageSizeNumber = parseInt(pageSize, 10);\n\n  if (Number.isNaN(pageNumber) || pageNumber < 1) {\n    throw new PaginationError('invalid pageNumber param');\n  }\n  if (Number.isNaN(pageSizeNumber) || pageSizeNumber < 1) {\n    throw new PaginationError('invalid pageSize param');\n  }\n};\n\nconst validateKind = validateYupSchema(kindSchema);\nconst validateBulkActionInput = validateYupSchema(bulkActionInputSchema);\nconst validateGenerateUIDInput = validateYupSchema(generateUIDInputSchema);\nconst validateCheckUIDAvailabilityInput = validateYupSchema(checkUIDAvailabilityInputSchema);\n\nexport {\n  createModelConfigurationSchema,\n  validateUIDField,\n  validatePagination,\n  validateKind,\n  validateBulkActionInput,\n  validateGenerateUIDInput,\n  validateCheckUIDAvailabilityInput,\n};\n","import { set } from 'lodash/fp';\nimport strapiUtils from '@strapi/utils';\nimport { ProhibitedCloningField } from '../../../../shared/contracts/collection-types';\n\nconst { isVisibleAttribute } = strapiUtils.contentTypes;\n\n/**\n * Use an array of strings to represent the path to a field, so we can show breadcrumbs in the admin\n * We can't use special characters as delimiters, because the path includes display names\n * for dynamic zone components, which can contain any character.\n */\n\nfunction checkRelation(model: any, attributeName: any, path: string[]): ProhibitedCloningField[] {\n  // we don't care about createdBy, updatedBy, localizations etc.\n  if (!isVisibleAttribute(model, attributeName)) {\n    // Return empty array and not null so we can always spread the result\n    return [];\n  }\n\n  /**\n   * Only one-to-many and one-to-one (when they're reversed, not one-way) are dangerous,\n   * because the other relations don't \"steal\" the relation from the entry we're cloning\n   */\n  const { relation, inversedBy, mappedBy } = model.attributes[attributeName];\n\n  if (\n    ['oneToOne', 'oneToMany'].includes(relation) &&\n    [mappedBy, inversedBy].some((key) => key != null)\n  ) {\n    return [[[...path, attributeName], 'relation']];\n  }\n\n  return [];\n}\n\nconst getProhibitedCloningFields = (\n  uid: any,\n  pathPrefix: string[] = []\n): ProhibitedCloningField[] => {\n  const model = strapi.getModel(uid);\n\n  const prohibitedFields = Object.keys(model.attributes).reduce<ProhibitedCloningField[]>(\n    (acc, attributeName) => {\n      const attribute: any = model.attributes[attributeName];\n      const attributePath = [...pathPrefix, attributeName];\n\n      switch (attribute.type) {\n        case 'relation':\n          return [...acc, ...checkRelation(model, attributeName, pathPrefix)];\n        case 'component':\n          return [...acc, ...getProhibitedCloningFields(attribute.component, attributePath)];\n        case 'dynamiczone':\n          return [\n            ...acc,\n            ...(attribute.components || []).flatMap((componentUID: any) =>\n              getProhibitedCloningFields(componentUID, [\n                ...attributePath,\n                strapi.getModel(componentUID).info.displayName,\n              ])\n            ),\n          ];\n        case 'uid':\n          return [...acc, [attributePath, 'unique']];\n        default:\n          if (attribute?.unique) {\n            return [...acc, [attributePath, 'unique']];\n          }\n          return acc;\n      }\n    },\n    []\n  );\n\n  return prohibitedFields;\n};\n\n/**\n * Iterates all attributes of the content type, and removes the ones that are not creatable.\n *   - If it's a relation, it sets the value to [] or null.\n *   - If it's a regular attribute, it sets the value to null.\n * When cloning, if you don't set a field it will be copied from the original entry. So we need to\n * remove the fields that the user can't create.\n */\nconst excludeNotCreatableFields =\n  (uid: any, permissionChecker: any) =>\n  (body: any, path = []): any => {\n    const model = strapi.getModel(uid);\n    const canCreate = (path: any) => permissionChecker.can.create(null, path);\n\n    return Object.keys(model.attributes).reduce((body, attributeName) => {\n      const attribute = model.attributes[attributeName];\n      const attributePath = [...path, attributeName].join('.');\n\n      // Ignore the attribute if it's not visible\n      if (!isVisibleAttribute(model, attributeName)) {\n        return body;\n      }\n\n      switch (attribute.type) {\n        // Relation should be empty if the user can't create it\n        case 'relation': {\n          if (canCreate(attributePath)) return body;\n          return set(attributePath, { set: [] }, body);\n        }\n        // Go deeper into the component\n        case 'component': {\n          return excludeNotCreatableFields(attribute.component, permissionChecker)(body, [\n            ...path,\n            attributeName,\n          ] as any);\n        }\n        // Attribute should be null if the user can't create it\n        default: {\n          if (canCreate(attributePath)) return body;\n          return set(attributePath, null, body);\n        }\n      }\n    }, body);\n  };\n\nexport { getProhibitedCloningFields, excludeNotCreatableFields };\n","import { errors, yup, validateYupSchema, contentTypes } from '@strapi/utils';\nimport type { UID } from '@strapi/types';\n\ninterface Options {\n  allowMultipleLocales?: boolean;\n}\n\nconst singleLocaleSchema = yup.string().nullable();\n\nconst multipleLocaleSchema = yup.lazy((value) =>\n  Array.isArray(value) ? yup.array().of(singleLocaleSchema.required()) : singleLocaleSchema\n);\n\nconst statusSchema = yup.mixed().oneOf(['draft', 'published'], 'Invalid status');\n\n/**\n * From a request or query object, validates and returns the locale and status of the document.\n * If the status is not provided and Draft & Publish is disabled, it defaults to 'published'.\n */\nexport const getDocumentLocaleAndStatus = async (\n  request: any,\n  model: UID.Schema,\n  opts: Options = { allowMultipleLocales: false }\n) => {\n  const { allowMultipleLocales } = opts;\n  const { locale, status: providedStatus, ...rest } = request || {};\n\n  const defaultStatus = contentTypes.hasDraftAndPublish(strapi.getModel(model))\n    ? undefined\n    : 'published';\n  const status = providedStatus !== undefined ? providedStatus : defaultStatus;\n\n  const schema = yup.object().shape({\n    locale: allowMultipleLocales ? multipleLocaleSchema : singleLocaleSchema,\n    status: statusSchema,\n  });\n\n  try {\n    await validateYupSchema(schema, { strict: true, abortEarly: false })(request);\n\n    return { locale, status, ...rest };\n  } catch (error: any) {\n    throw new errors.ValidationError(`Validation error: ${error.message}`);\n  }\n};\n","import type { UID } from '@strapi/types';\nimport { async } from '@strapi/utils';\n\nimport { getService } from '../../utils';\n\nimport { DocumentVersion, GetMetadataOptions } from '../../services/document-metadata';\n\nimport type {\n  AvailableLocaleDocument,\n  AvailableStatusDocument,\n} from '../../../../shared/contracts/collection-types';\n\n/**\n * Format a document with metadata. Making sure the metadata response is\n * correctly sanitized for the current user\n */\nexport const formatDocumentWithMetadata = async (\n  permissionChecker: any,\n  uid: UID.ContentType,\n  document: DocumentVersion,\n  opts: GetMetadataOptions = {}\n) => {\n  const documentMetadata = getService('document-metadata');\n\n  const serviceOutput = await documentMetadata.formatDocumentWithMetadata(uid, document, opts);\n\n  let {\n    meta: { availableLocales, availableStatus },\n  } = serviceOutput;\n\n  const metadataSanitizer = permissionChecker.sanitizeOutput;\n\n  availableLocales = await async.map(\n    availableLocales,\n    async (localeDocument: AvailableLocaleDocument) => metadataSanitizer(localeDocument)\n  );\n\n  availableStatus = await async.map(\n    availableStatus,\n    async (statusDocument: AvailableStatusDocument) => metadataSanitizer(statusDocument)\n  );\n\n  return {\n    ...serviceOutput,\n    meta: {\n      availableLocales,\n      availableStatus,\n    },\n  };\n};\n","import { isNil } from 'lodash/fp';\n\nimport { setCreatorFields, async, errors } from '@strapi/utils';\nimport type { Modules, UID } from '@strapi/types';\n\nimport { getService } from '../utils';\nimport { validateBulkActionInput } from './validation';\nimport { getProhibitedCloningFields, excludeNotCreatableFields } from './utils/clone';\nimport { getDocumentLocaleAndStatus } from './validation/dimensions';\nimport { formatDocumentWithMetadata } from './utils/metadata';\n\ntype Options = Modules.Documents.Params.Pick<UID.ContentType, 'populate:object'>;\n\n/**\n * Create a new document.\n *\n * @param ctx - Koa context\n * @param opts - Options\n * @param opts.populate - Populate options of the returned document.\n *                        By default documentManager will populate all relations.\n */\nconst createDocument = async (ctx: any, opts?: Options) => {\n  const { userAbility, user } = ctx.state;\n  const { model } = ctx.params;\n  const { body } = ctx.request;\n\n  const documentManager = getService('document-manager');\n  const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n  if (permissionChecker.cannot.create()) {\n    throw new errors.ForbiddenError();\n  }\n\n  const pickPermittedFields = permissionChecker.sanitizeCreateInput;\n  const setCreator = setCreatorFields({ user });\n  const sanitizeFn = async.pipe(pickPermittedFields, setCreator as any);\n  const sanitizedBody = await sanitizeFn(body);\n\n  const { locale, status } = await getDocumentLocaleAndStatus(body, model);\n\n  return documentManager.create(model, {\n    data: sanitizedBody as any,\n    locale,\n    status,\n    populate: opts?.populate,\n  });\n\n  // TODO: Revert the creation if create permission conditions are not met\n  // if (permissionChecker.cannot.create(document)) {\n  //   throw new errors.ForbiddenError();\n  // }\n};\n\n/**\n * Update a document version.\n * - If the document version exists, it will be updated.\n * - If the document version does not exist, a new document locale will be created.\n *   By default documentManager will populate all relations.\n *\n * @param ctx - Koa context\n * @param opts - Options\n * @param opts.populate - Populate options of the returned document\n */\nconst updateDocument = async (ctx: any, opts?: Options) => {\n  const { userAbility, user } = ctx.state;\n  const { id, model } = ctx.params;\n  const { body } = ctx.request;\n\n  const documentManager = getService('document-manager');\n  const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n  if (permissionChecker.cannot.update()) {\n    throw new errors.ForbiddenError();\n  }\n\n  // Populate necessary fields to check permissions\n  const permissionQuery = await permissionChecker.sanitizedQuery.update(ctx.query);\n  const populate = await getService('populate-builder')(model)\n    .populateFromQuery(permissionQuery)\n    .build();\n\n  const { locale } = await getDocumentLocaleAndStatus(body, model);\n\n  // Load document version to update\n  const [documentVersion, documentExists] = await Promise.all([\n    documentManager.findOne(id, model, { populate, locale, status: 'draft' }),\n    documentManager.exists(model, id),\n  ]);\n\n  if (!documentExists) {\n    throw new errors.NotFoundError();\n  }\n\n  // If version is not found, but document exists,\n  // the intent is to create a new document locale\n  if (documentVersion) {\n    if (permissionChecker.cannot.update(documentVersion)) {\n      throw new errors.ForbiddenError();\n    }\n  } else if (permissionChecker.cannot.create()) {\n    throw new errors.ForbiddenError();\n  }\n\n  const pickPermittedFields = documentVersion\n    ? permissionChecker.sanitizeUpdateInput(documentVersion)\n    : permissionChecker.sanitizeCreateInput;\n  const setCreator = documentVersion\n    ? setCreatorFields({ user, isEdition: true })\n    : setCreatorFields({ user });\n  const sanitizeFn = async.pipe(pickPermittedFields, setCreator as any);\n  const sanitizedBody = await sanitizeFn(body);\n\n  return documentManager.update(documentVersion?.documentId || id, model, {\n    data: sanitizedBody as any,\n    populate: opts?.populate,\n    locale,\n  });\n};\n\nexport default {\n  async find(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { query } = ctx.request;\n\n    const documentMetadata = getService('document-metadata');\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.read()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.read(query);\n\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .populateDeep(1)\n      .countRelations({ toOne: false, toMany: true })\n      .build();\n\n    const { locale, status } = await getDocumentLocaleAndStatus(query, model);\n\n    const { results: documents, pagination } = await documentManager.findPage(\n      { ...permissionQuery, populate, locale, status },\n      model\n    );\n\n    // TODO: Skip this part if not necessary (if D&P disabled or columns not displayed in the view)\n    const documentsAvailableStatus = await documentMetadata.getManyAvailableStatus(\n      model,\n      documents\n    );\n\n    const setStatus = (document: any) => {\n      // Available status of document\n      const availableStatuses = documentsAvailableStatus.filter(\n        (d: any) => d.documentId === document.documentId\n      );\n      // Compute document version status\n      document.status = documentMetadata.getStatus(document, availableStatuses);\n      return document;\n    };\n\n    const results = await async.map(\n      documents,\n      async.pipe(permissionChecker.sanitizeOutput, setStatus)\n    );\n\n    ctx.body = {\n      results,\n      pagination,\n    };\n  },\n\n  async findOne(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model, id } = ctx.params;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.read()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.read(ctx.query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .populateDeep(Infinity)\n      .countRelations()\n      .build();\n\n    const { locale, status } = await getDocumentLocaleAndStatus(ctx.query, model);\n\n    const version = await documentManager.findOne(id, model, {\n      populate,\n      locale,\n      status,\n    });\n\n    if (!version) {\n      // Check if document exists\n      const exists = await documentManager.exists(model, id);\n      if (!exists) {\n        return ctx.notFound();\n      }\n\n      // If the requested locale doesn't exist, return an empty response\n      const { meta } = await formatDocumentWithMetadata(\n        permissionChecker,\n        model,\n        // @ts-expect-error TODO: fix\n        { documentId: id, locale, publishedAt: null },\n        { availableLocales: true, availableStatus: false }\n      );\n\n      ctx.body = { data: {}, meta };\n\n      return;\n    }\n\n    // if the user has condition that needs populated content, it's not applied because entity don't have relations populated\n    if (permissionChecker.cannot.read(version)) {\n      return ctx.forbidden();\n    }\n\n    // TODO: Count populated relations by permissions\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(version);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument);\n  },\n\n  async create(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    const [totalEntries, document] = await Promise.all([\n      strapi.db.query(model).count(),\n      createDocument(ctx),\n    ]);\n\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(document);\n    ctx.status = 201;\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument, {\n      // Empty metadata as it's not relevant for a new document\n      availableLocales: false,\n      availableStatus: false,\n    });\n\n    if (totalEntries === 0) {\n      strapi.telemetry.send('didCreateFirstContentTypeEntry', {\n        eventProperties: { model },\n      });\n    }\n  },\n\n  async update(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    const updatedVersion = await updateDocument(ctx);\n\n    const sanitizedVersion = await permissionChecker.sanitizeOutput(updatedVersion);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedVersion);\n  },\n\n  async clone(ctx: any) {\n    const { userAbility, user } = ctx.state;\n    const { model, sourceId: id } = ctx.params;\n    const { body } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.create()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.create(ctx.query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .build();\n\n    const { locale } = await getDocumentLocaleAndStatus(body, model);\n    const document = await documentManager.findOne(id, model, {\n      populate,\n      locale,\n      status: 'draft',\n    });\n\n    if (!document) {\n      return ctx.notFound();\n    }\n\n    const pickPermittedFields = permissionChecker.sanitizeCreateInput;\n    const setCreator = setCreatorFields({ user });\n    const excludeNotCreatable = excludeNotCreatableFields(model, permissionChecker);\n    const sanitizeFn = async.pipe(pickPermittedFields, setCreator as any, excludeNotCreatable);\n    const sanitizedBody = await sanitizeFn(body);\n\n    const clonedDocument = await documentManager.clone(document.documentId, sanitizedBody, model);\n\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(clonedDocument);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument, {\n      // Empty metadata as it's not relevant for a new document\n      availableLocales: false,\n      availableStatus: false,\n    });\n  },\n\n  async autoClone(ctx: any) {\n    const { model } = ctx.params;\n\n    // Check if the model has fields that prevent auto cloning\n    const prohibitedFields = getProhibitedCloningFields(model);\n\n    if (prohibitedFields.length > 0) {\n      return ctx.badRequest(\n        'Entity could not be cloned as it has unique and/or relational fields. ' +\n          'Please edit those fields manually and save to complete the cloning.',\n        {\n          prohibitedFields,\n        }\n      );\n    }\n\n    await this.clone(ctx);\n  },\n\n  async delete(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { id, model } = ctx.params;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.delete()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.delete(ctx.query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .build();\n\n    const { locale } = await getDocumentLocaleAndStatus(ctx.query, model);\n\n    // Find locales to delete\n    const documentLocales = await documentManager.findLocales(id, model, { populate, locale });\n\n    if (documentLocales.length === 0) {\n      return ctx.notFound();\n    }\n\n    for (const document of documentLocales) {\n      if (permissionChecker.cannot.delete(document)) {\n        return ctx.forbidden();\n      }\n    }\n\n    const result = await documentManager.delete(id, model, { locale });\n\n    ctx.body = await permissionChecker.sanitizeOutput(result);\n  },\n\n  /**\n   * Publish a document version.\n   * Supports creating/saving a document and publishing it in one request.\n   */\n  async publish(ctx: any) {\n    const { userAbility } = ctx.state;\n    // If id does not exist, the document has to be created\n    const { id, model } = ctx.params;\n    const { body } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.publish()) {\n      return ctx.forbidden();\n    }\n\n    const publishedDocument = await strapi.db.transaction(async () => {\n      // Create or update document\n      const permissionQuery = await permissionChecker.sanitizedQuery.publish(ctx.query);\n      const populate = await getService('populate-builder')(model)\n        .populateFromQuery(permissionQuery)\n        .populateDeep(Infinity)\n        .countRelations()\n        .build();\n\n      let document: any;\n\n      const { locale } = await getDocumentLocaleAndStatus(body, model);\n\n      /**\n       * Publish can be called on two scenarios:\n       * 1. Create a new document and publish it in one request\n       * 2. Update an existing document and publish it in one request\n       *\n       * Based on user permissions:\n       * 1. User cannot create a document, but can publish\n       *    Action will be forbidden as user cannot create a document\n       * 2. User can update and publish a document\n       *    Action will be allowed, but document will not be updated, only published with the latest draft\n       */\n      const isCreate = isNil(id);\n      if (isCreate) {\n        if (permissionChecker.cannot.create()) {\n          throw new errors.ForbiddenError();\n        }\n\n        document = await createDocument(ctx, { populate });\n      }\n\n      const isUpdate = !isCreate;\n      if (isUpdate) {\n        // check if the document exists\n        const documentExists = await documentManager.exists(model, id);\n\n        if (!documentExists) {\n          throw new errors.NotFoundError('Document not found');\n        }\n\n        // check the document version\n        document = await documentManager.findOne(id!, model, { populate, locale });\n\n        if (!document) {\n          // update and publish the new version\n          if (\n            permissionChecker.cannot.create({ locale }) ||\n            permissionChecker.cannot.publish({ locale })\n          ) {\n            throw new errors.ForbiddenError();\n          }\n          document = await updateDocument(ctx);\n        } else if (permissionChecker.can.update(document)) {\n          await updateDocument(ctx);\n        }\n      }\n\n      if (permissionChecker.cannot.publish(document)) {\n        throw new errors.ForbiddenError();\n      }\n\n      const publishResult = await documentManager.publish(document.documentId, model, {\n        locale,\n        // TODO: Allow setting creator fields on publish\n        // data: setCreatorFields({ user, isEdition: true })({}),\n      });\n\n      if (!publishResult || publishResult.length === 0) {\n        throw new errors.NotFoundError('Document not found or already published.');\n      }\n\n      return publishResult[0];\n    });\n\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(publishedDocument);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument);\n  },\n\n  async bulkPublish(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { body } = ctx.request;\n    const { documentIds } = body;\n\n    await validateBulkActionInput(body);\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.publish()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.publish(ctx.query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .populateDeep(Infinity)\n      .countRelations()\n      .build();\n\n    const { locale } = await getDocumentLocaleAndStatus(body, model, {\n      allowMultipleLocales: true,\n    });\n\n    const entityPromises = documentIds.map((documentId: any) =>\n      documentManager.findLocales(documentId, model, { populate, locale, isPublished: false })\n    );\n    const entities = (await Promise.all(entityPromises)).flat();\n\n    for (const entity of entities) {\n      if (!entity) {\n        return ctx.notFound();\n      }\n\n      if (permissionChecker.cannot.publish(entity)) {\n        return ctx.forbidden();\n      }\n    }\n\n    const count = await documentManager.publishMany(model, documentIds, locale);\n    ctx.body = { count };\n  },\n\n  async bulkUnpublish(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { body } = ctx.request;\n    const { documentIds } = body;\n\n    await validateBulkActionInput(body);\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.unpublish()) {\n      return ctx.forbidden();\n    }\n\n    const { locale } = await getDocumentLocaleAndStatus(body, model, {\n      allowMultipleLocales: true,\n    });\n\n    const entityPromises = documentIds.map((documentId: any) =>\n      documentManager.findLocales(documentId, model, { locale, isPublished: true })\n    );\n    const entities = (await Promise.all(entityPromises)).flat();\n\n    for (const entity of entities) {\n      if (!entity) {\n        return ctx.notFound();\n      }\n\n      if (permissionChecker.cannot.publish(entity)) {\n        return ctx.forbidden();\n      }\n    }\n\n    const entitiesIds = entities.map((document) => document.documentId);\n\n    const { count } = await documentManager.unpublishMany(entitiesIds, model, { locale });\n\n    ctx.body = { count };\n  },\n\n  async unpublish(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { id, model } = ctx.params;\n    const {\n      body: { discardDraft, ...body },\n    } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.unpublish()) {\n      return ctx.forbidden();\n    }\n\n    if (discardDraft && permissionChecker.cannot.discard()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.unpublish(ctx.query);\n\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .build();\n\n    // TODO allow multiple locales for bulk locale unpublish\n    const { locale } = await getDocumentLocaleAndStatus(body, model);\n    const document = await documentManager.findOne(id, model, {\n      populate,\n      locale,\n      status: 'published',\n    });\n\n    if (!document) {\n      throw new errors.NotFoundError();\n    }\n\n    if (permissionChecker.cannot.unpublish(document)) {\n      throw new errors.ForbiddenError();\n    }\n\n    if (discardDraft && permissionChecker.cannot.discard(document)) {\n      throw new errors.ForbiddenError();\n    }\n\n    await strapi.db.transaction(async () => {\n      if (discardDraft) {\n        await documentManager.discardDraft(document.documentId, model, { locale });\n      }\n\n      ctx.body = await async.pipe(\n        (document) => documentManager.unpublish(document.documentId, model, { locale }),\n        permissionChecker.sanitizeOutput,\n        (document) => formatDocumentWithMetadata(permissionChecker, model, document)\n      )(document);\n    });\n  },\n\n  async discard(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { id, model } = ctx.params;\n    const { body } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.discard()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.discard(ctx.query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .build();\n\n    const { locale } = await getDocumentLocaleAndStatus(body, model);\n    const document = await documentManager.findOne(id, model, {\n      populate,\n      locale,\n      status: 'published',\n    });\n\n    // Can not discard a document that is not published\n    if (!document) {\n      return ctx.notFound();\n    }\n\n    if (permissionChecker.cannot.discard(document)) {\n      return ctx.forbidden();\n    }\n\n    ctx.body = await async.pipe(\n      (document) => documentManager.discardDraft(document.documentId, model, { locale }),\n      permissionChecker.sanitizeOutput,\n      (document) => formatDocumentWithMetadata(permissionChecker, model, document)\n    )(document);\n  },\n\n  async bulkDelete(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { query, body } = ctx.request;\n    const { documentIds } = body;\n\n    await validateBulkActionInput(body);\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.delete()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.delete(query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .build();\n\n    const { locale } = await getDocumentLocaleAndStatus(body, model);\n\n    const documentLocales = await documentManager.findLocales(documentIds, model, {\n      populate,\n      locale,\n    });\n\n    if (documentLocales.length === 0) {\n      return ctx.notFound();\n    }\n\n    for (const document of documentLocales) {\n      if (permissionChecker.cannot.delete(document)) {\n        return ctx.forbidden();\n      }\n    }\n\n    // We filter out documentsIds that maybe doesn't exist in a specific locale\n    const localeDocumentsIds = documentLocales.map((document) => document.documentId);\n\n    const { count } = await documentManager.deleteMany(localeDocumentsIds, model, { locale });\n\n    ctx.body = { count };\n  },\n\n  async countDraftRelations(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model, id } = ctx.params;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.read()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.read(ctx.query);\n    const populate = await getService('populate-builder')(model)\n      .populateFromQuery(permissionQuery)\n      .build();\n\n    const { locale, status } = await getDocumentLocaleAndStatus(ctx.query, model);\n    const entity = await documentManager.findOne(id, model, { populate, locale, status });\n\n    if (!entity) {\n      return ctx.notFound();\n    }\n\n    if (permissionChecker.cannot.read(entity)) {\n      return ctx.forbidden();\n    }\n\n    const number = await documentManager.countDraftRelations(id, model, locale);\n\n    return {\n      data: number,\n    };\n  },\n\n  async countManyEntriesDraftRelations(ctx: any) {\n    const { userAbility } = ctx.state;\n    const ids = ctx.request.query.documentIds as string[];\n    const locale = ctx.request.query.locale as string[];\n    const { model } = ctx.params;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.read()) {\n      return ctx.forbidden();\n    }\n\n    const documents = await documentManager.findMany(\n      {\n        filters: {\n          documentId: ids,\n        },\n        locale,\n      },\n      model\n    );\n\n    if (!documents) {\n      return ctx.notFound();\n    }\n\n    const number = await documentManager.countManyEntriesDraftRelations(ids, model, locale);\n\n    return {\n      data: number,\n    };\n  },\n};\n","import { getService } from '../utils';\nimport { createModelConfigurationSchema } from './validation';\n\nexport default {\n  findComponents(ctx: any) {\n    const components = getService('components').findAllComponents();\n    const { toDto } = getService('data-mapper');\n\n    ctx.body = { data: components.map(toDto) };\n  },\n\n  async findComponentConfiguration(ctx: any) {\n    const { uid } = ctx.params;\n\n    const componentService = getService('components');\n\n    const component = componentService.findComponent(uid);\n\n    if (!component) {\n      return ctx.notFound('component.notFound');\n    }\n\n    const configuration = await componentService.findConfiguration(component);\n    const componentsConfigurations = await componentService.findComponentsConfigurations(component);\n\n    ctx.body = {\n      data: {\n        component: configuration,\n        components: componentsConfigurations,\n      },\n    };\n  },\n\n  async updateComponentConfiguration(ctx: any) {\n    const { uid } = ctx.params;\n    const { body } = ctx.request;\n\n    const componentService = getService('components');\n\n    const component = componentService.findComponent(uid);\n\n    if (!component) {\n      return ctx.notFound('component.notFound');\n    }\n\n    let input;\n    try {\n      input = await createModelConfigurationSchema(component).validate(body, {\n        abortEarly: false,\n        stripUnknown: true,\n        strict: true,\n      });\n    } catch (error: any) {\n      return ctx.badRequest(null, {\n        name: 'validationError',\n        errors: error.errors,\n      });\n    }\n\n    const newConfiguration = await componentService.updateConfiguration(component, input);\n\n    ctx.body = { data: newConfiguration };\n  },\n};\n","import { has, assoc, mapValues, prop } from 'lodash/fp';\nimport { getService } from '../utils';\nimport { createModelConfigurationSchema, validateKind } from './validation';\n\nconst hasEditMainField = has('edit.mainField');\nconst getEditMainField = prop('edit.mainField');\nconst assocListMainField = assoc('list.mainField');\n\nconst assocMainField = (metadata: any) =>\n  hasEditMainField(metadata) ? assocListMainField(getEditMainField(metadata), metadata) : metadata;\n\nexport default {\n  async findContentTypes(ctx: any) {\n    const { kind } = ctx.query;\n\n    try {\n      await validateKind(kind);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    const contentTypes = getService('content-types').findContentTypesByKind(kind);\n    const { toDto } = getService('data-mapper');\n\n    ctx.body = { data: contentTypes.map(toDto) };\n  },\n\n  async findContentTypesSettings(ctx: any) {\n    const { findAllContentTypes, findConfiguration } = getService('content-types');\n\n    const contentTypes = await findAllContentTypes();\n    const configurations = await Promise.all(\n      contentTypes.map(async (contentType: any) => {\n        const { uid, settings } = await findConfiguration(contentType);\n        return { uid, settings };\n      })\n    );\n\n    ctx.body = {\n      data: configurations,\n    };\n  },\n\n  async findContentTypeConfiguration(ctx: any) {\n    const { uid } = ctx.params;\n\n    const contentTypeService = getService('content-types');\n\n    const contentType = await contentTypeService.findContentType(uid);\n\n    if (!contentType) {\n      return ctx.notFound('contentType.notFound');\n    }\n\n    const configuration = await contentTypeService.findConfiguration(contentType);\n\n    const confWithUpdatedMetadata = {\n      ...configuration,\n      metadatas: mapValues(assocMainField, configuration.metadatas),\n    };\n\n    const components = await contentTypeService.findComponentsConfigurations(contentType);\n\n    ctx.body = {\n      data: {\n        contentType: confWithUpdatedMetadata,\n        components,\n      },\n    };\n  },\n\n  async updateContentTypeConfiguration(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { uid } = ctx.params;\n    const { body } = ctx.request;\n\n    const contentTypeService = getService('content-types');\n    const metricsService = getService('metrics');\n\n    const contentType = await contentTypeService.findContentType(uid);\n\n    if (!contentType) {\n      return ctx.notFound('contentType.notFound');\n    }\n\n    if (!getService('permission').canConfigureContentType({ userAbility, contentType })) {\n      return ctx.forbidden();\n    }\n\n    let input;\n    try {\n      input = await createModelConfigurationSchema(contentType).validate(body, {\n        abortEarly: false,\n        stripUnknown: true,\n        strict: true,\n      });\n    } catch (error: any) {\n      return ctx.badRequest(null, {\n        name: 'validationError',\n        errors: error.errors,\n      });\n    }\n\n    const newConfiguration = await contentTypeService.updateConfiguration(contentType, input);\n\n    await metricsService.sendDidConfigureListView(contentType, newConfiguration);\n\n    const confWithUpdatedMetadata = {\n      ...newConfiguration,\n      metadatas: mapValues(assocMainField, newConfiguration.metadatas),\n    };\n\n    const components = await contentTypeService.findComponentsConfigurations(contentType);\n\n    ctx.body = {\n      data: {\n        contentType: confWithUpdatedMetadata,\n        components,\n      },\n    };\n  },\n};\n","import { getService } from '../utils';\n\nexport default {\n  getInitData(ctx: any) {\n    const { toDto } = getService('data-mapper');\n    const { findAllComponents } = getService('components');\n    const { getAllFieldSizes } = getService('field-sizes');\n    const { findAllContentTypes } = getService('content-types');\n\n    ctx.body = {\n      data: {\n        fieldSizes: getAllFieldSizes(),\n        components: findAllComponents().map(toDto),\n        contentTypes: findAllContentTypes().map(toDto),\n      },\n    };\n  },\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst validateFindAvailableSchema = yup\n  .object()\n  .shape({\n    component: yup.string(),\n    id: yup.strapiID(),\n    _q: yup.string(),\n    idsToOmit: yup.array().of(yup.strapiID()),\n    idsToInclude: yup.array().of(yup.strapiID()),\n    page: yup.number().integer().min(1),\n    pageSize: yup.number().integer().min(1).max(100),\n    locale: yup.string().nullable(),\n    status: yup.string().oneOf(['published', 'draft']).nullable(),\n  })\n  .required();\n\nconst validateFindExistingSchema = yup\n  .object()\n  .shape({\n    page: yup.number().integer().min(1),\n    pageSize: yup.number().integer().min(1).max(100),\n    locale: yup.string().nullable(),\n    status: yup.string().oneOf(['published', 'draft']).nullable(),\n  })\n  .required();\n\nconst validateFindAvailable = validateYupSchema(validateFindAvailableSchema, { strict: false });\nconst validateFindExisting = validateYupSchema(validateFindExistingSchema, { strict: false });\n\nexport { validateFindAvailable, validateFindExisting };\n","import { prop, uniq, uniqBy, concat, flow, isEmpty } from 'lodash/fp';\n\nimport { isOperatorOfType, contentTypes, relations, errors } from '@strapi/utils';\nimport type { Data, Modules, UID } from '@strapi/types';\n\nimport { getService } from '../utils';\nimport { validateFindAvailable, validateFindExisting } from './validation/relations';\nimport { isListable } from '../services/utils/configuration/attributes';\n\nconst { PUBLISHED_AT_ATTRIBUTE, UPDATED_AT_ATTRIBUTE } = contentTypes.constants;\n\ninterface RelationEntity {\n  id: Data.ID;\n  documentId: Modules.Documents.ID;\n  updatedAt: string | Date;\n  publishedAt?: string | Date;\n  [key: string]: unknown;\n}\n\nconst addFiltersClause = (params: any, filtersClause: any) => {\n  params.filters = params.filters || {};\n  params.filters.$and = params.filters.$and || [];\n  params.filters.$and.push(filtersClause);\n};\n\nconst sanitizeMainField = (model: any, mainField: any, userAbility: any) => {\n  const permissionChecker = getService('permission-checker').create({\n    userAbility,\n    model: model.uid,\n  });\n\n  // Whether the main field can be displayed or not, regardless of permissions.\n  const isMainFieldListable = isListable(model, mainField);\n  // Whether the user has the permission to access the model's main field (using RBAC abilities)\n  const canReadMainField = permissionChecker.can.read(null, mainField);\n\n  if (!isMainFieldListable || !canReadMainField) {\n    // Default to 'id' if the actual main field shouldn't be displayed\n    return 'id';\n  }\n\n  // Edge cases\n\n  // 1. Enforce 'name' as the main field for users and permissions' roles\n  if (model.uid === 'plugin::users-permissions.role') {\n    return 'name';\n  }\n\n  return mainField;\n};\n\n/**\n *\n * All relations sent to this function should have the same status or no status\n */\nconst addStatusToRelations = async (targetUid: UID.Schema, relations: RelationEntity[]) => {\n  if (!contentTypes.hasDraftAndPublish(strapi.getModel(targetUid))) {\n    return relations;\n  }\n\n  const documentMetadata = getService('document-metadata');\n\n  if (!relations.length) {\n    return relations;\n  }\n\n  const firstRelation = relations[0];\n\n  const filters: any = {\n    documentId: { $in: relations.map((r) => r.documentId) },\n    // NOTE: find the \"opposite\" status\n    publishedAt: firstRelation.publishedAt !== null ? { $null: true } : { $notNull: true },\n  };\n\n  const availableStatus = await strapi.query(targetUid).findMany({\n    select: ['id', 'documentId', 'locale', 'updatedAt', 'createdAt', 'publishedAt'],\n    filters,\n  });\n\n  return relations.map((relation: RelationEntity) => {\n    const availableStatuses = availableStatus.filter(\n      (availableDocument: RelationEntity) =>\n        availableDocument.documentId === relation.documentId &&\n        (relation.locale ? availableDocument.locale === relation.locale : true)\n    );\n\n    return {\n      ...relation,\n      status: documentMetadata.getStatus(relation, availableStatuses),\n    };\n  });\n};\n\nconst getPublishedAtClause = (status: string, uid: UID.Schema) => {\n  const model = strapi.getModel(uid);\n\n  /**\n   * If dp is disabled, ignore the filter\n   */\n  if (!model || !contentTypes.hasDraftAndPublish(model)) {\n    return {};\n  }\n\n  // Prioritize the draft status in case it's not provided\n  return status === 'published' ? { $notNull: true } : { $null: true };\n};\n\nconst validateLocale = (sourceUid: UID.Schema, targetUid: UID.ContentType, locale?: string) => {\n  const sourceModel = strapi.getModel(sourceUid);\n  const targetModel = strapi.getModel(targetUid);\n\n  const isLocalized = strapi.plugin('i18n').service('content-types').isLocalizedContentType;\n  const isSourceLocalized = isLocalized(sourceModel);\n  const isTargetLocalized = isLocalized(targetModel);\n\n  return {\n    locale,\n    isSourceLocalized,\n    isTargetLocalized,\n  };\n};\n\nconst validateStatus = (\n  sourceUid: UID.Schema,\n  status?: Modules.Documents.Params.PublicationStatus.Kind\n) => {\n  const sourceModel = strapi.getModel(sourceUid);\n\n  const isDP = contentTypes.hasDraftAndPublish;\n  const isSourceDP = isDP(sourceModel);\n\n  // Default to draft if not set\n  if (!isSourceDP) return { status: undefined };\n\n  switch (status) {\n    case 'published':\n      return { status: 'published' };\n    default:\n      // Assign to draft if the status is not valid\n      return { status: 'draft' };\n  }\n};\n\nexport default {\n  async extractAndValidateRequestInfo(ctx: any, id?: Data.ID) {\n    const { userAbility } = ctx.state;\n    const { model, targetField } = ctx.params;\n\n    const sourceSchema = strapi.getModel(model);\n    if (!sourceSchema) {\n      throw new errors.ValidationError(`The model ${model} doesn't exist`);\n    }\n\n    const attribute: any = sourceSchema.attributes[targetField];\n    if (!attribute || attribute.type !== 'relation') {\n      throw new errors.ValidationError(\n        `The relational field ${targetField} doesn't exist on ${model}`\n      );\n    }\n\n    const sourceUid = model;\n    const targetUid = attribute.target;\n\n    const { locale, isSourceLocalized, isTargetLocalized } = validateLocale(\n      sourceUid,\n      targetUid,\n      ctx.request?.query?.locale\n    );\n    const { status } = validateStatus(sourceUid, ctx.request?.query?.status);\n\n    const permissionChecker = getService('permission-checker').create({\n      userAbility,\n      model,\n    });\n\n    const isComponent = sourceSchema.modelType === 'component';\n    if (!isComponent) {\n      if (permissionChecker.cannot.read(null, targetField)) {\n        return ctx.forbidden();\n      }\n    }\n\n    let entryId: string | number | null = null;\n\n    if (id) {\n      const where: Record<string, any> = {};\n\n      if (!isComponent) {\n        where.documentId = id;\n\n        if (status) {\n          where.publishedAt = getPublishedAtClause(status, sourceUid);\n        }\n\n        if (locale && isSourceLocalized) {\n          where.locale = locale;\n        }\n      } else {\n        // If the source is a component, we only need to filter by the\n        // component's entity id\n        where.id = id;\n      }\n\n      const permissionQuery = await permissionChecker.sanitizedQuery.read(ctx.query);\n      const populate = await getService('populate-builder')(model)\n        .populateFromQuery(permissionQuery)\n        .build();\n\n      const currentEntity = await strapi.db.query(model).findOne({\n        where,\n        populate,\n      });\n\n      // We need to check if the entity exists\n      // and if the user has the permission to read it in this way\n      // There may be multiple entities (publication states) under this\n      // documentId + locale. We only need to check if one exists\n      if (!currentEntity) {\n        throw new errors.NotFoundError();\n      }\n\n      if (!isComponent) {\n        if (permissionChecker.cannot.read(currentEntity, targetField)) {\n          throw new errors.ForbiddenError();\n        }\n      }\n\n      entryId = currentEntity.id;\n    }\n\n    const modelConfig = isComponent\n      ? await getService('components').findConfiguration(sourceSchema)\n      : await getService('content-types').findConfiguration(sourceSchema);\n\n    const targetSchema = strapi.getModel(targetUid);\n\n    const mainField = flow(\n      prop(`metadatas.${targetField}.edit.mainField`),\n      (mainField) => mainField || 'id',\n      (mainField) => sanitizeMainField(targetSchema, mainField, userAbility)\n    )(modelConfig);\n\n    const fieldsToSelect = uniq([\n      mainField,\n      PUBLISHED_AT_ATTRIBUTE,\n      UPDATED_AT_ATTRIBUTE,\n      'documentId',\n    ]);\n\n    if (isTargetLocalized) {\n      fieldsToSelect.push('locale');\n    }\n\n    return {\n      entryId,\n      locale,\n      status,\n      attribute,\n      fieldsToSelect,\n      mainField,\n      source: { schema: sourceSchema, isLocalized: isSourceLocalized },\n      target: { schema: targetSchema, isLocalized: isTargetLocalized },\n      sourceSchema,\n      targetSchema,\n      targetField,\n    };\n  },\n\n  /**\n   * Used to find new relations to add in a relational field.\n   *\n   * Component and document relations are dealt a bit differently (they don't have a document_id).\n   */\n  async findAvailable(ctx: any) {\n    const { id } = ctx.request.query;\n\n    await validateFindAvailable(ctx.request.query);\n\n    const {\n      locale,\n      status,\n      targetField,\n      fieldsToSelect,\n      mainField,\n      source: {\n        schema: { uid: sourceUid, modelType: sourceModelType },\n        isLocalized: isSourceLocalized,\n      },\n      target: {\n        schema: { uid: targetUid },\n        isLocalized: isTargetLocalized,\n      },\n    } = await this.extractAndValidateRequestInfo(ctx, id);\n\n    const { idsToOmit, idsToInclude, _q, ...query } = ctx.request.query;\n\n    const permissionChecker = getService('permission-checker').create({\n      userAbility: ctx.state.userAbility,\n      model: targetUid,\n    });\n    const permissionQuery = await permissionChecker.sanitizedQuery.read(query);\n\n    const queryParams = {\n      sort: mainField,\n      // cannot select other fields as the user may not have the permissions\n      fields: fieldsToSelect,\n      ...permissionQuery,\n    };\n\n    // If no status is requested, we find all the draft relations and later update them\n    // with the latest available status\n    addFiltersClause(queryParams, {\n      publishedAt: getPublishedAtClause(status, targetUid),\n    });\n\n    // We will only filter by locale if the target content type is localized\n    const filterByLocale = isTargetLocalized && locale;\n    if (filterByLocale) {\n      addFiltersClause(queryParams, { locale });\n    }\n\n    if (id) {\n      /**\n       * Exclude the relations that are already related to the source\n       *\n       * We also optionally filter the target relations by the requested\n       * status and locale if provided.\n       */\n      const subQuery = strapi.db.queryBuilder(sourceUid);\n\n      // The alias refers to the DB table of the target content type model\n      const alias = subQuery.getAlias();\n\n      const where: Record<string, any> = {\n        [`${alias}.id`]: { $notNull: true },\n        [`${alias}.document_id`]: { $notNull: true },\n      };\n\n      /**\n       * Content Types -> Specify document id\n       * Components    -> Specify entity id (they don't have a document id)\n       */\n      if (sourceModelType === 'contentType') {\n        where.document_id = id;\n      } else {\n        where.id = id;\n      }\n\n      // Add the status and locale filters if they are provided\n      const publishedAt = getPublishedAtClause(status, targetUid);\n      if (!isEmpty(publishedAt)) {\n        where[`${alias}.published_at`] = publishedAt;\n      }\n\n      // If target has localization we need to filter by locale\n      if (isTargetLocalized && locale) {\n        where[`${alias}.locale`] = locale;\n      }\n\n      if (isSourceLocalized && locale) {\n        where.locale = locale;\n      }\n\n      /**\n       * UI can provide a list of ids to omit,\n       * those are the relations user set in the UI but has not persisted.\n       * We don't want to include them in the available relations.\n       */\n      if ((idsToInclude?.length ?? 0) !== 0) {\n        where[`${alias}.id`].$notIn = idsToInclude;\n      }\n\n      const knexSubQuery = subQuery\n        .where(where)\n        .join({ alias, targetField })\n        .select(`${alias}.id`)\n        .getKnexQuery();\n\n      addFiltersClause(queryParams, {\n        id: { $notIn: knexSubQuery },\n      });\n    }\n\n    /**\n     * Apply a filter to the mainField based on the search query and filter operator\n     * searching should be allowed only on mainField for permission reasons\n     */\n    if (_q) {\n      const _filter = isOperatorOfType('where', query._filter) ? query._filter : '$containsi';\n      addFiltersClause(queryParams, { [mainField]: { [_filter]: _q } });\n    }\n\n    if (idsToOmit?.length > 0) {\n      // If we have ids to omit, we should filter them out\n      addFiltersClause(queryParams, {\n        id: { $notIn: uniq(idsToOmit) },\n      });\n    }\n\n    const dbQuery = strapi.get('query-params').transform(targetUid, queryParams);\n\n    const res = await strapi.db.query(targetUid).findPage(dbQuery);\n\n    ctx.body = {\n      ...res,\n      results: await addStatusToRelations(targetUid, res.results),\n    };\n  },\n\n  async findExisting(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { id } = ctx.params;\n\n    await validateFindExisting(ctx.request.query);\n\n    const {\n      entryId,\n      attribute,\n      targetField,\n      fieldsToSelect,\n      status,\n      source: { schema: sourceSchema },\n      target: { schema: targetSchema },\n    } = await this.extractAndValidateRequestInfo(ctx, id);\n\n    const { uid: sourceUid } = sourceSchema;\n    const { uid: targetUid } = targetSchema;\n\n    const permissionQuery = await getService('permission-checker')\n      .create({ userAbility, model: targetUid })\n      .sanitizedQuery.read({ fields: fieldsToSelect });\n\n    /**\n     * loadPages can not be used for single relations,\n     * this unifies the loading regardless of it's type\n     *\n     * NOTE: Relations need to be loaded using any db.query method\n     *       to ensure the proper ordering is applied\n     */\n    const dbQuery = strapi.db.query(sourceUid);\n    const loadRelations = relations.isAnyToMany(attribute)\n      ? (...args: Parameters<typeof dbQuery.loadPages>) => dbQuery.loadPages(...args)\n      : (...args: Parameters<typeof dbQuery.load>) =>\n          dbQuery\n            .load(...args)\n            // Ensure response is an array\n            .then((res) => ({ results: res ? [res] : [] }));\n\n    const filters: {\n      publishedAt?: Record<string, any>;\n    } = {};\n\n    if (sourceSchema?.options?.draftAndPublish) {\n      if (targetSchema?.options?.draftAndPublish) {\n        if (status === 'published') {\n          filters.publishedAt = { $notNull: true };\n        } else {\n          filters.publishedAt = { $null: true };\n        }\n      }\n    } else if (targetSchema?.options?.draftAndPublish) {\n      // NOTE: we must return the drafts as some targets might not have a published version yet\n      filters.publishedAt = { $null: true };\n    }\n\n    /**\n     * If user does not have access to specific relations (custom conditions),\n     * only the ids of the relations are returned.\n     *\n     * - First query loads all the ids.\n     * - Second one also loads the main field, and excludes forbidden relations.\n     *\n     * The response contains the union of the two queries.\n     */\n    const res = await loadRelations({ id: entryId }, targetField, {\n      select: ['id', 'documentId', 'locale', 'publishedAt', 'updatedAt'],\n      ordering: 'desc',\n      page: ctx.request.query.page,\n      pageSize: ctx.request.query.pageSize,\n      filters,\n    });\n\n    /**\n     * Add all ids to load in permissionQuery\n     * If any of the relations are not accessible, the permissionQuery will exclude them\n     */\n    const loadedIds = res.results.map((item: any) => item.id);\n    addFiltersClause(permissionQuery, { id: { $in: loadedIds } });\n\n    /**\n     * Load the relations with the main field, the sanitized permission query\n     * will exclude the relations the user does not have access to.\n     *\n     * Pagination is not necessary as the permissionQuery contains the ids to load.\n     */\n    const sanitizedRes = await loadRelations({ id: entryId }, targetField, {\n      ...strapi.get('query-params').transform(targetUid, permissionQuery),\n      ordering: 'desc',\n    });\n\n    // NOTE: the order is very import to make sure sanitized relations are kept in priority\n    const relationsUnion = uniqBy('id', concat(sanitizedRes.results, res.results));\n\n    ctx.body = {\n      pagination: res.pagination || {\n        page: 1,\n        pageCount: 1,\n        pageSize: 10,\n        total: relationsUnion.length,\n      },\n      results: await addStatusToRelations(targetUid, relationsUnion),\n    };\n  },\n};\n","import type { UID, Modules } from '@strapi/types';\nimport { setCreatorFields, async, errors } from '@strapi/utils';\n\nimport { getDocumentLocaleAndStatus } from './validation/dimensions';\nimport { getService } from '../utils';\nimport { formatDocumentWithMetadata } from './utils/metadata';\n\ntype OptionsWithPopulate = Modules.Documents.Params.Pick<UID.ContentType, 'populate:object'>;\n\nconst buildPopulateFromQuery = async (query: any, model: any) => {\n  return getService('populate-builder')(model)\n    .populateFromQuery(query)\n    .populateDeep(Infinity)\n    .countRelations()\n    .build();\n};\n\nconst findDocument = async (query: any, uid: UID.SingleType, opts: any = {}) => {\n  const documentManager = getService('document-manager');\n  const populate = await buildPopulateFromQuery(query, uid);\n\n  return (\n    documentManager\n      .findMany({ ...opts, populate }, uid)\n      // Return the first document found\n      .then((documents: any) => documents[0])\n  );\n};\n\nconst createOrUpdateDocument = async (ctx: any, opts?: OptionsWithPopulate) => {\n  const { user, userAbility } = ctx.state;\n  const { model } = ctx.params;\n  const { body, query } = ctx.request;\n\n  const documentManager = getService('document-manager');\n  const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n  if (permissionChecker.cannot.create() && permissionChecker.cannot.update()) {\n    throw new errors.ForbiddenError();\n  }\n\n  const sanitizedQuery = await permissionChecker.sanitizedQuery.update(query);\n\n  const { locale } = await getDocumentLocaleAndStatus(body, model);\n\n  // Load document version to update\n  const [documentVersion, otherDocumentVersion] = await Promise.all([\n    findDocument(sanitizedQuery, model, { locale, status: 'draft' }),\n    // Find the first document to check if it exists\n    strapi.db.query(model).findOne({ select: ['documentId'] }),\n  ]);\n\n  const documentId = otherDocumentVersion?.documentId;\n\n  const pickPermittedFields = documentVersion\n    ? permissionChecker.sanitizeUpdateInput(documentVersion)\n    : permissionChecker.sanitizeCreateInput;\n\n  const setCreator = documentVersion\n    ? setCreatorFields({ user, isEdition: true })\n    : setCreatorFields({ user });\n\n  const sanitizeFn = async.pipe(pickPermittedFields, setCreator as any);\n\n  // If version is not found, but document exists,\n  // the intent is to create a new document locale\n  if (documentVersion) {\n    if (permissionChecker.cannot.update(documentVersion)) {\n      throw new errors.ForbiddenError();\n    }\n  } else if (permissionChecker.cannot.create()) {\n    throw new errors.ForbiddenError();\n  }\n\n  const sanitizedBody = await sanitizeFn(body);\n\n  if (!documentId) {\n    return documentManager.create(model, {\n      data: sanitizedBody,\n      ...sanitizedQuery,\n      locale,\n    });\n  }\n\n  return documentManager.update(documentId, model, {\n    data: sanitizedBody as any,\n    populate: opts?.populate,\n    locale,\n  });\n};\n\nexport default {\n  async find(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { query = {} } = ctx.request;\n\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.read()) {\n      return ctx.forbidden();\n    }\n\n    const permissionQuery = await permissionChecker.sanitizedQuery.read(query);\n    const { locale, status } = await getDocumentLocaleAndStatus(query, model);\n\n    const version = await findDocument(permissionQuery, model, { locale, status });\n\n    // allow user with create permission to know a single type is not created\n    if (!version) {\n      if (permissionChecker.cannot.create()) {\n        return ctx.forbidden();\n      }\n      // Check if document exists\n      const document = await strapi.db.query(model).findOne({});\n\n      if (!document) {\n        return ctx.notFound();\n      }\n\n      // If the requested locale doesn't exist, return an empty response\n      const { meta } = await formatDocumentWithMetadata(\n        permissionChecker,\n        model,\n        // @ts-expect-error - fix types\n        { documentId: document.documentId, locale, publishedAt: null },\n        { availableLocales: true, availableStatus: false }\n      );\n      ctx.body = { data: {}, meta };\n      return;\n    }\n\n    if (permissionChecker.cannot.read(version)) {\n      return ctx.forbidden();\n    }\n\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(version);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument);\n  },\n\n  async createOrUpdate(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    const document = await createOrUpdateDocument(ctx);\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(document);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument);\n  },\n\n  async delete(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { query = {} } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.delete()) {\n      return ctx.forbidden();\n    }\n\n    const sanitizedQuery = await permissionChecker.sanitizedQuery.delete(query);\n    const populate = await buildPopulateFromQuery(sanitizedQuery, model);\n\n    const { locale } = await getDocumentLocaleAndStatus(query, model);\n    const documentLocales = await documentManager.findLocales(undefined, model, {\n      populate,\n      locale,\n    });\n\n    if (documentLocales.length === 0) {\n      return ctx.notFound();\n    }\n\n    for (const document of documentLocales) {\n      if (permissionChecker.cannot.delete(document)) {\n        return ctx.forbidden();\n      }\n    }\n\n    const deletedEntity = await documentManager.delete(documentLocales.at(0).documentId, model, {\n      locale,\n    });\n\n    ctx.body = await permissionChecker.sanitizeOutput(deletedEntity);\n  },\n\n  async publish(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { query = {} } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.publish()) {\n      return ctx.forbidden();\n    }\n\n    const publishedDocument = await strapi.db.transaction(async () => {\n      const sanitizedQuery = await permissionChecker.sanitizedQuery.publish(query);\n      const populate = await buildPopulateFromQuery(sanitizedQuery, model);\n      const document = await createOrUpdateDocument(ctx, { populate });\n\n      if (!document) {\n        throw new errors.NotFoundError();\n      }\n\n      if (permissionChecker.cannot.publish(document)) {\n        throw new errors.ForbiddenError();\n      }\n\n      const { locale } = await getDocumentLocaleAndStatus(document, model);\n      const publishResult = await documentManager.publish(document.documentId, model, { locale });\n\n      return publishResult.at(0);\n    });\n\n    const sanitizedDocument = await permissionChecker.sanitizeOutput(publishedDocument);\n    ctx.body = await formatDocumentWithMetadata(permissionChecker, model, sanitizedDocument);\n  },\n\n  async unpublish(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const {\n      body: { discardDraft, ...body },\n      query = {},\n    } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.unpublish()) {\n      return ctx.forbidden();\n    }\n\n    if (discardDraft && permissionChecker.cannot.discard()) {\n      return ctx.forbidden();\n    }\n\n    const sanitizedQuery = await permissionChecker.sanitizedQuery.unpublish(query);\n    const { locale } = await getDocumentLocaleAndStatus(body, model);\n\n    const document = await findDocument(sanitizedQuery, model, { locale });\n\n    if (!document) {\n      return ctx.notFound();\n    }\n\n    if (permissionChecker.cannot.unpublish(document)) {\n      return ctx.forbidden();\n    }\n\n    if (discardDraft && permissionChecker.cannot.discard(document)) {\n      return ctx.forbidden();\n    }\n\n    await strapi.db.transaction(async () => {\n      if (discardDraft) {\n        await documentManager.discardDraft(document.documentId, model, { locale });\n      }\n\n      ctx.body = await async.pipe(\n        (document) => documentManager.unpublish(document.documentId, model, { locale }),\n        permissionChecker.sanitizeOutput,\n        (document) => formatDocumentWithMetadata(permissionChecker, model, document)\n      )(document);\n    });\n  },\n\n  async discard(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { body, query = {} } = ctx.request;\n\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    if (permissionChecker.cannot.discard()) {\n      return ctx.forbidden();\n    }\n\n    const sanitizedQuery = await permissionChecker.sanitizedQuery.discard(query);\n    const { locale } = await getDocumentLocaleAndStatus(body, model);\n\n    const document = await findDocument(sanitizedQuery, model, { locale, status: 'published' });\n\n    // Can not discard a document that is not published\n    if (!document) {\n      return ctx.notFound();\n    }\n\n    if (permissionChecker.cannot.discard(document)) {\n      return ctx.forbidden();\n    }\n\n    ctx.body = await async.pipe(\n      (document) => documentManager.discardDraft(document.documentId, model, { locale }),\n      permissionChecker.sanitizeOutput,\n      (document) => formatDocumentWithMetadata(permissionChecker, model, document)\n    )(document);\n  },\n\n  async countDraftRelations(ctx: any) {\n    const { userAbility } = ctx.state;\n    const { model } = ctx.params;\n    const { query } = ctx.request;\n    const documentManager = getService('document-manager');\n    const permissionChecker = getService('permission-checker').create({ userAbility, model });\n\n    const { locale } = await getDocumentLocaleAndStatus(query, model);\n\n    if (permissionChecker.cannot.read()) {\n      return ctx.forbidden();\n    }\n\n    const document = await findDocument({}, model);\n    if (!document) {\n      return ctx.notFound();\n    }\n\n    if (permissionChecker.cannot.read(document)) {\n      return ctx.forbidden();\n    }\n\n    const number = await documentManager.countDraftRelations(document.documentId, model, locale);\n\n    return {\n      data: number,\n    };\n  },\n};\n","import type { UID } from '@strapi/types';\nimport { getService } from '../utils';\nimport { getDocumentLocaleAndStatus } from './validation/dimensions';\n\nimport {\n  validateGenerateUIDInput,\n  validateCheckUIDAvailabilityInput,\n  validateUIDField,\n} from './validation';\n\nexport default {\n  async generateUID(ctx: any) {\n    const { contentTypeUID, field, data } = await validateGenerateUIDInput(ctx.request.body);\n\n    const { query = {} } = ctx.request;\n    const { locale } = await getDocumentLocaleAndStatus(query, contentTypeUID as UID.Schema);\n\n    await validateUIDField(contentTypeUID, field);\n\n    const uidService = getService('uid');\n\n    ctx.body = {\n      data: await uidService.generateUIDField({ contentTypeUID, field, data, locale }),\n    };\n  },\n\n  async checkUIDAvailability(ctx: any) {\n    const { contentTypeUID, field, value } = await validateCheckUIDAvailabilityInput(\n      ctx.request.body\n    );\n\n    const { query = {} } = ctx.request;\n    const { locale } = await getDocumentLocaleAndStatus(query, contentTypeUID as UID.Schema);\n\n    await validateUIDField(contentTypeUID, field);\n\n    const uidService = getService('uid');\n\n    const isAvailable = await uidService.checkUIDAvailability({\n      contentTypeUID,\n      field,\n      value,\n      locale,\n    });\n\n    ctx.body = {\n      isAvailable,\n      suggestion: !isAvailable\n        ? await uidService.findUniqueUID({ contentTypeUID, field, value, locale })\n        : null,\n    };\n  },\n};\n","import collectionTypes from './collection-types';\nimport components from './components';\nimport contentTypes from './content-types';\nimport init from './init';\nimport relations from './relations';\nimport singleTypes from './single-types';\nimport uid from './uid';\nimport history from '../history';\nimport preview from '../preview';\n\nexport default {\n  'collection-types': collectionTypes,\n  components,\n  'content-types': contentTypes,\n  init,\n  relations,\n  'single-types': singleTypes,\n  uid,\n  ...(history.controllers ? history.controllers : {}),\n  ...(preview.controllers ? preview.controllers : {}),\n};\n","import _ from 'lodash';\n\nconst keys = {\n  CONFIGURATION: 'configuration',\n};\n\nconst getStore = () => strapi.store({ type: 'plugin', name: 'content_manager' });\n\n/** Model configuration */\nconst EMPTY_CONFIG = {\n  settings: {},\n  metadatas: {},\n  layouts: {},\n};\n\nconst configurationKey = (key: any) => `${keys.CONFIGURATION}_${key}`;\n\nconst getModelConfiguration = async (key: any) => {\n  const config = await getStore().get({ key: configurationKey(key) });\n  return _.merge({}, EMPTY_CONFIG, config);\n};\n\nconst setModelConfiguration = async (key: string, value: any) => {\n  const storedConfig = (await getStore().get({ key: configurationKey(key) })) || {};\n  const currentConfig = { ...storedConfig };\n\n  Object.keys(value).forEach((key) => {\n    if (value[key] !== null && value[key] !== undefined) {\n      _.set(currentConfig, key, value[key]);\n    }\n  });\n\n  if (!_.isEqual(currentConfig, storedConfig)) {\n    return getStore().set({\n      key: configurationKey(key),\n      value: currentConfig,\n    });\n  }\n};\n\nconst deleteKey = (key: any) => {\n  return strapi.db\n    .query('strapi::core-store')\n    .delete({ where: { key: `plugin_content_manager_configuration_${key}` } });\n};\n\nconst findByKey = async (key: any) => {\n  const results = await strapi.db.query('strapi::core-store').findMany({\n    where: {\n      key: {\n        $startsWith: key,\n      },\n    },\n  });\n\n  return results.map(({ value }) => JSON.parse(value));\n};\n\nconst getAllConfigurations = () => findByKey('plugin_content_manager_configuration');\n\nexport default {\n  getAllConfigurations,\n  findByKey,\n  getModelConfiguration,\n  setModelConfiguration,\n  deleteKey,\n  keys,\n};\n","import _ from 'lodash';\nimport { getService } from '../../../utils';\nimport {\n  isSortable,\n  isSearchable,\n  isVisible,\n  isListable,\n  isRelation,\n  getDefaultMainField,\n} from './attributes';\n\nfunction createDefaultMetadatas(schema: any) {\n  return {\n    ...Object.keys(schema.attributes).reduce((acc: any, name) => {\n      acc[name] = createDefaultMetadata(schema, name);\n      return acc;\n    }, {}),\n    id: {\n      edit: {},\n      list: {\n        label: 'id',\n        searchable: true,\n        sortable: true,\n      },\n    },\n  };\n}\n\nfunction createDefaultMetadata(schema: any, name: any) {\n  const edit = {\n    label: name,\n    description: '',\n    placeholder: '',\n    visible: isVisible(schema, name),\n    editable: true,\n  } as any;\n\n  const fieldAttributes = schema.attributes[name];\n  if (isRelation(fieldAttributes)) {\n    const { targetModel } = fieldAttributes;\n\n    const targetSchema = getTargetSchema(targetModel);\n\n    if (targetSchema) {\n      edit.mainField = getDefaultMainField(targetSchema);\n    }\n  }\n\n  _.assign(\n    edit,\n    _.pick(_.get(schema, ['config', 'metadatas', name, 'edit'], {}), [\n      'label',\n      'description',\n      'placeholder',\n      'visible',\n      'editable',\n      'mainField',\n    ])\n  );\n\n  const list = {\n    // @ts-expect-error we need to specify these properties\n    label: name,\n    // @ts-expect-error we need to specify these properties\n    searchable: isSearchable(schema, name),\n    // @ts-expect-error we need to specify these properties\n    sortable: isSortable(schema, name),\n    ..._.pick(_.get(schema, ['config', 'metadatas', name, 'list'], {}), [\n      'label',\n      'searchable',\n      'sortable',\n    ]),\n  };\n\n  return { edit, list };\n}\n\n/** Synchronisation functions */\n\nasync function syncMetadatas(configuration: any, schema: any) {\n  // clear all keys that do not exist anymore\n  if (_.isEmpty(configuration.metadatas)) {\n    return createDefaultMetadatas(schema);\n  }\n\n  // remove old keys\n  const metasWithValidKeys = _.pick(configuration.metadatas, Object.keys(schema.attributes));\n\n  // add new keys and missing fields\n  const metasWithDefaults = _.merge({}, createDefaultMetadatas(schema), metasWithValidKeys);\n\n  // clear the invalid mainFields\n  const updatedMetas = Object.keys(metasWithDefaults).reduce((acc, key) => {\n    const { edit, list } = metasWithDefaults[key];\n    const attr = schema.attributes[key];\n\n    const updatedMeta = { edit, list };\n    // update sortable attr\n    if (list.sortable && !isSortable(schema, key)) {\n      _.set(updatedMeta, ['list', 'sortable'], false);\n      _.set(acc, [key], updatedMeta);\n    }\n\n    if (list.searchable && !isSearchable(schema, key)) {\n      _.set(updatedMeta, ['list', 'searchable'], false);\n      _.set(acc, [key], updatedMeta);\n    }\n\n    if (!_.has(edit, 'mainField')) return acc;\n\n    // remove mainField if the attribute is not a relation anymore\n    if (!isRelation(attr)) {\n      _.set(updatedMeta, 'edit', _.omit(edit, ['mainField']));\n      _.set(acc, [key], updatedMeta);\n      return acc;\n    }\n\n    // if the mainField is id you can keep it\n    if (edit.mainField === 'id') return acc;\n\n    // check the mainField in the targetModel\n    const targetSchema = getTargetSchema(attr.targetModel);\n\n    if (!targetSchema) return acc;\n\n    if (!isSortable(targetSchema, edit.mainField) && !isListable(targetSchema, edit.mainField)) {\n      _.set(updatedMeta, ['edit', 'mainField'], getDefaultMainField(targetSchema));\n      _.set(acc, [key], updatedMeta);\n      return acc;\n    }\n\n    return acc;\n  }, {});\n\n  return _.assign(metasWithDefaults, updatedMetas);\n}\n\nconst getTargetSchema = (targetModel: any) => {\n  return getService('content-types').findContentType(targetModel);\n};\n\nexport { createDefaultMetadatas, syncMetadatas };\n","import _ from 'lodash';\nimport { getService } from '../../../utils';\nimport { isListable, hasEditableAttribute, hasRelationAttribute } from './attributes';\n\nconst DEFAULT_LIST_LENGTH = 4;\nconst MAX_ROW_SIZE = 12;\n\nconst isAllowedFieldSize = (type: any, size: any) => {\n  const { getFieldSize } = getService('field-sizes');\n  const fieldSize = getFieldSize(type);\n\n  // Check if field was locked to another size\n  if (!fieldSize.isResizable && size !== fieldSize.default) {\n    return false;\n  }\n\n  // Otherwise allow unless it's bigger than a row\n  return size <= MAX_ROW_SIZE;\n};\n\nconst getDefaultFieldSize = (attribute: any) => {\n  const { hasFieldSize, getFieldSize } = getService('field-sizes');\n\n  // Check if it's a custom field with a custom size and get the default size for the field type\n  return getFieldSize(hasFieldSize(attribute.customField) ? attribute.customField : attribute.type)\n    .default;\n};\n\nasync function createDefaultLayouts(schema: any) {\n  return {\n    // @ts-expect-error necessary to provide this default layout\n    list: createDefaultListLayout(schema),\n    // @ts-expect-error necessary to provide this default layout\n    edit: createDefaultEditLayout(schema),\n    ..._.pick(_.get(schema, ['config', 'layouts'], {}), ['list', 'edit']),\n  };\n}\n\nfunction createDefaultListLayout(schema: any) {\n  return Object.keys(schema.attributes)\n    .filter((name) => isListable(schema, name))\n    .slice(0, DEFAULT_LIST_LENGTH);\n}\n\nconst rowSize = (els: any) => els.reduce((sum: any, el: any) => sum + el.size, 0);\n\nfunction createDefaultEditLayout(schema: any) {\n  const keys = Object.keys(schema.attributes).filter((name) => hasEditableAttribute(schema, name));\n\n  return appendToEditLayout([], keys, schema);\n}\n\n/** Synchronisation functions */\n\nfunction syncLayouts(configuration: any, schema: any) {\n  if (_.isEmpty(configuration.layouts)) return createDefaultLayouts(schema);\n\n  const { list = [], editRelations = [], edit = [] } = configuration.layouts || {};\n\n  let cleanList = list.filter((attr: any) => isListable(schema, attr));\n\n  // TODO V5: remove editRelations\n  const cleanEditRelations = editRelations.filter((attr: any) =>\n    hasRelationAttribute(schema, attr)\n  );\n\n  // backward compatibility with when relations were on the side of the layout\n  // it migrates the displayed relations to the main edit layout\n  const elementsToReAppend = [...cleanEditRelations];\n  let cleanEdit: unknown[] = [];\n  for (const row of edit) {\n    const newRow: unknown[] = [];\n\n    for (const el of row) {\n      if (!hasEditableAttribute(schema, el.name)) continue;\n\n      // Check if the field is a custom field with a custom size.\n      // If so, use the custom size instead of the type size\n      const { hasFieldSize } = getService('field-sizes');\n      const fieldType = hasFieldSize(schema.attributes[el.name].customField)\n        ? schema.attributes[el.name].customField\n        : schema.attributes[el.name].type;\n\n      /* if the type of a field was changed (ex: string -> json) or a new field was added in the schema\n         and the new type doesn't allow the size of the previous type, append the field at the end of layouts\n      */\n      if (!isAllowedFieldSize(fieldType, el.size)) {\n        elementsToReAppend.push(el.name);\n        continue;\n      }\n\n      newRow.push(el);\n    }\n\n    if (newRow.length > 0) {\n      cleanEdit.push(newRow);\n    }\n  }\n\n  cleanEdit = appendToEditLayout(cleanEdit as any, elementsToReAppend, schema);\n\n  const newAttributes = _.difference(\n    Object.keys(schema.attributes),\n    Object.keys(configuration.metadatas)\n  );\n\n  /** Add new attributes where they belong */\n\n  if (cleanList.length < DEFAULT_LIST_LENGTH) {\n    // add newAttributes\n    // only add valid listable attributes\n    cleanList = _.uniq(\n      cleanList\n        .concat(newAttributes.filter((key) => isListable(schema, key)))\n        .slice(0, DEFAULT_LIST_LENGTH)\n    );\n  }\n\n  // add new attributes to edit view\n  const newEditAttributes = newAttributes.filter((key) => hasEditableAttribute(schema, key));\n\n  cleanEdit = appendToEditLayout(cleanEdit, newEditAttributes, schema);\n\n  return {\n    list: cleanList.length > 0 ? cleanList : createDefaultListLayout(schema),\n    edit: cleanEdit.length > 0 ? cleanEdit : createDefaultEditLayout(schema),\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/default-param-last\nconst appendToEditLayout = (layout: any = [], keysToAppend: any, schema: any) => {\n  if (keysToAppend.length === 0) return layout;\n  let currentRowIndex = Math.max(layout.length - 1, 0);\n\n  // init currentRow if necessary\n  if (!layout[currentRowIndex]) {\n    layout[currentRowIndex] = [];\n  }\n\n  for (const key of keysToAppend) {\n    const attribute = schema.attributes[key];\n\n    const attributeSize = getDefaultFieldSize(attribute);\n    const currenRowSize = rowSize(layout[currentRowIndex]);\n\n    if (currenRowSize + attributeSize > MAX_ROW_SIZE) {\n      currentRowIndex += 1;\n      layout[currentRowIndex] = [];\n    }\n\n    layout[currentRowIndex].push({\n      name: key,\n      size: attributeSize,\n    });\n  }\n\n  return layout;\n};\n\nexport { createDefaultLayouts, syncLayouts };\n","import { createModelConfigurationSchema } from '../../../controllers/validation';\nimport { createDefaultSettings, syncSettings } from './settings';\nimport { createDefaultMetadatas, syncMetadatas } from './metadatas';\nimport { createDefaultLayouts, syncLayouts } from './layouts';\n\nasync function validateCustomConfig(schema: any) {\n  try {\n    await createModelConfigurationSchema(schema, {\n      allowUndefined: true,\n    }).validate(schema.config);\n  } catch (error: any) {\n    throw new Error(\n      `Invalid Model configuration for model ${schema.uid}. Verify your {{ modelName }}.config.js(on) file:\\n  - ${error.message}\\n`\n    );\n  }\n}\n\nasync function createDefaultConfiguration(schema: any) {\n  await validateCustomConfig(schema);\n\n  return {\n    settings: await createDefaultSettings(schema),\n    metadatas: await createDefaultMetadatas(schema),\n    layouts: await createDefaultLayouts(schema),\n  };\n}\n\nasync function syncConfiguration(conf: any, schema: any) {\n  await validateCustomConfig(schema);\n\n  return {\n    settings: await syncSettings(conf, schema),\n    layouts: await syncLayouts(conf, schema),\n    metadatas: await syncMetadatas(conf, schema),\n  };\n}\n\nexport { createDefaultConfiguration, syncConfiguration };\n","import { intersection, difference } from 'lodash';\n\nimport type { Settings, Metadatas, Layouts } from '../../../shared/contracts/content-types';\n\nimport { createDefaultConfiguration, syncConfiguration } from './utils/configuration';\n\nexport type ConfigurationUpdate = {\n  settings: Settings;\n  metadatas: Metadatas;\n  layouts: Layouts;\n  options?: Record<string, unknown>;\n};\n\nexport default ({\n  isComponent,\n  prefix,\n  storeUtils,\n  getModels,\n}: {\n  isComponent?: boolean;\n  prefix: string;\n  storeUtils: any;\n  getModels: any;\n}) => {\n  const uidToStoreKey = (uid: string) => {\n    return `${prefix}::${uid}`;\n  };\n\n  const getConfiguration = (uid: string) => {\n    const storeKey = uidToStoreKey(uid);\n\n    return storeUtils.getModelConfiguration(storeKey);\n  };\n\n  const setConfiguration = (uid: string, input: ConfigurationUpdate) => {\n    const configuration = {\n      ...input,\n      uid,\n      isComponent: isComponent ?? undefined,\n    };\n\n    const storeKey = uidToStoreKey(uid);\n    return storeUtils.setModelConfiguration(storeKey, configuration);\n  };\n\n  const deleteConfiguration = (uid: string) => {\n    const storeKey = uidToStoreKey(uid);\n\n    return storeUtils.deleteKey(storeKey);\n  };\n\n  const syncConfigurations = async () => {\n    const models = getModels();\n\n    const configurations = await storeUtils.findByKey(\n      `plugin_content_manager_configuration_${prefix}`\n    );\n\n    const updateConfiguration = async (uid: string) => {\n      const conf = configurations.find((conf: any) => conf.uid === uid);\n\n      return setConfiguration(uid, await syncConfiguration(conf, models[uid]));\n    };\n\n    const generateNewConfiguration = async (uid: string) => {\n      return setConfiguration(uid, await createDefaultConfiguration(models[uid]));\n    };\n\n    const currentUIDS = Object.keys(models);\n    const DBUIDs = configurations.map(({ uid }: any) => uid);\n\n    const contentTypesToUpdate = intersection(currentUIDS, DBUIDs);\n    const contentTypesToAdd = difference(currentUIDS, DBUIDs);\n    const contentTypesToDelete = difference(DBUIDs, currentUIDS);\n\n    // delete old schemas\n    await Promise.all(contentTypesToDelete.map((uid) => deleteConfiguration(uid)));\n\n    // create new schemas\n    await Promise.all(contentTypesToAdd.map((uid) => generateNewConfiguration(uid)));\n\n    // update current schemas\n    await Promise.all(contentTypesToUpdate.map((uid) => updateConfiguration(uid)));\n  };\n\n  return {\n    getConfiguration,\n    setConfiguration,\n    deleteConfiguration,\n    syncConfigurations,\n  };\n};\n","import { has, isNil, mapValues } from 'lodash/fp';\n\nimport type { UID, Struct, Core } from '@strapi/types';\nimport type { Configuration } from '../../../shared/contracts/content-types';\nimport type { ConfigurationUpdate } from './configuration';\n\nimport { getService } from '../utils';\nimport storeUtils from './utils/store';\nimport createConfigurationService from './configuration';\n\nconst STORE_KEY_PREFIX = 'components';\n\nconst configurationService = createConfigurationService({\n  storeUtils,\n  isComponent: true,\n  prefix: STORE_KEY_PREFIX,\n  getModels() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return mapValues(toContentManagerModel, strapi.components);\n  },\n});\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  findAllComponents() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return Object.values(strapi.components).map(toContentManagerModel);\n  },\n\n  findComponent(uid: UID.Component) {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    const component = strapi.components[uid];\n\n    return isNil(component) ? component : toContentManagerModel(component);\n  },\n\n  async findConfiguration(component: Struct.ComponentSchema) {\n    const configuration: Configuration = await configurationService.getConfiguration(component.uid);\n\n    return {\n      uid: component.uid,\n      category: component.category,\n      ...configuration,\n    };\n  },\n\n  async updateConfiguration(\n    component: Struct.ComponentSchema,\n    newConfiguration: ConfigurationUpdate\n  ) {\n    await configurationService.setConfiguration(component.uid, newConfiguration);\n\n    return this.findConfiguration(component);\n  },\n\n  async findComponentsConfigurations(model: Struct.ComponentSchema) {\n    const componentsMap: Record<\n      string,\n      Configuration & { category: string; isComponent: boolean }\n    > = {};\n\n    const getComponentConfigurations = async (uid: UID.Component) => {\n      const component = this.findComponent(uid);\n\n      if (has(uid, componentsMap)) {\n        return;\n      }\n\n      const componentConfiguration = await this.findConfiguration(component);\n      const componentsConfigurations = await this.findComponentsConfigurations(component);\n\n      Object.assign(componentsMap, {\n        [uid]: componentConfiguration,\n        ...componentsConfigurations,\n      });\n    };\n\n    for (const key of Object.keys(model.attributes)) {\n      const attribute = model.attributes[key];\n\n      if (attribute.type === 'component') {\n        await getComponentConfigurations(attribute.component);\n      }\n\n      if (attribute.type === 'dynamiczone') {\n        for (const componentUid of attribute.components) {\n          await getComponentConfigurations(componentUid);\n        }\n      }\n    }\n\n    return componentsMap;\n  },\n\n  syncConfigurations() {\n    return configurationService.syncConfigurations();\n  },\n});\n","import { isNil, mapValues } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils } from '@strapi/utils';\n\nimport type { UID, Struct, Core } from '@strapi/types';\n\nimport type { ConfigurationUpdate } from './configuration';\n\nimport { getService } from '../utils';\nimport storeUtils from './utils/store';\nimport createConfigurationService from './configuration';\n\nconst configurationService = createConfigurationService({\n  storeUtils,\n  prefix: 'content_types',\n  getModels() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return mapValues(toContentManagerModel, strapi.contentTypes);\n  },\n});\n\nconst service = ({ strapi }: { strapi: Core.Strapi }) => ({\n  findAllContentTypes() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return Object.values(strapi.contentTypes).map(toContentManagerModel);\n  },\n\n  findContentType(uid: UID.ContentType) {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    const contentType = strapi.contentTypes[uid];\n\n    return isNil(contentType) ? contentType : toContentManagerModel(contentType);\n  },\n\n  findDisplayedContentTypes() {\n    return this.findAllContentTypes().filter(\n      // TODO\n      // @ts-expect-error should be resolved from data-mapper types\n      ({ isDisplayed }: { isDisplayed: boolean }) => isDisplayed === true\n    );\n  },\n\n  findContentTypesByKind(kind: { kind: Struct.ContentTypeKind | undefined }) {\n    if (!kind) {\n      return this.findAllContentTypes();\n    }\n\n    // @ts-expect-error TODO when adding types\n    return this.findAllContentTypes().filter(contentTypesUtils.isKind(kind));\n  },\n\n  async findConfiguration(contentType: Struct.ContentTypeSchema) {\n    const configuration = await configurationService.getConfiguration(contentType.uid);\n\n    return {\n      uid: contentType.uid,\n      ...configuration,\n    };\n  },\n\n  async updateConfiguration(\n    contentType: Struct.ContentTypeSchema,\n    newConfiguration: ConfigurationUpdate\n  ) {\n    await configurationService.setConfiguration(contentType.uid, newConfiguration);\n\n    return this.findConfiguration(contentType);\n  },\n\n  findComponentsConfigurations(contentType: Struct.ContentTypeSchema) {\n    // delegate to componentService\n    return getService('components').findComponentsConfigurations(contentType);\n  },\n\n  syncConfigurations() {\n    return configurationService.syncConfigurations();\n  },\n});\n\nexport default service;\n","import { pick, getOr } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils } from '@strapi/utils';\n\nimport type { Schema, Struct } from '@strapi/types';\n\nconst dtoFields = [\n  'uid',\n  'isDisplayed',\n  'apiID',\n  'kind',\n  'category',\n  'info',\n  'options',\n  'pluginOptions',\n  'attributes',\n  'pluginOptions',\n];\n\nexport default () => ({\n  toContentManagerModel(contentType: Struct.ComponentSchema) {\n    return {\n      ...contentType,\n      apiID: contentType.modelName,\n      isDisplayed: isVisible(contentType),\n      attributes: {\n        id: {\n          type: 'integer',\n        },\n        ...formatAttributes(contentType),\n      },\n    };\n  },\n\n  toDto: pick(dtoFields),\n});\n\nconst formatAttributes = (contentType: Struct.ComponentSchema) => {\n  const { getVisibleAttributes, getTimestamps, getCreatorFields } = contentTypesUtils;\n\n  // only get attributes that can be seen in the auto generated Edit view or List view\n  return getVisibleAttributes(contentType)\n    .concat(getTimestamps(contentType))\n    .concat(getCreatorFields(contentType))\n    .reduce((acc: any, key: string) => {\n      const attribute = contentType.attributes[key];\n\n      // ignore morph until they are handled in the front\n      if (attribute.type === 'relation' && attribute.relation.toLowerCase().includes('morph')) {\n        return acc;\n      }\n\n      acc[key] = formatAttribute(key, attribute);\n      return acc;\n    }, {});\n};\n\n// FIXME: not needed\nconst formatAttribute = (key: any, attribute: Schema.Attribute.AnyAttribute) => {\n  if (attribute.type === 'relation') {\n    return toRelation(attribute);\n  }\n\n  return attribute;\n};\n\n// FIXME: not needed\nconst toRelation = (attribute: Schema.Attribute.Relation) => {\n  return {\n    ...attribute,\n    type: 'relation',\n    targetModel: 'target' in attribute ? attribute.target : undefined,\n    relationType: attribute.relation,\n  };\n};\n\nconst isVisible = (model: Struct.ComponentSchema): boolean =>\n  getOr(true, 'pluginOptions.content-manager.visible', model) === true;\n","import { errors } from '@strapi/utils';\nimport type { Core, Modules } from '@strapi/types';\n\nconst { ApplicationError } = errors;\n\ntype FieldSize = Modules.CustomFields.CustomFieldServerOptions['inputSize'];\n\nconst needsFullSize: FieldSize = {\n  default: 12,\n  isResizable: false,\n};\n\nconst smallSize: FieldSize = {\n  default: 4,\n  isResizable: true,\n};\n\nconst defaultSize: FieldSize = {\n  default: 6,\n  isResizable: true,\n};\n\nconst fieldSizes: Record<string, FieldSize> = {\n  // Full row and not resizable\n  dynamiczone: needsFullSize,\n  component: needsFullSize,\n  json: needsFullSize,\n  richtext: needsFullSize,\n  blocks: needsFullSize,\n  // Small and resizable\n  checkbox: smallSize,\n  boolean: smallSize,\n  date: smallSize,\n  time: smallSize,\n  biginteger: smallSize,\n  decimal: smallSize,\n  float: smallSize,\n  integer: smallSize,\n  number: smallSize,\n  // Medium and resizable\n  datetime: defaultSize,\n  email: defaultSize,\n  enumeration: defaultSize,\n  media: defaultSize,\n  password: defaultSize,\n  relation: defaultSize,\n  string: defaultSize,\n  text: defaultSize,\n  timestamp: defaultSize,\n  uid: defaultSize,\n};\n\nconst createFieldSizesService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const fieldSizesService = {\n    getAllFieldSizes() {\n      return fieldSizes;\n    },\n\n    hasFieldSize(type: string) {\n      return !!fieldSizes[type];\n    },\n\n    getFieldSize(type?: string) {\n      if (!type) {\n        throw new ApplicationError('The type is required');\n      }\n\n      const fieldSize = fieldSizes[type];\n      if (!fieldSize) {\n        throw new ApplicationError(`Could not find field size for type ${type}`);\n      }\n\n      return fieldSize;\n    },\n\n    setFieldSize(type: string, size: FieldSize) {\n      if (!type) {\n        throw new ApplicationError('The type is required');\n      }\n\n      if (!size) {\n        throw new ApplicationError('The size is required');\n      }\n\n      fieldSizes[type] = size;\n    },\n\n    setCustomFieldInputSizes() {\n      // Find all custom fields already registered\n      const customFields = strapi.get('custom-fields').getAll();\n\n      // If they have a custom field size, register it\n      // TODO types can be inferred when customFields is typed\n      Object.entries(customFields).forEach(([uid, customField]: [string, any]) => {\n        if (customField.inputSize) {\n          fieldSizesService.setFieldSize(uid, customField.inputSize);\n        }\n      });\n    },\n  };\n\n  return fieldSizesService;\n};\n\nexport default createFieldSizesService;\n","import { intersection, prop } from 'lodash/fp';\nimport { relations } from '@strapi/utils';\nimport type { Core, Struct } from '@strapi/types';\nimport type { Configuration } from '../../../shared/contracts/content-types';\n\nconst { getRelationalFields } = relations;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const sendDidConfigureListView = async (\n    contentType: Struct.ContentTypeSchema,\n    configuration: Configuration\n  ) => {\n    const displayedFields = prop('length', configuration.layouts.list);\n    const relationalFields = getRelationalFields(contentType);\n    const displayedRelationalFields = intersection(\n      relationalFields,\n      configuration.layouts.list\n    ).length;\n\n    const data = {\n      eventProperties: { containsRelationalFields: !!displayedRelationalFields },\n    };\n\n    if (data.eventProperties.containsRelationalFields) {\n      Object.assign(data.eventProperties, {\n        displayedFields,\n        displayedRelationalFields,\n      });\n    }\n\n    try {\n      await strapi.telemetry.send('didConfigureListView', data);\n    } catch (e) {\n      // silence\n    }\n  };\n\n  return {\n    sendDidConfigureListView,\n  };\n};\n","import { async } from '@strapi/utils';\nimport type { Core, UID, Modules } from '@strapi/types';\n\nconst ACTIONS = {\n  read: 'plugin::content-manager.explorer.read',\n  create: 'plugin::content-manager.explorer.create',\n  update: 'plugin::content-manager.explorer.update',\n  delete: 'plugin::content-manager.explorer.delete',\n  publish: 'plugin::content-manager.explorer.publish',\n  unpublish: 'plugin::content-manager.explorer.publish',\n  discard: 'plugin::content-manager.explorer.update',\n} as const;\n\ntype Entity = Modules.EntityService.Result<UID.ContentType>;\ntype Query = {\n  page?: string;\n  pageSize?: string;\n  sort?: string;\n};\n\nconst createPermissionChecker =\n  (strapi: Core.Strapi) =>\n  ({ userAbility, model }: { userAbility: any; model: string }) => {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      model,\n    });\n\n    const { actionProvider } = strapi.service('admin::permission');\n\n    const toSubject = (entity?: Entity) => {\n      return entity ? permissionsManager.toSubject(entity, model) : model;\n    };\n\n    // @ts-expect-error preserve the parameter order\n    // eslint-disable-next-line @typescript-eslint/default-param-last\n    const can = (action: string, entity?: Entity, field: string) => {\n      const subject = toSubject(entity);\n      const aliases = actionProvider.unstable_aliases(action, model) as string[];\n\n      return (\n        // Test the original action to see if it passes\n        userAbility.can(action, subject, field) ||\n        // Else try every known alias if at least one of them succeed, then the user \"can\"\n        aliases.some((alias) => userAbility.can(alias, subject, field))\n      );\n    };\n\n    // @ts-expect-error preserve the parameter order\n    // eslint-disable-next-line @typescript-eslint/default-param-last\n    const cannot = (action: string, entity?: Entity, field: string) => {\n      const subject = toSubject(entity);\n      const aliases = actionProvider.unstable_aliases(action, model) as string[];\n\n      return (\n        // Test both the original action\n        userAbility.cannot(action, subject, field) &&\n        // and every known alias, if all of them fail (cannot), then the user truly \"cannot\"\n        aliases.every((alias) => userAbility.cannot(alias, subject, field))\n      );\n    };\n\n    const sanitizeOutput = (data: Entity, { action = ACTIONS.read }: { action?: string } = {}) => {\n      return permissionsManager.sanitizeOutput(data, { subject: toSubject(data), action });\n    };\n\n    const sanitizeQuery = (query: Query, { action = ACTIONS.read }: { action?: string } = {}) => {\n      return permissionsManager.sanitizeQuery(query, { subject: model, action });\n    };\n\n    const sanitizeInput = (action: string, data: any, entity?: Entity) => {\n      return permissionsManager.sanitizeInput(data, {\n        subject: entity ? toSubject(entity) : model,\n        action,\n      });\n    };\n\n    const validateQuery = (query: Query, { action = ACTIONS.read }: { action?: string } = {}) => {\n      return permissionsManager.validateQuery(query, { subject: model, action });\n    };\n\n    const validateInput = (action: string, data: any, entity?: Entity) => {\n      return permissionsManager.validateInput(data, {\n        subject: entity ? toSubject(entity) : model,\n        action,\n      });\n    };\n\n    const sanitizeCreateInput = (data: any) => sanitizeInput(ACTIONS.create, data);\n    const sanitizeUpdateInput = (entity: Entity) => (data: any) =>\n      sanitizeInput(ACTIONS.update, data, entity);\n\n    const buildPermissionQuery = (query: Query, action: { action?: string } = {}) => {\n      return permissionsManager.addPermissionsQueryTo(query, action);\n    };\n\n    const sanitizedQuery = (query: Query, action: { action?: string } = {}) => {\n      return async.pipe(\n        (q: Query) => sanitizeQuery(q, action),\n        (q: Query) => buildPermissionQuery(q, action)\n      )(query);\n    };\n\n    // Sanitized queries shortcuts\n    Object.keys(ACTIONS).forEach((action) => {\n      // @ts-expect-error TODO\n      sanitizedQuery[action] = (query: Query) => sanitizedQuery(query, ACTIONS[action]);\n    });\n\n    // Permission utils shortcuts\n    Object.keys(ACTIONS).forEach((action) => {\n      // @ts-expect-error TODO\n      can[action] = (...args: any) => can(ACTIONS[action], ...args);\n      // @ts-expect-error TODO\n      cannot[action] = (...args: any) => cannot(ACTIONS[action], ...args);\n    });\n\n    return {\n      // Permission utils\n      can, // check if you have the permission\n      cannot, // check if you don't have the permission\n      // Sanitizers\n      sanitizeOutput,\n      sanitizeQuery,\n      sanitizeCreateInput,\n      sanitizeUpdateInput,\n      // Validators\n      validateQuery,\n      validateInput,\n      // Queries Builder\n      sanitizedQuery,\n    };\n  };\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  create: createPermissionChecker(strapi),\n});\n","import { prop } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils } from '@strapi/utils';\n\nimport type { Core, Struct } from '@strapi/types';\nimport { getService } from '../utils';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  canConfigureContentType({\n    userAbility,\n    contentType,\n  }: {\n    userAbility: any;\n    contentType: Struct.ContentTypeSchema;\n  }) {\n    const action = contentTypesUtils.isSingleType(contentType)\n      ? 'plugin::content-manager.single-types.configure-view'\n      : 'plugin::content-manager.collection-types.configure-view';\n\n    return userAbility.can(action);\n  },\n\n  async registerPermissions() {\n    const displayedContentTypes = getService('content-types').findDisplayedContentTypes();\n    const contentTypesUids = displayedContentTypes.map(prop('uid'));\n\n    const actions = [\n      {\n        section: 'contentTypes',\n        displayName: 'Create',\n        uid: 'explorer.create',\n        pluginName: 'content-manager',\n        subjects: contentTypesUids,\n        options: {\n          applyToProperties: ['fields'],\n        },\n      },\n      {\n        section: 'contentTypes',\n        displayName: 'Read',\n        uid: 'explorer.read',\n        pluginName: 'content-manager',\n        subjects: contentTypesUids,\n        options: {\n          applyToProperties: ['fields'],\n        },\n      },\n      {\n        section: 'contentTypes',\n        displayName: 'Update',\n        uid: 'explorer.update',\n        pluginName: 'content-manager',\n        subjects: contentTypesUids,\n        options: {\n          applyToProperties: ['fields'],\n        },\n      },\n      {\n        section: 'contentTypes',\n        displayName: 'Delete',\n        uid: 'explorer.delete',\n        pluginName: 'content-manager',\n        subjects: contentTypesUids,\n      },\n      {\n        section: 'contentTypes',\n        displayName: 'Publish',\n        uid: 'explorer.publish',\n        pluginName: 'content-manager',\n        subjects: contentTypesUids,\n      },\n      {\n        section: 'plugins',\n        displayName: 'Configure view',\n        uid: 'single-types.configure-view',\n        subCategory: 'single types',\n        pluginName: 'content-manager',\n      },\n      {\n        section: 'plugins',\n        displayName: 'Configure view',\n        uid: 'collection-types.configure-view',\n        subCategory: 'collection types',\n        pluginName: 'content-manager',\n      },\n      {\n        section: 'plugins',\n        displayName: 'Configure Layout',\n        uid: 'components.configure-layout',\n        subCategory: 'components',\n        pluginName: 'content-manager',\n      },\n    ];\n\n    await strapi.service('admin::permission').actionProvider.registerMany(actions);\n  },\n});\n","import { merge, isEmpty, set, propEq } from 'lodash/fp';\nimport strapiUtils from '@strapi/utils';\nimport type { UID, Schema, Modules } from '@strapi/types';\nimport { getService } from '../../utils';\n\nconst { isVisibleAttribute, isScalarAttribute, getDoesAttributeRequireValidation } =\n  strapiUtils.contentTypes;\nconst { isAnyToMany } = strapiUtils.relations;\nconst { PUBLISHED_AT_ATTRIBUTE } = strapiUtils.contentTypes.constants;\n\nconst isMorphToRelation = (attribute: any) =>\n  isRelation(attribute) && attribute.relation.includes('morphTo');\nconst isMedia = propEq('type', 'media');\nconst isRelation = propEq('type', 'relation');\nconst isComponent = propEq('type', 'component');\nconst isDynamicZone = propEq('type', 'dynamiczone');\n\n// TODO: Import from @strapi/types when it's available there\ntype Model = Parameters<typeof isVisibleAttribute>[0];\nexport type Populate = Modules.EntityService.Params.Populate.Any<UID.Schema>;\n\ntype PopulateOptions = {\n  initialPopulate?: Populate;\n  countMany?: boolean;\n  countOne?: boolean;\n  maxLevel?: number;\n};\n\n/**\n * Populate the model for relation\n * @param attribute - Attribute containing a relation\n * @param attribute.relation - type of relation\n * @param model - Model of the populated entity\n * @param attributeName\n * @param options - Options to apply while populating\n */\nfunction getPopulateForRelation(\n  attribute: Schema.Attribute.AnyAttribute,\n  model: Model,\n  attributeName: string,\n  { countMany, countOne, initialPopulate }: PopulateOptions\n) {\n  const isManyRelation = isAnyToMany(attribute);\n\n  if (initialPopulate) {\n    return initialPopulate;\n  }\n\n  // If populating localizations attribute, also include validatable fields\n  // Mainly needed for bulk locale publishing, so the Client has all the information necessary to perform validations\n  if (attributeName === 'localizations') {\n    const validationPopulate = getPopulateForValidation(model.uid as UID.Schema);\n    return {\n      populate: validationPopulate.populate,\n    };\n  }\n\n  // always populate createdBy, updatedBy, localizations etc.\n  if (!isVisibleAttribute(model, attributeName)) {\n    return true;\n  }\n\n  if ((isManyRelation && countMany) || (!isManyRelation && countOne)) {\n    return { count: true };\n  }\n\n  return true;\n}\n\n/**\n * Populate the model for Dynamic Zone components\n * @param attribute - Attribute containing the components\n * @param attribute.components - IDs of components\n * @param options - Options to apply while populating\n */\nfunction getPopulateForDZ(\n  attribute: Schema.Attribute.DynamicZone,\n  options: PopulateOptions,\n  level: number\n) {\n  // Use fragments to populate the dynamic zone components\n  const populatedComponents = (attribute.components || []).reduce(\n    (acc: any, componentUID: UID.Component) => ({\n      ...acc,\n      [componentUID]: {\n        populate: getDeepPopulate(componentUID, options, level + 1),\n      },\n    }),\n    {}\n  );\n\n  return { on: populatedComponents };\n}\n\n/**\n * Get the populated value based on the type of the attribute\n * @param attributeName - Name of the attribute\n * @param model - Model of the populated entity\n * @param model.attributes\n * @param options - Options to apply while populating\n * @param options.countMany\n * @param options.countOne\n * @param options.maxLevel\n * @param level\n */\nfunction getPopulateFor(\n  attributeName: string,\n  model: any,\n  options: PopulateOptions,\n  level: number\n): { [key: string]: boolean | object } {\n  const attribute = model.attributes[attributeName];\n\n  switch (attribute.type) {\n    case 'relation':\n      // @ts-expect-error - TODO: support populate count typing\n      return {\n        [attributeName]: getPopulateForRelation(attribute, model, attributeName, options),\n      };\n    case 'component':\n      return {\n        [attributeName]: {\n          populate: getDeepPopulate(attribute.component, options, level + 1),\n        },\n      };\n    case 'media':\n      return {\n        [attributeName]: {\n          populate: {\n            folder: true,\n          },\n        },\n      };\n    case 'dynamiczone':\n      return {\n        [attributeName]: getPopulateForDZ(attribute, options, level),\n      };\n    default:\n      return {};\n  }\n}\n\n/**\n * Deeply populate a model based on UID\n * @param uid - Unique identifier of the model\n * @param options - Options to apply while populating\n * @param level - Current level of nested call\n */\nconst getDeepPopulate = (\n  uid: UID.Schema,\n  {\n    initialPopulate = {} as any,\n    countMany = false,\n    countOne = false,\n    maxLevel = Infinity,\n  }: PopulateOptions = {},\n  level = 1\n) => {\n  if (level > maxLevel) {\n    return {};\n  }\n\n  const model = strapi.getModel(uid);\n\n  if (!model) {\n    return {};\n  }\n\n  return Object.keys(model.attributes).reduce(\n    (populateAcc, attributeName: string) =>\n      merge(\n        populateAcc,\n        getPopulateFor(\n          attributeName,\n          model,\n          {\n            // @ts-expect-error - improve types\n            initialPopulate: initialPopulate?.[attributeName],\n            countMany,\n            countOne,\n            maxLevel,\n          },\n          level\n        )\n      ),\n    {}\n  );\n};\n\n/**\n * Deeply populate a model based on UID. Only populating fields that require validation.\n * @param uid - Unique identifier of the model\n * @param options - Options to apply while populating\n * @param level - Current level of nested call\n */\nconst getPopulateForValidation = (uid: UID.Schema): Record<string, any> => {\n  const model = strapi.getModel(uid);\n  if (!model) {\n    return {};\n  }\n\n  return Object.entries(model.attributes).reduce((populateAcc: any, [attributeName, attribute]) => {\n    if (isScalarAttribute(attribute)) {\n      // If the scalar attribute requires validation, add it to the fields array\n      if (getDoesAttributeRequireValidation(attribute)) {\n        populateAcc.fields = populateAcc.fields || [];\n        populateAcc.fields.push(attributeName);\n      }\n      return populateAcc;\n    }\n\n    if (isComponent(attribute)) {\n      // @ts-expect-error - should be a component\n      const component = attribute.component;\n\n      // Get the validation result for this component\n      const componentResult = getPopulateForValidation(component);\n\n      if (Object.keys(componentResult).length > 0) {\n        populateAcc.populate = populateAcc.populate || {};\n        populateAcc.populate[attributeName] = componentResult;\n      }\n\n      return populateAcc;\n    }\n\n    if (isDynamicZone(attribute)) {\n      const components = (attribute as Schema.Attribute.DynamicZone).components;\n      // Handle dynamic zone components\n      const componentsResult = (components || []).reduce(\n        (acc, componentUID) => {\n          // Get validation populate for this component\n          const componentResult = getPopulateForValidation(componentUID);\n\n          // Only include component if it has fields requiring validation\n          if (Object.keys(componentResult).length > 0) {\n            acc[componentUID] = componentResult;\n          }\n\n          return acc;\n        },\n        {} as Record<string, any>\n      );\n\n      // Only add to populate if we have components requiring validation\n      if (Object.keys(componentsResult).length > 0) {\n        populateAcc.populate = populateAcc.populate || {};\n        populateAcc.populate[attributeName] = { on: componentsResult };\n      }\n    }\n\n    return populateAcc;\n  }, {});\n};\n\n/**\n * getDeepPopulateDraftCount works recursively on the attributes of a model\n * creating a populated object to count all the unpublished relations within the model\n * These relations can be direct to this content type or contained within components/dynamic zones\n * @param  uid of the model\n * @returns result\n * @returns result.populate\n * @returns result.hasRelations\n */\nconst getDeepPopulateDraftCount = (uid: UID.Schema) => {\n  const model = strapi.getModel(uid);\n  let hasRelations = false;\n\n  const populate = Object.keys(model.attributes).reduce((populateAcc: any, attributeName) => {\n    const attribute: Schema.Attribute.AnyAttribute = model.attributes[attributeName];\n\n    switch (attribute.type) {\n      case 'relation': {\n        // TODO: Support polymorphic relations\n        const isMorphRelation = attribute.relation.toLowerCase().startsWith('morph');\n        if (isMorphRelation) {\n          break;\n        }\n\n        if (isVisibleAttribute(model, attributeName)) {\n          populateAcc[attributeName] = {\n            count: true,\n            filters: { [PUBLISHED_AT_ATTRIBUTE]: { $null: true } },\n          };\n          hasRelations = true;\n        }\n        break;\n      }\n      case 'component': {\n        const { populate, hasRelations: childHasRelations } = getDeepPopulateDraftCount(\n          attribute.component\n        );\n        if (childHasRelations) {\n          populateAcc[attributeName] = {\n            populate,\n          };\n          hasRelations = true;\n        }\n        break;\n      }\n      case 'dynamiczone': {\n        const dzPopulateFragment = attribute.components?.reduce((acc, componentUID) => {\n          const { populate: componentPopulate, hasRelations: componentHasRelations } =\n            getDeepPopulateDraftCount(componentUID);\n\n          if (componentHasRelations) {\n            hasRelations = true;\n\n            return { ...acc, [componentUID]: { populate: componentPopulate } };\n          }\n\n          return acc;\n        }, {});\n\n        if (!isEmpty(dzPopulateFragment)) {\n          populateAcc[attributeName] = { on: dzPopulateFragment };\n        }\n        break;\n      }\n      default:\n    }\n\n    return populateAcc;\n  }, {});\n\n  return { populate, hasRelations };\n};\n\n/**\n *  Create a Strapi populate object which populates all attribute fields of a Strapi query.\n */\nconst getQueryPopulate = async (uid: UID.Schema, query: object): Promise<Populate> => {\n  let populateQuery: Populate = {};\n\n  await strapiUtils.traverse.traverseQueryFilters(\n    /**\n     *\n     * @param {Object} param0\n     * @param {string} param0.key - Attribute name\n     * @param {Object} param0.attribute - Attribute definition\n     * @param {string} param0.path - Content Type path to the attribute\n     * @returns\n     */\n    ({ attribute, path }: any) => {\n      // TODO: handle dynamic zones and morph relations\n      if (!attribute || isDynamicZone(attribute) || isMorphToRelation(attribute)) {\n        return;\n      }\n\n      // Populate all relations, components and media\n      if (isRelation(attribute) || isMedia(attribute) || isComponent(attribute)) {\n        const populatePath = path.attribute.replace(/\\./g, '.populate.');\n        // @ts-expect-error - lodash doesn't resolve the Populate type correctly\n        populateQuery = set(populatePath, {}, populateQuery);\n      }\n    },\n    { schema: strapi.getModel(uid), getModel: strapi.getModel.bind(strapi) },\n    query\n  );\n\n  return populateQuery;\n};\n\nconst buildDeepPopulate = (uid: UID.CollectionType) => {\n  return getService('populate-builder')(uid).populateDeep(Infinity).countRelations().build();\n};\n\nexport {\n  getDeepPopulate,\n  getDeepPopulateDraftCount,\n  getPopulateForValidation,\n  getQueryPopulate,\n  buildDeepPopulate,\n};\n","import { isNil } from 'lodash/fp';\nimport type { UID } from '@strapi/types';\nimport { type Populate, getDeepPopulate, getQueryPopulate } from './utils/populate';\n\n/**\n * Builder to create a Strapi populate object.\n *\n * @param uid - Content type UID\n *\n * @example\n * const populate = await populateBuilder('api::article.article').countRelations().build();\n * // populate = { article: { populate: { count: true } } }\n *\n */\nconst populateBuilder = (uid: UID.Schema) => {\n  let getInitialPopulate = async (): Promise<undefined | Populate> => {\n    return undefined;\n  };\n  const deepPopulateOptions = {\n    countMany: false,\n    countOne: false,\n    maxLevel: -1,\n  };\n\n  const builder = {\n    /**\n     * Populates all attribute fields present in a query.\n     * @param query - Strapi query object\n     */\n    populateFromQuery(query: object) {\n      getInitialPopulate = async () => getQueryPopulate(uid, query);\n      return builder;\n    },\n\n    /**\n     * Populate relations as count.\n     * @param [options]\n     * @param [options.toMany] - Populate XtoMany relations as count if true.\n     * @param [options.toOne] - Populate XtoOne relations as count if true.\n     */\n    countRelations({ toMany, toOne } = { toMany: true, toOne: true }) {\n      if (!isNil(toMany)) {\n        deepPopulateOptions.countMany = toMany;\n      }\n      if (!isNil(toOne)) {\n        deepPopulateOptions.countOne = toOne;\n      }\n      return builder;\n    },\n\n    /**\n     * Populate relations deeply, up to a certain level.\n     * @param [level=Infinity] - Max level of nested populate.\n     */\n    populateDeep(level = Infinity) {\n      deepPopulateOptions.maxLevel = level;\n      return builder;\n    },\n\n    /**\n     * Construct the populate object based on the builder options.\n     * @returns Populate object\n     */\n    async build() {\n      const initialPopulate = await getInitialPopulate();\n\n      if (deepPopulateOptions.maxLevel === -1) {\n        return initialPopulate;\n      }\n\n      return getDeepPopulate(uid, { ...deepPopulateOptions, initialPopulate });\n    },\n  };\n\n  return builder;\n};\n\nexport default () => populateBuilder;\n","import _ from 'lodash';\nimport slugify from '@sindresorhus/slugify';\n\nimport type { Core, Schema, UID } from '@strapi/types';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  async generateUIDField({\n    contentTypeUID,\n    field,\n    data,\n    locale,\n  }: {\n    contentTypeUID: UID.ContentType;\n    field: string;\n    data: Record<string, any>;\n    locale?: string;\n  }) {\n    const contentType = strapi.contentTypes[contentTypeUID];\n    const { attributes } = contentType;\n\n    const {\n      targetField,\n      default: defaultValue,\n      options,\n    } = attributes[field] as Schema.Attribute.UID;\n\n    // @ts-expect-error targetField can be undefined\n    const targetValue = _.get(data, targetField);\n\n    if (!_.isEmpty(targetValue)) {\n      return this.findUniqueUID({\n        contentTypeUID,\n        field,\n        value: slugify(targetValue, options),\n        locale,\n      });\n    }\n\n    return this.findUniqueUID({\n      contentTypeUID,\n      field,\n      value: slugify(\n        _.isFunction(defaultValue) ? defaultValue() : defaultValue || contentType.modelName,\n        options\n      ),\n      locale,\n    });\n  },\n\n  async findUniqueUID({\n    contentTypeUID,\n    field,\n    value,\n    locale,\n  }: {\n    contentTypeUID: UID.ContentType;\n    field: string;\n    value: string;\n    locale?: string;\n  }) {\n    const foundDocuments = await strapi.documents(contentTypeUID).findMany({\n      filters: {\n        [field]: { $startsWith: value },\n      },\n      locale,\n      // TODO: Check UX. When modifying an entry, it only makes sense to check for collisions with other drafts\n      // However, when publishing this \"available\" UID might collide with another published entry\n      status: 'draft',\n    });\n\n    if (!foundDocuments || foundDocuments.length === 0) {\n      // If there are no documents found we can return the value as is\n      return value;\n    }\n\n    let possibleCollisions: string[];\n    if (!Array.isArray(foundDocuments)) {\n      possibleCollisions = [foundDocuments[field]];\n    } else {\n      possibleCollisions = foundDocuments.map((doc: any) => doc[field]);\n    }\n\n    // If there are no documents sharing the proposed UID, we can return the value as is\n    if (!possibleCollisions.includes(value)) {\n      return value;\n    }\n\n    let i = 1;\n    let tmpUId = `${value}-${i}`;\n    while (possibleCollisions.includes(tmpUId)) {\n      // While there are documents sharing the proposed UID, we need to find a new one\n      // by incrementing the suffix until we find a unique one\n      i += 1;\n      tmpUId = `${value}-${i}`;\n    }\n\n    return tmpUId;\n  },\n\n  async checkUIDAvailability({\n    contentTypeUID,\n    field,\n    value,\n    locale,\n  }: {\n    contentTypeUID: UID.ContentType;\n    field: string;\n    value: string;\n    locale?: string;\n  }) {\n    const documentCount = await strapi.documents(contentTypeUID).count({\n      filters: {\n        [field]: value,\n      },\n      locale,\n      // TODO: Check UX. When modifying an entry, it only makes sense to check for collisions with other drafts\n      // However, when publishing this \"available\" UID might collide with another published entry\n      status: 'draft',\n    });\n\n    if (documentCount && documentCount > 0) {\n      // If there are documents sharing the proposed UID, we can return false\n      return false;\n    }\n\n    return true;\n  },\n});\n","import { groupBy, pick, uniq } from 'lodash/fp';\n\nimport { async, contentTypes } from '@strapi/utils';\nimport type { Core, UID, Modules } from '@strapi/types';\n\nimport type { DocumentMetadata } from '../../../shared/contracts/collection-types';\nimport { getPopulateForValidation } from './utils/populate';\n\nexport interface DocumentVersion {\n  id: string | number;\n  documentId: Modules.Documents.ID;\n  locale?: string;\n  localizations?: DocumentVersion[];\n  updatedAt?: string | null | Date;\n  publishedAt?: string | null | Date;\n}\n\nconst AVAILABLE_STATUS_FIELDS = [\n  'id',\n  'locale',\n  'updatedAt',\n  'createdAt',\n  'publishedAt',\n  'createdBy',\n  'updatedBy',\n  'status',\n];\nconst AVAILABLE_LOCALES_FIELDS = [\n  'id',\n  'locale',\n  'updatedAt',\n  'createdAt',\n  'publishedAt',\n  'documentId',\n];\n\nconst CONTENT_MANAGER_STATUS = {\n  PUBLISHED: 'published',\n  DRAFT: 'draft',\n  MODIFIED: 'modified',\n};\n\n/**\n * Controls the metadata properties to be returned\n *\n * If `availableLocales` is set to `true` (default), the returned metadata will include\n * the available locales of the document for its current status.\n *\n * If `availableStatus` is set to `true` (default), the returned metadata will include\n * the available status of the document for its current locale.\n */\nexport interface GetMetadataOptions {\n  availableLocales?: boolean;\n  availableStatus?: boolean;\n}\n\n/**\n * Checks if the provided document version has been modified after all other versions.\n */\nconst getIsVersionLatestModification = (\n  version?: DocumentVersion,\n  otherVersion?: DocumentVersion\n): boolean => {\n  if (!version || !version.updatedAt) {\n    return false;\n  }\n\n  const versionUpdatedAt = version?.updatedAt ? new Date(version.updatedAt).getTime() : 0;\n\n  const otherUpdatedAt = otherVersion?.updatedAt ? new Date(otherVersion.updatedAt).getTime() : 0;\n\n  return versionUpdatedAt > otherUpdatedAt;\n};\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  /**\n   * Returns available locales of a document for the current status\n   */\n  async getAvailableLocales(\n    uid: UID.ContentType,\n    version: DocumentVersion,\n    allVersions: DocumentVersion[]\n  ) {\n    // Group all versions by locale\n    const versionsByLocale = groupBy('locale', allVersions);\n\n    // Delete the current locale\n    if (version.locale) {\n      delete versionsByLocale[version.locale];\n    }\n\n    // For each locale, get the ones with the same status\n    // There will not be a draft and a version counterpart if the content\n    // type does not have draft and publish\n    const model = strapi.getModel(uid);\n\n    const mappingResult = await async.map(\n      Object.values(versionsByLocale),\n      async (localeVersions: DocumentVersion[]) => {\n        if (!contentTypes.hasDraftAndPublish(model)) {\n          return localeVersions[0];\n        }\n\n        const draftVersion = localeVersions.find((v) => v.publishedAt === null);\n        const otherVersions = localeVersions.filter((v) => v.id !== draftVersion?.id);\n\n        if (!draftVersion) {\n          return;\n        }\n\n        return {\n          ...draftVersion,\n          status: this.getStatus(draftVersion, otherVersions as any),\n        };\n      }\n    );\n\n    return (\n      mappingResult\n        // Filter just in case there is a document with no drafts\n        .filter(Boolean) as unknown as DocumentMetadata['availableLocales']\n    );\n  },\n\n  /**\n   * Returns available status of a document for the current locale\n   */\n  getAvailableStatus(version: DocumentVersion, allVersions: DocumentVersion[]) {\n    // Find the other status of the document\n    const status =\n      version.publishedAt !== null\n        ? CONTENT_MANAGER_STATUS.DRAFT\n        : CONTENT_MANAGER_STATUS.PUBLISHED;\n\n    // Get version that match the current locale and not match the current status\n    const availableStatus = allVersions.find((v) => {\n      const matchLocale = v.locale === version.locale;\n      const matchStatus = status === 'published' ? v.publishedAt !== null : v.publishedAt === null;\n      return matchLocale && matchStatus;\n    });\n\n    if (!availableStatus) return availableStatus;\n\n    // Pick status fields (at fields, status, by fields), use lodash fp\n    return pick(AVAILABLE_STATUS_FIELDS, availableStatus);\n  },\n\n  /**\n   * Get the available status of many documents, useful for batch operations\n   * @param uid\n   * @param documents\n   * @returns\n   */\n  async getManyAvailableStatus(uid: UID.ContentType, documents: DocumentVersion[]) {\n    if (!documents.length) return [];\n\n    // The status and locale of all documents should be the same\n    const status = documents[0].publishedAt !== null ? 'published' : 'draft';\n    const locales = documents.map((d) => d.locale).filter(Boolean);\n\n    const where: Record<string, any> = {\n      documentId: { $in: documents.map((d) => d.documentId).filter(Boolean) },\n      publishedAt: { $null: status === 'published' },\n    };\n\n    // If there is any locale to filter (if i18n is enabled)\n    if (locales.length) {\n      where.locale = { $in: locales };\n    }\n\n    return strapi.query(uid).findMany({\n      where,\n      select: ['id', 'documentId', 'locale', 'updatedAt', 'createdAt', 'publishedAt'],\n    });\n  },\n\n  getStatus(version: DocumentVersion, otherDocumentStatuses?: DocumentMetadata['availableStatus']) {\n    let draftVersion: DocumentVersion | undefined;\n    let publishedVersion: DocumentVersion | undefined;\n\n    if (version.publishedAt) {\n      publishedVersion = version;\n    } else {\n      draftVersion = version;\n    }\n\n    const otherVersion = otherDocumentStatuses?.at(0);\n    if (otherVersion?.publishedAt) {\n      publishedVersion = otherVersion;\n    } else if (otherVersion) {\n      draftVersion = otherVersion;\n    }\n\n    if (!draftVersion) return CONTENT_MANAGER_STATUS.PUBLISHED;\n    if (!publishedVersion) return CONTENT_MANAGER_STATUS.DRAFT;\n\n    /*\n     * The document is modified if the draft version has been updated more\n     * recently than the published version.\n     */\n    const isDraftModified = getIsVersionLatestModification(draftVersion, publishedVersion);\n    return isDraftModified ? CONTENT_MANAGER_STATUS.MODIFIED : CONTENT_MANAGER_STATUS.PUBLISHED;\n  },\n\n  // TODO is it necessary to return metadata on every page of the CM\n  // We could refactor this so the locales are only loaded when they're\n  // needed. e.g. in the bulk locale action modal.\n  async getMetadata(\n    uid: UID.ContentType,\n    version: DocumentVersion,\n    { availableLocales = true, availableStatus = true }: GetMetadataOptions = {}\n  ) {\n    // TODO: Ignore publishedAt if availableStatus=false, and ignore locale if\n    // i18n is disabled\n    const { populate = {}, fields = [] } = getPopulateForValidation(uid);\n\n    const params = {\n      populate: {\n        ...populate,\n        // NOTE: creator fields are selected in this way to avoid exposing sensitive data\n        createdBy: {\n          select: ['id', 'firstname', 'lastname', 'email'],\n        },\n        updatedBy: {\n          select: ['id', 'firstname', 'lastname', 'email'],\n        },\n      },\n      fields: uniq([...AVAILABLE_LOCALES_FIELDS, ...fields]),\n      filters: {\n        documentId: version.documentId,\n      },\n    };\n\n    const dbParams = strapi.get('query-params').transform(uid, params);\n    const versions = await strapi.db.query(uid).findMany(dbParams);\n\n    // TODO: Remove use of available locales and use localizations instead\n    const availableLocalesResult = availableLocales\n      ? await this.getAvailableLocales(uid, version, versions)\n      : [];\n\n    const availableStatusResult = availableStatus\n      ? this.getAvailableStatus(version, versions)\n      : null;\n\n    return {\n      availableLocales: availableLocalesResult,\n      availableStatus: availableStatusResult ? [availableStatusResult] : [],\n    };\n  },\n\n  /**\n   * Returns associated metadata of a document:\n   * - Available locales of the document for the current status\n   * - Available status of the document for the current locale\n   */\n  async formatDocumentWithMetadata(\n    uid: UID.ContentType,\n    document: DocumentVersion,\n    opts: GetMetadataOptions = {}\n  ) {\n    if (!document) {\n      return {\n        data: document,\n        meta: {\n          availableLocales: [],\n          availableStatus: [],\n        },\n      };\n    }\n\n    const hasDraftAndPublish = contentTypes.hasDraftAndPublish(strapi.getModel(uid));\n\n    // Ignore available status if the content type does not have draft and publish\n    if (!hasDraftAndPublish) {\n      opts.availableStatus = false;\n    }\n\n    const meta = await this.getMetadata(uid, document, opts);\n\n    // Populate localization statuses\n    if (document.localizations) {\n      const otherStatus = await this.getManyAvailableStatus(uid, document.localizations);\n\n      document.localizations = document.localizations.map((d) => {\n        const status = otherStatus.find((s) => s.documentId === d.documentId);\n        return {\n          ...d,\n          status: this.getStatus(d, status ? [status] : []),\n        };\n      });\n    }\n\n    return {\n      data: {\n        ...document,\n        // Add status to the document only if draft and publish is enabled\n        status: hasDraftAndPublish\n          ? this.getStatus(document, meta.availableStatus as any)\n          : undefined,\n      },\n      meta,\n    };\n  },\n});\n","import { castArray } from 'lodash/fp';\nimport strapiUtils from '@strapi/utils';\n\nconst { isVisibleAttribute } = strapiUtils.contentTypes;\n/**\n * sumDraftCounts works recursively on the attributes of a model counting the\n * number of draft relations\n * These relations can be direct to this content type or contained within components/dynamic zones\n * @param {Object} entity containing the draft relation counts\n * @param {String} uid of the content type\n * @returns {Number} of draft relations\n */\nconst sumDraftCounts = (entity: any, uid: any): number => {\n  const model = strapi.getModel(uid);\n\n  return Object.keys(model.attributes).reduce((sum, attributeName) => {\n    const attribute: any = model.attributes[attributeName];\n    const value = entity[attributeName];\n    if (!value) {\n      return sum;\n    }\n\n    switch (attribute.type) {\n      case 'relation': {\n        if (isVisibleAttribute(model, attributeName)) {\n          return sum + value.count;\n        }\n        return sum;\n      }\n      case 'component': {\n        const compoSum = castArray(value).reduce((acc, componentValue) => {\n          return acc + sumDraftCounts(componentValue, attribute.component);\n        }, 0);\n        return sum + compoSum;\n      }\n      case 'dynamiczone': {\n        const dzSum = value.reduce((acc: any, componentValue: any) => {\n          return acc + sumDraftCounts(componentValue, componentValue.__component);\n        }, 0);\n        return sum + dzSum;\n      }\n      default:\n        return sum;\n    }\n  }, 0);\n};\n\nexport { sumDraftCounts };\n","import { omit, pipe } from 'lodash/fp';\n\nimport { contentTypes, errors, pagination } from '@strapi/utils';\nimport type { Core, Modules, UID } from '@strapi/types';\n\nimport { buildDeepPopulate, getDeepPopulate, getDeepPopulateDraftCount } from './utils/populate';\nimport { sumDraftCounts } from './utils/draft';\n\ntype DocService = Modules.Documents.ServiceInstance;\ntype DocServiceParams<TAction extends keyof DocService> = Parameters<DocService[TAction]>[0];\nexport type Document = Modules.Documents.Result<UID.ContentType>;\n\nconst { ApplicationError } = errors;\nconst { PUBLISHED_AT_ATTRIBUTE } = contentTypes.constants;\n\nconst omitPublishedAtField = omit(PUBLISHED_AT_ATTRIBUTE);\nconst omitIdField = omit('id');\n\nconst documentManager = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    async findOne(\n      id: string,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'findOne'>, 'documentId'> = {}\n    ) {\n      return strapi.documents(uid).findOne({ ...opts, documentId: id });\n    },\n\n    /**\n     * Find multiple (or all) locales for a document\n     */\n    async findLocales(\n      id: string | string[] | undefined,\n      uid: UID.CollectionType,\n      opts: {\n        populate?: Modules.Documents.Params.Pick<any, 'populate'>;\n        locale?: string | string[] | '*';\n        isPublished?: boolean;\n      }\n    ) {\n      // Will look for a specific locale by default\n      const where: any = {};\n\n      // Might not have an id if querying a single type\n      if (id) {\n        where.documentId = id;\n      }\n\n      // Search in array of locales\n      if (Array.isArray(opts.locale)) {\n        where.locale = { $in: opts.locale };\n      } else if (opts.locale && opts.locale !== '*') {\n        // Look for a specific locale, ignore if looking for all locales\n        where.locale = opts.locale;\n      }\n\n      // Published is passed, so we filter on it, otherwise we don't filter\n      if (typeof opts.isPublished === 'boolean') {\n        where.publishedAt = { $notNull: opts.isPublished };\n      }\n\n      return strapi.db.query(uid).findMany({ populate: opts.populate, where });\n    },\n\n    async findMany(opts: DocServiceParams<'findMany'>, uid: UID.CollectionType) {\n      const params = { ...opts, populate: getDeepPopulate(uid) } as typeof opts;\n      return strapi.documents(uid).findMany(params);\n    },\n\n    async findPage(opts: DocServiceParams<'findMany'>, uid: UID.CollectionType) {\n      const params = pagination.withDefaultPagination(opts || {}, {\n        maxLimit: 1000,\n      });\n\n      const [documents, total = 0] = await Promise.all([\n        strapi.documents(uid).findMany(params),\n        strapi.documents(uid).count(params),\n      ]);\n\n      return {\n        results: documents,\n        pagination: pagination.transformPagedPaginationInfo(params, total),\n      };\n    },\n\n    async create(uid: UID.CollectionType, opts: DocServiceParams<'create'> = {} as any) {\n      const populate = opts.populate ?? (await buildDeepPopulate(uid));\n      const params = { ...opts, status: 'draft' as const, populate };\n\n      return strapi.documents(uid).create(params);\n    },\n\n    async update(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'update'>, 'documentId'> = {} as any\n    ) {\n      const publishData = pipe(omitPublishedAtField, omitIdField)(opts.data || {});\n      const populate = opts.populate ?? (await buildDeepPopulate(uid));\n      const params = { ...opts, data: publishData, populate, status: 'draft' };\n\n      return strapi.documents(uid).update({ ...params, documentId: id });\n    },\n\n    async clone(\n      id: Modules.Documents.ID,\n      body: Partial<Modules.Documents.Params.Data.Input<UID.CollectionType>>,\n      uid: UID.CollectionType\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = {\n        data: omitIdField(body),\n        populate,\n      };\n\n      return strapi\n        .documents(uid)\n        .clone({ ...params, documentId: id })\n        .then((result) => result?.entries.at(0));\n    },\n\n    /**\n     *  Check if a document exists\n     */\n    async exists(uid: UID.CollectionType, id?: string) {\n      // Collection type\n      if (id) {\n        const count = await strapi.db.query(uid).count({ where: { documentId: id } });\n        return count > 0;\n      }\n\n      // Single type\n      const count = await strapi.db.query(uid).count();\n      return count > 0;\n    },\n\n    async delete(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'delete'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n\n      await strapi.documents(uid).delete({\n        ...opts,\n        documentId: id,\n        populate,\n      });\n      return {};\n    },\n\n    // FIXME: handle relations\n    async deleteMany(\n      documentIds: Modules.Documents.ID[],\n      uid: UID.CollectionType,\n      opts: DocServiceParams<'findMany'> & { locale?: string } = {}\n    ) {\n      const deletedEntries = await strapi.db.transaction(async () => {\n        return Promise.all(documentIds.map(async (id) => this.delete(id, uid, opts)));\n      });\n\n      return { count: deletedEntries.length };\n    },\n\n    async publish(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'publish'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = { ...opts, populate };\n\n      return strapi\n        .documents(uid)\n        .publish({ ...params, documentId: id })\n        .then((result) => result?.entries);\n    },\n\n    async publishMany(uid: UID.ContentType, documentIds: string[], locale?: string | string[]) {\n      return strapi.db.transaction(async () => {\n        const results = await Promise.all(\n          documentIds.map((documentId) => this.publish(documentId, uid, { locale }))\n        );\n\n        const publishedEntitiesCount = results.flat().filter(Boolean).length;\n        return publishedEntitiesCount;\n      });\n    },\n\n    async unpublishMany(\n      documentIds: Modules.Documents.ID[],\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'unpublish'>, 'documentId'> = {} as any\n    ) {\n      const unpublishedEntries = await strapi.db.transaction(async () => {\n        return Promise.all(\n          documentIds.map((id) =>\n            strapi\n              .documents(uid)\n              .unpublish({ ...opts, documentId: id })\n              .then((result) => result?.entries)\n          )\n        );\n      });\n\n      const unpublishedEntitiesCount = unpublishedEntries.flat().filter(Boolean).length;\n\n      // Return the number of unpublished entities\n      return { count: unpublishedEntitiesCount };\n    },\n\n    async unpublish(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'unpublish'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = { ...opts, populate };\n\n      return strapi\n        .documents(uid)\n        .unpublish({ ...params, documentId: id })\n        .then((result) => result?.entries.at(0));\n    },\n\n    async discardDraft(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'discardDraft'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = { ...opts, populate };\n\n      return strapi\n        .documents(uid)\n        .discardDraft({ ...params, documentId: id })\n        .then((result) => result?.entries.at(0));\n    },\n\n    async countDraftRelations(id: string, uid: UID.ContentType, locale: string) {\n      const { populate, hasRelations } = getDeepPopulateDraftCount(uid);\n\n      if (!hasRelations) {\n        return 0;\n      }\n\n      const document = await strapi.documents(uid).findOne({ documentId: id, populate, locale });\n      if (!document) {\n        throw new ApplicationError(\n          `Unable to count draft relations, document with id ${id} and locale ${locale} not found`\n        );\n      }\n\n      return sumDraftCounts(document, uid);\n    },\n\n    async countManyEntriesDraftRelations(\n      documentIds: Modules.Documents.ID[],\n      uid: UID.CollectionType,\n      locale: string | string[]\n    ) {\n      const { populate, hasRelations } = getDeepPopulateDraftCount(uid);\n\n      if (!hasRelations) {\n        return 0;\n      }\n\n      let localeFilter = {};\n      if (locale) {\n        localeFilter = Array.isArray(locale) ? { locale: { $in: locale } } : { locale };\n      }\n\n      const entities = await strapi.db.query(uid).findMany({\n        populate,\n        where: {\n          documentId: { $in: documentIds },\n          ...localeFilter,\n        },\n      });\n\n      const totalNumberDraftRelations: number = entities!.reduce(\n        (count: number, entity: Document) => sumDraftCounts(entity, uid) + count,\n        0\n      );\n\n      return totalNumberDraftRelations;\n    },\n  };\n};\n\nexport type DocumentManagerService = typeof documentManager;\n\nexport default documentManager;\n","import components from './components';\nimport contentTypes from './content-types';\nimport dataMapper from './data-mapper';\nimport fieldSizes from './field-sizes';\nimport metrics from './metrics';\nimport permissionChecker from './permission-checker';\nimport permission from './permission';\nimport populateBuilder from './populate-builder';\nimport uid from './uid';\nimport history from '../history';\nimport preview from '../preview';\nimport documentMetadata from './document-metadata';\nimport documentManager from './document-manager';\n\nexport default {\n  components,\n  'content-types': contentTypes,\n  'data-mapper': dataMapper,\n  'document-metadata': documentMetadata,\n  'document-manager': documentManager,\n  'field-sizes': fieldSizes,\n  metrics,\n  'permission-checker': permissionChecker,\n  permission,\n  'populate-builder': populateBuilder,\n  uid,\n  ...(history.services ? history.services : {}),\n  ...(preview.services ? preview.services : {}),\n};\n","import register from './register';\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport routes from './routes';\nimport policies from './policies';\nimport controllers from './controllers';\nimport services from './services';\n\nexport default () => {\n  return {\n    register,\n    bootstrap,\n    destroy,\n    controllers,\n    routes,\n    policies,\n    services,\n  };\n};\n"],"names":["getService","name","strapi","plugin","service","historyRestoreVersionSchema","yup","object","shape","contentType","string","trim","required","validateRestoreVersion","validateYupSchema","getValidPagination","page","pageSize","pageNumber","pageSizeNumber","parsedPage","parseInt","Number","isNaN","parsedPageSize","createHistoryVersionController","findMany","ctx","contentTypeUid","query","isSingleType","getModel","kind","errors","ForbiddenError","documentId","permissionChecker","getContentManagerService","create","userAbility","state","model","cannot","read","forbidden","sanitizeQuery","results","pagination","findVersionsPage","sanitizedResults","async","map","version","data","sanitizeOutput","createdBy","pick","undefined","meta","restoreVersion","request","body","update","restoredDocument","params","versionId","controllers","HISTORY_VERSION_UID","FIELDS_TO_IGNORE","DEFAULT_RETENTION_DAYS","createServiceUtils","getSchemaAttributesDiff","versionSchemaAttributes","contentTypeSchemaAttributes","sanitizedContentTypeSchemaAttributes","omit","reduceDifferenceToAttributesObject","diffKeys","source","reduce","previousAttributesObject","diffKey","versionSchemaKeys","Object","keys","contentTypeSchemaAttributesKeys","uniqueToContentType","difference","added","uniqueToVersion","removed","getRelationRestoreValue","versionRelationData","attribute","Array","isArray","length","existingAndMissingRelations","Promise","all","relation","documents","target","findOne","locale","filter","getMediaRestoreValue","existingAndMissingMedias","media","db","where","id","localesService","i18nContentTypeService","getDefaultLocale","isLocalizedContentType","getLocaleDictionary","locales","find","acc","code","getRetentionDays","featureConfig","ee","features","get","licenseRetentionDays","options","retentionDays","userRetentionDays","config","Math","min","getVersionStatus","document","documentMetadataService","getMetadata","getStatus","availableStatus","getComponentFields","componentUID","entries","attributes","fieldsAcc","key","includes","type","push","getDeepPopulate","uid","useDatabaseSyntax","fieldSelector","attributeName","isMorphRelation","toLowerCase","startsWith","isVisible","contentTypes","isVisibleAttribute","populate","component","populatedComponents","components","on","buildMediaResponse","values","slice","currentRelationDataPromise","entry","currentRelationData","relatedEntry","missingCount","resolve","buildRelationReponse","attributeSchema","status","createHistoryService","serviceUtils","createVersion","historyVersionData","createdAt","Date","requestContext","user","schema","defaultLocale","localeDictionary","findPage","$and","relatedDocumentId","orderBy","populateEntry","traverseEntity","utils","value","currentValue","remove","adminUsers","userToPopulate","set","response","bind","formattedResults","result","unknownAttributes","schemaDiff","dataWithoutAddedAttributes","currentData","addedKey","structuredClone","dataWithoutMissingRelations","repeatable","ApplicationError","shouldCreateHistoryVersion","context","url","action","endsWith","getSchemas","attributesSchema","componentsSchemas","currentComponentSchemas","fieldSchema","componentSchema","createLifecyclesService","deleteExpiredJob","isInitialized","bootstrap","use","next","castArray","schemas","localeEntries","$in","hasDraftAndPublish","publishedAt","transaction","onCommit","scheduleJob","retentionDaysInMilliseconds","expirationDate","now","deleteMany","created_at","$lt","catch","error","Error","log","message","destroy","cancel","services","history","lifecycles","info","pluginName","historyVersionRouter","routes","method","path","handler","policies","historyVersion","tableName","singularName","column","notNullable","enum","default","useJoinTable","getFeature","isEnabled","register","add","previewRouter","preview","getPreviewUrlSchema","nullable","validatePreviewUrl","newParams","modelType","ValidationError","doc","findFirst","NotFoundError","isDPEnabled","draftAndPublish","createPreviewController","getPreviewUrl","previewService","createPreviewService","getPreviewHandler","extendMiddlewareConfiguration","middleware","middlewares","configuredMiddlewares","currentMiddleware","mergeWith","objValue","srcValue","concat","createPreviewConfigService","allowedOrigins","contentSecurityPolicy","directives","enabled","validate","emptyHandler","ALLOWED_WEBHOOK_EVENTS","ENTRY_PUBLISH","ENTRY_UNPUBLISH","forEach","addAllowedEvent","setCustomFieldInputSizes","syncConfigurations","registerPermissions","ct","send","admin","route","split","actionConfig","modelName","isNil","controller","routing","actions","hasAtLeastOne","hasPermissionsSchema","array","of","boolean","validateHasPermissionsInput","validateYupSchemaSync","createPolicy","policy","validator","isAuthorized","some","can","every","hasPermissions","getNonVisibleAttributes","getWritableAttributes","contentTypesUtils","PUBLISHED_AT_ATTRIBUTE","CREATED_BY_ATTRIBUTE","UPDATED_BY_ATTRIBUTE","constants","NON_SORTABLES","SORTABLE_RELATIONS","NON_LISTABLES","LISTABLE_RELATIONS","isHidden","_","has","isListable","isRelation","relationType","isSortable","isSearchable","isTimestamp","isPublicationField","isCreatorField","timestamps","getTimestamps","creatorFields","getCreatorFields","hasRelationAttribute","hasEditableAttribute","findFirstStringAttribute","getDefaultMainField","getSortableAttributes","validAttributes","nonVisibleWritableAttributes","intersection","DEFAULT_SETTINGS","bulkable","filterable","searchable","settingsFields","getModelSettings","pipe","propOr","isValidDefaultSort","parsedValue","qs","parse","omitNonSortableAttributes","sortableAttributes","sanitizedValue","traverse","traverseQuerySort","isEqual","createDefaultSettings","defaultField","mainField","defaultSortBy","defaultSortOrder","syncSettings","configuration","isEmpty","settings","opts","createSettingsSchema","metadatas","createMetadasSchema","layouts","createLayoutsSchema","optional","noUnknown","number","integer","max","oneOf","test","edit","label","description","placeholder","editable","visible","lazy","targetSchema","findContentType","targetModel","list","sortable","createArrayTest","allowUndefined","val","editAttributes","size","positive","PaginationError","TYPES","kindSchema","bulkActionInputSchema","documentIds","strapiID","generateUIDInputSchema","contentTypeUID","field","checkUIDAvailabilityInputSchema","matches","validateUIDField","validateKind","validateBulkActionInput","validateGenerateUIDInput","validateCheckUIDAvailabilityInput","strapiUtils","checkRelation","inversedBy","mappedBy","getProhibitedCloningFields","pathPrefix","prohibitedFields","attributePath","flatMap","displayName","unique","excludeNotCreatableFields","canCreate","join","singleLocaleSchema","multipleLocaleSchema","statusSchema","mixed","getDocumentLocaleAndStatus","allowMultipleLocales","providedStatus","rest","defaultStatus","strict","abortEarly","formatDocumentWithMetadata","documentMetadata","serviceOutput","availableLocales","metadataSanitizer","localeDocument","statusDocument","createDocument","documentManager","pickPermittedFields","sanitizeCreateInput","setCreator","setCreatorFields","sanitizeFn","sanitizedBody","updateDocument","permissionQuery","sanitizedQuery","populateFromQuery","build","documentVersion","documentExists","exists","sanitizeUpdateInput","isEdition","populateDeep","countRelations","toOne","toMany","documentsAvailableStatus","getManyAvailableStatus","setStatus","availableStatuses","d","Infinity","notFound","sanitizedDocument","totalEntries","count","telemetry","eventProperties","updatedVersion","sanitizedVersion","clone","sourceId","excludeNotCreatable","clonedDocument","autoClone","badRequest","delete","documentLocales","findLocales","publish","publishedDocument","isCreate","isUpdate","publishResult","bulkPublish","entityPromises","isPublished","entities","flat","entity","publishMany","bulkUnpublish","unpublish","entitiesIds","unpublishMany","discardDraft","discard","bulkDelete","localeDocumentsIds","countDraftRelations","countManyEntriesDraftRelations","ids","filters","findComponents","findAllComponents","toDto","findComponentConfiguration","componentService","findComponent","findConfiguration","componentsConfigurations","findComponentsConfigurations","updateComponentConfiguration","input","createModelConfigurationSchema","stripUnknown","newConfiguration","updateConfiguration","hasEditMainField","getEditMainField","prop","assocListMainField","assoc","assocMainField","metadata","findContentTypes","findContentTypesByKind","findContentTypesSettings","findAllContentTypes","configurations","findContentTypeConfiguration","contentTypeService","confWithUpdatedMetadata","mapValues","updateContentTypeConfiguration","metricsService","canConfigureContentType","sendDidConfigureListView","getInitData","getAllFieldSizes","fieldSizes","validateFindAvailableSchema","_q","idsToOmit","idsToInclude","validateFindExistingSchema","validateFindAvailable","validateFindExisting","UPDATED_AT_ATTRIBUTE","addFiltersClause","filtersClause","sanitizeMainField","isMainFieldListable","canReadMainField","addStatusToRelations","targetUid","relations","firstRelation","r","$null","$notNull","select","availableDocument","getPublishedAtClause","validateLocale","sourceUid","sourceModel","isLocalized","isSourceLocalized","isTargetLocalized","validateStatus","isDP","isSourceDP","extractAndValidateRequestInfo","targetField","sourceSchema","isComponent","entryId","currentEntity","modelConfig","flow","fieldsToSelect","uniq","findAvailable","sourceModelType","queryParams","sort","fields","filterByLocale","subQuery","queryBuilder","alias","getAlias","document_id","$notIn","knexSubQuery","getKnexQuery","_filter","isOperatorOfType","dbQuery","transform","res","findExisting","loadRelations","isAnyToMany","args","loadPages","load","then","ordering","loadedIds","item","sanitizedRes","relationsUnion","uniqBy","pageCount","total","buildPopulateFromQuery","findDocument","createOrUpdateDocument","otherDocumentVersion","createOrUpdate","deletedEntity","at","generateUID","uidService","generateUIDField","checkUIDAvailability","isAvailable","suggestion","findUniqueUID","collectionTypes","init","singleTypes","CONFIGURATION","getStore","store","EMPTY_CONFIG","configurationKey","getModelConfiguration","merge","setModelConfiguration","storedConfig","currentConfig","deleteKey","findByKey","$startsWith","JSON","getAllConfigurations","createDefaultMetadatas","createDefaultMetadata","fieldAttributes","getTargetSchema","assign","syncMetadatas","metasWithValidKeys","metasWithDefaults","updatedMetas","attr","updatedMeta","DEFAULT_LIST_LENGTH","MAX_ROW_SIZE","isAllowedFieldSize","getFieldSize","fieldSize","isResizable","getDefaultFieldSize","hasFieldSize","customField","createDefaultLayouts","createDefaultListLayout","createDefaultEditLayout","rowSize","els","sum","el","appendToEditLayout","syncLayouts","editRelations","cleanList","cleanEditRelations","elementsToReAppend","cleanEdit","row","newRow","fieldType","newAttributes","newEditAttributes","layout","keysToAppend","currentRowIndex","attributeSize","currenRowSize","validateCustomConfig","createDefaultConfiguration","syncConfiguration","conf","prefix","storeUtils","getModels","uidToStoreKey","getConfiguration","storeKey","setConfiguration","deleteConfiguration","models","generateNewConfiguration","currentUIDS","DBUIDs","contentTypesToUpdate","contentTypesToAdd","contentTypesToDelete","STORE_KEY_PREFIX","configurationService","createConfigurationService","toContentManagerModel","category","componentsMap","getComponentConfigurations","componentConfiguration","componentUid","findDisplayedContentTypes","isDisplayed","isKind","dtoFields","apiID","formatAttributes","getVisibleAttributes","formatAttribute","toRelation","getOr","needsFullSize","smallSize","defaultSize","dynamiczone","json","richtext","blocks","checkbox","date","time","biginteger","decimal","float","datetime","email","enumeration","password","text","timestamp","createFieldSizesService","fieldSizesService","setFieldSize","customFields","getAll","inputSize","getRelationalFields","displayedFields","relationalFields","displayedRelationalFields","containsRelationalFields","e","ACTIONS","createPermissionChecker","permissionsManager","createPermissionsManager","ability","actionProvider","toSubject","subject","aliases","unstable_aliases","sanitizeInput","validateQuery","validateInput","buildPermissionQuery","addPermissionsQueryTo","q","displayedContentTypes","contentTypesUids","section","subjects","applyToProperties","subCategory","registerMany","isScalarAttribute","getDoesAttributeRequireValidation","isMorphToRelation","isMedia","propEq","isDynamicZone","getPopulateForRelation","countMany","countOne","initialPopulate","isManyRelation","validationPopulate","getPopulateForValidation","getPopulateForDZ","level","getPopulateFor","folder","maxLevel","populateAcc","componentResult","componentsResult","getDeepPopulateDraftCount","hasRelations","childHasRelations","dzPopulateFragment","componentPopulate","componentHasRelations","getQueryPopulate","populateQuery","traverseQueryFilters","populatePath","replace","buildDeepPopulate","populateBuilder","getInitialPopulate","deepPopulateOptions","builder","defaultValue","targetValue","slugify","isFunction","foundDocuments","possibleCollisions","i","tmpUId","documentCount","AVAILABLE_STATUS_FIELDS","AVAILABLE_LOCALES_FIELDS","CONTENT_MANAGER_STATUS","PUBLISHED","DRAFT","MODIFIED","getIsVersionLatestModification","otherVersion","updatedAt","versionUpdatedAt","getTime","otherUpdatedAt","getAvailableLocales","allVersions","versionsByLocale","groupBy","mappingResult","localeVersions","draftVersion","v","otherVersions","Boolean","getAvailableStatus","matchLocale","matchStatus","otherDocumentStatuses","publishedVersion","isDraftModified","updatedBy","dbParams","versions","availableLocalesResult","availableStatusResult","localizations","otherStatus","s","sumDraftCounts","compoSum","componentValue","dzSum","__component","omitPublishedAtField","omitIdField","withDefaultPagination","maxLimit","transformPagedPaginationInfo","publishData","deletedEntries","publishedEntitiesCount","unpublishedEntries","unpublishedEntitiesCount","localeFilter","totalNumberDraftRelations","dataMapper","metrics","permission"],"mappings":"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"}