{"version":3,"file":"Input-Bv-rqfYH.js","sources":["../../../admin/src/hooks/useLazyComponents.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/constants.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/conversions.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/enterKey.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Code.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Heading.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Image.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/links.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/types.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Link.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/List.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Paragraph.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Blocks/Quote.tsx","../../../admin/src/pages/EditView/components/EditorToolbarObserver.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksToolbar.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksContent.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/EditorLayout.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/Modifiers.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/plugins/withImages.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/plugins/withLinks.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/plugins/withStrapiSchema.ts","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksEditor.tsx","../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksInput.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/Initializer.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/AddComponentButton.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/ComponentCategory.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/ComponentPicker.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/DynamicComponent.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/DynamicZoneLabel.tsx","../../../admin/src/pages/EditView/components/FormInputs/DynamicZone/Field.tsx","../../../admin/src/pages/EditView/components/FormInputs/NotAllowed.tsx","../../../admin/src/services/uid.ts","../../../admin/src/pages/EditView/components/FormInputs/UID.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/mdRenderer.ts","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/PreviewWysiwyg.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/continueList.ts","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/Editor.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/EditorLayout.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/utils.ts","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/WysiwygStyles.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/WysiwygFooter.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/WysiwygNav.tsx","../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/Field.tsx","../../../admin/src/pages/EditView/components/InputRenderer.tsx","../../../admin/src/pages/EditView/components/FormLayout.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/NonRepeatable.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/Repeatable.tsx","../../../admin/src/pages/EditView/components/FormInputs/Component/Input.tsx"],"sourcesContent":["import { ComponentType, useCallback, useEffect, useState } from 'react';\n\nimport { StrapiAppContextValue, useStrapiApp } from '@strapi/admin/strapi-admin';\n\nconst componentStore = new Map<string, ComponentType | undefined>();\n\ntype LazyComponentStore = Record<string, ComponentType | undefined>;\n\ntype CustomField = NonNullable<ReturnType<StrapiAppContextValue['customFields']['get']>>;\n\ninterface UseLazyComponentsReturn {\n  isLazyLoading: boolean;\n  lazyComponentStore: LazyComponentStore;\n  cleanup: () => void;\n}\n\n/**\n * @description A hook to lazy load custom field components\n */\nconst useLazyComponents = (componentUids: string[] = []): UseLazyComponentsReturn => {\n  const [lazyComponentStore, setLazyComponentStore] = useState(Object.fromEntries(componentStore));\n  /**\n   * Start loading only if there are any components passed in\n   * and there are some new to load\n   */\n  const newUids = componentUids.filter((uid) => !componentStore.get(uid));\n  const [loading, setLoading] = useState(() => !!newUids.length);\n  const getCustomField = useStrapiApp('useLazyComponents', (state) => state.customFields.get);\n\n  useEffect(() => {\n    const setStore = (store: Record<string, ComponentType | undefined>) => {\n      setLazyComponentStore(store);\n      setLoading(false);\n    };\n\n    const lazyLoadComponents = async (\n      uids: string[],\n      components: Array<ReturnType<CustomField['components']['Input']>>\n    ) => {\n      const modules = await Promise.all(components);\n\n      uids.forEach((uid, index) => {\n        componentStore.set(uid, modules[index].default);\n      });\n\n      setStore(Object.fromEntries(componentStore));\n    };\n\n    if (newUids.length > 0) {\n      setLoading(true);\n\n      const componentPromises = newUids.reduce<\n        Array<ReturnType<CustomField['components']['Input']>>\n      >((arrayOfPromises, uid) => {\n        const customField = getCustomField(uid);\n\n        if (customField) {\n          arrayOfPromises.push(customField.components.Input());\n        }\n\n        return arrayOfPromises;\n      }, []);\n\n      if (componentPromises.length > 0) {\n        lazyLoadComponents(newUids, componentPromises);\n      }\n    }\n  }, [newUids, getCustomField]);\n\n  /**\n   * Wrap this in a callback so it can be used in\n   * effects to cleanup the cached store if required\n   */\n  const cleanup = useCallback(() => {\n    componentStore.clear();\n    setLazyComponentStore({});\n  }, []);\n\n  return { isLazyLoading: loading, lazyComponentStore, cleanup };\n};\n\nexport { useLazyComponents };\nexport type { UseLazyComponentsReturn, LazyComponentStore };\n","export const codeLanguages: {\n  value: string;\n  label: string;\n  decorate?: string;\n}[] = [\n  {\n    value: 'asm',\n    label: 'Assembly',\n    decorate: 'asmatmel',\n  },\n  {\n    value: 'bash',\n    label: 'Bash',\n  },\n  {\n    value: 'c',\n    label: 'C',\n  },\n  {\n    value: 'clojure',\n    label: 'Clojure',\n  },\n  {\n    value: 'cobol',\n    label: 'COBOL',\n  },\n  {\n    value: 'cpp',\n    label: 'C++',\n  },\n  {\n    value: 'csharp',\n    label: 'C#',\n  },\n  {\n    value: 'css',\n    label: 'CSS',\n  },\n  {\n    value: 'dart',\n    label: 'Dart',\n  },\n  {\n    value: 'dockerfile',\n    label: 'Dockerfile',\n    decorate: 'docker',\n  },\n  {\n    value: 'elixir',\n    label: 'Elixir',\n  },\n  {\n    value: 'erlang',\n    label: 'Erlang',\n  },\n  {\n    value: 'fortran',\n    label: 'Fortran',\n  },\n  {\n    value: 'fsharp',\n    label: 'F#',\n  },\n  {\n    value: 'go',\n    label: 'Go',\n  },\n  {\n    value: 'graphql',\n    label: 'GraphQL',\n  },\n  {\n    value: 'groovy',\n    label: 'Groovy',\n  },\n  {\n    value: 'haskell',\n    label: 'Haskell',\n  },\n  {\n    value: 'haxe',\n    label: 'Haxe',\n  },\n  {\n    value: 'html',\n    label: 'HTML',\n  },\n  {\n    value: 'ini',\n    label: 'INI',\n  },\n  {\n    value: 'java',\n    label: 'Java',\n  },\n  {\n    value: 'javascript',\n    label: 'JavaScript',\n  },\n  {\n    value: 'jsx',\n    label: 'JavaScript (React)',\n  },\n  {\n    value: 'json',\n    label: 'JSON',\n  },\n  {\n    value: 'julia',\n    label: 'Julia',\n  },\n  {\n    value: 'kotlin',\n    label: 'Kotlin',\n  },\n  {\n    value: 'latex',\n    label: 'LaTeX',\n  },\n  {\n    value: 'lua',\n    label: 'Lua',\n  },\n  {\n    value: 'markdown',\n    label: 'Markdown',\n  },\n  {\n    value: 'matlab',\n    label: 'MATLAB',\n  },\n  {\n    value: 'makefile',\n    label: 'Makefile',\n  },\n  {\n    value: 'objectivec',\n    label: 'Objective-C',\n  },\n  {\n    value: 'perl',\n    label: 'Perl',\n  },\n  {\n    value: 'php',\n    label: 'PHP',\n  },\n  {\n    value: 'plaintext',\n    label: 'Plain text',\n  },\n  {\n    value: 'powershell',\n    label: 'PowerShell',\n  },\n  {\n    value: 'python',\n    label: 'Python',\n  },\n  {\n    value: 'r',\n    label: 'R',\n  },\n  {\n    value: 'ruby',\n    label: 'Ruby',\n  },\n  {\n    value: 'rust',\n    label: 'Rust',\n  },\n  {\n    value: 'sas',\n    label: 'SAS',\n  },\n  {\n    value: 'scala',\n    label: 'Scala',\n  },\n  {\n    value: 'scheme',\n    label: 'Scheme',\n  },\n  {\n    value: 'shell',\n    label: 'Shell',\n  },\n  {\n    value: 'sql',\n    label: 'SQL',\n  },\n  {\n    value: 'stata',\n    label: 'Stata',\n  },\n  {\n    value: 'swift',\n    label: 'Swift',\n  },\n  {\n    value: 'typescript',\n    label: 'TypeScript',\n    decorate: 'ts',\n  },\n  {\n    value: 'tsx',\n    label: 'TypeScript (React)',\n  },\n  {\n    value: 'vbnet',\n    label: 'VB.NET',\n  },\n  {\n    value: 'xml',\n    label: 'XML',\n  },\n  {\n    value: 'yaml',\n    label: 'YAML',\n    decorate: 'yml',\n  },\n];\n","import { type Element, type Path, Editor, Transforms } from 'slate';\n\n/**\n * Extracts some logic that is common to most blocks' handleConvert functions.\n * @returns The path of the converted block\n */\nconst baseHandleConvert = <T extends Element>(\n  editor: Editor,\n  attributesToSet: Partial<T> & { type: T['type'] }\n): void | Path => {\n  // If there is no selection, convert last inserted node\n  const [_, lastNodePath] = Editor.last(editor, []);\n\n  // If the selection is inside a list, split the list so that the modified block is outside of it\n  Transforms.unwrapNodes(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    split: true,\n    at: editor.selection ?? lastNodePath,\n  });\n\n  // Make sure we get a block node, not an inline node\n  const [, updatedLastNodePath] = Editor.last(editor, []);\n  const entry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type !== 'text' && node.type !== 'link',\n    at: editor.selection ?? updatedLastNodePath,\n  });\n\n  if (!entry || Editor.isEditor(entry[0])) {\n    return;\n  }\n\n  const [element, elementPath] = entry;\n\n  Transforms.setNodes(\n    editor,\n    {\n      ...getAttributesToClear(element),\n      ...attributesToSet,\n    } as Partial<Element>,\n    { at: elementPath }\n  );\n\n  return elementPath;\n};\n\n/**\n * Set all attributes except type and children to null so that Slate deletes them\n */\nconst getAttributesToClear = (element: Element) => {\n  const { children: _children, type: _type, ...extra } = element;\n\n  const attributesToClear = Object.keys(extra).reduce(\n    (currentAttributes, key) => ({ ...currentAttributes, [key]: null }),\n    {}\n  );\n\n  return attributesToClear as Record<string, null>;\n};\n\nexport { baseHandleConvert, getAttributesToClear };\n","import { type Text, Editor, Node, Transforms } from 'slate';\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * Inserts a line break the first time the user presses enter, and exits the node the second time.\n */\nconst pressEnterTwiceToExit = (editor: Editor) => {\n  /**\n   * To determine if we should break out of the node, check 2 things:\n   * 1. If the cursor is at the end of the node\n   * 2. If the last line of the node is empty\n   */\n  const nodeEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && !['link', 'text'].includes(node.type),\n  });\n  if (!nodeEntry || !editor.selection) {\n    return;\n  }\n  const [node, nodePath] = nodeEntry;\n  const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, nodePath);\n  const lastTextNode = node.children.at(-1);\n  const isEmptyLine = isText(lastTextNode) && lastTextNode.text.endsWith('\\n');\n\n  if (isNodeEnd && isEmptyLine) {\n    // Remove the last line break\n    Transforms.delete(editor, { distance: 1, unit: 'character', reverse: true });\n    // Break out of the node by creating a new paragraph\n    Transforms.insertNodes(editor, {\n      type: 'paragraph',\n      children: [{ type: 'text', text: '' }],\n    });\n    return;\n  }\n\n  // Otherwise insert a new line within the node\n  Transforms.insertText(editor, '\\n');\n\n  // If there's nothing after the cursor, disable modifiers\n  if (isNodeEnd) {\n    ['bold', 'italic', 'underline', 'strikethrough', 'code'].forEach((modifier) => {\n      Editor.removeMark(editor, modifier);\n    });\n  }\n};\n\nexport { pressEnterTwiceToExit };\n","import * as React from 'react';\n\nimport { Box, SingleSelect, SingleSelectOption } from '@strapi/design-system';\nimport { CodeBlock as CodeBlockIcon } from '@strapi/icons';\nimport * as Prism from 'prismjs';\nimport { useIntl } from 'react-intl';\nimport { BaseRange, Element, Editor, Node, NodeEntry, Transforms } from 'slate';\nimport { useSelected, type RenderElementProps, useFocused, ReactEditor } from 'slate-react';\nimport { styled } from 'styled-components';\n\nimport { useBlocksEditorContext, type BlocksStore } from '../BlocksEditor';\nimport { codeLanguages } from '../utils/constants';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { pressEnterTwiceToExit } from '../utils/enterKey';\nimport { type Block } from '../utils/types';\n\nimport 'prismjs/themes/prism-solarizedlight.css';\nimport 'prismjs/components/prism-asmatmel';\nimport 'prismjs/components/prism-bash';\nimport 'prismjs/components/prism-basic';\nimport 'prismjs/components/prism-c';\nimport 'prismjs/components/prism-clojure';\nimport 'prismjs/components/prism-cobol';\nimport 'prismjs/components/prism-cpp';\nimport 'prismjs/components/prism-csharp';\nimport 'prismjs/components/prism-dart';\nimport 'prismjs/components/prism-docker';\nimport 'prismjs/components/prism-elixir';\nimport 'prismjs/components/prism-erlang';\nimport 'prismjs/components/prism-fortran';\nimport 'prismjs/components/prism-fsharp';\nimport 'prismjs/components/prism-go';\nimport 'prismjs/components/prism-graphql';\nimport 'prismjs/components/prism-groovy';\nimport 'prismjs/components/prism-haskell';\nimport 'prismjs/components/prism-haxe';\nimport 'prismjs/components/prism-ini';\nimport 'prismjs/components/prism-java';\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-jsx';\nimport 'prismjs/components/prism-json';\nimport 'prismjs/components/prism-julia';\nimport 'prismjs/components/prism-kotlin';\nimport 'prismjs/components/prism-latex';\nimport 'prismjs/components/prism-lua';\nimport 'prismjs/components/prism-markdown';\nimport 'prismjs/components/prism-matlab';\nimport 'prismjs/components/prism-makefile';\nimport 'prismjs/components/prism-objectivec';\nimport 'prismjs/components/prism-perl';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-powershell';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-r';\nimport 'prismjs/components/prism-ruby';\nimport 'prismjs/components/prism-rust';\nimport 'prismjs/components/prism-sas';\nimport 'prismjs/components/prism-scala';\nimport 'prismjs/components/prism-scheme';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-stata';\nimport 'prismjs/components/prism-swift';\nimport 'prismjs/components/prism-typescript';\nimport 'prismjs/components/prism-tsx';\nimport 'prismjs/components/prism-vbnet';\nimport 'prismjs/components/prism-yaml';\n\ntype BaseRangeCustom = BaseRange & { className: string };\n\nexport const decorateCode = ([node, path]: NodeEntry) => {\n  const ranges: BaseRangeCustom[] = [];\n\n  // make sure it is an Slate Element\n  if (!Element.isElement(node) || node.type !== 'code') return ranges;\n  // transform the Element into a string\n  const text = Node.string(node);\n  const language = codeLanguages.find((lang) => lang.value === node.language);\n  const decorateKey = language?.decorate ?? language?.value;\n\n  const selectedLanguage = Prism.languages[decorateKey || 'plaintext'];\n\n  // create \"tokens\" with \"prismjs\" and put them in \"ranges\"\n  const tokens = Prism.tokenize(text, selectedLanguage);\n  let start = 0;\n  for (const token of tokens) {\n    const length = token.length;\n    const end = start + length;\n    if (typeof token !== 'string') {\n      ranges.push({\n        anchor: { path, offset: start },\n        focus: { path, offset: end },\n        className: `token ${token.type}`,\n      });\n    }\n    start = end;\n  }\n\n  // these will be found in \"renderLeaf\" in \"leaf\" and their \"className\" will be applied\n  return ranges;\n};\n\nconst CodeBlock = styled.pre`\n  border-radius: ${({ theme }) => theme.borderRadius};\n  background-color: ${({ theme }) => theme.colors.neutral100};\n  max-width: 100%;\n  overflow: auto;\n  padding: ${({ theme }) => `${theme.spaces[3]} ${theme.spaces[4]}`};\n  flex-shrink: 1;\n\n  & > code {\n    font-family: 'SF Mono', SFMono-Regular, ui-monospace, 'DejaVu Sans Mono', Menlo, Consolas,\n      monospace;\n    color: ${({ theme }) => theme.colors.neutral800};\n    overflow: auto;\n    max-width: 100%;\n  }\n`;\n\nconst CodeEditor = (props: RenderElementProps) => {\n  const { editor } = useBlocksEditorContext('ImageDialog');\n  const editorIsFocused = useFocused();\n  const imageIsSelected = useSelected();\n  const { formatMessage } = useIntl();\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n  const shouldDisplayLanguageSelect = (editorIsFocused && imageIsSelected) || isSelectOpen;\n\n  return (\n    <Box position=\"relative\" width=\"100%\">\n      <CodeBlock {...props.attributes}>\n        <code>{props.children}</code>\n      </CodeBlock>\n      {shouldDisplayLanguageSelect && (\n        <Box\n          position=\"absolute\"\n          background=\"neutral0\"\n          borderColor=\"neutral150\"\n          borderStyle=\"solid\"\n          borderWidth=\"0.5px\"\n          shadow=\"tableShadow\"\n          top=\"100%\"\n          marginTop={1}\n          right={0}\n          padding={1}\n          hasRadius\n        >\n          <SingleSelect\n            onChange={(open) => {\n              Transforms.setNodes(\n                editor,\n                { language: open.toString() },\n                { match: (node) => !Editor.isEditor(node) && node.type === 'code' }\n              );\n            }}\n            value={(props.element.type === 'code' && props.element.language) || 'plaintext'}\n            onOpenChange={(open) => {\n              setIsSelectOpen(open);\n\n              // Focus the editor again when closing the select so the user can continue typing\n              if (!open) {\n                ReactEditor.focus(editor);\n              }\n            }}\n            onCloseAutoFocus={(e) => e.preventDefault()}\n            aria-label={formatMessage({\n              id: 'components.Blocks.blocks.code.languageLabel',\n              defaultMessage: 'Select a language',\n            })}\n          >\n            {codeLanguages.map(({ value, label }) => (\n              <SingleSelectOption value={value} key={value}>\n                {label}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nconst codeBlocks: Pick<BlocksStore, 'code'> = {\n  code: {\n    renderElement: (props) => <CodeEditor {...props} />,\n    icon: CodeBlockIcon,\n    label: {\n      id: 'components.Blocks.blocks.code',\n      defaultMessage: 'Code block',\n    },\n    matchNode: (node) => node.type === 'code',\n    isInBlocksSelector: true,\n    handleConvert(editor) {\n      baseHandleConvert<Block<'code'>>(editor, { type: 'code', language: 'plaintext' });\n    },\n    handleEnterKey(editor) {\n      pressEnterTwiceToExit(editor);\n    },\n    snippets: ['```'],\n  },\n};\n\nexport { codeBlocks };\n","import * as React from 'react';\n\nimport { Typography, TypographyComponent } from '@strapi/design-system';\nimport {\n  HeadingFive,\n  HeadingFour,\n  HeadingOne,\n  HeadingSix,\n  HeadingThree,\n  HeadingTwo,\n} from '@strapi/icons';\nimport { Editor } from 'slate';\nimport { styled } from 'styled-components';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { type Block } from '../utils/types';\n\nconst H1 = styled<TypographyComponent<'h1'>>(Typography).attrs({ tag: 'h1' })`\n  font-size: 4.2rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H2 = styled<TypographyComponent<'h2'>>(Typography).attrs({ tag: 'h2' })`\n  font-size: 3.5rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H3 = styled<TypographyComponent<'h3'>>(Typography).attrs({ tag: 'h3' })`\n  font-size: 2.9rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H4 = styled<TypographyComponent<'h4'>>(Typography).attrs({ tag: 'h4' })`\n  font-size: 2.4rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H5 = styled<TypographyComponent<'h5'>>(Typography).attrs({ tag: 'h5' })`\n  font-size: 2rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\nconst H6 = styled<TypographyComponent<'h6'>>(Typography).attrs({ tag: 'h6' })`\n  font-size: 1.6rem;\n  line-height: ${({ theme }) => theme.lineHeights[1]};\n`;\n\n/**\n * Common handler for converting a node to a heading\n */\nconst handleConvertToHeading = (editor: Editor, level: Block<'heading'>['level']) => {\n  baseHandleConvert<Block<'heading'>>(editor, { type: 'heading', level });\n};\n\nconst headingBlocks: Pick<\n  BlocksStore,\n  'heading-one' | 'heading-two' | 'heading-three' | 'heading-four' | 'heading-five' | 'heading-six'\n> = {\n  'heading-one': {\n    renderElement: (props) => <H1 {...props.attributes}>{props.children}</H1>,\n    icon: HeadingOne,\n    label: {\n      id: 'components.Blocks.blocks.heading1',\n      defaultMessage: 'Heading 1',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 1),\n    matchNode: (node) => node.type === 'heading' && node.level === 1,\n    isInBlocksSelector: true,\n    snippets: ['#'],\n    dragHandleTopMargin: '14px',\n  },\n  'heading-two': {\n    renderElement: (props) => <H2 {...props.attributes}>{props.children}</H2>,\n    icon: HeadingTwo,\n    label: {\n      id: 'components.Blocks.blocks.heading2',\n      defaultMessage: 'Heading 2',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 2),\n    matchNode: (node) => node.type === 'heading' && node.level === 2,\n    isInBlocksSelector: true,\n    snippets: ['##'],\n    dragHandleTopMargin: '10px',\n  },\n  'heading-three': {\n    renderElement: (props) => <H3 {...props.attributes}>{props.children}</H3>,\n    icon: HeadingThree,\n    label: {\n      id: 'components.Blocks.blocks.heading3',\n      defaultMessage: 'Heading 3',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 3),\n    matchNode: (node) => node.type === 'heading' && node.level === 3,\n    isInBlocksSelector: true,\n    snippets: ['###'],\n    dragHandleTopMargin: '7px',\n  },\n  'heading-four': {\n    renderElement: (props) => <H4 {...props.attributes}>{props.children}</H4>,\n    icon: HeadingFour,\n    label: {\n      id: 'components.Blocks.blocks.heading4',\n      defaultMessage: 'Heading 4',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 4),\n    matchNode: (node) => node.type === 'heading' && node.level === 4,\n    isInBlocksSelector: true,\n    snippets: ['####'],\n    dragHandleTopMargin: '4px',\n  },\n  'heading-five': {\n    renderElement: (props) => <H5 {...props.attributes}>{props.children}</H5>,\n    icon: HeadingFive,\n    label: {\n      id: 'components.Blocks.blocks.heading5',\n      defaultMessage: 'Heading 5',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 5),\n    matchNode: (node) => node.type === 'heading' && node.level === 5,\n    isInBlocksSelector: true,\n    snippets: ['#####'],\n  },\n  'heading-six': {\n    renderElement: (props) => <H6 {...props.attributes}>{props.children}</H6>,\n    icon: HeadingSix,\n    label: {\n      id: 'components.Blocks.blocks.heading6',\n      defaultMessage: 'Heading 6',\n    },\n    handleConvert: (editor) => handleConvertToHeading(editor, 6),\n    matchNode: (node) => node.type === 'heading' && node.level === 6,\n    isInBlocksSelector: true,\n    snippets: ['######'],\n    dragHandleTopMargin: '-2px',\n  },\n};\n\nexport { headingBlocks };\n","import * as React from 'react';\n\nimport { useStrapiApp } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, FlexComponent } from '@strapi/design-system';\nimport { Image as Picture } from '@strapi/icons';\nimport { type Element, Transforms, Editor } from 'slate';\nimport { useFocused, type RenderElementProps, useSelected } from 'slate-react';\nimport { styled, css } from 'styled-components';\n\nimport { prefixFileUrlWithBackendUrl } from '../../../../../../utils/urls';\nimport { useBlocksEditorContext, type BlocksStore } from '../BlocksEditor';\nimport { type Block } from '../utils/types';\n\nimport type { Schema } from '@strapi/types';\n\nconst ImageWrapper = styled<FlexComponent>(Flex)<{ $isFocused?: boolean }>`\n  transition-property: box-shadow;\n  transition-duration: 0.2s;\n  ${(props) =>\n    props.$isFocused &&\n    css`\n      box-shadow: ${props.theme.colors.primary600} 0px 0px 0px 3px;\n    `}\n\n  & > img {\n    height: auto;\n    // The max-height is decided with the design team, the 56px is the height of the toolbar\n    max-height: calc(512px - 56px);\n    max-width: 100%;\n    object-fit: contain;\n  }\n`;\n\nconst IMAGE_SCHEMA_FIELDS = [\n  'name',\n  'alternativeText',\n  'url',\n  'caption',\n  'width',\n  'height',\n  'formats',\n  'hash',\n  'ext',\n  'mime',\n  'size',\n  'previewUrl',\n  'provider',\n  'provider_metadata',\n  'createdAt',\n  'updatedAt',\n];\n\nconst pick = <T extends object, K extends keyof T>(object: T, keys: K[]): Pick<T, K> => {\n  const entries = keys.map((key) => [key, object[key]]);\n  return Object.fromEntries(entries);\n};\n\n// Type guard to force TypeScript to narrow the type of the element in Blocks component\nconst isImage = (element: Element): element is Block<'image'> => {\n  return element.type === 'image';\n};\n\n// Added a background color to the image wrapper to make it easier to recognize the image block\nconst Image = ({ attributes, children, element }: RenderElementProps) => {\n  const editorIsFocused = useFocused();\n  const imageIsSelected = useSelected();\n\n  if (!isImage(element)) {\n    return null;\n  }\n  const { url, alternativeText, width, height } = element.image;\n\n  return (\n    <Box {...attributes}>\n      {children}\n      <ImageWrapper\n        background=\"neutral100\"\n        contentEditable={false}\n        justifyContent=\"center\"\n        $isFocused={editorIsFocused && imageIsSelected}\n        hasRadius\n      >\n        <img src={url} alt={alternativeText} width={width} height={height} />\n      </ImageWrapper>\n    </Box>\n  );\n};\n\nconst ImageDialog = () => {\n  const [isOpen, setIsOpen] = React.useState(true);\n  const { editor } = useBlocksEditorContext('ImageDialog');\n  const components = useStrapiApp('ImageDialog', (state) => state.components);\n\n  if (!components || !isOpen) return null;\n\n  const MediaLibraryDialog = components['media-library'] as React.ComponentType<{\n    allowedTypes: Schema.Attribute.MediaKind[];\n    onClose: () => void;\n    onSelectAssets: (_images: Schema.Attribute.MediaValue<true>) => void;\n  }>;\n\n  const insertImages = (images: Block<'image'>['image'][]) => {\n    // If the selection is inside a list, split the list so that the modified block is outside of it\n    Transforms.unwrapNodes(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      split: true,\n    });\n\n    // Save the path of the node that is being replaced by an image to insert the images there later\n    // It's the closest full block node above the selection\n    const nodeEntryBeingReplaced = Editor.above(editor, {\n      match(node) {\n        if (Editor.isEditor(node)) return false;\n\n        const isInlineNode = ['text', 'link'].includes(node.type);\n\n        return !isInlineNode;\n      },\n    });\n\n    if (!nodeEntryBeingReplaced) return;\n    const [, pathToInsert] = nodeEntryBeingReplaced;\n\n    // Remove the previous node that is being replaced by an image\n    Transforms.removeNodes(editor);\n\n    // Convert images to nodes and insert them\n    const nodesToInsert = images.map((image) => {\n      const imageNode: Block<'image'> = {\n        type: 'image',\n        image,\n        children: [{ type: 'text', text: '' }],\n      };\n      return imageNode;\n    });\n    Transforms.insertNodes(editor, nodesToInsert, { at: pathToInsert });\n\n    // Set the selection on the image since it was cleared by calling removeNodes\n    Transforms.select(editor, pathToInsert);\n  };\n\n  const handleSelectAssets = (images: Schema.Attribute.MediaValue<true>) => {\n    const formattedImages = images.map((image) => {\n      // Create an object with imageSchema defined and exclude unnecessary props coming from media library config\n      const expectedImage = pick(image, IMAGE_SCHEMA_FIELDS);\n\n      const nodeImage: Block<'image'>['image'] = {\n        ...expectedImage,\n        alternativeText: expectedImage.alternativeText || expectedImage.name,\n        url: prefixFileUrlWithBackendUrl(image.url),\n      };\n\n      return nodeImage;\n    });\n\n    insertImages(formattedImages);\n    setIsOpen(false);\n  };\n\n  return (\n    <MediaLibraryDialog\n      allowedTypes={['images']}\n      onClose={() => setIsOpen(false)}\n      onSelectAssets={handleSelectAssets}\n    />\n  );\n};\n\nconst imageBlocks: Pick<BlocksStore, 'image'> = {\n  image: {\n    renderElement: (props) => <Image {...props} />,\n    icon: Picture,\n    label: {\n      id: 'components.Blocks.blocks.image',\n      defaultMessage: 'Image',\n    },\n    matchNode: (node) => node.type === 'image',\n    isInBlocksSelector: true,\n    handleBackspaceKey(editor) {\n      // Prevent issue where the image remains when it's the only block in the document\n      if (editor.children.length === 1) {\n        Transforms.setNodes(editor, {\n          type: 'paragraph',\n          // @ts-expect-error we're only setting image as null so that Slate deletes it\n          image: null,\n          children: [{ type: 'text', text: '' }],\n        });\n      } else {\n        Transforms.removeNodes(editor);\n      }\n    },\n    handleEnterKey(editor) {\n      Transforms.insertNodes(editor, {\n        type: 'paragraph',\n        children: [{ type: 'text', text: '' }],\n      });\n    },\n    handleConvert: () => {\n      /**\n       * All the logic is managed inside the ImageDialog component,\n       * because the blocks are only created when the user selects images in the modal and submits\n       * and if he closes the modal, then no changes are made to the editor\n       */\n      return () => <ImageDialog />;\n    },\n    snippets: ['!['],\n  },\n};\n\nexport { imageBlocks };\n","import { Transforms, Editor, Element as SlateElement, Node, Range } from 'slate';\n\nimport { type Block } from './types';\n\nconst removeLink = (editor: Editor) => {\n  Transforms.unwrapNodes(editor, {\n    match: (node) => !Editor.isEditor(node) && SlateElement.isElement(node) && node.type === 'link',\n  });\n};\n\nconst insertLink = (editor: Editor, { url }: { url: string }) => {\n  if (editor.selection) {\n    // We want to remove all link on the selection\n    const linkNodes = Array.from(\n      Editor.nodes(editor, {\n        at: editor.selection,\n        match: (node) => !Editor.isEditor(node) && node.type === 'link',\n      })\n    );\n\n    linkNodes.forEach(([, path]) => {\n      Transforms.unwrapNodes(editor, { at: path });\n    });\n\n    if (Range.isCollapsed(editor.selection)) {\n      const link: Block<'link'> = {\n        type: 'link',\n        url: url ?? '',\n        children: [{ type: 'text', text: url }],\n      };\n\n      Transforms.insertNodes(editor, link);\n    } else {\n      Transforms.wrapNodes(editor, { type: 'link', url: url ?? '' } as Block<'link'>, {\n        split: true,\n      });\n    }\n  }\n};\n\nconst editLink = (editor: Editor, link: { url: string; text: string }) => {\n  const { url, text } = link;\n\n  if (!editor.selection) {\n    return;\n  }\n\n  const linkEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'link',\n  });\n\n  if (linkEntry) {\n    const [, linkPath] = linkEntry;\n    Transforms.setNodes(editor, { url }, { at: linkPath });\n\n    // If link text is different, we remove the old text and insert the new one\n    if (text !== '' && text !== Editor.string(editor, linkPath)) {\n      const linkNodeChildrens = Array.from(Node.children(editor, linkPath, { reverse: true }));\n\n      linkNodeChildrens.forEach(([, childPath]) => {\n        Transforms.removeNodes(editor, { at: childPath });\n      });\n\n      Transforms.insertNodes(editor, [{ type: 'text', text }], { at: linkPath.concat(0) });\n    }\n  }\n};\n\nexport { insertLink, editLink, removeLink };\n","import type { Schema } from '@strapi/types';\nimport type { Element, Node } from 'slate';\n\ntype Block<T extends Element['type']> = Extract<Node, { type: T }>;\n\n// Wrap Object.entries to get the correct types\nconst getEntries = <T extends object>(object: T) =>\n  Object.entries(object) as [keyof T, T[keyof T]][];\n\n// Wrap Object.keys to get the correct types\nconst getKeys = <T extends object>(object: T) => Object.keys(object) as (keyof T)[];\n\nconst isLinkNode = (element: Element): element is Schema.Attribute.LinkInlineNode => {\n  return element.type === 'link';\n};\n\nconst isListNode = (element: Element): element is Schema.Attribute.ListBlockNode => {\n  return element.type === 'list';\n};\n\nexport { type Block, getEntries, getKeys, isLinkNode, isListNode };\n","import * as React from 'react';\n\nimport { Box, Button, Field, Flex, Popover, useComposedRefs } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { Editor, Path, Range, Transforms } from 'slate';\nimport { type RenderElementProps, ReactEditor } from 'slate-react';\nimport { styled } from 'styled-components';\n\nimport { type BlocksStore, useBlocksEditorContext } from '../BlocksEditor';\nimport { editLink, removeLink } from '../utils/links';\nimport { isLinkNode, type Block } from '../utils/types';\n\nconst StyledLink = styled(Box)`\n  text-decoration: none;\n`;\n\nconst RemoveButton = styled(Button)<{ $visible: boolean }>`\n  visibility: ${(props) => (props.$visible ? 'visible' : 'hidden')};\n`;\n\ninterface LinkContentProps extends RenderElementProps {\n  link: Block<'link'>;\n}\n\nconst LinkContent = React.forwardRef<HTMLAnchorElement, LinkContentProps>(\n  ({ link, children, attributes }, forwardedRef) => {\n    const { formatMessage } = useIntl();\n    const { editor } = useBlocksEditorContext('Link');\n    const path = ReactEditor.findPath(editor, link);\n    const [popoverOpen, setPopoverOpen] = React.useState(\n      editor.lastInsertedLinkPath ? Path.equals(path, editor.lastInsertedLinkPath) : false\n    );\n    const elementText = link.children.map((child) => child.text).join('');\n    const [linkText, setLinkText] = React.useState(elementText);\n    const [linkUrl, setLinkUrl] = React.useState(link.url);\n    const linkInputRef = React.useRef<HTMLInputElement>(null);\n    const isLastInsertedLink = editor.lastInsertedLinkPath\n      ? !Path.equals(path, editor.lastInsertedLinkPath)\n      : true;\n    const [isSaveDisabled, setIsSaveDisabled] = React.useState(false);\n\n    const onLinkChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setIsSaveDisabled(false);\n      setLinkUrl(e.target.value);\n\n      try {\n        // eslint-disable-next-line no-new\n        new URL(\n          e.target.value?.startsWith('/') ? `https://strapi.io${e.target.value}` : e.target.value\n        );\n      } catch (error) {\n        setIsSaveDisabled(true);\n      }\n    };\n\n    const handleSave: React.FormEventHandler = (e) => {\n      e.stopPropagation();\n\n      // If the selection is collapsed, we select the parent node because we want all the link to be replaced)\n      if (editor.selection && Range.isCollapsed(editor.selection)) {\n        const [, parentPath] = Editor.parent(editor, editor.selection.focus?.path);\n        Transforms.select(editor, parentPath);\n      }\n\n      editLink(editor, { url: linkUrl, text: linkText });\n      setPopoverOpen(false);\n      editor.lastInsertedLinkPath = null;\n      ReactEditor.focus(editor);\n    };\n\n    const handleClose = () => {\n      if (link.url === '') {\n        removeLink(editor);\n      }\n\n      setPopoverOpen(false);\n      ReactEditor.focus(editor);\n    };\n\n    React.useEffect(() => {\n      // Focus on the link input element when the popover opens\n      if (popoverOpen) linkInputRef.current?.focus();\n    }, [popoverOpen]);\n\n    const inputNotDirty =\n      !linkText ||\n      !linkUrl ||\n      (link.url && link.url === linkUrl && elementText && elementText === linkText);\n\n    return (\n      <Popover.Root open={popoverOpen}>\n        <Popover.Trigger>\n          <StyledLink\n            {...attributes}\n            ref={forwardedRef}\n            tag=\"a\"\n            href={link.url}\n            onClick={() => setPopoverOpen(true)}\n            color=\"primary600\"\n          >\n            {children}\n          </StyledLink>\n        </Popover.Trigger>\n        <Popover.Content onPointerDownOutside={handleClose}>\n          <Flex padding={4} direction=\"column\" gap={4}>\n            <Field.Root width=\"368px\">\n              <Flex direction=\"column\" gap={1} alignItems=\"stretch\">\n                <Field.Label>\n                  {formatMessage({\n                    id: 'components.Blocks.popover.text',\n                    defaultMessage: 'Text',\n                  })}\n                </Field.Label>\n                <Field.Input\n                  name=\"text\"\n                  placeholder={formatMessage({\n                    id: 'components.Blocks.popover.text.placeholder',\n                    defaultMessage: 'Enter link text',\n                  })}\n                  value={linkText}\n                  onChange={(e) => {\n                    setLinkText(e.target.value);\n                  }}\n                />\n              </Flex>\n            </Field.Root>\n            <Field.Root width=\"368px\">\n              <Flex direction=\"column\" gap={1} alignItems=\"stretch\">\n                <Field.Label>\n                  {formatMessage({\n                    id: 'components.Blocks.popover.link',\n                    defaultMessage: 'Link',\n                  })}\n                </Field.Label>\n                <Field.Input\n                  ref={linkInputRef}\n                  name=\"url\"\n                  placeholder={formatMessage({\n                    id: 'components.Blocks.popover.link.placeholder',\n                    defaultMessage: 'Paste link',\n                  })}\n                  value={linkUrl}\n                  onChange={onLinkChange}\n                />\n              </Flex>\n            </Field.Root>\n            <Flex justifyContent=\"space-between\" width=\"100%\">\n              <RemoveButton\n                variant=\"danger-light\"\n                onClick={() => removeLink(editor)}\n                $visible={isLastInsertedLink}\n              >\n                {formatMessage({\n                  id: 'components.Blocks.popover.remove',\n                  defaultMessage: 'Remove',\n                })}\n              </RemoveButton>\n              <Flex gap={2}>\n                <Button variant=\"tertiary\" onClick={handleClose}>\n                  {formatMessage({\n                    id: 'global.cancel',\n                    defaultMessage: 'Cancel',\n                  })}\n                </Button>\n                <Button disabled={Boolean(inputNotDirty) || isSaveDisabled} onClick={handleSave}>\n                  {formatMessage({\n                    id: 'global.save',\n                    defaultMessage: 'Save',\n                  })}\n                </Button>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Popover.Content>\n      </Popover.Root>\n    );\n  }\n);\n\nconst Link = React.forwardRef<HTMLAnchorElement, RenderElementProps>((props, forwardedRef) => {\n  if (!isLinkNode(props.element)) {\n    return null;\n  }\n\n  // LinkContent uses React hooks that rely on props.element being a link. If the type guard above\n  // doesn't pass, those hooks would be called conditionnally, which is not allowed.\n  // Hence the need for a separate component.\n  return <LinkContent {...props} link={props.element} ref={forwardedRef} />;\n});\n\nconst linkBlocks: Pick<BlocksStore, 'link'> = {\n  link: {\n    renderElement: (props) => (\n      <Link element={props.element} attributes={props.attributes}>\n        {props.children}\n      </Link>\n    ),\n    // No handleConvert here, links are created via the link button in the toolbar\n    matchNode: (node) => node.type === 'link',\n    isInBlocksSelector: false,\n  },\n};\n\nexport { linkBlocks };\n","import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { BulletList, NumberList } from '@strapi/icons';\nimport { type Text, Editor, Node, Transforms, Path } from 'slate';\nimport { type RenderElementProps, ReactEditor } from 'slate-react';\nimport { styled, type CSSProperties, css } from 'styled-components';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { isListNode, type Block } from '../utils/types';\n\nconst listStyle = css`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spaces[2]};\n  margin-inline-start: ${({ theme }) => theme.spaces[0]};\n  margin-inline-end: ${({ theme }) => theme.spaces[0]};\n  padding-inline-start: ${({ theme }) => theme.spaces[2]};\n\n  ol,\n  ul {\n    margin-block-start: ${({ theme }) => theme.spaces[0]};\n    margin-block-end: ${({ theme }) => theme.spaces[0]};\n  }\n\n  li {\n    margin-inline-start: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nconst Orderedlist = styled.ol<{ $listStyleType: CSSProperties['listStyleType'] }>`\n  list-style-type: ${(props) => props.$listStyleType};\n  ${listStyle}\n`;\n\nconst Unorderedlist = styled.ul<{ $listStyleType: CSSProperties['listStyleType'] }>`\n  list-style-type: ${(props) => props.$listStyleType};\n  ${listStyle}\n`;\n\nconst orderedStyles = ['decimal', 'lower-alpha', 'upper-roman'];\nconst unorderedStyles = ['disc', 'circle', 'square'];\n\nconst List = ({ attributes, children, element }: RenderElementProps) => {\n  if (!isListNode(element)) {\n    return null;\n  }\n\n  // Decide the subsequent style by referencing the given styles according to the format,\n  // allowing for infinite nested lists\n  const listStyles = element.format === 'ordered' ? orderedStyles : unorderedStyles;\n  const nextIndex = (element.indentLevel || 0) % listStyles!.length;\n  const listStyleType = listStyles![nextIndex];\n\n  if (element.format === 'ordered') {\n    return (\n      <Orderedlist $listStyleType={listStyleType} {...attributes}>\n        {children}\n      </Orderedlist>\n    );\n  }\n\n  return (\n    <Unorderedlist $listStyleType={listStyleType} {...attributes}>\n      {children}\n    </Unorderedlist>\n  );\n};\n\nconst replaceListWithEmptyBlock = (editor: Editor, currentListPath: Path) => {\n  // Delete the empty list\n  Transforms.removeNodes(editor, { at: currentListPath });\n\n  if (currentListPath[0] === 0) {\n    // If the list was the only (or first) block element then insert empty paragraph as editor needs default value\n    Transforms.insertNodes(\n      editor,\n      {\n        type: 'paragraph',\n        children: [{ type: 'text', text: '' }],\n      },\n      { at: currentListPath }\n    );\n    Transforms.select(editor, currentListPath);\n  }\n};\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * Common handler for the backspace event on ordered and unordered lists\n */\nconst handleBackspaceKeyOnList = (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => {\n  if (!editor.selection) return;\n\n  const [currentListItem, currentListItemPath] = Editor.parent(editor, editor.selection.anchor);\n  const [currentList, currentListPath] = Editor.parent(editor, currentListItemPath);\n  const isListEmpty =\n    currentList.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isListItemEmpty =\n    currentListItem.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isFocusAtTheBeginningOfAChild =\n    editor.selection.focus.offset === 0 && editor.selection.focus.path.at(-2) === 0;\n\n  if (isListEmpty) {\n    const parentListEntry = Editor.above(editor, {\n      at: currentListPath,\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    });\n    if (!parentListEntry) {\n      event.preventDefault();\n      replaceListWithEmptyBlock(editor, currentListPath);\n    }\n  } else if (isFocusAtTheBeginningOfAChild) {\n    // If the focus is at the beginning of a child node we need to replace it with a paragraph\n    Transforms.liftNodes(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list-item',\n    });\n    Transforms.setNodes(editor, { type: 'paragraph' });\n  } else if (isListItemEmpty) {\n    const previousEntry = Editor.previous(editor, {\n      at: currentListItemPath,\n    });\n    const nextEntry = Editor.next(editor, {\n      at: currentListItemPath,\n    });\n\n    if (previousEntry && nextEntry) {\n      // If previous and next nodes are lists or list-items, delete empty list item\n      event.preventDefault();\n      Transforms.removeNodes(editor, {\n        at: currentListItemPath,\n      });\n\n      // If previous and next nodes are lists with same format and indent Levels, then merge the nodes\n      const [previousList] = previousEntry;\n      const [nextList] = nextEntry;\n      if (\n        !Editor.isEditor(previousList) &&\n        !isText(previousList) &&\n        isListNode(previousList) &&\n        !Editor.isEditor(nextList) &&\n        !isText(nextList) &&\n        isListNode(nextList)\n      ) {\n        if (\n          previousList.type === 'list' &&\n          nextList.type === 'list' &&\n          previousList.format === nextList.format &&\n          previousList.indentLevel === nextList.indentLevel\n        ) {\n          Transforms.mergeNodes(editor, {\n            at: currentListItemPath,\n          });\n        }\n      }\n    }\n  }\n};\n\n/**\n * Common handler for the enter key on ordered and unordered lists\n */\nconst handleEnterKeyOnList = (editor: Editor) => {\n  const currentListItemEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'list-item',\n  });\n\n  if (!currentListItemEntry || !editor.selection) {\n    return;\n  }\n\n  const [currentListItem, currentListItemPath] = currentListItemEntry;\n  const [currentList, currentListPath] = Editor.parent(editor, currentListItemPath);\n  const isListEmpty =\n    currentList.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isListItemEmpty =\n    currentListItem.children.length === 1 &&\n    isText(currentListItem.children[0]) &&\n    currentListItem.children[0].text === '';\n  const isFocusAtTheBeginningOfAChild =\n    editor.selection.focus.offset === 0 && editor.selection.focus.path.at(-1) === 0;\n\n  if (isListEmpty) {\n    replaceListWithEmptyBlock(editor, currentListPath);\n  } else if (isFocusAtTheBeginningOfAChild && !isListItemEmpty) {\n    // If the focus is at the beginning of a child node, shift below the list item and create a new list-item\n    const currentNode = Editor.above(editor, { at: editor.selection.anchor });\n    Transforms.insertNodes(editor, { type: 'list-item', children: [{ type: 'text', text: '' }] });\n    if (currentNode) {\n      const path = currentNode[1];\n      const updatedPath = [...path.slice(0, -1), path[path.length - 1] + 1];\n      Transforms.select(editor, {\n        anchor: { path: updatedPath.concat(0), offset: 0 },\n        focus: { path: updatedPath.concat(0), offset: 0 },\n      });\n    }\n  } else if (isListItemEmpty) {\n    // Check if there is a list above the current list and shift list-item under it\n    if (\n      !Editor.isEditor(currentList) &&\n      isListNode(currentList) &&\n      currentList?.indentLevel &&\n      currentList.indentLevel > 0\n    ) {\n      const previousIndentLevel = currentList.indentLevel - 1;\n\n      const parentListNodeEntry = Editor.above(editor, {\n        match: (node) =>\n          !Editor.isEditor(node) &&\n          node.type === 'list' &&\n          (node.indentLevel || 0) === previousIndentLevel,\n      });\n\n      if (parentListNodeEntry) {\n        // Get the parent list path and add 1 to it to exit from the current list\n        const modifiedPath = currentListItemPath.slice(0, -1);\n        if (modifiedPath.length > 0) {\n          modifiedPath[modifiedPath.length - 1] += 1;\n        }\n\n        // Shift list-item under parent list\n        Transforms.moveNodes(editor, {\n          at: currentListItemPath,\n          to: modifiedPath,\n        });\n        return;\n      }\n    }\n\n    // Otherwise delete the empty list item and create a new paragraph below the parent list\n    Transforms.removeNodes(editor, { at: currentListItemPath });\n\n    const createdParagraphPath = Path.next(currentListPath);\n    Transforms.insertNodes(\n      editor,\n      {\n        type: 'paragraph',\n        children: [{ type: 'text', text: '' }],\n      },\n      { at: createdParagraphPath }\n    );\n\n    // Move the selection to the newly created paragraph\n    Transforms.select(editor, createdParagraphPath);\n  } else {\n    // Check if the cursor is at the end of the list item\n    const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, currentListItemPath);\n\n    if (isNodeEnd) {\n      // If there was nothing after the cursor, create a fresh new list item,\n      // in order to avoid carrying over the modifiers from the previous list item\n      Transforms.insertNodes(editor, { type: 'list-item', children: [{ type: 'text', text: '' }] });\n    } else {\n      // If there is something after the cursor, split the current list item,\n      // so that we keep the content and the modifiers\n      Transforms.splitNodes(editor);\n    }\n  }\n};\n\n/**\n * Common handler for converting a node to a list\n */\nconst handleConvertToList = (editor: Editor, format: Block<'list'>['format']) => {\n  const convertedPath = baseHandleConvert<Block<'list-item'>>(editor, { type: 'list-item' });\n\n  if (!convertedPath) return;\n\n  Transforms.wrapNodes(editor, { type: 'list', format, children: [] }, { at: convertedPath });\n};\n\n/**\n * Common handler for the tab key on ordered and unordered lists\n */\nconst handleTabOnList = (editor: Editor) => {\n  const currentListItemEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && node.type === 'list-item',\n  });\n\n  if (!currentListItemEntry || !editor.selection) {\n    return;\n  }\n\n  const [currentListItem, currentListItemPath] = currentListItemEntry;\n  const [currentList] = Editor.parent(editor, currentListItemPath);\n\n  // Skip tabbing if list-item is the first item in the list\n  if (currentListItem === currentList.children[0]) return;\n\n  const currentListItemIndex = currentList.children.findIndex((item) => item === currentListItem);\n  const previousNode = currentList.children[currentListItemIndex - 1];\n\n  // If previous node is a list block then move the list-item under it\n  if (previousNode.type === 'list') {\n    const nodePath = ReactEditor.findPath(editor, previousNode);\n    const insertAtPath = previousNode.children.length;\n\n    Transforms.moveNodes(editor, {\n      at: currentListItemPath,\n      to: nodePath.concat(insertAtPath),\n    });\n    return;\n  }\n\n  if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n    // Wrap list-item with list block on tab\n    Transforms.wrapNodes(editor, {\n      type: 'list',\n      format: currentList.format,\n      indentLevel: (currentList.indentLevel || 0) + 1,\n      children: [],\n    });\n  }\n};\n\nconst listBlocks: Pick<BlocksStore, 'list-ordered' | 'list-unordered' | 'list-item'> = {\n  'list-ordered': {\n    renderElement: (props) => <List {...props} />,\n    label: {\n      id: 'components.Blocks.blocks.orderedList',\n      defaultMessage: 'Numbered list',\n    },\n    icon: NumberList,\n    matchNode: (node) => node.type === 'list' && node.format === 'ordered',\n    isInBlocksSelector: true,\n    handleConvert: (editor) => handleConvertToList(editor, 'ordered'),\n    handleEnterKey: handleEnterKeyOnList,\n    handleBackspaceKey: handleBackspaceKeyOnList,\n    handleTab: handleTabOnList,\n    snippets: ['1.'],\n  },\n  'list-unordered': {\n    renderElement: (props) => <List {...props} />,\n    label: {\n      id: 'components.Blocks.blocks.unorderedList',\n      defaultMessage: 'Bulleted list',\n    },\n    icon: BulletList,\n    matchNode: (node) => node.type === 'list' && node.format === 'unordered',\n    isInBlocksSelector: true,\n    handleConvert: (editor) => handleConvertToList(editor, 'unordered'),\n    handleEnterKey: handleEnterKeyOnList,\n    handleBackspaceKey: handleBackspaceKeyOnList,\n    handleTab: handleTabOnList,\n    snippets: ['-', '*', '+'],\n  },\n  'list-item': {\n    renderElement: (props) => (\n      <Typography tag=\"li\" {...props.attributes}>\n        {props.children}\n      </Typography>\n    ),\n    // No handleConvert, list items are created when converting to the parent list\n    matchNode: (node) => node.type === 'list-item',\n    isInBlocksSelector: false,\n    dragHandleTopMargin: '-2px',\n  },\n};\n\nexport { listBlocks };\n","import * as React from 'react';\n\nimport { Typography } from '@strapi/design-system';\nimport { Paragraph } from '@strapi/icons';\nimport { type Text, Editor, Transforms } from 'slate';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { type Block } from '../utils/types';\n\nconst paragraphBlocks: Pick<BlocksStore, 'paragraph'> = {\n  paragraph: {\n    renderElement: (props) => (\n      <Typography tag=\"p\" variant=\"omega\" {...props.attributes}>\n        {props.children}\n      </Typography>\n    ),\n    icon: Paragraph,\n    label: {\n      id: 'components.Blocks.blocks.text',\n      defaultMessage: 'Text',\n    },\n    matchNode: (node) => node.type === 'paragraph',\n    isInBlocksSelector: true,\n    dragHandleTopMargin: '-2px',\n    handleConvert(editor) {\n      baseHandleConvert<Block<'paragraph'>>(editor, { type: 'paragraph' });\n    },\n    handleEnterKey(editor) {\n      if (!editor.selection) {\n        return;\n      }\n\n      // We need to keep track of the initial position of the cursor\n      const anchorPathInitialPosition = editor.selection.anchor.path;\n      /**\n       * Split the nodes where the cursor is. This will create a new paragraph with the content\n       * after the cursor, while retaining all the children, modifiers etc.\n       */\n      Transforms.splitNodes(editor, {\n        // Makes sure we always create a new node,\n        // even if there's nothing to the right of the cursor in the node.\n        always: true,\n      });\n\n      // Check if the created node is empty (if there was no text after the cursor in the node)\n      // This lets us know if we need to carry over the modifiers from the previous node\n      const parentBlockEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n      });\n      if (!parentBlockEntry) {\n        return;\n      }\n      const [, parentBlockPath] = parentBlockEntry;\n      const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, parentBlockPath);\n\n      /**\n       * Delete and recreate the node that was created at the right of the cursor.\n       * This is to avoid node pollution\n       * (e.g. keeping the level attribute when converting a heading to a paragraph).\n       * Select the parent of the selection because we want the full block, not the leaf.\n       * And copy its children to make sure we keep the modifiers.\n       */\n      const [fragmentedNode] = Editor.parent(editor, editor.selection.anchor.path);\n      Transforms.removeNodes(editor);\n\n      // Check if after the current position there is another node\n      const hasNextNode = editor.children.length - anchorPathInitialPosition[0] > 1;\n\n      // Insert the new node at the right position.\n      // The next line after the editor selection if present or otherwise at the end of the editor.\n      Transforms.insertNodes(\n        editor,\n        {\n          type: 'paragraph',\n          // Don't carry over the modifiers from the previous node if there was no text after the cursor\n          children: (isNodeEnd ? [{ type: 'text', text: '' }] : fragmentedNode.children) as Text[],\n        },\n        {\n          at: hasNextNode ? [anchorPathInitialPosition[0] + 1] : [editor.children.length],\n        }\n      );\n\n      /**\n       * The new selection will by default be at the end of the created node.\n       * Instead we manually move it to the start of the created node.\n       * Make sure to we go to the start of the node and not the start of the leaf.\n       */\n      Transforms.select(editor, editor.start([anchorPathInitialPosition[0] + 1]));\n    },\n  },\n};\n\nexport { paragraphBlocks };\n","import { Quotes } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\nimport { type BlocksStore } from '../BlocksEditor';\nimport { baseHandleConvert } from '../utils/conversions';\nimport { pressEnterTwiceToExit } from '../utils/enterKey';\nimport { type Block } from '../utils/types';\n\nconst Blockquote = styled.blockquote.attrs({ role: 'blockquote' })`\n  font-weight: ${({ theme }) => theme.fontWeights.regular};\n  border-left: ${({ theme }) => `${theme.spaces[1]} solid ${theme.colors.neutral200}`};\n  padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[4]};\n  color: ${({ theme }) => theme.colors.neutral600};\n`;\n\nconst quoteBlocks: Pick<BlocksStore, 'quote'> = {\n  quote: {\n    renderElement: (props) => (\n      // The div is needed to make sure the padding bottom from BlocksContent is applied properly\n      // when the quote is the last block in the editor\n      <div>\n        <Blockquote {...props.attributes}>{props.children}</Blockquote>\n      </div>\n    ),\n    icon: Quotes,\n    label: {\n      id: 'components.Blocks.blocks.quote',\n      defaultMessage: 'Quote',\n    },\n    matchNode: (node) => node.type === 'quote',\n    isInBlocksSelector: true,\n    handleConvert(editor) {\n      baseHandleConvert<Block<'quote'>>(editor, { type: 'quote' });\n    },\n    handleEnterKey(editor) {\n      pressEnterTwiceToExit(editor);\n    },\n    snippets: ['>'],\n  },\n};\n\nexport { quoteBlocks };\n","import * as React from 'react';\n\nimport { useElementOnScreen } from '@strapi/admin/strapi-admin';\nimport { IconButton, Menu } from '@strapi/design-system';\nimport { More } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\n/* -------------------------------------------------------------------------------------------------\n * ObservedToolbarComponent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ObservedToolbarComponentProps {\n  index: number;\n  lastVisibleIndex: number;\n  setLastVisibleIndex: React.Dispatch<React.SetStateAction<number>>;\n  rootRef: React.RefObject<HTMLElement>;\n  children: React.ReactNode;\n}\n\nconst ObservedToolbarComponent = ({\n  index,\n  lastVisibleIndex,\n  setLastVisibleIndex,\n  rootRef,\n  children,\n}: ObservedToolbarComponentProps) => {\n  const isVisible = index <= lastVisibleIndex;\n\n  const containerRef = useElementOnScreen<HTMLDivElement>(\n    (isVisible) => {\n      /**\n       * It's the MoreMenu's job to make an item not visible when there's not room for it.\n       * But we need to react here to the element becoming visible again.\n       */\n      if (isVisible) {\n        setLastVisibleIndex((prev) => Math.max(prev, index));\n      }\n    },\n    { threshold: 1, root: rootRef.current }\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        /**\n         * Use visibility so that the element occupies the space if requires even when there's not\n         * enough room for it to be visible. The empty reserved space will be clipped by the\n         * overflow:hidden rule on the parent, so it doesn't affect the UI.\n         * This way we can keep observing its visiblity and react to browser resize events.\n         */\n        visibility: isVisible ? 'visible' : 'hidden',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditorToolbarObserver\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface ObservedComponent {\n  toolbar: React.ReactNode;\n  menu: React.ReactNode;\n  key: string;\n}\n\nexport const EditorToolbarObserver = ({\n  observedComponents,\n  menuTriggerVariant = 'ghost',\n}: {\n  observedComponents: ObservedComponent[];\n  menuTriggerVariant?: Menu.TriggerProps['variant'];\n}) => {\n  const { formatMessage } = useIntl();\n  const toolbarRef = React.useRef<HTMLElement>(null);\n\n  const [lastVisibleIndex, setLastVisibleIndex] = React.useState<number>(\n    observedComponents.length - 1\n  );\n  const hasHiddenItems = lastVisibleIndex < observedComponents.length - 1;\n  const menuIndex = lastVisibleIndex + 1;\n\n  const [open, setOpen] = React.useState(false);\n  const isMenuOpenWithContent = open && hasHiddenItems;\n  const menuTriggerRef = useElementOnScreen<HTMLButtonElement>(\n    (isVisible) => {\n      // We only react to the menu becoming invisible. When that happens, we hide the last item.\n      if (!isVisible) {\n        /**\n         * If there's no room for any item, the index can be -1.\n         * This is intentional, in that case only the more menu will be visible.\n         **/\n        setLastVisibleIndex((prev) => prev - 1);\n        // Maintain the menu state if it has content\n        setOpen(isMenuOpenWithContent);\n      }\n    },\n    { threshold: 1, root: toolbarRef.current }\n  );\n\n  return observedComponents\n    .map((component, index) => {\n      return (\n        <ObservedToolbarComponent\n          key={component.key}\n          index={index}\n          lastVisibleIndex={lastVisibleIndex}\n          setLastVisibleIndex={setLastVisibleIndex}\n          rootRef={toolbarRef}\n        >\n          {component.toolbar}\n        </ObservedToolbarComponent>\n      );\n    })\n    .toSpliced(\n      menuIndex,\n      0,\n      <Menu.Root\n        key=\"more-menu\"\n        defaultOpen={false}\n        open={isMenuOpenWithContent}\n        onOpenChange={setOpen}\n      >\n        <Menu.Trigger\n          paddingLeft={0}\n          paddingRight={0}\n          ref={menuTriggerRef}\n          variant={menuTriggerVariant}\n          style={{ visibility: hasHiddenItems ? 'visible' : 'hidden' }}\n          label={formatMessage({ id: 'global.more', defaultMessage: 'More' })}\n          tag={IconButton}\n          icon={<More />}\n        />\n        <Menu.Content\n          onCloseAutoFocus={(e) => e.preventDefault()}\n          maxHeight=\"100%\"\n          minWidth=\"256px\"\n          popoverPlacement=\"bottom-end\"\n        >\n          {observedComponents.slice(menuIndex).map((component) => (\n            <React.Fragment key={component.key}>{component.menu}</React.Fragment>\n          ))}\n        </Menu.Content>\n      </Menu.Root>\n    );\n};\n","import * as React from 'react';\n\nimport * as Toolbar from '@radix-ui/react-toolbar';\nimport { useElementOnScreen } from '@strapi/admin/strapi-admin';\nimport {\n  Flex,\n  Tooltip,\n  SingleSelect,\n  SingleSelectOption,\n  Box,\n  FlexComponent,\n  BoxComponent,\n  Menu,\n  IconButton,\n} from '@strapi/design-system';\nimport { Link, More } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { Editor, Transforms, Element as SlateElement, Node, type Ancestor } from 'slate';\nimport { ReactEditor } from 'slate-react';\nimport { css, styled } from 'styled-components';\n\nimport { EditorToolbarObserver } from '../../EditorToolbarObserver';\n\nimport {\n  type BlocksStore,\n  type SelectorBlockKey,\n  isSelectorBlockKey,\n  useBlocksEditorContext,\n} from './BlocksEditor';\nimport { insertLink } from './utils/links';\nimport { type Block, getEntries, getKeys } from './utils/types';\n\nconst ToolbarWrapper = styled<FlexComponent>(Flex)`\n  &[aria-disabled='true'] {\n    cursor: not-allowed;\n    background: ${({ theme }) => theme.colors.neutral150};\n  }\n`;\n\nconst ToolbarSeparator = styled(Toolbar.Separator)`\n  background: ${({ theme }) => theme.colors.neutral150};\n  width: 1px;\n  height: 2.4rem;\n`;\n\nconst FlexButton = styled<FlexComponent<'button'>>(Flex)`\n  // Inherit the not-allowed cursor from ToolbarWrapper when disabled\n  &[aria-disabled] {\n    cursor: not-allowed;\n  }\n\n  &[aria-disabled='false'] {\n    cursor: pointer;\n\n    // Only apply hover styles if the button is enabled\n    &:hover {\n      background: ${({ theme }) => theme.colors.primary100};\n    }\n  }\n`;\n\nconst SelectWrapper = styled<BoxComponent>(Box)`\n  // Styling changes to SingleSelect component don't work, so adding wrapper to target SingleSelect\n  div[role='combobox'] {\n    border: none;\n    cursor: pointer;\n    min-height: unset;\n    padding-top: 6px;\n    padding-bottom: 6px;\n\n    &[aria-disabled='false']:hover {\n      cursor: pointer;\n      background: ${({ theme }) => theme.colors.primary100};\n    }\n\n    &[aria-disabled] {\n      background: transparent;\n      cursor: inherit;\n\n      // Select text and icons should also have disabled color\n      span {\n        color: ${({ theme }) => theme.colors.neutral600};\n      }\n    }\n  }\n`;\n\n/**\n * Handles the modal component that may be returned by a block when converting it\n */\nfunction useConversionModal() {\n  const [modalElement, setModalComponent] = React.useState<React.JSX.Element | null>(null);\n\n  const handleConversionResult = (renderModal: void | (() => React.JSX.Element) | undefined) => {\n    // Not all blocks return a modal\n    if (renderModal) {\n      // Use cloneElement to apply a key because to create a new instance of the component\n      // Without the new key, the state is kept from previous times that option was picked\n      setModalComponent(React.cloneElement(renderModal(), { key: Date.now() }));\n    }\n  };\n\n  return { modalElement, handleConversionResult };\n}\n\ninterface ToolbarButtonProps {\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  name: string;\n  label: MessageDescriptor;\n  isActive: boolean;\n  disabled: boolean;\n  handleClick: () => void;\n}\n\nconst ToolbarButton = ({\n  icon: Icon,\n  name,\n  label,\n  isActive,\n  disabled,\n  handleClick,\n}: ToolbarButtonProps) => {\n  const { editor } = useBlocksEditorContext('ToolbarButton');\n  const { formatMessage } = useIntl();\n  const labelMessage = formatMessage(label);\n\n  const enabledColor = isActive ? 'primary600' : 'neutral600';\n\n  return (\n    <Tooltip label={labelMessage}>\n      <Toolbar.ToggleItem\n        value={name}\n        data-state={isActive ? 'on' : 'off'}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          handleClick();\n          ReactEditor.focus(editor);\n        }}\n        aria-disabled={disabled}\n        disabled={disabled}\n        aria-label={labelMessage}\n        asChild\n      >\n        <FlexButton\n          tag=\"button\"\n          background={isActive ? 'primary100' : ''}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          width={7}\n          height={7}\n          hasRadius\n        >\n          <Icon fill={disabled ? 'neutral300' : enabledColor} />\n        </FlexButton>\n      </Toolbar.ToggleItem>\n    </Tooltip>\n  );\n};\n\nconst BlocksDropdown = () => {\n  const { editor, blocks, disabled } = useBlocksEditorContext('BlocksDropdown');\n  const { formatMessage } = useIntl();\n  const { modalElement, handleConversionResult } = useConversionModal();\n\n  const blockKeysToInclude: SelectorBlockKey[] = getEntries(blocks).reduce<\n    ReturnType<typeof getEntries>\n  >((currentKeys, entry) => {\n    const [key, block] = entry;\n\n    return block.isInBlocksSelector ? [...currentKeys, key] : currentKeys;\n  }, []);\n\n  const [blockSelected, setBlockSelected] = React.useState<SelectorBlockKey>('paragraph');\n\n  const handleSelect = (optionKey: unknown) => {\n    if (!isSelectorBlockKey(optionKey)) {\n      return;\n    }\n\n    const editorIsEmpty =\n      editor.children.length === 1 && Editor.isEmpty(editor, editor.children[0]);\n\n    if (!editor.selection && !editorIsEmpty) {\n      // When there is no selection, create an empty block at the end of the editor\n      // so that it can be converted to the selected block\n      Transforms.insertNodes(\n        editor,\n        {\n          type: 'quote',\n          children: [{ type: 'text', text: '' }],\n        },\n        {\n          select: true,\n          // Since there's no selection, Slate will automatically insert the node at the end\n        }\n      );\n    } else if (!editor.selection && editorIsEmpty) {\n      // When there is no selection and the editor is empty,\n      // select the empty paragraph from Slate's initialValue so it gets converted\n      Transforms.select(editor, Editor.start(editor, [0, 0]));\n    }\n\n    // If selection is already a list block, toggle its format\n    const currentListEntry = Editor.above(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    });\n\n    if (currentListEntry && ['list-ordered', 'list-unordered'].includes(optionKey)) {\n      const [currentList, currentListPath] = currentListEntry;\n      const format = optionKey === 'list-ordered' ? 'ordered' : 'unordered';\n\n      if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n        // Format is different, toggle list format\n        if (currentList.format !== format) {\n          Transforms.setNodes(editor, { format }, { at: currentListPath });\n        }\n      }\n      return;\n    }\n\n    // Let the block handle the Slate conversion logic\n    const maybeRenderModal = blocks[optionKey].handleConvert?.(editor);\n    handleConversionResult(maybeRenderModal);\n\n    setBlockSelected(optionKey);\n\n    ReactEditor.focus(editor);\n  };\n\n  /**\n   * Prevent the select from focusing itself so ReactEditor.focus(editor) can focus the editor instead.\n   *\n   * The editor first loses focus to a blur event when clicking the select button. However,\n   * refocusing the editor is not enough since the select's default behavior is to refocus itself\n   * after an option is selected.\n   *\n   */\n  const preventSelectFocus = (e: Event) => e.preventDefault();\n\n  // Listen to the selection change and update the selected block in the dropdown\n  React.useEffect(() => {\n    if (editor.selection) {\n      let selectedNode: Ancestor;\n\n      // If selection anchor is a list-item, get its parent\n      const currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n        at: editor.selection.anchor,\n      });\n\n      if (currentListEntry) {\n        const [currentList] = currentListEntry;\n        selectedNode = currentList;\n      } else {\n        // Get the parent node of the anchor other than list-item\n        const [anchorNode] = Editor.parent(editor, editor.selection.anchor, {\n          edge: 'start',\n          depth: 2,\n        });\n\n        // @ts-expect-error slate's delete behaviour creates an exceptional type\n        if (anchorNode.type === 'list-item') {\n          // When the last node in the selection is a list item,\n          // slate's default delete operation leaves an empty list-item instead of converting it into a paragraph.\n          // Issue: https://github.com/ianstormtaylor/slate/issues/2500\n\n          Transforms.setNodes(editor, { type: 'paragraph' });\n          // @ts-expect-error convert explicitly type to paragraph\n          selectedNode = { ...anchorNode, type: 'paragraph' };\n        } else {\n          selectedNode = anchorNode;\n        }\n      }\n\n      // Find the block key that matches the anchor node\n      const anchorBlockKey = getKeys(blocks).find(\n        (blockKey) => !Editor.isEditor(selectedNode) && blocks[blockKey].matchNode(selectedNode)\n      );\n\n      // Change the value selected in the dropdown if it doesn't match the anchor block key\n      if (anchorBlockKey && anchorBlockKey !== blockSelected) {\n        setBlockSelected(anchorBlockKey as SelectorBlockKey);\n      }\n    }\n  }, [editor.selection, editor, blocks, blockSelected]);\n\n  const Icon = blocks[blockSelected].icon;\n\n  return (\n    <>\n      <SelectWrapper>\n        <SingleSelect\n          startIcon={<Icon />}\n          onChange={handleSelect}\n          placeholder={formatMessage(blocks[blockSelected].label)}\n          value={blockSelected}\n          onCloseAutoFocus={preventSelectFocus}\n          aria-label={formatMessage({\n            id: 'components.Blocks.blocks.selectBlock',\n            defaultMessage: 'Select a block',\n          })}\n          disabled={disabled}\n        >\n          {blockKeysToInclude.map((key) => (\n            <BlockOption\n              key={key}\n              value={key}\n              label={blocks[key].label}\n              icon={blocks[key].icon}\n              blockSelected={blockSelected}\n            />\n          ))}\n        </SingleSelect>\n      </SelectWrapper>\n      {modalElement}\n    </>\n  );\n};\n\ninterface BlockOptionProps {\n  value: string;\n  icon: React.ComponentType<React.SVGProps<SVGElement>>;\n  label: MessageDescriptor;\n  blockSelected: string;\n}\n\nconst BlockOption = ({ value, icon: Icon, label, blockSelected }: BlockOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  const isSelected = value === blockSelected;\n\n  return (\n    <SingleSelectOption\n      startIcon={<Icon fill={isSelected ? 'primary600' : 'neutral600'} />}\n      value={value}\n    >\n      {formatMessage(label)}\n    </SingleSelectOption>\n  );\n};\n\nconst isListNode = (node: unknown): node is Block<'list'> => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'list';\n};\n\ninterface ListButtonProps {\n  block: BlocksStore['list-ordered'] | BlocksStore['list-unordered'];\n  format: Block<'list'>['format'];\n  location?: 'toolbar' | 'menu';\n}\n\nconst ListButton = ({ block, format, location = 'toolbar' }: ListButtonProps) => {\n  const { editor, disabled, blocks } = useBlocksEditorContext('ListButton');\n  const { formatMessage } = useIntl();\n\n  const isListActive = () => {\n    if (!editor.selection) return false;\n\n    // Get the parent list at selection anchor node\n    const currentListEntry = Editor.above(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      at: editor.selection.anchor,\n    });\n\n    if (currentListEntry) {\n      const [currentList] = currentListEntry;\n      if (!Editor.isEditor(currentList) && isListNode(currentList) && currentList.format === format)\n        return true;\n    }\n    return false;\n  };\n\n  /**\n   * @TODO: Currently, applying list while multiple blocks are selected is not supported.\n   * We should implement this feature in the future.\n   */\n  const isListDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    // Always enabled when there's no selection\n    if (!editor.selection) {\n      return false;\n    }\n\n    // Get the block node closest to the anchor and focus\n    const anchorNodeEntry = Editor.above(editor, {\n      at: editor.selection.anchor,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n    const focusNodeEntry = Editor.above(editor, {\n      at: editor.selection.focus,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n\n    if (!anchorNodeEntry || !focusNodeEntry) {\n      return false;\n    }\n\n    // Disabled if the anchor and focus are not in the same block\n    return anchorNodeEntry[0] !== focusNodeEntry[0];\n  };\n\n  const toggleList = (format: Block<'list'>['format']) => {\n    let currentListEntry;\n    if (editor.selection) {\n      currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      });\n    } else {\n      // If no selection, toggle last inserted node\n      const [_, lastNodePath] = Editor.last(editor, []);\n      currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n        at: lastNodePath,\n      });\n    }\n\n    if (!currentListEntry) {\n      // If selection is not a list then convert it to list\n      blocks[`list-${format}`].handleConvert!(editor);\n      return;\n    }\n\n    // If selection is already a list then toggle format\n    const [currentList, currentListPath] = currentListEntry;\n\n    if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n      if (currentList.format !== format) {\n        // Format is different, toggle list format\n        Transforms.setNodes(editor, { format }, { at: currentListPath });\n      } else {\n        // Format is same, convert selected list-item to paragraph\n        blocks['paragraph'].handleConvert!(editor);\n      }\n    }\n  };\n\n  if (location === 'menu') {\n    const Icon = block.icon;\n\n    return (\n      <StyledMenuItem\n        onSelect={() => toggleList(format)}\n        isActive={isListActive()}\n        disabled={isListDisabled()}\n      >\n        <Icon />\n        {formatMessage(block.label)}\n      </StyledMenuItem>\n    );\n  }\n\n  return (\n    <ToolbarButton\n      icon={block.icon}\n      name={format}\n      label={block.label}\n      isActive={isListActive()}\n      disabled={isListDisabled()}\n      handleClick={() => toggleList(format)}\n    />\n  );\n};\n\nconst LinkButton = ({\n  disabled,\n  location = 'toolbar',\n}: {\n  disabled: boolean;\n  location?: 'toolbar' | 'menu';\n}) => {\n  const { editor } = useBlocksEditorContext('LinkButton');\n  const { formatMessage } = useIntl();\n\n  const isLinkActive = () => {\n    const { selection } = editor;\n\n    if (!selection) return false;\n\n    const [match] = Array.from(\n      Editor.nodes(editor, {\n        at: Editor.unhangRange(editor, selection),\n        match: (node) => SlateElement.isElement(node) && node.type === 'link',\n      })\n    );\n\n    return Boolean(match);\n  };\n\n  const isLinkDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    // Always enabled when there's no selection\n    if (!editor.selection) {\n      return false;\n    }\n\n    // Get the block node closest to the anchor and focus\n    const anchorNodeEntry = Editor.above(editor, {\n      at: editor.selection.anchor,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n    const focusNodeEntry = Editor.above(editor, {\n      at: editor.selection.focus,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n\n    if (!anchorNodeEntry || !focusNodeEntry) {\n      return false;\n    }\n\n    // Disabled if the anchor and focus are not in the same block\n    return anchorNodeEntry[0] !== focusNodeEntry[0];\n  };\n\n  const addLink = () => {\n    editor.shouldSaveLinkPath = true;\n    // We insert an empty anchor, so we split the DOM to have a element we can use as reference for the popover\n    insertLink(editor, { url: '' });\n  };\n\n  const label = {\n    id: 'components.Blocks.link',\n    defaultMessage: 'Link',\n  } as MessageDescriptor;\n\n  if (location === 'menu') {\n    return (\n      <StyledMenuItem onSelect={addLink} isActive={isLinkActive()} disabled={isLinkDisabled()}>\n        <Link />\n        {formatMessage(label)}\n      </StyledMenuItem>\n    );\n  }\n\n  return (\n    <ToolbarButton\n      icon={Link}\n      name=\"link\"\n      label={label}\n      isActive={isLinkActive()}\n      handleClick={addLink}\n      disabled={isLinkDisabled()}\n    />\n  );\n};\n\ninterface ObservedToolbarComponentProps {\n  index: number;\n  lastVisibleIndex: number;\n  setLastVisibleIndex: React.Dispatch<React.SetStateAction<number>>;\n  rootRef: React.RefObject<HTMLElement>;\n  children: React.ReactNode;\n}\n\nconst ObservedToolbarComponent = ({\n  index,\n  lastVisibleIndex,\n  setLastVisibleIndex,\n  rootRef,\n  children,\n}: ObservedToolbarComponentProps) => {\n  const isVisible = index <= lastVisibleIndex;\n\n  const containerRef = useElementOnScreen<HTMLDivElement>(\n    (isVisible) => {\n      /**\n       * It's the MoreMenu's job to make an item not visible when there's not room for it.\n       * But we need to react here to the element becoming visible again.\n       */\n      if (isVisible) {\n        setLastVisibleIndex((prev) => Math.max(prev, index));\n      }\n    },\n    { threshold: 1, root: rootRef.current }\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        /**\n         * Use visibility so that the element occupies the space if requires even when there's not\n         * enough room for it to be visible. The empty reserved space will be clipped by the\n         * overflow:hidden rule on the parent, so it doesn't affect the UI.\n         * This way we can keep observing its visiblity and react to browser resize events.\n         */\n        visibility: isVisible ? 'visible' : 'hidden',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\ninterface ObservedComponent {\n  toolbar: React.ReactNode;\n  menu: React.ReactNode;\n  key: string;\n}\n\ninterface MoreMenuProps {\n  setLastVisibleIndex: React.Dispatch<React.SetStateAction<number>>;\n  hasHiddenItems: boolean;\n  rootRef: React.RefObject<HTMLElement>;\n  children: React.ReactNode;\n}\n\nconst MoreMenu = ({ setLastVisibleIndex, hasHiddenItems, rootRef, children }: MoreMenuProps) => {\n  const { formatMessage } = useIntl();\n  const containerRef = useElementOnScreen<HTMLButtonElement>(\n    (isVisible) => {\n      // We only react to the menu becoming invisible. When that happens, we hide the last item.\n      if (!isVisible) {\n        /**\n         * If there's no room for any item, the index can be -1.\n         * This is intentional, in that case only the more menu will be visible.\n         **/\n        setLastVisibleIndex((prev) => prev - 1);\n      }\n    },\n    { threshold: 1, root: rootRef.current }\n  );\n\n  return (\n    <Menu.Root defaultOpen={false}>\n      <Menu.Trigger\n        endIcon={null}\n        paddingLeft={0}\n        paddingRight={0}\n        ref={containerRef}\n        style={{ visibility: hasHiddenItems ? 'visible' : 'hidden' }}\n      >\n        <IconButton\n          variant=\"ghost\"\n          label={formatMessage({ id: 'global.more', defaultMessage: 'More' })}\n          tag=\"span\"\n        >\n          <More aria-hidden focusable={false} />\n        </IconButton>\n      </Menu.Trigger>\n      <Menu.Content onCloseAutoFocus={(e) => e.preventDefault()}>{children}</Menu.Content>\n    </Menu.Root>\n  );\n};\n\nconst StyledMenuItem = styled(Menu.Item)<{ isActive: boolean }>`\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.primary100};\n  }\n\n  ${(props) =>\n    props.isActive &&\n    css`\n      font-weight: bold;\n      background-color: ${({ theme }) => theme.colors.primary100};\n      color: ${({ theme }) => theme.colors.primary600};\n      font-weight: bold;\n    `}\n\n  > span {\n    display: inline-flex;\n    gap: ${({ theme }) => theme.spaces[2]};\n    align-items: center;\n  }\n\n  svg {\n    fill: ${({ theme, isActive }) =>\n      isActive ? theme.colors.primary600 : theme.colors.neutral600};\n  }\n`;\n\nconst BlocksToolbar = () => {\n  const { editor, blocks, modifiers, disabled } = useBlocksEditorContext('BlocksToolbar');\n  const { formatMessage } = useIntl();\n\n  /**\n   * The modifier buttons are disabled when an image is selected.\n   */\n  const checkButtonDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    if (!editor.selection) {\n      return false;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n\n    if (['image', 'code'].includes(selectedNode.type)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isButtonDisabled = checkButtonDisabled();\n\n  /**\n   * Observed components are ones that may or may not be visible in the toolbar, depending on the\n   * available space. They provide two render props:\n   * - renderInToolbar: for when we try to render the component in the toolbar (may be hidden)\n   * - renderInMenu: for when the component didn't fit in the toolbar and is relegated\n   *   to the \"more\" menu\n   */\n  const observedComponents: ObservedComponent[] = [\n    ...Object.entries(modifiers).map(([name, modifier]) => {\n      const Icon = modifier.icon;\n      const isActive = modifier.checkIsActive(editor);\n      const handleSelect = () => modifier.handleToggle(editor);\n\n      return {\n        toolbar: (\n          <ToolbarButton\n            key={name}\n            name={name}\n            icon={modifier.icon}\n            label={modifier.label}\n            isActive={modifier.checkIsActive(editor)}\n            handleClick={handleSelect}\n            disabled={isButtonDisabled}\n          />\n        ),\n        menu: (\n          <StyledMenuItem onSelect={handleSelect} isActive={isActive}>\n            <Icon />\n            {formatMessage(modifier.label)}\n          </StyledMenuItem>\n        ),\n        key: `modifier.${name}`,\n      };\n    }),\n    {\n      toolbar: <LinkButton disabled={isButtonDisabled} location=\"toolbar\" />,\n      menu: <LinkButton disabled={isButtonDisabled} location=\"menu\" />,\n      key: 'block.link',\n    },\n    {\n      // List buttons can only be rendered together when in the toolbar\n      toolbar: (\n        <Flex direction=\"row\" gap={1}>\n          <ToolbarSeparator />\n          <Toolbar.ToggleGroup type=\"single\" asChild>\n            <Flex gap={1}>\n              <ListButton block={blocks['list-unordered']} format=\"unordered\" location=\"toolbar\" />\n              <ListButton block={blocks['list-ordered']} format=\"ordered\" location=\"toolbar\" />\n            </Flex>\n          </Toolbar.ToggleGroup>\n        </Flex>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <ListButton block={blocks['list-unordered']} format=\"unordered\" location=\"menu\" />\n          <ListButton block={blocks['list-ordered']} format=\"ordered\" location=\"menu\" />\n        </>\n      ),\n      key: 'block.list',\n    },\n  ];\n\n  return (\n    <Toolbar.Root aria-disabled={disabled} asChild>\n      <ToolbarWrapper gap={2} padding={2} width=\"100%\">\n        <BlocksDropdown />\n        <ToolbarSeparator />\n        <Toolbar.ToggleGroup type=\"multiple\" asChild>\n          <Flex direction=\"row\" gap={1} grow={1} overflow=\"hidden\">\n            <EditorToolbarObserver observedComponents={observedComponents} />\n          </Flex>\n        </Toolbar.ToggleGroup>\n      </ToolbarWrapper>\n    </Toolbar.Root>\n  );\n};\n\nexport { BlocksToolbar, useConversionModal };\n","import * as React from 'react';\n\nimport {\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  IconButton,\n  IconButtonComponent,\n  useComposedRefs,\n} from '@strapi/design-system';\nimport { Drag } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { Editor, Range, Transforms } from 'slate';\nimport { ReactEditor, type RenderElementProps, type RenderLeafProps, Editable } from 'slate-react';\nimport { styled, CSSProperties, css } from 'styled-components';\n\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDragAndDrop, DIRECTIONS } from '../../../../../hooks/useDragAndDrop';\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { decorateCode } from './Blocks/Code';\nimport { type BlocksStore, useBlocksEditorContext } from './BlocksEditor';\nimport { useConversionModal } from './BlocksToolbar';\nimport { type ModifiersStore } from './Modifiers';\nimport { getEntries, isLinkNode, isListNode } from './utils/types';\n\nconst StyledEditable = styled(Editable)<{ isExpandedMode: boolean }>`\n  // The outline style is set on the wrapper with :focus-within\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spaces[3]};\n  height: 100%;\n  // For fullscreen align input in the center with fixed width\n  width: ${(props) => (props.isExpandedMode ? '512px' : '100%')};\n  margin: auto;\n\n  > *:last-child {\n    padding-bottom: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nconst Wrapper = styled<BoxComponent>(Box)<{ isOverDropTarget: boolean }>`\n  position: ${({ isOverDropTarget }) => isOverDropTarget && 'relative'};\n`;\n\ntype DragDirection = (typeof DIRECTIONS)[keyof typeof DIRECTIONS];\n\nconst DropPlaceholder = styled<BoxComponent>(Box)<{\n  dragDirection: DragDirection | null;\n  placeholderMargin: 1 | 2;\n}>`\n  position: absolute;\n  right: 0;\n\n  // Show drop placeholder 8px above or below the drop target\n  ${({ dragDirection, theme, placeholderMargin }) => css`\n    top: ${dragDirection === DIRECTIONS.UPWARD && `-${theme.spaces[placeholderMargin]}`};\n    bottom: ${dragDirection === DIRECTIONS.DOWNWARD && `-${theme.spaces[placeholderMargin]}`};\n  `}\n`;\n\nconst DragItem = styled<FlexComponent>(Flex)<{ $dragVisibility: CSSProperties['visibility'] }>`\n  // Style each block rendered using renderElement()\n  & > [data-slate-node='element'] {\n    width: 100%;\n    opacity: inherit;\n  }\n\n  // Set the visibility of drag button\n  [role='button'] {\n    visibility: ${(props) => props.$dragVisibility};\n    opacity: inherit;\n  }\n  &[aria-disabled='true'] {\n    user-drag: none;\n  }\n`;\n\nconst DragIconButton = styled<IconButtonComponent<'div'>>(IconButton)<{\n  $dragHandleTopMargin?: CSSProperties['marginTop'];\n}>`\n  user-select: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: none;\n  border-radius: ${({ theme }) => theme.borderRadius};\n  padding-left: ${({ theme }) => theme.spaces[0]};\n  padding-right: ${({ theme }) => theme.spaces[0]};\n  padding-top: ${({ theme }) => theme.spaces[1]};\n  padding-bottom: ${({ theme }) => theme.spaces[1]};\n  visibility: hidden;\n  cursor: grab;\n  opacity: inherit;\n  margin-top: ${(props) => props.$dragHandleTopMargin ?? 0};\n\n  &:hover {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n  &:active {\n    cursor: grabbing;\n    background: ${({ theme }) => theme.colors.neutral150};\n  }\n  &[aria-disabled='true'] {\n    visibility: hidden;\n  }\n  svg {\n    min-width: ${({ theme }) => theme.spaces[3]};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral500};\n    }\n  }\n`;\n\ntype Direction = {\n  setDragDirection: (direction: DragDirection) => void;\n  dragDirection: DragDirection | null;\n};\n\ntype DragAndDropElementProps = Direction & {\n  children: RenderElementProps['children'];\n  index: Array<number>;\n  dragHandleTopMargin?: CSSProperties['marginTop'];\n};\n\nconst DragAndDropElement = ({\n  children,\n  index,\n  setDragDirection,\n  dragDirection,\n  dragHandleTopMargin,\n}: DragAndDropElementProps) => {\n  const { editor, disabled, name, setLiveText } = useBlocksEditorContext('drag-and-drop');\n  const { formatMessage } = useIntl();\n  const [dragVisibility, setDragVisibility] = React.useState<CSSProperties['visibility']>('hidden');\n\n  const handleMoveBlock = React.useCallback(\n    (newIndex: Array<number>, currentIndex: Array<number>) => {\n      Transforms.moveNodes(editor, {\n        at: currentIndex,\n        to: newIndex,\n      });\n\n      // Add 1 to the index for the live text message\n      const currentIndexPosition = [currentIndex[0] + 1, ...currentIndex.slice(1)];\n      const newIndexPosition = [newIndex[0] + 1, ...newIndex.slice(1)];\n\n      setLiveText(\n        formatMessage(\n          {\n            id: getTranslation('components.Blocks.dnd.reorder'),\n            defaultMessage: '{item}, moved. New position in the editor: {position}.',\n          },\n          {\n            item: `${name}.${currentIndexPosition.join(',')}`,\n            position: `${newIndexPosition.join(',')} of ${editor.children.length}`,\n          }\n        )\n      );\n    },\n    [editor, formatMessage, name, setLiveText]\n  );\n\n  const [{ handlerId, isDragging, isOverDropTarget, direction }, blockRef, dropRef, dragRef] =\n    useDragAndDrop(!disabled, {\n      type: `${ItemTypes.BLOCKS}_${name}`,\n      index,\n      item: {\n        index,\n        displayedValue: children,\n      },\n      onDropItem(currentIndex, newIndex) {\n        if (newIndex) handleMoveBlock(newIndex, currentIndex);\n      },\n    });\n\n  const composedBoxRefs = useComposedRefs(blockRef, dropRef);\n\n  // Set Drag direction before loosing state while dragging\n  React.useEffect(() => {\n    if (direction) {\n      setDragDirection(direction);\n    }\n  }, [direction, setDragDirection]);\n\n  // On selection change hide drag handle\n  React.useEffect(() => {\n    setDragVisibility('hidden');\n  }, [editor.selection]);\n\n  return (\n    <Wrapper ref={composedBoxRefs} isOverDropTarget={isOverDropTarget}>\n      {isOverDropTarget && (\n        <DropPlaceholder\n          borderStyle=\"solid\"\n          borderColor=\"secondary200\"\n          borderWidth=\"2px\"\n          width=\"calc(100% - 24px)\"\n          marginLeft=\"auto\"\n          dragDirection={dragDirection}\n          // For list items placeholder reduce the margin around\n          placeholderMargin={children.props.as && children.props.as === 'li' ? 1 : 2}\n        />\n      )}\n      {isDragging ? (\n        <CloneDragItem dragHandleTopMargin={dragHandleTopMargin}>{children}</CloneDragItem>\n      ) : (\n        <DragItem\n          ref={dragRef}\n          data-handler-id={handlerId}\n          gap={2}\n          paddingLeft={2}\n          alignItems=\"start\"\n          onDragStart={(event) => {\n            const target = event.target as HTMLElement;\n            const currentTarget = event.currentTarget as HTMLElement;\n\n            // Dragging action should only trigger drag event when button is dragged, however update styles on the whole dragItem.\n            if (target.getAttribute('role') !== 'button') {\n              event.preventDefault();\n            } else {\n              // Setting styles using dragging state is not working, so set it on current target element as nodes get dragged\n              currentTarget.style.opacity = '0.5';\n            }\n          }}\n          onDragEnd={(event) => {\n            const currentTarget = event.currentTarget as HTMLElement;\n            currentTarget.style.opacity = '1';\n          }}\n          onMouseMove={() => setDragVisibility('visible')}\n          onSelect={() => setDragVisibility('visible')}\n          onMouseLeave={() => setDragVisibility('hidden')}\n          aria-disabled={disabled}\n          $dragVisibility={dragVisibility}\n        >\n          <DragIconButton\n            tag=\"div\"\n            contentEditable={false}\n            role=\"button\"\n            tabIndex={0}\n            withTooltip={false}\n            label={formatMessage({\n              id: getTranslation('components.DragHandle-label'),\n              defaultMessage: 'Drag',\n            })}\n            onClick={(e) => e.stopPropagation()}\n            aria-disabled={disabled}\n            disabled={disabled}\n            draggable\n            // For some blocks top margin added to drag handle to align at the text level\n            $dragHandleTopMargin={dragHandleTopMargin}\n          >\n            <Drag color=\"primary500\" />\n          </DragIconButton>\n          {children}\n        </DragItem>\n      )}\n    </Wrapper>\n  );\n};\n\ninterface CloneDragItemProps {\n  children: RenderElementProps['children'];\n  dragHandleTopMargin?: CSSProperties['marginTop'];\n}\n\n// To prevent applying opacity to the original item being dragged, display a cloned element without opacity.\nconst CloneDragItem = ({ children, dragHandleTopMargin }: CloneDragItemProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <DragItem gap={2} paddingLeft={2} alignItems=\"start\" $dragVisibility=\"visible\">\n      <DragIconButton\n        tag=\"div\"\n        role=\"button\"\n        withTooltip={false}\n        label={formatMessage({\n          id: getTranslation('components.DragHandle-label'),\n          defaultMessage: 'Drag',\n        })}\n        $dragHandleTopMargin={dragHandleTopMargin}\n      >\n        <Drag color=\"neutral600\" />\n      </DragIconButton>\n      {children}\n    </DragItem>\n  );\n};\n\ninterface ExtendedRenderLeafProps extends RenderLeafProps {\n  leaf: RenderLeafProps['leaf'] & { className?: string };\n}\n\nconst baseRenderLeaf = (props: ExtendedRenderLeafProps, modifiers: ModifiersStore) => {\n  // Recursively wrap the children for each active modifier\n  const wrappedChildren = getEntries(modifiers).reduce((currentChildren, modifierEntry) => {\n    const [name, modifier] = modifierEntry;\n\n    if (props.leaf[name]) {\n      return modifier.renderLeaf(currentChildren);\n    }\n\n    return currentChildren;\n  }, props.children);\n\n  return (\n    <span {...props.attributes} className={props.leaf.className}>\n      {wrappedChildren}\n    </span>\n  );\n};\n\ntype BaseRenderElementProps = Direction & {\n  props: RenderElementProps['children'];\n  blocks: BlocksStore;\n  editor: Editor;\n};\n\nconst baseRenderElement = ({\n  props,\n  blocks,\n  editor,\n  setDragDirection,\n  dragDirection,\n}: BaseRenderElementProps) => {\n  const { element } = props;\n\n  const blockMatch = Object.values(blocks).find((block) => block.matchNode(element));\n  const block = blockMatch || blocks.paragraph;\n  const nodePath = ReactEditor.findPath(editor, element);\n\n  // Link is inline block so it cannot be dragged\n  // List items and nested list blocks i.e. lists with indent level higher than 0 are skipped from dragged items\n  if (\n    isLinkNode(element) ||\n    (isListNode(element) && element.indentLevel && element.indentLevel > 0) ||\n    element.type === 'list-item'\n  ) {\n    return block.renderElement(props);\n  }\n\n  return (\n    <DragAndDropElement\n      index={nodePath}\n      setDragDirection={setDragDirection}\n      dragDirection={dragDirection}\n      dragHandleTopMargin={block.dragHandleTopMargin}\n    >\n      {block.renderElement(props)}\n    </DragAndDropElement>\n  );\n};\n\ninterface BlocksContentProps {\n  placeholder?: string;\n  ariaLabelId: string;\n}\n\nconst BlocksContent = ({ placeholder, ariaLabelId }: BlocksContentProps) => {\n  const { editor, disabled, blocks, modifiers, setLiveText, isExpandedMode } =\n    useBlocksEditorContext('BlocksContent');\n  const blocksRef = React.useRef<HTMLDivElement>(null);\n  const { formatMessage } = useIntl();\n  const [dragDirection, setDragDirection] = React.useState<DragDirection | null>(null);\n  const { modalElement, handleConversionResult } = useConversionModal();\n\n  // Create renderLeaf function based on the modifiers store\n  const renderLeaf = React.useCallback(\n    (props: ExtendedRenderLeafProps) => baseRenderLeaf(props, modifiers),\n    [modifiers]\n  );\n\n  const handleMoveBlocks = (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) return;\n\n    const start = Range.start(editor.selection);\n    const currentIndex = [start.path[0]];\n    let newIndexPosition = 0;\n\n    if (event.key === 'ArrowUp') {\n      newIndexPosition = currentIndex[0] > 0 ? currentIndex[0] - 1 : currentIndex[0];\n    } else {\n      newIndexPosition =\n        currentIndex[0] < editor.children.length - 1 ? currentIndex[0] + 1 : currentIndex[0];\n    }\n\n    const newIndex = [newIndexPosition];\n\n    if (newIndexPosition !== currentIndex[0]) {\n      Transforms.moveNodes(editor, {\n        at: currentIndex,\n        to: newIndex,\n      });\n\n      setLiveText(\n        formatMessage(\n          {\n            id: getTranslation('components.Blocks.dnd.reorder'),\n            defaultMessage: '{item}, moved. New position in the editor: {position}.',\n          },\n          {\n            item: `${name}.${currentIndex[0] + 1}`,\n            position: `${newIndex[0] + 1} of ${editor.children.length}`,\n          }\n        )\n      );\n\n      event.preventDefault();\n    }\n  };\n\n  // Create renderElement function base on the blocks store\n  const renderElement = React.useCallback(\n    (props: RenderElementProps) =>\n      baseRenderElement({ props, blocks, editor, dragDirection, setDragDirection }),\n    [blocks, editor, dragDirection, setDragDirection]\n  );\n\n  const checkSnippet = (event: React.KeyboardEvent<HTMLElement>) => {\n    // Get current text block\n    if (!editor.selection) {\n      return;\n    }\n\n    const [textNode, textNodePath] = Editor.node(editor, editor.selection.anchor.path);\n\n    // Narrow the type to a text node\n    if (Editor.isEditor(textNode) || textNode.type !== 'text') {\n      return;\n    }\n\n    // Don't check for snippets if we're not at the start of a block\n    if (textNodePath.at(-1) !== 0) {\n      return;\n    }\n\n    // Check if the text node starts with a known snippet\n    const blockMatchingSnippet = Object.values(blocks).find((block) => {\n      return block.snippets?.includes(textNode.text);\n    });\n\n    if (blockMatchingSnippet?.handleConvert) {\n      // Prevent the space from being created and delete the snippet\n      event.preventDefault();\n      Transforms.delete(editor, {\n        distance: textNode.text.length,\n        unit: 'character',\n        reverse: true,\n      });\n\n      // Convert the selected block\n      const maybeRenderModal = blockMatchingSnippet.handleConvert(editor);\n      handleConversionResult(maybeRenderModal);\n    }\n  };\n\n  const handleEnter = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    const selectedBlock = Object.values(blocks).find((block) => block.matchNode(selectedNode));\n    if (!selectedBlock) {\n      return;\n    }\n\n    // Allow forced line breaks when shift is pressed\n    if (event.shiftKey && selectedNode.type !== 'image') {\n      Transforms.insertText(editor, '\\n');\n      return;\n    }\n\n    // Check if there's an enter handler for the selected block\n    if (selectedBlock.handleEnterKey) {\n      selectedBlock.handleEnterKey(editor);\n    } else {\n      blocks.paragraph.handleEnterKey!(editor);\n    }\n  };\n\n  const handleBackspaceEvent = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    const selectedBlock = Object.values(blocks).find((block) => block.matchNode(selectedNode));\n\n    if (!selectedBlock) {\n      return;\n    }\n\n    if (selectedBlock.handleBackspaceKey) {\n      selectedBlock.handleBackspaceKey(editor, event);\n    }\n  };\n\n  const handleTab = (event: React.KeyboardEvent<HTMLElement>) => {\n    if (!editor.selection) {\n      return;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    const selectedBlock = Object.values(blocks).find((block) => block.matchNode(selectedNode));\n    if (!selectedBlock) {\n      return;\n    }\n\n    if (selectedBlock.handleTab) {\n      event.preventDefault();\n      selectedBlock.handleTab(editor);\n    }\n  };\n\n  const handleKeyboardShortcuts = (event: React.KeyboardEvent<HTMLElement>) => {\n    const isCtrlOrCmd = event.metaKey || event.ctrlKey;\n\n    if (isCtrlOrCmd) {\n      // Check if there's a modifier to toggle\n      Object.values(modifiers).forEach((value) => {\n        if (value.isValidEventKey(event)) {\n          value.handleToggle(editor);\n          return;\n        }\n      });\n      if (event.shiftKey && ['ArrowUp', 'ArrowDown'].includes(event.key)) {\n        handleMoveBlocks(editor, event);\n      }\n    }\n  };\n\n  const handleKeyDown: React.KeyboardEventHandler<HTMLElement> = (event) => {\n    // Find the right block-specific handlers for enter and backspace key presses\n    switch (event.key) {\n      case 'Enter':\n        event.preventDefault();\n        return handleEnter(event);\n      case 'Backspace':\n        return handleBackspaceEvent(event);\n      case 'Tab':\n        return handleTab(event);\n      case 'Escape':\n        return ReactEditor.blur(editor);\n    }\n\n    handleKeyboardShortcuts(event);\n\n    // Check if a snippet was triggered\n    if (event.key === ' ') {\n      checkSnippet(event);\n    }\n  };\n\n  /**\n   *  scrollSelectionIntoView : Slate's default method to scroll a DOM selection into the view,\n   *  thats shifting layout for us when there is a overflowY:scroll on the viewport.\n   *  We are overriding it to check if the selection is not fully within the visible area of the editor,\n   *  we use scrollBy one line to the bottom\n   */\n  const handleScrollSelectionIntoView = () => {\n    if (!editor.selection) return;\n    const domRange = ReactEditor.toDOMRange(editor, editor.selection);\n    const domRect = domRange.getBoundingClientRect();\n    const blocksInput = blocksRef.current;\n\n    if (!blocksInput) {\n      return;\n    }\n\n    const editorRect = blocksInput.getBoundingClientRect();\n\n    // Check if the selection is not fully within the visible area of the editor\n    if (domRect.top < editorRect.top || domRect.bottom > editorRect.bottom) {\n      // Scroll by one line to the bottom\n      blocksInput.scrollBy({\n        top: 28, // 20px is the line-height + 8px line gap\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  return (\n    <Box\n      ref={blocksRef}\n      grow={1}\n      width=\"100%\"\n      overflow=\"auto\"\n      fontSize={2}\n      background=\"neutral0\"\n      color=\"neutral800\"\n      lineHeight={6}\n      paddingRight={7}\n      paddingTop={6}\n      paddingBottom={3}\n    >\n      <StyledEditable\n        aria-labelledby={ariaLabelId}\n        readOnly={disabled}\n        placeholder={placeholder}\n        isExpandedMode={isExpandedMode}\n        decorate={decorateCode}\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        onKeyDown={handleKeyDown}\n        scrollSelectionIntoView={handleScrollSelectionIntoView}\n        // As we have our own handler to drag and drop the elements returing true will skip slate's own event handler\n        onDrop={() => {\n          return true;\n        }}\n        onDragStart={() => {\n          return true;\n        }}\n      />\n      {modalElement}\n    </Box>\n  );\n};\n\nexport { BlocksContent, BlocksContentProps };\n","import * as React from 'react';\n\nimport { Box, Flex, FocusTrap, Portal, IconButton, FlexComponent } from '@strapi/design-system';\nimport { Collapse } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { css, styled } from 'styled-components';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { useBlocksEditorContext } from './BlocksEditor';\n\nconst CollapseIconButton = styled(IconButton)`\n  position: absolute;\n  bottom: 1.2rem;\n  right: 1.2rem;\n`;\n\nconst ExpandWrapper = styled<FlexComponent>(Flex)`\n  // Background with 20% opacity\n  background: ${({ theme }) => `${theme.colors.neutral800}1F`};\n`;\n\ninterface EditorLayoutProps {\n  children: React.ReactNode;\n  error?: string;\n  onCollapse: () => void;\n  disabled: boolean;\n  ariaDescriptionId: string;\n}\n\nconst EditorLayout = ({\n  children,\n  error,\n  disabled,\n  onCollapse,\n  ariaDescriptionId,\n}: EditorLayoutProps) => {\n  const { formatMessage } = useIntl();\n  const { isExpandedMode } = useBlocksEditorContext('editorLayout');\n\n  React.useEffect(() => {\n    if (isExpandedMode) {\n      document.body.classList.add('lock-body-scroll');\n    }\n\n    return () => {\n      document.body.classList.remove('lock-body-scroll');\n    };\n  }, [isExpandedMode]);\n\n  if (isExpandedMode) {\n    return (\n      <Portal role=\"dialog\" aria-modal={false}>\n        <FocusTrap onEscape={onCollapse}>\n          <ExpandWrapper\n            position=\"fixed\"\n            top={0}\n            left={0}\n            right={0}\n            bottom={0}\n            zIndex={4}\n            justifyContent=\"center\"\n            onClick={onCollapse}\n          >\n            <Box<'div'>\n              background=\"neutral0\"\n              hasRadius\n              shadow=\"popupShadow\"\n              overflow=\"hidden\"\n              width=\"90%\"\n              height=\"90%\"\n              onClick={(e) => e.stopPropagation()}\n              aria-describedby={ariaDescriptionId}\n              position=\"relative\"\n            >\n              <Flex height=\"100%\" alignItems=\"flex-start\" direction=\"column\">\n                {children}\n                <CollapseIconButton\n                  label={formatMessage({\n                    id: getTranslation('components.Blocks.collapse'),\n                    defaultMessage: 'Collapse',\n                  })}\n                  onClick={onCollapse}\n                >\n                  <Collapse />\n                </CollapseIconButton>\n              </Flex>\n            </Box>\n          </ExpandWrapper>\n        </FocusTrap>\n      </Portal>\n    );\n  }\n\n  return (\n    <InputWrapper\n      direction=\"column\"\n      alignItems=\"flex-start\"\n      height=\"512px\"\n      $disabled={disabled}\n      $hasError={Boolean(error)}\n      style={{ overflow: 'hidden' }}\n      aria-describedby={ariaDescriptionId}\n      position=\"relative\"\n    >\n      {children}\n    </InputWrapper>\n  );\n};\n\nconst InputWrapper = styled<FlexComponent>(Flex)<{ $disabled?: boolean; $hasError?: boolean }>`\n  border: 1px solid\n    ${({ theme, $hasError }) => ($hasError ? theme.colors.danger600 : theme.colors.neutral200)};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  background: ${({ theme }) => theme.colors.neutral0};\n\n  ${({ theme, $hasError = false }) => css`\n    outline: none;\n    box-shadow: 0;\n    transition-property: border-color, box-shadow, fill;\n    transition-duration: 0.2s;\n\n    &:focus-within {\n      border: 1px solid ${$hasError ? theme.colors.danger600 : theme.colors.primary600};\n      box-shadow: ${$hasError ? theme.colors.danger600 : theme.colors.primary600} 0px 0px 0px 2px;\n    }\n  `}\n\n  ${({ theme, $disabled }) =>\n    $disabled\n      ? css`\n          color: ${theme.colors.neutral600};\n          background: ${theme.colors.neutral150};\n        `\n      : undefined}\n`;\n\nexport { EditorLayout };\n","import * as React from 'react';\n\nimport { Typography, TypographyComponent } from '@strapi/design-system';\nimport { Bold, Italic, Underline, StrikeThrough, Code } from '@strapi/icons';\nimport { type MessageDescriptor } from 'react-intl';\nimport { Editor, Text, Transforms } from 'slate';\nimport { styled, css } from 'styled-components';\n\nconst stylesToInherit = css`\n  font-size: inherit;\n  color: inherit;\n  line-height: inherit;\n`;\n\nconst BoldText = styled<TypographyComponent>(Typography).attrs({ fontWeight: 'bold' })`\n  ${stylesToInherit}\n`;\n\nconst ItalicText = styled<TypographyComponent>(Typography)`\n  font-style: italic;\n  ${stylesToInherit}\n`;\n\nconst UnderlineText = styled<TypographyComponent>(Typography).attrs({\n  textDecoration: 'underline',\n})`\n  ${stylesToInherit}\n`;\n\nconst StrikeThroughText = styled<TypographyComponent>(Typography).attrs({\n  textDecoration: 'line-through',\n})`\n  ${stylesToInherit}\n`;\n\nconst InlineCode = styled.code`\n  background-color: ${({ theme }) => theme.colors.neutral150};\n  border-radius: ${({ theme }) => theme.borderRadius};\n  padding: ${({ theme }) => `0 ${theme.spaces[2]}`};\n  font-family: 'SF Mono', SFMono-Regular, ui-monospace, 'DejaVu Sans Mono', Menlo, Consolas,\n    monospace;\n  color: inherit;\n`;\n\ntype ModifierKey = Exclude<keyof Text, 'type' | 'text'>;\n\ntype ModifiersStore = {\n  [K in ModifierKey]: {\n    icon: React.ComponentType;\n    isValidEventKey: (event: React.KeyboardEvent<HTMLElement>) => boolean;\n    label: MessageDescriptor;\n    checkIsActive: (editor: Editor) => boolean;\n    handleToggle: (editor: Editor) => void;\n    renderLeaf: (children: React.JSX.Element | string) => React.JSX.Element;\n  };\n};\n\n/**\n * The default handler for checking if a modifier is active\n */\nconst baseCheckIsActive = (editor: Editor, name: ModifierKey) => {\n  const marks = Editor.marks(editor);\n  if (!marks) return false;\n\n  return Boolean(marks[name]);\n};\n\n/**\n * The default handler for toggling a modifier\n */\nconst baseHandleToggle = (editor: Editor, name: ModifierKey) => {\n  const marks = Editor.marks(editor);\n\n  // If there is no selection, set selection to the end of line\n  if (!editor.selection) {\n    const endOfEditor = Editor.end(editor, []);\n    Transforms.select(editor, endOfEditor);\n  }\n\n  // Toggle the modifier\n  if (marks?.[name]) {\n    Editor.removeMark(editor, name);\n  } else {\n    Editor.addMark(editor, name, true);\n  }\n};\n\nconst modifiers: ModifiersStore = {\n  bold: {\n    icon: Bold,\n    isValidEventKey: (event) => event.key === 'b',\n    label: { id: 'components.Blocks.modifiers.bold', defaultMessage: 'Bold' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'bold'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'bold'),\n    renderLeaf: (children) => <BoldText>{children}</BoldText>,\n  },\n  italic: {\n    icon: Italic,\n    isValidEventKey: (event) => event.key === 'i',\n    label: { id: 'components.Blocks.modifiers.italic', defaultMessage: 'Italic' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'italic'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'italic'),\n    renderLeaf: (children) => <ItalicText>{children}</ItalicText>,\n  },\n  underline: {\n    icon: Underline,\n    isValidEventKey: (event) => event.key === 'u',\n    label: { id: 'components.Blocks.modifiers.underline', defaultMessage: 'Underline' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'underline'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'underline'),\n    renderLeaf: (children) => <UnderlineText>{children}</UnderlineText>,\n  },\n  strikethrough: {\n    icon: StrikeThrough,\n    isValidEventKey: (event) => event.key === 'S' && event.shiftKey,\n    label: { id: 'components.Blocks.modifiers.strikethrough', defaultMessage: 'Strikethrough' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'strikethrough'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'strikethrough'),\n    renderLeaf: (children) => <StrikeThroughText>{children}</StrikeThroughText>,\n  },\n  code: {\n    icon: Code,\n    isValidEventKey: (event) => event.key === 'e',\n    label: { id: 'components.Blocks.modifiers.code', defaultMessage: 'Inline code' },\n    checkIsActive: (editor) => baseCheckIsActive(editor, 'code'),\n    handleToggle: (editor) => baseHandleToggle(editor, 'code'),\n    renderLeaf: (children) => <InlineCode>{children}</InlineCode>,\n  },\n};\n\nexport { type ModifiersStore, modifiers };\n","import { type Editor } from 'slate';\n\n/**\n * Images are void elements. They handle the rendering of their children instead of Slate.\n * See the Slate documentation for more information:\n * - https://docs.slatejs.org/api/nodes/element#void-vs-not-void\n * - https://docs.slatejs.org/api/nodes/element#rendering-void-elements\n */\nconst withImages = (editor: Editor) => {\n  const { isVoid } = editor;\n\n  editor.isVoid = (element) => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nexport { withImages };\n","import { type BaseEditor, Path, Transforms, Range, Point, Editor } from 'slate';\n\nimport { insertLink } from '../utils/links';\n\ninterface LinkEditor extends BaseEditor {\n  lastInsertedLinkPath: Path | null;\n  shouldSaveLinkPath: boolean;\n}\n\nconst withLinks = (editor: Editor) => {\n  const { isInline, apply, insertText, insertData } = editor;\n\n  // Links are inline elements, so we need to override the isInline method for slate\n  editor.isInline = (element) => {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  // We keep a track of the last inserted link path\n  // So we can show the popover on the link component if that link is the last one inserted\n  editor.lastInsertedLinkPath = null;\n\n  // We intercept the apply method, so everytime we insert a new link, we save its path\n  editor.apply = (operation) => {\n    if (operation.type === 'insert_node') {\n      if (\n        !Editor.isEditor(operation.node) &&\n        operation.node.type === 'link' &&\n        editor.shouldSaveLinkPath\n      ) {\n        editor.lastInsertedLinkPath = operation.path;\n      }\n    } else if (operation.type === 'move_node') {\n      // We need to update the last inserted link path when link is moved\n      // If link is the first word in the paragraph we dont need to update the path\n      if (\n        Path.hasPrevious(operation.path) &&\n        editor.lastInsertedLinkPath &&\n        editor.shouldSaveLinkPath\n      ) {\n        editor.lastInsertedLinkPath = Path.transform(editor.lastInsertedLinkPath, operation);\n      }\n    }\n\n    apply(operation);\n  };\n\n  editor.insertText = (text) => {\n    // When selection is at the end of a link and user types a space, we want to break the link\n    if (editor.selection && Range.isCollapsed(editor.selection) && text === ' ') {\n      const linksInSelection = Array.from(\n        Editor.nodes(editor, {\n          at: editor.selection,\n          match: (node) => !Editor.isEditor(node) && node.type === 'link',\n        })\n      );\n\n      const selectionIsInLink = editor.selection && linksInSelection.length > 0;\n      const selectionIsAtEndOfLink =\n        selectionIsInLink &&\n        Point.equals(editor.selection.anchor, Editor.end(editor, linksInSelection[0][1]));\n\n      if (selectionIsAtEndOfLink) {\n        Transforms.insertNodes(\n          editor,\n          { text: ' ', type: 'text' },\n          { at: Path.next(linksInSelection[0][1]), select: true }\n        );\n\n        return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  // Add data as a clickable link if its a valid URL\n  editor.insertData = (data) => {\n    const pastedText = data.getData('text/plain');\n\n    if (pastedText) {\n      try {\n        // eslint-disable-next-line no-new\n        new URL(pastedText);\n        // Do not show link popup on copy-paste a link, so do not save its path\n        editor.shouldSaveLinkPath = false;\n        insertLink(editor, { url: pastedText });\n        return;\n      } catch (error) {\n        // continue normal data insertion\n      }\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\nexport { withLinks, type LinkEditor };\n","import { type Text, Node, Editor, Element, Transforms } from 'slate';\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * This plugin is used to normalize the Slate document to match the Strapi schema.\n */\nconst withStrapiSchema = (editor: Editor) => {\n  const { normalizeNode } = editor;\n\n  /**\n   * On the strapi schema, we want text nodes to have type: text\n   * By default, Slate add text nodes without type: text\n   * So we add this normalization for the cases when Slate add text nodes automatically\n   */\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    if (!Element.isElement(node) && !isText(node)) {\n      Transforms.setNodes(editor, { type: 'text' }, { at: path });\n\n      return;\n    }\n\n    normalizeNode(entry);\n  };\n\n  return editor;\n};\n\nexport { withStrapiSchema };\n","import * as React from 'react';\n\nimport { createContext, type FieldValue } from '@strapi/admin/strapi-admin';\nimport { IconButton, Divider, VisuallyHidden } from '@strapi/design-system';\nimport { Expand } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { Editor, type Descendant, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { type RenderElementProps, Slate, withReact, ReactEditor, useSlate } from 'slate-react';\nimport { styled, type CSSProperties } from 'styled-components';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { codeBlocks } from './Blocks/Code';\nimport { headingBlocks } from './Blocks/Heading';\nimport { imageBlocks } from './Blocks/Image';\nimport { linkBlocks } from './Blocks/Link';\nimport { listBlocks } from './Blocks/List';\nimport { paragraphBlocks } from './Blocks/Paragraph';\nimport { quoteBlocks } from './Blocks/Quote';\nimport { BlocksContent, type BlocksContentProps } from './BlocksContent';\nimport { BlocksToolbar } from './BlocksToolbar';\nimport { EditorLayout } from './EditorLayout';\nimport { type ModifiersStore, modifiers } from './Modifiers';\nimport { withImages } from './plugins/withImages';\nimport { withLinks } from './plugins/withLinks';\nimport { withStrapiSchema } from './plugins/withStrapiSchema';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * BlocksEditorProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BaseBlock {\n  renderElement: (props: RenderElementProps) => React.JSX.Element;\n  matchNode: (node: Schema.Attribute.BlocksNode) => boolean;\n  handleConvert?: (editor: Editor) => void | (() => React.JSX.Element);\n  handleEnterKey?: (editor: Editor) => void;\n  handleBackspaceKey?: (editor: Editor, event: React.KeyboardEvent<HTMLElement>) => void;\n  handleTab?: (editor: Editor) => void;\n  snippets?: string[];\n  dragHandleTopMargin?: CSSProperties['marginTop'];\n}\n\ninterface NonSelectorBlock extends BaseBlock {\n  isInBlocksSelector: false;\n}\n\ninterface SelectorBlock extends BaseBlock {\n  isInBlocksSelector: true;\n  icon: React.ComponentType;\n  label: MessageDescriptor;\n}\n\ntype NonSelectorBlockKey = 'list-item' | 'link';\n\nconst selectorBlockKeys = [\n  'paragraph',\n  'heading-one',\n  'heading-two',\n  'heading-three',\n  'heading-four',\n  'heading-five',\n  'heading-six',\n  'list-ordered',\n  'list-unordered',\n  'image',\n  'quote',\n  'code',\n] as const;\n\ntype SelectorBlockKey = (typeof selectorBlockKeys)[number];\n\nconst isSelectorBlockKey = (key: unknown): key is SelectorBlockKey => {\n  return typeof key === 'string' && selectorBlockKeys.includes(key as SelectorBlockKey);\n};\n\ntype BlocksStore = {\n  [K in SelectorBlockKey]: SelectorBlock;\n} & {\n  [K in NonSelectorBlockKey]: NonSelectorBlock;\n};\n\ninterface BlocksEditorContextValue {\n  blocks: BlocksStore;\n  modifiers: ModifiersStore;\n  disabled: boolean;\n  name: string;\n  setLiveText: (text: string) => void;\n  isExpandedMode: boolean;\n}\n\nconst [BlocksEditorProvider, usePartialBlocksEditorContext] =\n  createContext<BlocksEditorContextValue>('BlocksEditor');\n\nfunction useBlocksEditorContext(\n  consumerName: string\n): BlocksEditorContextValue & { editor: Editor } {\n  const context = usePartialBlocksEditorContext(consumerName, (state) => state);\n  const editor = useSlate();\n\n  return {\n    ...context,\n    editor,\n  };\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BlocksEditor\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditorDivider = styled(Divider)`\n  background: ${({ theme }) => theme.colors.neutral200};\n`;\n\nconst ExpandIconButton = styled(IconButton)`\n  position: absolute;\n  bottom: 1.2rem;\n  right: 1.2rem;\n  box-shadow: ${({ theme }) => theme.shadows.filterShadow};\n`;\n\n/**\n * Forces an update of the Slate editor when the value prop changes from outside of Slate.\n * The root cause is that Slate is not a controlled component: https://github.com/ianstormtaylor/slate/issues/4612\n * Why not use JSON.stringify(value) as the key?\n * Because it would force a rerender of the entire editor every time the user types a character.\n * Why not use the entity id as the key, since it's unique for each locale?\n * Because it would not solve the problem when using the \"fill in from other locale\" feature\n */\nfunction useResetKey(value?: Schema.Attribute.BlocksValue): {\n  key: number;\n  incrementSlateUpdatesCount: () => void;\n} {\n  // Keep track how many times Slate detected a change from a user interaction in the editor\n  const slateUpdatesCount = React.useRef(0);\n  // Keep track of how many times the value prop was updated, whether from within editor or from outside\n  const valueUpdatesCount = React.useRef(0);\n  // Use a key to force a rerender of the Slate editor when needed\n  const [key, setKey] = React.useState(0);\n\n  React.useEffect(() => {\n    valueUpdatesCount.current += 1;\n\n    // If the 2 refs are not equal, it means the value was updated from outside\n    if (valueUpdatesCount.current !== slateUpdatesCount.current) {\n      // So we change the key to force a rerender of the Slate editor,\n      // which will pick up the new value through its initialValue prop\n      setKey((previousKey) => previousKey + 1);\n\n      // Then bring the 2 refs back in sync\n      slateUpdatesCount.current = valueUpdatesCount.current;\n    }\n  }, [value]);\n\n  return { key, incrementSlateUpdatesCount: () => (slateUpdatesCount.current += 1) };\n}\n\nconst pipe =\n  (...fns: ((baseEditor: Editor) => Editor)[]) =>\n  (value: Editor) =>\n    fns.reduce<Editor>((prev, fn) => fn(prev), value);\n\ninterface BlocksEditorProps\n  extends Pick<FieldValue<Schema.Attribute.BlocksValue>, 'onChange' | 'value' | 'error'>,\n    BlocksContentProps {\n  disabled?: boolean;\n  name: string;\n}\n\nconst BlocksEditor = React.forwardRef<{ focus: () => void }, BlocksEditorProps>(\n  ({ disabled = false, name, onChange, value, error, ...contentProps }, forwardedRef) => {\n    const { formatMessage } = useIntl();\n    const [editor] = React.useState(() =>\n      pipe(withHistory, withImages, withStrapiSchema, withReact, withLinks)(createEditor())\n    );\n    const [liveText, setLiveText] = React.useState('');\n    const ariaDescriptionId = React.useId();\n    const [isExpandedMode, setIsExpandedMode] = React.useState(false);\n\n    const handleToggleExpand = () => {\n      setIsExpandedMode((prev) => !prev);\n    };\n\n    /**\n     * Editable is not able to hold the ref, https://github.com/ianstormtaylor/slate/issues/4082\n     * so with \"useImperativeHandle\" we can use ReactEditor methods to expose to the parent above\n     * also not passing forwarded ref here, gives console warning.\n     */\n    React.useImperativeHandle(\n      forwardedRef,\n      () => ({\n        focus() {\n          ReactEditor.focus(editor);\n        },\n      }),\n      [editor]\n    );\n\n    const { key, incrementSlateUpdatesCount } = useResetKey(value);\n\n    const handleSlateChange = (state: Descendant[]) => {\n      const isAstChange = editor.operations.some((op) => op.type !== 'set_selection');\n\n      if (isAstChange) {\n        incrementSlateUpdatesCount();\n\n        onChange(name, state as Schema.Attribute.BlocksValue);\n      }\n    };\n\n    const blocks: BlocksStore = {\n      ...paragraphBlocks,\n      ...headingBlocks,\n      ...listBlocks,\n      ...linkBlocks,\n      ...imageBlocks,\n      ...quoteBlocks,\n      ...codeBlocks,\n    };\n\n    return (\n      <>\n        <VisuallyHidden id={ariaDescriptionId}>\n          {formatMessage({\n            id: getTranslation('components.Blocks.dnd.instruction'),\n            defaultMessage: `To reorder blocks, press Command or Control along with Shift and the Up or Down arrow keys`,\n          })}\n        </VisuallyHidden>\n        <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n        <Slate\n          editor={editor}\n          initialValue={value || [{ type: 'paragraph', children: [{ type: 'text', text: '' }] }]}\n          onChange={handleSlateChange}\n          key={key}\n        >\n          <BlocksEditorProvider\n            blocks={blocks}\n            modifiers={modifiers}\n            disabled={disabled}\n            name={name}\n            setLiveText={setLiveText}\n            isExpandedMode={isExpandedMode}\n          >\n            <EditorLayout\n              error={error}\n              disabled={disabled}\n              onCollapse={handleToggleExpand}\n              ariaDescriptionId={ariaDescriptionId}\n            >\n              <BlocksToolbar />\n              <EditorDivider width=\"100%\" />\n              <BlocksContent {...contentProps} />\n              {!isExpandedMode && (\n                <ExpandIconButton\n                  label={formatMessage({\n                    id: getTranslation('components.Blocks.expand'),\n                    defaultMessage: 'Expand',\n                  })}\n                  onClick={handleToggleExpand}\n                >\n                  <Expand />\n                </ExpandIconButton>\n              )}\n            </EditorLayout>\n          </BlocksEditorProvider>\n        </Slate>\n      </>\n    );\n  }\n);\n\nexport {\n  type BlocksStore,\n  type SelectorBlockKey,\n  BlocksEditor,\n  BlocksEditorProvider,\n  useBlocksEditorContext,\n  isSelectorBlockKey,\n};\n","import * as React from 'react';\n\nimport { useField, type InputProps } from '@strapi/admin/strapi-admin';\nimport { Field, Flex } from '@strapi/design-system';\n\nimport { BlocksEditor } from './BlocksEditor';\n\nimport type { Schema } from '@strapi/types';\n\ninterface BlocksInputProps extends Omit<InputProps, 'type'> {\n  labelAction?: React.ReactNode;\n  type: Schema.Attribute.Blocks['type'];\n}\n\nconst BlocksInput = React.forwardRef<{ focus: () => void }, BlocksInputProps>(\n  ({ label, name, required = false, hint, labelAction, ...editorProps }, forwardedRef) => {\n    const id = React.useId();\n    const field = useField(name);\n\n    return (\n      <Field.Root id={id} name={name} hint={hint} error={field.error} required={required}>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <Field.Label action={labelAction}>{label}</Field.Label>\n          <BlocksEditor\n            name={name}\n            error={field.error}\n            ref={forwardedRef}\n            value={field.value}\n            onChange={field.onChange}\n            ariaLabelId={id}\n            {...editorProps}\n          />\n          <Field.Hint />\n          <Field.Error />\n        </Flex>\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedBlocksInput = React.memo(BlocksInput);\n\nexport { MemoizedBlocksInput as BlocksInput };\n","import * as React from 'react';\n\nimport { useField } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { PlusCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\ninterface InitializerProps {\n  disabled?: boolean;\n  name: string;\n  onClick?: React.MouseEventHandler<HTMLButtonElement> & React.MouseEventHandler<HTMLDivElement>;\n}\n\nconst Initializer = ({ disabled, name, onClick }: InitializerProps) => {\n  const { formatMessage } = useIntl();\n\n  const field = useField(name);\n\n  return (\n    <>\n      <Box\n        tag=\"button\"\n        background={disabled ? 'neutral150' : 'neutral100'}\n        borderColor={field.error ? 'danger600' : 'neutral200'}\n        hasRadius\n        disabled={disabled}\n        onClick={onClick}\n        paddingTop={9}\n        paddingBottom={9}\n        type=\"button\"\n        style={{ cursor: disabled ? 'not-allowed' : 'pointer' }}\n      >\n        <Flex direction=\"column\" gap={2}>\n          <Flex justifyContent=\"center\" color={disabled ? 'neutral500' : 'primary600'}>\n            <PlusCircle width=\"3.2rem\" height=\"3.2rem\" />\n          </Flex>\n          <Flex justifyContent=\"center\">\n            <Typography\n              textColor={disabled ? 'neutral600' : 'primary600'}\n              variant=\"pi\"\n              fontWeight=\"bold\"\n            >\n              {formatMessage({\n                id: getTranslation('components.empty-repeatable'),\n                defaultMessage: 'No entry yet. Click to add one.',\n              })}\n            </Typography>\n          </Flex>\n        </Flex>\n      </Box>\n    </>\n  );\n};\n\nexport { Initializer };\nexport type { InitializerProps };\n","import * as React from 'react';\n\nimport { Button, Flex, Typography, TypographyComponent } from '@strapi/design-system';\nimport { PlusCircle } from '@strapi/icons';\nimport { styled } from 'styled-components';\n\ninterface AddComponentButtonProps {\n  children: React.ReactNode;\n  hasError?: boolean;\n  isDisabled?: boolean;\n  isOpen?: boolean;\n  onClick: React.MouseEventHandler<HTMLButtonElement> & React.MouseEventHandler<HTMLDivElement>;\n}\n\nconst AddComponentButton = ({\n  hasError,\n  isDisabled,\n  isOpen,\n  children,\n  onClick,\n}: AddComponentButtonProps) => {\n  return (\n    <StyledButton\n      type=\"button\"\n      onClick={onClick}\n      disabled={isDisabled}\n      background=\"neutral0\"\n      style={{ cursor: isDisabled ? 'not-allowed' : 'pointer' }}\n      variant=\"tertiary\"\n    >\n      <Flex tag=\"span\" gap={2}>\n        <StyledAddIcon aria-hidden $isOpen={isOpen} $hasError={hasError && !isOpen} />\n        <Typography\n          variant=\"pi\"\n          fontWeight=\"bold\"\n          textColor={hasError && !isOpen ? 'danger600' : 'neutral600'}\n        >\n          {children}\n        </Typography>\n      </Flex>\n    </StyledButton>\n  );\n};\n\nconst StyledAddIcon = styled(PlusCircle)<{ $isOpen?: boolean; $hasError?: boolean }>`\n  height: ${({ theme }) => theme.spaces[6]};\n  width: ${({ theme }) => theme.spaces[6]};\n  transform: ${({ $isOpen }) => ($isOpen ? 'rotate(45deg)' : 'rotate(0deg)')};\n\n  > circle {\n    fill: ${({ theme, $hasError }) =>\n      $hasError ? theme.colors.danger200 : theme.colors.neutral150};\n  }\n  > path {\n    fill: ${({ theme, $hasError }) =>\n      $hasError ? theme.colors.danger600 : theme.colors.neutral500};\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  padding-left: ${({ theme }) => theme.spaces[3]};\n  border-radius: 26px;\n  box-shadow: ${({ theme }) => theme.shadows.filterShadow};\n  height: 5rem;\n`;\n\nexport { AddComponentButton };\nexport type { AddComponentButtonProps };\n","import * as React from 'react';\n\nimport { Accordion, Box, Flex, FlexComponent, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ComponentIcon } from '../../../../../components/ComponentIcon';\nimport { RESPONSIVE_CONTAINER_BREAKPOINTS } from '../../FormLayout';\n\ninterface ComponentCategoryProps {\n  category: string;\n  components?: Array<{\n    uid: string;\n    displayName: string;\n    icon?: string;\n  }>;\n  onAddComponent: (\n    componentUid: string\n  ) => React.MouseEventHandler<HTMLButtonElement> & React.MouseEventHandler<HTMLDivElement>;\n  variant?: Accordion.Variant;\n}\n\nconst ComponentCategory = ({\n  category,\n  components = [],\n  variant = 'primary',\n  onAddComponent,\n}: ComponentCategoryProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Accordion.Item value={category}>\n      <Accordion.Header variant={variant}>\n        <Accordion.Trigger>\n          {formatMessage({ id: category, defaultMessage: category })}\n        </Accordion.Trigger>\n      </Accordion.Header>\n      <ResponsiveAccordionContent>\n        <Grid paddingTop={4} paddingBottom={4} paddingLeft={3} paddingRight={3}>\n          {components.map(({ uid, displayName, icon }) => (\n            <ComponentBox\n              key={uid}\n              tag=\"button\"\n              type=\"button\"\n              background=\"neutral100\"\n              justifyContent=\"center\"\n              onClick={onAddComponent(uid)}\n              hasRadius\n              height=\"8.4rem\"\n              shrink={0}\n              borderColor=\"neutral200\"\n            >\n              <Flex direction=\"column\" gap={1} alignItems=\"center\" justifyContent=\"center\">\n                <ComponentIcon color=\"currentColor\" background=\"primary200\" icon={icon} />\n\n                <Typography variant=\"pi\" fontWeight=\"bold\">\n                  {displayName}\n                </Typography>\n              </Flex>\n            </ComponentBox>\n          ))}\n        </Grid>\n      </ResponsiveAccordionContent>\n    </Accordion.Item>\n  );\n};\n\nconst ResponsiveAccordionContent = styled(Accordion.Content)`\n  container-type: inline-size;\n`;\n\nconst Grid = styled(Box)`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, 100%);\n  grid-gap: ${({ theme }) => theme.spaces[1]};\n\n  @container (min-width: ${() => RESPONSIVE_CONTAINER_BREAKPOINTS.sm}) {\n    grid-template-columns: repeat(auto-fill, 14rem);\n  }\n`;\n\nconst ComponentBox = styled<FlexComponent<'button'>>(Flex)`\n  color: ${({ theme }) => theme.colors.neutral600};\n  cursor: pointer;\n\n  @media (prefers-reduced-motion: no-preference) {\n    transition: color 120ms ${(props) => props.theme.motion.easings.easeOutQuad};\n  }\n\n  &:focus,\n  &:hover {\n    border: 1px solid ${({ theme }) => theme.colors.primary200};\n    background: ${({ theme }) => theme.colors.primary100};\n    color: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nexport { ComponentCategory };\nexport type { ComponentCategoryProps };\n","import * as React from 'react';\n\nimport { Box, Flex, Accordion, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTranslation } from '../../../../../utils/translations';\n\nimport { ComponentCategory, ComponentCategoryProps } from './ComponentCategory';\n\ninterface ComponentPickerProps {\n  dynamicComponentsByCategory?: Record<string, NonNullable<ComponentCategoryProps['components']>>;\n  isOpen?: boolean;\n  onClickAddComponent: (componentUid: string) => void;\n}\n\nconst ComponentPicker = ({\n  dynamicComponentsByCategory = {},\n  isOpen,\n  onClickAddComponent,\n}: ComponentPickerProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleAddComponentToDz = (componentUid: string) => () => {\n    onClickAddComponent(componentUid);\n  };\n\n  if (!isOpen) {\n    return null;\n  }\n\n  return (\n    <Box\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={5}\n      paddingRight={5}\n      background=\"neutral0\"\n      shadow=\"tableShadow\"\n      borderColor=\"neutral150\"\n      hasRadius\n    >\n      <Flex justifyContent=\"center\">\n        <Typography fontWeight=\"bold\" textColor=\"neutral600\">\n          {formatMessage({\n            id: getTranslation('components.DynamicZone.ComponentPicker-label'),\n            defaultMessage: 'Pick one component',\n          })}\n        </Typography>\n      </Flex>\n      <Box paddingTop={2}>\n        <Accordion.Root defaultValue={Object.keys(dynamicComponentsByCategory)[0]}>\n          {Object.entries(dynamicComponentsByCategory).map(([category, components], index) => (\n            <ComponentCategory\n              key={category}\n              category={category}\n              components={components}\n              onAddComponent={handleAddComponentToDz}\n              variant={index % 2 === 1 ? 'primary' : 'secondary'}\n            />\n          ))}\n        </Accordion.Root>\n      </Box>\n    </Box>\n  );\n};\n\nexport { ComponentPicker };\nexport type { ComponentPickerProps };\n","import * as React from 'react';\n\nimport { useForm, useField } from '@strapi/admin/strapi-admin';\nimport {\n  Accordion,\n  Box,\n  Flex,\n  Grid,\n  IconButton,\n  useComposedRefs,\n  Menu,\n  MenuItem,\n  BoxComponent,\n} from '@strapi/design-system';\nimport { Drag, More, Trash } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { COMPONENT_ICONS } from '../../../../../components/ComponentIcon';\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDocLayout } from '../../../../../hooks/useDocumentLayout';\nimport { type UseDragAndDropOptions, useDragAndDrop } from '../../../../../hooks/useDragAndDrop';\nimport { getIn } from '../../../../../utils/objects';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { ResponsiveGridItem, ResponsiveGridRoot } from '../../FormLayout';\nimport { InputRenderer, type InputRendererProps } from '../../InputRenderer';\n\nimport type { ComponentPickerProps } from './ComponentPicker';\n\ninterface DynamicComponentProps\n  extends Pick<UseDragAndDropOptions, 'onGrabItem' | 'onDropItem' | 'onCancel'>,\n    Pick<ComponentPickerProps, 'dynamicComponentsByCategory'> {\n  componentUid: string;\n  disabled?: boolean;\n  index: number;\n  name: string;\n  onAddComponent: (componentUid: string, index: number) => void;\n  onRemoveComponentClick: () => void;\n  onMoveComponent: (dragIndex: number, hoverIndex: number) => void;\n  children?: (props: InputRendererProps) => React.ReactNode;\n}\n\nconst DynamicComponent = ({\n  componentUid,\n  disabled,\n  index,\n  name,\n  onRemoveComponentClick,\n  onMoveComponent,\n  onGrabItem,\n  onDropItem,\n  onCancel,\n  dynamicComponentsByCategory = {},\n  onAddComponent,\n  children,\n}: DynamicComponentProps) => {\n  const { formatMessage } = useIntl();\n  const formValues = useForm('DynamicComponent', (state) => state.values);\n  const {\n    edit: { components },\n  } = useDocLayout();\n\n  const title = React.useMemo(() => {\n    const { mainField } = components[componentUid]?.settings ?? { mainField: 'id' };\n\n    const mainFieldValue = getIn(formValues, `${name}.${index}.${mainField}`);\n\n    const displayedValue =\n      mainField === 'id' || !mainFieldValue ? '' : String(mainFieldValue).trim();\n\n    const mainValue = displayedValue.length > 0 ? `- ${displayedValue}` : displayedValue;\n\n    return mainValue;\n  }, [componentUid, components, formValues, name, index]);\n\n  const { icon, displayName } = React.useMemo(() => {\n    const [category] = componentUid.split('.');\n    const { icon, displayName } = (dynamicComponentsByCategory[category] ?? []).find(\n      (component) => component.uid === componentUid\n    ) ?? { icon: null, displayName: null };\n\n    return { icon, displayName };\n  }, [componentUid, dynamicComponentsByCategory]);\n\n  const [{ handlerId, isDragging, handleKeyDown }, boxRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(!disabled, {\n      type: `${ItemTypes.DYNAMIC_ZONE}_${name}`,\n      index,\n      item: {\n        index,\n        displayedValue: `${displayName} ${title}`,\n        icon,\n      },\n      onMoveItem: onMoveComponent,\n      onDropItem,\n      onGrabItem,\n      onCancel,\n    });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  /**\n   * We don't need the accordion's to communicate with each other,\n   * so a unique value for their state is enough.\n   */\n  const accordionValue = React.useId();\n\n  const { value = [], rawError } = useField(`${name}.${index}`);\n\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string>('');\n\n  React.useEffect(() => {\n    if (rawError && value) {\n      setCollapseToOpen(accordionValue);\n    }\n  }, [rawError, value, accordionValue]);\n\n  const composedBoxRefs = useComposedRefs(boxRef, dropRef);\n\n  const accordionActions = disabled ? null : (\n    <>\n      <IconButton\n        variant=\"ghost\"\n        label={formatMessage(\n          {\n            id: getTranslation('components.DynamicZone.delete-label'),\n            defaultMessage: 'Delete {name}',\n          },\n          { name: title }\n        )}\n        onClick={onRemoveComponentClick}\n      >\n        <Trash />\n      </IconButton>\n      <IconButton\n        variant=\"ghost\"\n        onClick={(e) => e.stopPropagation()}\n        data-handler-id={handlerId}\n        ref={dragRef}\n        label={formatMessage({\n          id: getTranslation('components.DragHandle-label'),\n          defaultMessage: 'Drag',\n        })}\n        onKeyDown={handleKeyDown}\n      >\n        <Drag />\n      </IconButton>\n      <Menu.Root>\n        <Menu.Trigger size=\"S\" endIcon={null} paddingLeft={0} paddingRight={0}>\n          <IconButton\n            variant=\"ghost\"\n            label={formatMessage({\n              id: getTranslation('components.DynamicZone.more-actions'),\n              defaultMessage: 'More actions',\n            })}\n            tag=\"span\"\n          >\n            <More aria-hidden focusable={false} />\n          </IconButton>\n        </Menu.Trigger>\n        <Menu.Content>\n          <Menu.SubRoot>\n            <Menu.SubTrigger>\n              {formatMessage({\n                id: getTranslation('components.DynamicZone.add-item-above'),\n                defaultMessage: 'Add component above',\n              })}\n            </Menu.SubTrigger>\n            <Menu.SubContent>\n              {Object.entries(dynamicComponentsByCategory).map(([category, components]) => (\n                <React.Fragment key={category}>\n                  <Menu.Label>{category}</Menu.Label>\n                  {components.map(({ displayName, uid }) => (\n                    <MenuItem key={componentUid} onSelect={() => onAddComponent(uid, index)}>\n                      {displayName}\n                    </MenuItem>\n                  ))}\n                </React.Fragment>\n              ))}\n            </Menu.SubContent>\n          </Menu.SubRoot>\n          <Menu.SubRoot>\n            <Menu.SubTrigger>\n              {formatMessage({\n                id: getTranslation('components.DynamicZone.add-item-below'),\n                defaultMessage: 'Add component below',\n              })}\n            </Menu.SubTrigger>\n            <Menu.SubContent>\n              {Object.entries(dynamicComponentsByCategory).map(([category, components]) => (\n                <React.Fragment key={category}>\n                  <Menu.Label>{category}</Menu.Label>\n                  {components.map(({ displayName, uid }) => (\n                    <MenuItem key={componentUid} onSelect={() => onAddComponent(uid, index + 1)}>\n                      {displayName}\n                    </MenuItem>\n                  ))}\n                </React.Fragment>\n              ))}\n            </Menu.SubContent>\n          </Menu.SubRoot>\n        </Menu.Content>\n      </Menu.Root>\n    </>\n  );\n\n  const accordionTitle = title ? `${displayName} ${title}` : displayName;\n\n  return (\n    <ComponentContainer tag=\"li\" width=\"100%\">\n      <Flex justifyContent=\"center\">\n        <Rectangle background=\"neutral200\" />\n      </Flex>\n      <StyledBox ref={composedBoxRefs} hasRadius>\n        {isDragging ? (\n          <Preview />\n        ) : (\n          <Accordion.Root value={collapseToOpen} onValueChange={setCollapseToOpen}>\n            <Accordion.Item value={accordionValue}>\n              <Accordion.Header>\n                <Accordion.Trigger\n                  icon={\n                    icon && COMPONENT_ICONS[icon]\n                      ? COMPONENT_ICONS[icon]\n                      : COMPONENT_ICONS.dashboard\n                  }\n                >\n                  {accordionTitle}\n                </Accordion.Trigger>\n                <Accordion.Actions>{accordionActions}</Accordion.Actions>\n              </Accordion.Header>\n              <Accordion.Content>\n                <AccordionContentRadius background=\"neutral0\">\n                  <Box paddingLeft={6} paddingRight={6} paddingTop={6} paddingBottom={6}>\n                    <Grid.Root gap={4}>\n                      {components[componentUid]?.layout?.map((row, rowInd) => (\n                        <Grid.Item\n                          col={12}\n                          key={rowInd}\n                          s={12}\n                          xs={12}\n                          direction=\"column\"\n                          alignItems=\"stretch\"\n                        >\n                          <ResponsiveGridRoot gap={4}>\n                            {row.map(({ size, ...field }) => {\n                              const fieldName = `${name}.${index}.${field.name}`;\n\n                              const fieldWithTranslatedLabel = {\n                                ...field,\n                                label: formatMessage({\n                                  id: `content-manager.components.${componentUid}.${field.name}`,\n                                  defaultMessage: field.label,\n                                }),\n                              };\n\n                              return (\n                                <ResponsiveGridItem\n                                  col={size}\n                                  key={fieldName}\n                                  s={12}\n                                  xs={12}\n                                  direction=\"column\"\n                                  alignItems=\"stretch\"\n                                >\n                                  {children ? (\n                                    children({ ...fieldWithTranslatedLabel, name: fieldName })\n                                  ) : (\n                                    <InputRenderer {...fieldWithTranslatedLabel} name={fieldName} />\n                                  )}\n                                </ResponsiveGridItem>\n                              );\n                            })}\n                          </ResponsiveGridRoot>\n                        </Grid.Item>\n                      ))}\n                    </Grid.Root>\n                  </Box>\n                </AccordionContentRadius>\n              </Accordion.Content>\n            </Accordion.Item>\n          </Accordion.Root>\n        )}\n      </StyledBox>\n    </ComponentContainer>\n  );\n};\n\n// TODO: Delete once https://github.com/strapi/design-system/pull/858\n// is merged and released.\nconst StyledBox = styled<BoxComponent>(Box)`\n  > div:first-child {\n    box-shadow: ${({ theme }) => theme.shadows.tableShadow};\n  }\n`;\n\nconst AccordionContentRadius = styled<BoxComponent>(Box)`\n  border-radius: 0 0 ${({ theme }) => theme.spaces[1]} ${({ theme }) => theme.spaces[1]};\n`;\n\nconst Rectangle = styled<BoxComponent>(Box)`\n  width: ${({ theme }) => theme.spaces[2]};\n  height: ${({ theme }) => theme.spaces[4]};\n`;\n\nconst Preview = styled.span`\n  display: block;\n  background-color: ${({ theme }) => theme.colors.primary100};\n  outline: 1px dashed ${({ theme }) => theme.colors.primary500};\n  outline-offset: -1px;\n  padding: ${({ theme }) => theme.spaces[6]};\n`;\n\nconst ComponentContainer = styled<BoxComponent<'li'>>(Box)`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nexport { DynamicComponent };\nexport type { DynamicComponentProps };\n","import * as React from 'react';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\n\ninterface DynamicZoneLabelProps {\n  label?: React.ReactNode;\n  labelAction?: React.ReactNode;\n  name: string;\n  numberOfComponents?: number;\n  required?: boolean;\n  hint?: React.ReactNode;\n}\n\nconst DynamicZoneLabel = ({\n  hint,\n  label,\n  labelAction,\n  name,\n  numberOfComponents = 0,\n  required,\n}: DynamicZoneLabelProps) => {\n  return (\n    <Flex justifyContent=\"center\">\n      <Box\n        paddingTop={3}\n        paddingBottom={3}\n        paddingRight={4}\n        paddingLeft={4}\n        borderRadius=\"26px\"\n        background=\"neutral0\"\n        shadow=\"filterShadow\"\n        color=\"neutral500\"\n      >\n        <Flex direction=\"column\" justifyContent=\"center\">\n          <Flex maxWidth=\"35.6rem\">\n            <Typography variant=\"pi\" textColor=\"neutral600\" fontWeight=\"bold\" ellipsis>\n              {label || name}&nbsp;\n            </Typography>\n            <Typography variant=\"pi\" textColor=\"neutral600\" fontWeight=\"bold\">\n              ({numberOfComponents})\n            </Typography>\n            {required && <Typography textColor=\"danger600\">*</Typography>}\n            {labelAction && <Box paddingLeft={1}>{labelAction}</Box>}\n          </Flex>\n          {hint && (\n            <Box paddingTop={1} maxWidth=\"35.6rem\">\n              <Typography variant=\"pi\" textColor=\"neutral600\" ellipsis>\n                {hint}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n\nexport { DynamicZoneLabel };\nexport type { DynamicZoneLabelProps };\n","import * as React from 'react';\n\nimport {\n  createContext,\n  InputProps,\n  useField,\n  useForm,\n  useNotification,\n} from '@strapi/admin/strapi-admin';\nimport { Box, Flex, VisuallyHidden } from '@strapi/design-system';\nimport pipe from 'lodash/fp/pipe';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../../hooks/useDocument';\nimport { type EditFieldLayout } from '../../../../../hooks/useDocumentLayout';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { transformDocument } from '../../../utils/data';\nimport { createDefaultForm } from '../../../utils/forms';\nimport { ComponentProvider, useComponent } from '../ComponentContext';\n\nimport { AddComponentButton } from './AddComponentButton';\nimport { ComponentPicker } from './ComponentPicker';\nimport { DynamicComponent, DynamicComponentProps } from './DynamicComponent';\nimport { DynamicZoneLabel, DynamicZoneLabelProps } from './DynamicZoneLabel';\n\nimport type { InputRendererProps } from '../../InputRenderer';\nimport type { Schema } from '@strapi/types';\n\ninterface DynamicZoneContextValue {\n  isInDynamicZone: boolean;\n}\n\nconst [DynamicZoneProvider, useDynamicZone] = createContext<DynamicZoneContextValue>(\n  'DynamicZone',\n  {\n    isInDynamicZone: false,\n  }\n);\n\ninterface DynamicZoneProps\n  extends Omit<Extract<EditFieldLayout, { type: 'dynamiczone' }>, 'size' | 'hint'>,\n    Pick<InputProps, 'hint'>,\n    Pick<DynamicZoneLabelProps, 'labelAction'> {\n  children?: (props: InputRendererProps) => React.ReactNode;\n}\n\nconst DynamicZone = ({\n  attribute,\n  disabled: disabledProp,\n  hint,\n  label,\n  labelAction,\n  name,\n  required = false,\n  children,\n}: DynamicZoneProps) => {\n  // We cannot use the default props here\n  const { max = Infinity, min = -Infinity } = attribute ?? {};\n\n  const [addComponentIsOpen, setAddComponentIsOpen] = React.useState(false);\n  const [liveText, setLiveText] = React.useState('');\n  const { components, isLoading } = useDoc();\n  const disabled = disabledProp || isLoading;\n  const { addFieldRow, removeFieldRow, moveFieldRow } = useForm(\n    'DynamicZone',\n    ({ addFieldRow, removeFieldRow, moveFieldRow }) => ({\n      addFieldRow,\n      removeFieldRow,\n      moveFieldRow,\n    })\n  );\n\n  type DzWithTempKey =\n    Schema.Attribute.GetDynamicZoneValue<Schema.Attribute.DynamicZone>[number] & {\n      __temp_key__: number;\n    };\n\n  const { value = [], error } = useField<Array<DzWithTempKey>>(name);\n\n  const dynamicComponentsByCategory = React.useMemo(() => {\n    return attribute.components.reduce<\n      NonNullable<DynamicComponentProps['dynamicComponentsByCategory']>\n    >((acc, componentUid) => {\n      const { category, info } = components[componentUid] ?? { info: {} };\n\n      const component = { uid: componentUid, displayName: info.displayName, icon: info.icon };\n\n      if (!acc[category]) {\n        acc[category] = [];\n      }\n\n      acc[category] = [...acc[category], component];\n\n      return acc;\n    }, {});\n  }, [attribute.components, components]);\n\n  const { formatMessage } = useIntl();\n\n  const { toggleNotification } = useNotification();\n\n  const dynamicDisplayedComponentsLength = value.length;\n\n  const handleAddComponent = (uid: string, position?: number) => {\n    setAddComponentIsOpen(false);\n\n    const schema = components[uid];\n    const form = createDefaultForm(schema, components);\n    const transformations = pipe(transformDocument(schema, components), (data) => ({\n      ...data,\n      __component: uid,\n    }));\n\n    const data = transformations(form);\n\n    addFieldRow(name, data, position);\n  };\n\n  const handleClickOpenPicker = () => {\n    if (dynamicDisplayedComponentsLength < max) {\n      setAddComponentIsOpen((prev) => !prev);\n    } else {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({\n          id: getTranslation('components.notification.info.maximum-requirement'),\n        }),\n      });\n    }\n  };\n\n  const handleMoveComponent = (newIndex: number, currentIndex: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.reorder'),\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: `${name}.${currentIndex}`,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    moveFieldRow(name, currentIndex, newIndex);\n  };\n\n  const getItemPos = (index: number) => `${index + 1} of ${value.length}`;\n\n  const handleCancel = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.cancel-item'),\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: `${name}.${index}`,\n        }\n      )\n    );\n  };\n\n  const handleGrabItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.grab-item'),\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.drop-item'),\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleRemoveComponent = (name: string, currentIndex: number) => () => {\n    removeFieldRow(name, currentIndex);\n  };\n\n  const hasError = error !== undefined;\n\n  const renderButtonLabel = () => {\n    if (addComponentIsOpen) {\n      return formatMessage({ id: 'app.utils.close-label', defaultMessage: 'Close' });\n    }\n\n    if (hasError && dynamicDisplayedComponentsLength > max) {\n      return formatMessage(\n        {\n          id: getTranslation(`components.DynamicZone.extra-components`),\n          defaultMessage:\n            'There {number, plural, =0 {are # extra components} one {is # extra component} other {are # extra components}}',\n        },\n        {\n          number: dynamicDisplayedComponentsLength - max,\n        }\n      );\n    }\n\n    if (hasError && dynamicDisplayedComponentsLength < min) {\n      return formatMessage(\n        {\n          id: getTranslation(`components.DynamicZone.missing-components`),\n          defaultMessage:\n            'There {number, plural, =0 {are # missing components} one {is # missing component} other {are # missing components}}',\n        },\n        { number: min - dynamicDisplayedComponentsLength }\n      );\n    }\n\n    return formatMessage(\n      {\n        id: getTranslation('components.DynamicZone.add-component'),\n        defaultMessage: 'Add a component to {componentName}',\n      },\n      { componentName: label || name }\n    );\n  };\n\n  const level = useComponent('DynamicZone', (state) => state.level);\n\n  const ariaDescriptionId = React.useId();\n\n  return (\n    <DynamicZoneProvider isInDynamicZone>\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n        {dynamicDisplayedComponentsLength > 0 && (\n          <Box>\n            <DynamicZoneLabel\n              hint={hint}\n              label={label}\n              labelAction={labelAction}\n              name={name}\n              numberOfComponents={dynamicDisplayedComponentsLength}\n              required={required}\n            />\n            <VisuallyHidden id={ariaDescriptionId}>\n              {formatMessage({\n                id: getTranslation('dnd.instructions'),\n                defaultMessage: `Press spacebar to grab and re-order`,\n              })}\n            </VisuallyHidden>\n            <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n            <ol aria-describedby={ariaDescriptionId}>\n              {value.map((field, index) => (\n                <ComponentProvider\n                  key={field.__temp_key__}\n                  level={level + 1}\n                  uid={field.__component}\n                  // id is always a number in a dynamic zone.\n                  id={field.id as number}\n                  type=\"dynamiczone\"\n                >\n                  <DynamicComponent\n                    disabled={disabled}\n                    name={name}\n                    index={index}\n                    componentUid={field.__component}\n                    onMoveComponent={handleMoveComponent}\n                    onRemoveComponentClick={handleRemoveComponent(name, index)}\n                    onCancel={handleCancel}\n                    onDropItem={handleDropItem}\n                    onGrabItem={handleGrabItem}\n                    onAddComponent={handleAddComponent}\n                    dynamicComponentsByCategory={dynamicComponentsByCategory}\n                  >\n                    {children}\n                  </DynamicComponent>\n                </ComponentProvider>\n              ))}\n            </ol>\n          </Box>\n        )}\n        <Flex justifyContent=\"center\">\n          <AddComponentButton\n            hasError={hasError}\n            isDisabled={disabled}\n            isOpen={addComponentIsOpen}\n            onClick={handleClickOpenPicker}\n          >\n            {renderButtonLabel()}\n          </AddComponentButton>\n        </Flex>\n        <ComponentPicker\n          dynamicComponentsByCategory={dynamicComponentsByCategory}\n          isOpen={addComponentIsOpen}\n          onClickAddComponent={handleAddComponent}\n        />\n      </Flex>\n    </DynamicZoneProvider>\n  );\n};\n\nexport { DynamicZone, useDynamicZone };\nexport type { DynamicZoneProps };\n","import { Field, TextInput } from '@strapi/design-system';\nimport { EyeStriked } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport type { InputProps } from '@strapi/admin/strapi-admin';\nimport type { Schema } from '@strapi/types';\n\ninterface NotAllowedInputProps extends Omit<InputProps, 'type'> {\n  type: Schema.Attribute.Kind;\n}\n\nconst NotAllowedInput = ({ hint, label, required, name }: NotAllowedInputProps) => {\n  const { formatMessage } = useIntl();\n\n  const placeholder = formatMessage({\n    id: 'components.NotAllowedInput.text',\n    defaultMessage: 'No permissions to see this field',\n  });\n\n  return (\n    <Field.Root id={name} hint={hint} name={name} required={required}>\n      <Field.Label>{label}</Field.Label>\n      <TextInput\n        disabled\n        placeholder={placeholder}\n        startAction={<EyeStriked fill=\"neutral600\" />}\n        type=\"text\"\n        value=\"\"\n      />\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nexport { NotAllowedInput };\n","/**\n * Related to the InputUID component, not the UIDs of content-types.\n */\n\nimport { GenerateUID, CheckUIDAvailability } from '../../../shared/contracts/uid';\n\nimport { contentManagerApi } from './api';\n\nconst uidApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getDefaultUID: builder.query<\n      GenerateUID.Response['data'],\n      GenerateUID.Request['body'] & {\n        params: GenerateUID.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => {\n        return {\n          url: '/content-manager/uid/generate',\n          method: 'POST',\n          data,\n          config: {\n            params,\n          },\n        };\n      },\n      transformResponse: (response: GenerateUID.Response) => response.data,\n    }),\n    generateUID: builder.mutation<\n      GenerateUID.Response['data'],\n      GenerateUID.Request['body'] & {\n        params: GenerateUID.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => ({\n        url: '/content-manager/uid/generate',\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: GenerateUID.Response) => response.data,\n    }),\n    getAvailability: builder.query<\n      CheckUIDAvailability.Response,\n      CheckUIDAvailability.Request['body'] & {\n        params: CheckUIDAvailability.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => ({\n        url: '/content-manager/uid/check-availability',\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      providesTags: (_res, _error, params) => [\n        { type: 'UidAvailability', id: params.contentTypeUID },\n      ],\n    }),\n  }),\n});\n\nconst { useGenerateUIDMutation, useGetDefaultUIDQuery, useGetAvailabilityQuery } = uidApi;\n\nexport { useGenerateUIDMutation, useGetDefaultUIDQuery, useGetAvailabilityQuery };\n","import * as React from 'react';\n\nimport {\n  type InputProps,\n  useField,\n  useForm,\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n  useFocusInputField,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Field,\n  Flex,\n  FlexComponent,\n  TextInput,\n  Typography,\n  useComposedRefs,\n} from '@strapi/design-system';\nimport { CheckCircle, WarningCircle, Loader, ArrowClockwise } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMatch } from 'react-router-dom';\nimport { styled, keyframes } from 'styled-components';\n\nimport { useDebounce } from '../../../../hooks/useDebounce';\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { CLONE_PATH } from '../../../../router';\nimport {\n  useGenerateUIDMutation,\n  useGetAvailabilityQuery,\n  useGetDefaultUIDQuery,\n} from '../../../../services/uid';\nimport { buildValidParams } from '../../../../utils/api';\n\nimport type { CheckUIDAvailability } from '../../../../../../shared/contracts/uid';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * InputUID\n * -----------------------------------------------------------------------------------------------*/\n\nconst UID_REGEX = /^[A-Za-z0-9-_.~]*$/;\n\ninterface UIDInputProps extends Omit<InputProps, 'type'> {\n  type: Schema.Attribute.TypeOf<Schema.Attribute.UID>;\n}\n\nconst UIDInput = React.forwardRef<any, UIDInputProps>(\n  ({ hint, label, labelAction, name, required, ...props }, ref) => {\n    const { model, id } = useDoc();\n    const allFormValues = useForm('InputUID', (form) => form.values);\n    const [availability, setAvailability] = React.useState<CheckUIDAvailability.Response>();\n    const [showRegenerate, setShowRegenerate] = React.useState(false);\n    const isCloning = useMatch(CLONE_PATH) !== null;\n    const field = useField(name);\n    const debouncedValue = useDebounce(field.value, 300);\n    const hasChanged = debouncedValue !== field.initialValue;\n    const { toggleNotification } = useNotification();\n    const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n    const { formatMessage } = useIntl();\n    const [{ query }] = useQueryParams();\n    const params = React.useMemo(() => buildValidParams(query), [query]);\n\n    const {\n      data: defaultGeneratedUID,\n      isLoading: isGeneratingDefaultUID,\n      error: apiError,\n    } = useGetDefaultUIDQuery(\n      {\n        contentTypeUID: model,\n        field: name,\n        data: {\n          id: id ?? '',\n          ...allFormValues,\n        },\n        params,\n      },\n      {\n        skip: field.value || !required,\n      }\n    );\n\n    React.useEffect(() => {\n      if (apiError) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(apiError),\n        });\n      }\n    }, [apiError, formatAPIError, toggleNotification]);\n\n    /**\n     * If the defaultGeneratedUID is available, then we set it as the value,\n     * but we also want to set it as the initialValue too.\n     */\n    React.useEffect(() => {\n      if (defaultGeneratedUID && field.value === undefined) {\n        field.onChange(name, defaultGeneratedUID);\n      }\n    }, [defaultGeneratedUID, field, name]);\n\n    const [generateUID, { isLoading: isGeneratingUID }] = useGenerateUIDMutation();\n\n    const handleRegenerateClick = async () => {\n      try {\n        const res = await generateUID({\n          contentTypeUID: model,\n          field: name,\n          data: { id: id ?? '', ...allFormValues },\n          params,\n        });\n\n        if ('data' in res) {\n          field.onChange(name, res.data);\n        } else {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n        }\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({\n            id: 'notification.error',\n            defaultMessage: 'An error occurred.',\n          }),\n        });\n      }\n    };\n\n    const {\n      data: availabilityData,\n      isLoading: isCheckingAvailability,\n      error: availabilityError,\n    } = useGetAvailabilityQuery(\n      {\n        contentTypeUID: model,\n        field: name,\n        value: debouncedValue ? debouncedValue.trim() : '',\n        params,\n      },\n      {\n        // Don't check availability if the value is empty or wasn't changed\n        skip: !Boolean(\n          (hasChanged || isCloning) && debouncedValue && UID_REGEX.test(debouncedValue.trim())\n        ),\n      }\n    );\n\n    React.useEffect(() => {\n      if (availabilityError) {\n        toggleNotification({\n          type: 'warning',\n          message: formatAPIError(availabilityError),\n        });\n      }\n    }, [availabilityError, formatAPIError, toggleNotification]);\n\n    React.useEffect(() => {\n      /**\n       * always store the data in state because that way as seen below\n       * we can then remove the data to stop showing the label.\n       */\n      setAvailability(availabilityData);\n\n      let timer: number;\n\n      if (availabilityData?.isAvailable) {\n        timer = window.setTimeout(() => {\n          setAvailability(undefined);\n        }, 4000);\n      }\n\n      return () => {\n        if (timer) {\n          clearTimeout(timer);\n        }\n      };\n    }, [availabilityData]);\n\n    const isLoading = isGeneratingDefaultUID || isGeneratingUID || isCheckingAvailability;\n\n    const fieldRef = useFocusInputField(name);\n    const composedRefs = useComposedRefs(ref, fieldRef);\n\n    const shouldShowAvailability =\n      (hasChanged || isCloning) && debouncedValue != null && availability && !showRegenerate;\n\n    return (\n      <Field.Root hint={hint} name={name} error={field.error} required={required}>\n        <Field.Label action={labelAction}>{label}</Field.Label>\n        <TextInput\n          ref={composedRefs}\n          disabled={props.disabled}\n          endAction={\n            <Flex position=\"relative\" gap={1}>\n              {shouldShowAvailability && (\n                <TextValidation\n                  alignItems=\"center\"\n                  gap={1}\n                  justifyContent=\"flex-end\"\n                  $available={!!availability?.isAvailable}\n                  data-not-here-outer\n                  position=\"absolute\"\n                  pointerEvents=\"none\"\n                  right={6}\n                  width=\"100px\"\n                >\n                  {availability?.isAvailable ? <CheckCircle /> : <WarningCircle />}\n\n                  <Typography\n                    textColor={availability.isAvailable ? 'success600' : 'danger600'}\n                    variant=\"pi\"\n                  >\n                    {formatMessage(\n                      availability.isAvailable\n                        ? {\n                            id: 'content-manager.components.uid.available',\n                            defaultMessage: 'Available',\n                          }\n                        : {\n                            id: 'content-manager.components.uid.unavailable',\n                            defaultMessage: 'Unavailable',\n                          }\n                    )}\n                  </Typography>\n                </TextValidation>\n              )}\n\n              {!props.disabled && (\n                <>\n                  {showRegenerate && (\n                    <TextValidation alignItems=\"center\" justifyContent=\"flex-end\" gap={1}>\n                      <Typography textColor=\"primary600\" variant=\"pi\">\n                        {formatMessage({\n                          id: 'content-manager.components.uid.regenerate',\n                          defaultMessage: 'Regenerate',\n                        })}\n                      </Typography>\n                    </TextValidation>\n                  )}\n\n                  <FieldActionWrapper\n                    onClick={handleRegenerateClick}\n                    label={formatMessage({\n                      id: 'content-manager.components.uid.regenerate',\n                      defaultMessage: 'Regenerate',\n                    })}\n                    onMouseEnter={() => setShowRegenerate(true)}\n                    onMouseLeave={() => setShowRegenerate(false)}\n                  >\n                    {isLoading ? (\n                      <LoadingWrapper data-testid=\"loading-wrapper\">\n                        <Loader />\n                      </LoadingWrapper>\n                    ) : (\n                      <ArrowClockwise />\n                    )}\n                  </FieldActionWrapper>\n                </>\n              )}\n            </Flex>\n          }\n          onChange={field.onChange}\n          value={field.value ?? ''}\n          {...props}\n        />\n        <Field.Error />\n        <Field.Hint />\n      </Field.Root>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * FieldActionWrapper\n * -----------------------------------------------------------------------------------------------*/\n\nconst FieldActionWrapper = styled(Field.Action)`\n  width: 1.6rem;\n\n  svg {\n    height: 1.6rem;\n    width: 1.6rem;\n    path {\n      fill: ${({ theme }) => theme.colors.neutral400};\n    }\n  }\n\n  svg:hover {\n    path {\n      fill: ${({ theme }) => theme.colors.primary600};\n    }\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * TextValidation\n * -----------------------------------------------------------------------------------------------*/\n\nconst TextValidation = styled<FlexComponent>(Flex)<{ $available?: boolean }>`\n  svg {\n    height: 1.2rem;\n    width: 1.2rem;\n\n    path {\n      fill: ${({ theme, $available }) =>\n        $available ? theme.colors.success600 : theme.colors.danger600};\n    }\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * LoadingWrapper\n * -----------------------------------------------------------------------------------------------*/\n\nconst rotation = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n`;\n\nconst LoadingWrapper = styled<FlexComponent>(Flex)`\n  animation: ${rotation} 2s infinite linear;\n`;\n\nconst MemoizedUIDInput = React.memo(UIDInput);\n\nexport { MemoizedUIDInput as UIDInput };\nexport type { UIDInputProps };\n","import { getLanguage, highlight, highlightAuto } from 'highlight.js';\nimport Markdown from 'markdown-it';\n// @ts-expect-error - library does not export types\nimport abbr from 'markdown-it-abbr';\nimport container from 'markdown-it-container';\n// @ts-expect-error - library does not export types\nimport deflist from 'markdown-it-deflist';\nimport emoji from 'markdown-it-emoji';\nimport footnote from 'markdown-it-footnote';\n// @ts-expect-error - library does not export types\nimport ins from 'markdown-it-ins';\n// @ts-expect-error - library does not export types\nimport mark from 'markdown-it-mark';\n// @ts-expect-error - library does not export types\nimport sub from 'markdown-it-sub';\n// @ts-expect-error - library does not export types\nimport sup from 'markdown-it-sup';\n\nimport 'highlight.js/styles/solarized-dark.css';\n\nconst md: Markdown = new Markdown({\n  html: true, // Enable HTML tags in source\n  xhtmlOut: false,\n  breaks: true,\n  langPrefix: 'language-',\n  linkify: true,\n  typographer: true,\n  // Code from: https://github.com/markdown-it/markdown-it/blob/master/support/demo_template/index.js#L83\n  highlight(str, lang) {\n    if (lang && lang !== 'auto' && getLanguage(lang)) {\n      return (\n        '<pre class=\"hljs language-' +\n        md.utils.escapeHtml(lang.toLowerCase()) +\n        '\"><code>' +\n        highlight(lang, str, true).value +\n        '</code></pre>'\n      );\n    }\n\n    if (lang === 'auto') {\n      const result = highlightAuto(str);\n\n      return (\n        '<pre class=\"hljs language-' +\n        md.utils.escapeHtml(result.language!) +\n        '\"><code>' +\n        result.value +\n        '</code></pre>'\n      );\n    }\n\n    return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n  },\n})\n  .use(abbr)\n  .use(container, 'warning')\n  .use(container, 'tip')\n  .use(deflist)\n  .use(emoji)\n  .use(footnote)\n  .use(ins)\n  .use(mark)\n  .use(sub)\n  .use(sup);\n\n// Code from: https://github.com/markdown-it/markdown-it-footnote/blob/master/index.js#L29\nmd.renderer.rules.footnote_ref = (tokens, idx, options, env, slf) => {\n  const caption = slf.rules.footnote_caption?.(tokens, idx, options, env, slf);\n\n  return '<sup class=\"footnote-ref\"><span>' + caption + '</span></sup>';\n};\n\nmd.renderer.rules.footnote_anchor = () => {\n  /* ↩ with escape code to prevent display as Apple Emoji on iOS */\n  return ' <span class=\"footnote-backref\">\\u21a9\\uFE0E</span>';\n};\n\nexport { md };\n","import * as React from 'react';\n\nimport sanitizeHtml from 'sanitize-html';\nimport { styled } from 'styled-components';\n\nimport { md } from './utils/mdRenderer';\n\ninterface PreviewWysiwygProps {\n  data?: string;\n}\n\nconst PreviewWysiwyg = ({ data = '' }: PreviewWysiwygProps) => {\n  const html = React.useMemo(\n    () =>\n      sanitizeHtml(md.render(data.replaceAll('\\\\n', '\\n') || ''), {\n        ...sanitizeHtml.defaults,\n        allowedTags: false,\n        allowedAttributes: {\n          '*': ['href', 'align', 'alt', 'center', 'width', 'height', 'type', 'controls', 'target'],\n          img: ['src', 'alt'],\n          source: ['src', 'type'],\n        },\n      }),\n    [data]\n  );\n\n  return (\n    <Wrapper>\n      <div dangerouslySetInnerHTML={{ __html: html }} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  padding: ${({ theme }) => `${theme.spaces[3]} ${theme.spaces[4]}`};\n  font-size: 1.4rem;\n  background-color: ${({ theme }) => theme.colors.neutral0};\n  color: ${({ theme }) => theme.colors.neutral800};\n  line-height: ${({ theme }) => theme.lineHeights[6]};\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    margin-block-start: ${({ theme }) => theme.spaces[2]};\n    margin-block-end: ${({ theme }) => theme.spaces[2]};\n  }\n\n  p {\n    margin-bottom: ${({ theme }) => theme.spaces[2]};\n  }\n\n  h1 {\n    font-size: 3.6rem;\n    font-weight: 600;\n  }\n\n  h2 {\n    font-size: 3rem;\n    font-weight: 500;\n  }\n\n  h3 {\n    font-size: 2.4rem;\n    font-weight: 500;\n  }\n\n  h4 {\n    font-size: 2rem;\n    font-weight: 500;\n  }\n\n  strong {\n    font-weight: 800;\n  }\n\n  em {\n    font-style: italic;\n  }\n\n  blockquote {\n    margin-top: ${({ theme }) => theme.spaces[8]};\n    margin-bottom: ${({ theme }) => theme.spaces[7]};\n    font-size: 1.4rem;\n    font-weight: 400;\n    border-left: 4px solid ${({ theme }) => theme.colors.neutral150};\n    font-style: italic;\n    padding: ${({ theme }) => theme.spaces[2]} ${({ theme }) => theme.spaces[5]};\n  }\n\n  img {\n    max-width: 100%;\n  }\n\n  table {\n    thead {\n      background: ${({ theme }) => theme.colors.neutral150};\n\n      th {\n        padding: ${({ theme }) => theme.spaces[4]};\n      }\n    }\n    tr {\n      border: 1px solid ${({ theme }) => theme.colors.neutral200};\n    }\n    th,\n    td {\n      padding: ${({ theme }) => theme.spaces[4]};\n      border: 1px solid ${({ theme }) => theme.colors.neutral200};\n      border-bottom: 0;\n      border-top: 0;\n    }\n  }\n\n  pre,\n  code {\n    font-size: 1.4rem;\n    border-radius: 4px;\n    /* \n      Hard coded since the color is the same between themes,\n      theme.colors.neutral800 changes between themes.\n\n      Matches the color of the JSON Input component.\n    */\n    background-color: #32324d;\n    max-width: 100%;\n    overflow: auto;\n    padding: ${({ theme }) => theme.spaces[2]};\n  }\n\n  /* Inline code */\n  p,\n  pre,\n  td {\n    > code {\n      color: #839496;\n    }\n  }\n\n  ol {\n    list-style-type: decimal;\n    margin-block-start: ${({ theme }) => theme.spaces[4]};\n    margin-block-end: ${({ theme }) => theme.spaces[4]};\n    margin-inline-start: 0px;\n    margin-inline-end: 0px;\n    padding-inline-start: ${({ theme }) => theme.spaces[4]};\n\n    ol,\n    ul {\n      margin-block-start: 0px;\n      margin-block-end: 0px;\n    }\n  }\n\n  ul {\n    list-style-type: disc;\n    margin-block-start: ${({ theme }) => theme.spaces[4]};\n    margin-block-end: ${({ theme }) => theme.spaces[4]};\n    margin-inline-start: 0px;\n    margin-inline-end: 0px;\n    padding-inline-start: ${({ theme }) => theme.spaces[4]};\n\n    ul,\n    ol {\n      margin-block-start: 0px;\n      margin-block-end: 0px;\n    }\n  }\n`;\n\nexport { PreviewWysiwyg };\n","import CodeMirror from 'codemirror5';\n\n// Disabling eslint on purpose\n/* eslint-disable */\n\nvar listRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]\\s|[*+-]\\s|(\\d+)([.)]))(\\s*)/,\n  emptyListRE = /^(\\s*)(>[> ]*|[*+-] \\[[x ]\\]|[*+-]|(\\d+)[.)])(\\s*)$/,\n  unorderedListRE = /[*+-]\\s/;\n\n/*\n  functions coming from CodeMirror addons continuelist.js\n  ===> https://github.com/codemirror/CodeMirror/blob/master/addon/edit/continuelist.js\n\n  we imported it because the way the addon ask to use markdown mode\n  since we have our own markdown preview system we couldn't use it directly\n  only thing we changed is removing the part that enabled addon only with markdown mode\n*/\n\nfunction newlineAndIndentContinueMarkdownList(cm: CodeMirror.Editor) {\n  // @ts-expect-error - cm does not recognize disableInput.\n  if (cm.getOption('disableInput')) return CodeMirror.Pass;\n  var ranges = cm.listSelections(),\n    replacements = [];\n  for (var i = 0; i < ranges.length; i++) {\n    var pos = ranges[i].head;\n\n    var eolState = cm.getStateAfter(pos.line);\n    var inList = eolState.list !== false;\n    var inQuote = eolState.quote !== 0;\n\n    var line = cm.getLine(pos.line),\n      match = listRE.exec(line);\n    var cursorBeforeBullet = /^\\s*$/.test(line.slice(0, pos.ch));\n    if (!ranges[i].empty() || (!inList && !inQuote) || !match || cursorBeforeBullet) {\n      cm.execCommand('newlineAndIndent');\n      return;\n    }\n    if (emptyListRE.test(line)) {\n      var endOfQuote = inQuote && />\\s*$/.test(line);\n      var endOfList = !/>\\s*$/.test(line);\n      if (endOfQuote || endOfList)\n        cm.replaceRange(\n          '',\n          {\n            line: pos.line,\n            ch: 0,\n          },\n          {\n            line: pos.line,\n            ch: pos.ch + 1,\n          }\n        );\n      replacements[i] = '\\n';\n    } else {\n      var indent = match[1],\n        after = match[5];\n      var numbered = !(unorderedListRE.test(match[2]) || match[2].indexOf('>') >= 0);\n      var bullet = numbered ? parseInt(match[3], 10) + 1 + match[4] : match[2].replace('x', ' ');\n      replacements[i] = '\\n' + indent + bullet + after;\n\n      if (numbered) incrementRemainingMarkdownListNumbers(cm, pos);\n    }\n  }\n\n  cm.replaceSelections(replacements);\n}\n\nfunction incrementRemainingMarkdownListNumbers(cm: CodeMirror.Editor, pos: CodeMirror.Position) {\n  var startLine = pos.line,\n    lookAhead = 0,\n    skipCount = 0;\n  var startItem = listRE.exec(cm.getLine(startLine)),\n    startIndent = startItem![1];\n\n  do {\n    lookAhead += 1;\n    var nextLineNumber = startLine + lookAhead;\n    var nextLine = cm.getLine(nextLineNumber);\n    var nextItem = listRE.exec(nextLine);\n\n    if (nextItem) {\n      var nextIndent = nextItem[1];\n      var newNumber = parseInt(startItem![3], 10) + lookAhead - skipCount;\n      var nextNumber = parseInt(nextItem[3], 10),\n        itemNumber = nextNumber;\n\n      if (startIndent === nextIndent && !isNaN(nextNumber)) {\n        if (newNumber === nextNumber) itemNumber = nextNumber + 1;\n        if (newNumber > nextNumber) itemNumber = newNumber + 1;\n        cm.replaceRange(\n          nextLine.replace(listRE, nextIndent + itemNumber + nextItem[4] + nextItem[5]),\n          {\n            line: nextLineNumber,\n            ch: 0,\n          },\n          {\n            line: nextLineNumber,\n            ch: nextLine.length,\n          }\n        );\n      } else {\n        if (startIndent.length > nextIndent.length) return;\n        // This doesn't run if the next line immediately indents, as it is\n        // not clear of the users intention (new indented item or same level)\n        if (startIndent.length < nextIndent.length && lookAhead === 1) return;\n        skipCount += 1;\n      }\n    }\n  } while (nextItem);\n}\n\nexport { newlineAndIndentContinueMarkdownList };\n","import * as React from 'react';\n\nimport CodeMirror, { EditorFromTextArea } from 'codemirror5';\nimport { styled } from 'styled-components';\n\nimport { PreviewWysiwyg } from './PreviewWysiwyg';\nimport { newlineAndIndentContinueMarkdownList } from './utils/continueList';\n\nimport type { FieldValue, InputProps } from '@strapi/admin/strapi-admin';\n\nimport 'codemirror5/addon/display/placeholder';\n\ninterface EditorApi {\n  focus: () => void;\n  scrollIntoView: (args?: Parameters<HTMLElement['scrollIntoView']>[0]) => void;\n}\n\ninterface EditorProps extends Omit<FieldValue, 'initialValue'>, Omit<InputProps, 'type' | 'label'> {\n  editorRef: React.MutableRefObject<EditorFromTextArea>;\n  isPreviewMode?: boolean;\n  isExpandMode?: boolean;\n  textareaRef: React.RefObject<HTMLTextAreaElement>;\n}\n\nconst Editor = React.forwardRef<EditorApi, EditorProps>(\n  (\n    {\n      disabled,\n      editorRef,\n      error,\n      isPreviewMode,\n      isExpandMode,\n      name,\n      onChange,\n      placeholder,\n      textareaRef,\n      value,\n    },\n    forwardedRef\n  ) => {\n    const onChangeRef = React.useRef(onChange);\n\n    React.useEffect(() => {\n      if (editorRef.current) {\n        // Ensure the editor and its wrapper are cleaned up whenever this view is re-rendered\n        // e.g. in case of re-ordering wysiwyg components in a DynamicZone\n        editorRef.current.toTextArea();\n      }\n      editorRef.current = CodeMirror.fromTextArea(textareaRef.current!, {\n        lineWrapping: true,\n        extraKeys: {\n          Enter: 'newlineAndIndentContinueMarkdownList',\n          Tab: false,\n          'Shift-Tab': false,\n        },\n        readOnly: false,\n        smartIndent: false,\n        placeholder,\n        spellcheck: true,\n        inputStyle: 'contenteditable',\n      });\n\n      // @ts-expect-error – doesn't think command exists?\n      CodeMirror.commands.newlineAndIndentContinueMarkdownList =\n        newlineAndIndentContinueMarkdownList;\n      editorRef.current.on('change', (doc) => {\n        onChangeRef.current(name, doc.getValue());\n      });\n    }, [editorRef, textareaRef, name, placeholder]);\n\n    React.useEffect(() => {\n      if (value && !editorRef.current.hasFocus()) {\n        editorRef.current.setValue(value);\n      }\n    }, [editorRef, value]);\n\n    React.useEffect(() => {\n      if (isPreviewMode || disabled) {\n        editorRef.current.setOption('readOnly', 'nocursor');\n      } else {\n        editorRef.current.setOption('readOnly', false);\n      }\n    }, [disabled, isPreviewMode, editorRef]);\n\n    React.useEffect(() => {\n      if (error) {\n        editorRef.current.setOption('screenReaderLabel', error);\n      } else {\n        // to replace with translation\n        editorRef.current.setOption('screenReaderLabel', 'Editor');\n      }\n    }, [editorRef, error]);\n\n    React.useImperativeHandle(\n      forwardedRef,\n      () => ({\n        focus() {\n          editorRef.current.getInputField().focus();\n        },\n        scrollIntoView(args?: Parameters<HTMLElement['scrollIntoView']>[0]) {\n          editorRef.current.getInputField().scrollIntoView(args);\n        },\n      }),\n      [editorRef]\n    );\n\n    return (\n      <EditorAndPreviewWrapper>\n        <EditorStylesContainer $isExpandMode={isExpandMode} $disabled={disabled || isPreviewMode}>\n          <textarea ref={textareaRef} />\n        </EditorStylesContainer>\n        {isPreviewMode && <PreviewWysiwyg data={value} />}\n      </EditorAndPreviewWrapper>\n    );\n  }\n);\n\nconst EditorAndPreviewWrapper = styled.div`\n  position: relative;\n  height: calc(100% - 48px);\n`;\n\nconst EditorStylesContainer = styled.div<{ $disabled?: boolean; $isExpandMode?: boolean }>`\n  cursor: ${({ $disabled }) => ($disabled ? 'not-allowed !important' : 'auto')};\n  height: 100%;\n  /* BASICS */\n  .CodeMirror-placeholder {\n    color: ${({ theme }) => theme.colors.neutral600} !important;\n  }\n\n  .CodeMirror {\n    /* Set height, width, borders, and global font properties here */\n    font-size: 1.4rem;\n    height: ${({ $isExpandMode }) =>\n      $isExpandMode\n        ? '100%'\n        : '410px'}; //  512px(total height) - 48px (header) - 52px(footer) - 2px border\n    color: ${({ theme }) => theme.colors.neutral800};\n    direction: ltr;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell,\n      'Open Sans', 'Helvetica Neue', sans-serif;\n  }\n\n  /* PADDING */\n\n  .CodeMirror-lines {\n    padding: ${({ theme }) => `${theme.spaces[3]} ${theme.spaces[4]}`};\n    /* Vertical padding around content */\n  }\n\n  .CodeMirror-scrollbar-filler,\n  .CodeMirror-gutter-filler {\n    /* The little square between H and V scrollbars */\n    background-color: ${({ theme }) => `${theme.colors.neutral0}`};\n  }\n\n  /* GUTTER */\n\n  .CodeMirror-gutters {\n    border-right: 1px solid #ddd;\n    background-color: #f7f7f7;\n    white-space: nowrap;\n  }\n  .CodeMirror-linenumbers {\n  }\n  .CodeMirror-linenumber {\n    padding: 0 3px 0 5px;\n    min-width: 20px;\n    text-align: right;\n    color: #999;\n    white-space: nowrap;\n  }\n\n  .CodeMirror-guttermarker {\n    color: black;\n  }\n  .CodeMirror-guttermarker-subtle {\n    color: #999;\n  }\n\n  /* CURSOR */\n\n  .CodeMirror-cursor {\n    border-left: 1px solid black;\n    border-right: none;\n    width: 0;\n  }\n  /* Shown when moving in bi-directional text */\n  .CodeMirror div.CodeMirror-secondarycursor {\n    border-left: 1px solid silver;\n  }\n  .cm-fat-cursor .CodeMirror-cursor {\n    width: auto;\n    border: 0 !important;\n    background: #7e7;\n  }\n  .cm-fat-cursor div.CodeMirror-cursors {\n    /* z-index: 1; */\n  }\n\n  .cm-fat-cursor-mark {\n    background-color: rgba(20, 255, 20, 0.5);\n    -webkit-animation: blink 1.06s steps(1) infinite;\n    -moz-animation: blink 1.06s steps(1) infinite;\n    animation: blink 1.06s steps(1) infinite;\n  }\n  .cm-animate-fat-cursor {\n    width: auto;\n    border: 0;\n    -webkit-animation: blink 1.06s steps(1) infinite;\n    -moz-animation: blink 1.06s steps(1) infinite;\n    animation: blink 1.06s steps(1) infinite;\n    background-color: #7e7;\n  }\n\n  /* Can style cursor different in overwrite (non-insert) mode */\n  .CodeMirror-overwrite .CodeMirror-cursor {\n  }\n\n  .cm-tab {\n    display: inline-block;\n    text-decoration: inherit;\n  }\n\n  .CodeMirror-rulers {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: -50px;\n    bottom: 0;\n    overflow: hidden;\n  }\n  .CodeMirror-ruler {\n    border-left: 1px solid #ccc;\n    top: 0;\n    bottom: 0;\n    position: absolute;\n  }\n\n  /* DEFAULT THEME */\n\n  .cm-header,\n  .cm-strong {\n    font-weight: bold;\n  }\n  .cm-em {\n    font-style: italic;\n  }\n  .cm-link {\n    text-decoration: underline;\n  }\n  .cm-strikethrough {\n    text-decoration: line-through;\n  }\n\n  .CodeMirror-composing {\n    border-bottom: 2px solid;\n  }\n\n  /* Default styles for common addons */\n\n  div.CodeMirror span.CodeMirror-matchingbracket {\n    color: #0b0;\n  }\n  div.CodeMirror span.CodeMirror-nonmatchingbracket {\n    color: #a22;\n  }\n  .CodeMirror-matchingtag {\n    background: rgba(255, 150, 0, 0.3);\n  }\n  .CodeMirror-activeline-background {\n    background: #e8f2ff;\n  }\n\n  /* STOP */\n\n  /* The rest of this file contains styles related to the mechanics of\n    the editor. You probably shouldn't touch them. */\n\n  .CodeMirror {\n    position: relative;\n    overflow: hidden;\n    background: ${({ theme }) => `${theme.colors.neutral0}`};\n  }\n\n  .CodeMirror-scroll {\n    overflow: scroll !important; /* Things will break if this is overridden */\n    /* 50px is the magic margin used to hide the element's real scrollbars */\n    /* See overflow: hidden in .CodeMirror */\n    margin-bottom: -50px;\n    margin-right: -50px;\n    padding-bottom: 50px;\n    height: 100%;\n    outline: none; /* Prevent dragging from highlighting the element */\n    position: relative;\n  }\n  .CodeMirror-sizer {\n    position: relative;\n    border-right: 50px solid transparent;\n  }\n\n  /* The fake, visible scrollbars. Used to force redraw during scrolling\n    before actual scrolling happens, thus preventing shaking and\n    flickering artifacts. */\n  .CodeMirror-vscrollbar,\n  .CodeMirror-hscrollbar,\n  .CodeMirror-scrollbar-filler,\n  .CodeMirror-gutter-filler {\n    position: absolute;\n    z-index: 1;\n    display: none;\n    outline: none;\n  }\n\n  .CodeMirror-vscrollbar {\n    right: 0;\n    top: 0;\n    overflow-x: hidden;\n    overflow-y: scroll;\n  }\n  .CodeMirror-hscrollbar {\n    bottom: 0;\n    left: 0;\n    overflow-y: hidden;\n    overflow-x: scroll;\n  }\n  .CodeMirror-scrollbar-filler {\n    right: 0;\n    bottom: 0;\n  }\n\n  .CodeMirror-lines {\n    cursor: text;\n    min-height: 1px; /* prevents collapsing before first draw */\n  }\n  /* Reset some styles that the rest of the page might have set */\n  .CodeMirror pre.CodeMirror-line,\n  .CodeMirror pre.CodeMirror-line-like {\n    -moz-border-radius: 0;\n    -webkit-border-radius: 0;\n    border-radius: 0;\n    border-width: 0;\n    background: transparent;\n    font-family: inherit;\n    font-size: inherit;\n    margin: 0;\n    white-space: pre;\n    word-wrap: normal;\n    line-height: 1.5;\n    color: inherit;\n    /* z-index: 2; */\n    position: relative;\n    overflow: visible;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-font-variant-ligatures: contextual;\n    font-variant-ligatures: contextual;\n  }\n\n  .CodeMirror pre.CodeMirror-line-like {\n    z-index: 2;\n  }\n\n  .CodeMirror-wrap pre.CodeMirror-line,\n  .CodeMirror-wrap pre.CodeMirror-line-like {\n    word-wrap: break-word;\n    white-space: pre-wrap;\n    word-break: normal;\n  }\n\n  .CodeMirror-linebackground {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    z-index: 0;\n  }\n\n  .CodeMirror-linewidget {\n    position: relative;\n    /* z-index: 2; */\n    padding: 0.1px; /* Force widget margins to stay inside of the container */\n  }\n\n  .CodeMirror-widget {\n  }\n\n  .CodeMirror-rtl pre {\n    direction: rtl;\n  }\n\n  .CodeMirror-code {\n    outline: none;\n  }\n\n  /* Force content-box sizing for the elements where we expect it */\n  .CodeMirror-scroll,\n  .CodeMirror-sizer,\n  .CodeMirror-gutter,\n  .CodeMirror-gutters,\n  .CodeMirror-linenumber {\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n  }\n\n  .CodeMirror-measure {\n    position: absolute;\n    width: 100%;\n    height: 0;\n    overflow: hidden;\n    visibility: hidden;\n  }\n\n  .CodeMirror-cursor {\n    position: absolute;\n    pointer-events: none;\n    border-color: ${({ theme }) => `${theme.colors.neutral800}`};\n  }\n  .CodeMirror-measure pre {\n    position: static;\n  }\n\n  div.CodeMirror-cursors {\n    visibility: hidden;\n    position: relative;\n    + div {\n      z-index: 0 !important;\n    }\n  }\n\n  div.CodeMirror-dragcursors {\n    visibility: visible;\n  }\n\n  .CodeMirror-focused div.CodeMirror-cursors {\n    visibility: visible;\n  }\n\n  .CodeMirror-selected {\n    background: ${({ theme }) => theme.colors.neutral200};\n    /* z-index: -10; */\n  }\n  .CodeMirror-crosshair {\n    cursor: crosshair;\n  }\n\n  /* Used to force a border model for a node */\n  .cm-force-border {\n    padding-right: 0.1px;\n  }\n\n  /* See issue #2901 */\n  .cm-tab-wrap-hack:after {\n    content: '';\n  }\n\n  /* Help users use markselection to safely style text background */\n  span.CodeMirror-selectedtext {\n    background: none;\n  }\n\n  span {\n    color: ${({ theme }) => theme.colors.neutral800} !important;\n  }\n`;\n\nexport { Editor };\nexport type { EditorProps, EditorApi };\n","import * as React from 'react';\n\nimport {\n  Button,\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  FocusTrap,\n  Portal,\n  Typography,\n} from '@strapi/design-system';\nimport { Collapse } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { PreviewWysiwyg } from './PreviewWysiwyg';\n\ninterface EditorLayoutProps {\n  children: React.ReactNode;\n  isExpandMode: boolean;\n  error?: string;\n  previewContent?: string;\n  onCollapse: () => void;\n}\n\nconst EditorLayout = ({\n  children,\n  isExpandMode,\n  error,\n  previewContent = '',\n  onCollapse,\n}: EditorLayoutProps) => {\n  const { formatMessage } = useIntl();\n\n  React.useEffect(() => {\n    if (isExpandMode) {\n      document.body.classList.add('lock-body-scroll');\n    }\n\n    return () => {\n      document.body.classList.remove('lock-body-scroll');\n    };\n  }, [isExpandMode]);\n\n  if (isExpandMode) {\n    return (\n      <Portal role=\"dialog\" aria-modal={false}>\n        <FocusTrap onEscape={onCollapse}>\n          <ExpandWrapper\n            position=\"fixed\"\n            top={0}\n            left={0}\n            right={0}\n            bottom={0}\n            zIndex={4}\n            justifyContent=\"center\"\n            onClick={onCollapse}\n          >\n            <Box<'div'>\n              background=\"neutral0\"\n              hasRadius\n              shadow=\"popupShadow\"\n              overflow=\"hidden\"\n              width=\"90%\"\n              height=\"90%\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <Flex height=\"100%\" alignItems=\"flex-start\">\n                <BoxWithBorder flex=\"1\" height=\"100%\">\n                  {children}\n                </BoxWithBorder>\n                <Flex alignItems=\"start\" direction=\"column\" flex={1} height=\"100%\" width=\"100%\">\n                  <Flex\n                    height=\"4.8rem\"\n                    background=\"neutral100\"\n                    justifyContent=\"flex-end\"\n                    shrink={0}\n                    width=\"100%\"\n                  >\n                    <ExpandButton onClick={onCollapse} variant=\"tertiary\" size=\"M\">\n                      <Typography>\n                        {formatMessage({\n                          id: 'components.Wysiwyg.collapse',\n                          defaultMessage: 'Collapse',\n                        })}\n                      </Typography>\n                      <Collapse />\n                    </ExpandButton>\n                  </Flex>\n\n                  <Box position=\"relative\" height=\"100%\" width=\"100%\">\n                    <PreviewWysiwyg data={previewContent} />\n                  </Box>\n                </Flex>\n              </Flex>\n            </Box>\n          </ExpandWrapper>\n        </FocusTrap>\n      </Portal>\n    );\n  }\n\n  return (\n    <Flex\n      borderColor={error ? 'danger600' : 'neutral200'}\n      borderStyle=\"solid\"\n      borderWidth=\"1px\"\n      hasRadius\n      direction=\"column\"\n      alignItems=\"stretch\"\n    >\n      {children}\n    </Flex>\n  );\n};\n\nconst ExpandWrapper = styled<FlexComponent>(Flex)`\n  background: ${({ theme }) =>\n    `${theme.colors.neutral800}${Math.floor(0.2 * 255)\n      .toString(16)\n      .padStart(2, '0')}`};\n`;\n\nconst BoxWithBorder = styled<BoxComponent>(Box)`\n  border-right: 1px solid ${({ theme }) => theme.colors.neutral200};\n`;\n\nconst ExpandButton = styled(Button)`\n  background-color: transparent;\n  border: none;\n  align-items: center;\n\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    font-weight: ${({ theme }) => theme.fontWeights.regular};\n  }\n\n  svg {\n    margin-left: ${({ theme }) => `${theme.spaces[2]}`};\n\n    path {\n      fill: ${({ theme }) => theme.colors.neutral700};\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  }\n`;\n\nexport { EditorLayout, ExpandButton };\nexport type { EditorLayoutProps };\n","import { MutableRefObject } from 'react';\n\nimport CodeMirror from 'codemirror5';\n\nexport const replaceText = (markdownName: string, textToChange: string) => {\n  let editedText;\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = `~~${textToChange}~~`;\n      break;\n    case 'Bold':\n      editedText = `**${textToChange}**`;\n      break;\n    case 'Italic':\n      editedText = `_${textToChange}_`;\n      break;\n    case 'Underline':\n      editedText = `<u>${textToChange}</u>`;\n      break;\n    case 'Code':\n      editedText = `\\`\\`\\`\\n${textToChange}\\n\\`\\`\\``;\n      break;\n    case 'Link':\n      editedText = `[${textToChange}](link)`;\n      break;\n    case 'Quote':\n      editedText = `>${textToChange}`;\n      break;\n    default:\n      editedText = textToChange;\n  }\n\n  return editedText;\n};\n\nexport const insertText = (markdownName: string) => {\n  let editedText;\n  // object to calculate text that will be selected after insert of markdown\n  const selection = { start: markdownName.length, end: 0 };\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = `~~${markdownName}~~`;\n      selection.end = 2;\n      break;\n    case 'Bold':\n      editedText = `**${markdownName}**`;\n      selection.end = 2;\n      break;\n    case 'Italic':\n      editedText = `_${markdownName}_`;\n      selection.end = 1;\n      break;\n    case 'alt':\n      editedText = `[${markdownName}]()`;\n      selection.end = 3;\n      break;\n    case 'Underline':\n      editedText = `<u>${markdownName}</u>`;\n      selection.end = 4;\n      break;\n    case 'Code':\n      editedText = `\\`\\`\\`\\n${markdownName}\\n\\`\\`\\``;\n      selection.end = 3;\n      break;\n    case 'Link':\n      editedText = `[${markdownName}](link)`;\n      selection.end = 7;\n      break;\n    case 'Quote':\n      editedText = `>${markdownName}`;\n      selection.end = 0;\n      break;\n    default:\n      editedText = '';\n  }\n\n  return { editedText, selection };\n};\n\nexport const insertListOrTitle = (markdown: string) => {\n  let textToInsert;\n\n  switch (markdown) {\n    case 'BulletList':\n      textToInsert = '- ';\n      break;\n    case 'NumberList':\n      textToInsert = '1. ';\n      break;\n    case 'h1':\n      textToInsert = '# ';\n      break;\n    case 'h2':\n      textToInsert = '## ';\n      break;\n    case 'h3':\n      textToInsert = '### ';\n      break;\n    case 'h4':\n      textToInsert = '#### ';\n      break;\n    case 'h5':\n      textToInsert = '##### ';\n      break;\n    case 'h6':\n      textToInsert = '###### ';\n      break;\n    default:\n      return '';\n  }\n\n  return textToInsert;\n};\n\n// EDITOR ACTIONS FUNCTIONS\n\nexport const markdownHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string\n) => {\n  const textToEdit = editor.current.getSelection();\n  let textToInsert;\n\n  if (textToEdit) {\n    const editedText = replaceText(markdownType, textToEdit);\n    editor.current.replaceSelection(editedText);\n    editor.current.focus();\n  } else {\n    textToInsert = insertText(markdownType);\n    editor.current.replaceSelection(textToInsert.editedText);\n    editor.current.focus();\n    // set selection-focus to text to replace with content\n    const { line, ch } = editor.current.getCursor();\n    const endSelection = ch - textToInsert.selection.end;\n    const startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({ line, ch: startSelection }, { line, ch: endSelection });\n  }\n};\n\nexport const listHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  listType: string\n) => {\n  const doc = editor.current.getDoc();\n  const insertion = listType === 'BulletList' ? '- ' : '1. ';\n\n  if (doc.somethingSelected()) {\n    const selections = doc.listSelections();\n    let remove: boolean | null = null;\n\n    editor.current.operation(function () {\n      selections.forEach(function (selection) {\n        const pos = [selection.head.line, selection.anchor.line].sort();\n\n        // Remove if the first text starts with it\n        if (remove == null) {\n          remove = doc.getLine(pos[0]).startsWith(insertion);\n        }\n\n        for (let i = pos[0]; i <= pos[1]; i++) {\n          if (remove) {\n            // Don't remove if we don't start with it\n            if (doc.getLine(i).startsWith(insertion)) {\n              doc.replaceRange('', { line: i, ch: 0 }, { line: i, ch: insertion.length });\n            }\n          } else {\n            const lineInsertion = listType === 'BulletList' ? '- ' : `${i + 1}. `;\n            doc.replaceRange(lineInsertion, { line: i, ch: 0 });\n          }\n        }\n      });\n    });\n  } else {\n    const { line: currentLine } = doc.getCursor();\n    const listToInsert = insertListOrTitle(listType);\n    const lineContent = editor.current.getLine(currentLine);\n\n    const textToInsert = listToInsert + lineContent;\n    editor.current.setSelection(\n      { line: currentLine, ch: 0 },\n      { line: currentLine, ch: lineContent.length }\n    );\n    editor.current.replaceSelection(textToInsert);\n  }\n\n  editor.current.focus();\n};\n\nexport const titleHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  titleType: string\n) => {\n  const { line: currentLine } = editor.current.getCursor();\n  const titleToInsert = insertListOrTitle(titleType);\n  const lineContent = editor.current.getLine(currentLine);\n\n  // replace hashtags followed by a space in case user want to change the type of title\n  const lineWithNoTitle = lineContent.replace(/#{1,6}\\s/g, '').trim();\n\n  const textToInsert = titleToInsert + lineWithNoTitle;\n  editor.current.setSelection(\n    { line: currentLine, ch: 0 },\n    { line: currentLine, ch: lineContent.length }\n  );\n  editor.current.replaceSelection(textToInsert);\n\n  setTimeout(() => {\n    const newLastLineLength = editor.current.getLine(currentLine).length;\n    editor.current.focus();\n    editor.current.setCursor({ line: currentLine, ch: newLastLineLength });\n  }, 0);\n};\n\nexport const insertFile = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  files: any[]\n) => {\n  let { line } = editor.current.getCursor();\n  const { ch } = editor.current.getCursor();\n\n  files.forEach((file, i) => {\n    let contentLength = editor.current.getLine(line).length;\n    editor.current.setCursor({ line, ch: contentLength });\n    // create a new line after first image markdown inserted\n    // or if there is content in current line\n\n    if (i > 0 || (i === 0 && ch !== 0)) {\n      contentLength = editor.current.getLine(line).length;\n      editor.current.setCursor({ line, ch: contentLength });\n      line++;\n      editor.current.replaceSelection('\\n');\n    }\n\n    if (file.mime.includes('image')) {\n      editor.current.replaceSelection(`![${file.alt}](${file.url})`);\n    } else {\n      editor.current.replaceSelection(`[${file.alt}](${file.url})`);\n    }\n  });\n\n  setTimeout(() => editor.current.focus(), 0);\n};\n\n// NEXT FUNCTIONS FOR QUOTE OR CODE MARKDOWN\n\nconst insertWithTextToEdit = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string,\n  line: number,\n  contentLength: number,\n  textToEdit: string\n) => {\n  const textToInsert = replaceText(markdownType, textToEdit);\n\n  // remove content after current line\n  const contentToMove = editor.current.getRange(\n    { line: line + 1, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.replaceRange('', { line: line + 1, ch: 0 }, { line: Infinity, ch: Infinity });\n\n  // remove word that was selected\n  // set cursor end of line + move to next line\n  // add text to insert\n  editor.current.replaceSelection('');\n  editor.current.setCursor({ line, ch: contentLength });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert);\n\n  if (markdownType === 'Code') {\n    const { line: newLine } = editor.current.getCursor();\n    editor.current.setCursor({ line: newLine - 1, ch: textToEdit.length });\n  }\n\n  // add content we had to remove earlier\n  editor.current.replaceRange(\n    contentToMove,\n    { line: line + 4, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n\n  editor.current.focus();\n};\n\nconst insertWithoutTextToEdit = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string,\n  line: number,\n  contentLength: number\n) => {\n  const textToInsert = insertText(markdownType);\n\n  // remove content after current line\n  const contentToMove = editor.current.getRange(\n    { line: line + 1, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.replaceRange('', { line: line + 1, ch: 0 }, { line: Infinity, ch: Infinity });\n\n  // replace cursor to next line\n  editor.current.setCursor({ line, ch: contentLength });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert.editedText);\n\n  // set selection on \"Code\" or \"Quote\" word\n\n  if (markdownType === 'Code') {\n    line += 2;\n\n    editor.current.setSelection({ line, ch: 0 }, { line, ch: 4 });\n  } else {\n    line += 1;\n\n    const { ch } = editor.current.getCursor();\n    const endSelection = ch - textToInsert.selection.end;\n    const startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({ line, ch: startSelection }, { line, ch: endSelection });\n  }\n\n  // add content we had to remove earlier\n  editor.current.replaceRange(\n    contentToMove,\n    { line: line + 2, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.focus();\n};\n\nexport const quoteAndCodeHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string\n) => {\n  const textToEdit = editor.current.getSelection();\n  const { line } = editor.current.getCursor();\n  const contentLength = editor.current.getLine(line).length;\n\n  if (textToEdit) {\n    insertWithTextToEdit(editor, markdownType, line, contentLength, textToEdit);\n  } else {\n    insertWithoutTextToEdit(editor, markdownType, line, contentLength);\n  }\n};\n","import { Button, IconButton, IconButtonComponent, IconButtonGroup } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\n// NAV BUTTONS\nexport const MainButtons = styled(IconButtonGroup)`\n  margin-left: ${({ theme }) => theme.spaces[4]};\n`;\n\nexport const MoreButton = styled<IconButtonComponent>(IconButton)`\n  margin: ${({ theme }) => `0 ${theme.spaces[2]}`};\n`;\n\n// NAV\n\nexport const IconButtonGroupMargin = styled(IconButtonGroup)`\n  margin-right: ${({ theme }) => `${theme.spaces[2]}`};\n`;\n\n// FOOTER\nexport const ExpandButton = styled(Button)`\n  background-color: transparent;\n  border: none;\n  align-items: center;\n\n  & > span {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    font-weight: ${({ theme }) => theme.fontWeights.regular};\n  }\n\n  svg {\n    margin-left: ${({ theme }) => `${theme.spaces[2]}`};\n    path {\n      fill: ${({ theme }) => theme.colors.neutral700};\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  }\n`;\n","import { ButtonProps, Box, Flex, Typography } from '@strapi/design-system';\nimport { Expand } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { ExpandButton } from './WysiwygStyles';\n\ninterface WysiwygFooterProps {\n  onToggleExpand: ButtonProps['onClick'];\n}\n\nconst WysiwygFooter = ({ onToggleExpand }: WysiwygFooterProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Box padding={2} background=\"neutral100\" borderRadius={`0 0 0.4rem 0.4rem`}>\n      <Flex justifyContent=\"flex-end\" alignItems=\"flex-end\">\n        <ExpandButton id=\"expand\" onClick={onToggleExpand} variant=\"tertiary\" size=\"M\">\n          <Typography textColor=\"neutral800\">\n            {formatMessage({\n              id: 'components.WysiwygBottomControls.fullscreen',\n              defaultMessage: 'Expand',\n            })}\n          </Typography>\n          <Expand />\n        </ExpandButton>\n      </Flex>\n    </Box>\n  );\n};\n\nexport { WysiwygFooter };\nexport type { WysiwygFooterProps };\n","import * as React from 'react';\n\nimport {\n  Button,\n  Flex,\n  IconButton,\n  IconButtonGroup,\n  SingleSelectOption,\n  SingleSelect,\n  Field,\n  Menu,\n} from '@strapi/design-system';\nimport {\n  Bold,\n  BulletList,\n  Code,\n  Italic,\n  Link,\n  NumberList,\n  Image,\n  Quotes,\n  StrikeThrough,\n  Underline,\n  HeadingOne,\n  HeadingTwo,\n  HeadingThree,\n  HeadingFour,\n  HeadingFive,\n  HeadingSix,\n} from '@strapi/icons';\nimport { EditorFromTextArea } from 'codemirror5';\nimport { useIntl } from 'react-intl';\n\nimport { EditorToolbarObserver, type ObservedComponent } from '../../EditorToolbarObserver';\n\nimport { listHandler, markdownHandler, quoteAndCodeHandler, titleHandler } from './utils/utils';\n\ninterface WysiwygNavProps {\n  disabled?: boolean;\n  editorRef: React.MutableRefObject<EditorFromTextArea>;\n  isExpandMode?: boolean;\n  isPreviewMode?: boolean;\n  onToggleMediaLib: () => void;\n  onTogglePreviewMode?: () => void;\n}\n\n/**\n * TODO: refactor this mess.\n */\nconst WysiwygNav = ({\n  disabled,\n  editorRef,\n  isPreviewMode,\n  onToggleMediaLib,\n  onTogglePreviewMode,\n}: WysiwygNavProps) => {\n  const { formatMessage } = useIntl();\n  const isDisabled = disabled || isPreviewMode;\n\n  const handleActionClick = (\n    value: string,\n    currentEditorRef: React.MutableRefObject<EditorFromTextArea>\n  ) => {\n    switch (value) {\n      case 'Link': {\n        markdownHandler(currentEditorRef, value);\n        break;\n      }\n      case 'Code':\n      case 'Quote': {\n        quoteAndCodeHandler(currentEditorRef, value);\n        break;\n      }\n      case 'Bold':\n      case 'Italic':\n      case 'Underline':\n      case 'Strikethrough': {\n        markdownHandler(currentEditorRef, value);\n        break;\n      }\n      case 'BulletList':\n      case 'NumberList': {\n        listHandler(currentEditorRef, value);\n        break;\n      }\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6': {\n        titleHandler(currentEditorRef, value);\n        break;\n      }\n      default: {\n        // Nothing\n      }\n    }\n  };\n\n  const observedComponents: ObservedComponent[] = [\n    {\n      toolbar: (\n        <IconButtonGroup>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Bold', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.bold',\n              defaultMessage: 'Bold',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.bold',\n              defaultMessage: 'Bold',\n            })}\n          >\n            <Bold />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Italic', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.italic',\n              defaultMessage: 'Italic',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.italic',\n              defaultMessage: 'Italic',\n            })}\n          >\n            <Italic />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Underline', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.underline',\n              defaultMessage: 'Underline',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.underline',\n              defaultMessage: 'Underline',\n            })}\n          >\n            <Underline />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Strikethrough', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.modifiers.strikethrough',\n              defaultMessage: 'Strikethrough',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.modifiers.strikethrough',\n              defaultMessage: 'Strikethrough',\n            })}\n          >\n            <StrikeThrough />\n          </IconButton>\n        </IconButtonGroup>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <Menu.Item onSelect={() => handleActionClick('Bold', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Bold aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.bold',\n                defaultMessage: 'Bold',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item onSelect={() => handleActionClick('Italic', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Italic aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.italic',\n                defaultMessage: 'Italic',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            onSelect={() => handleActionClick('Underline', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <Underline aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.underline',\n                defaultMessage: 'Underline',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            onSelect={() => handleActionClick('Strikethrough', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <StrikeThrough aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.modifiers.strikethrough',\n                defaultMessage: 'Strikethrough',\n              })}\n            </Flex>\n          </Menu.Item>\n        </>\n      ),\n      key: 'formatting-group-1',\n    },\n    {\n      toolbar: (\n        <IconButtonGroup>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('BulletList', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.bulletList',\n              defaultMessage: 'Bulleted list',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.bulletList',\n              defaultMessage: 'Bulleted list',\n            })}\n          >\n            <BulletList />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('NumberList', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.numberList',\n              defaultMessage: 'Numbered list',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.numberList',\n              defaultMessage: 'Numbered list',\n            })}\n          >\n            <NumberList />\n          </IconButton>\n        </IconButtonGroup>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <Menu.Item\n            onSelect={() => handleActionClick('BulletList', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <BulletList aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.unorderedList',\n                defaultMessage: 'Bulleted list',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            onSelect={() => handleActionClick('NumberList', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <NumberList aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.orderedList',\n                defaultMessage: 'Numbered list',\n              })}\n            </Flex>\n          </Menu.Item>\n        </>\n      ),\n      key: 'formatting-group-2',\n    },\n    {\n      toolbar: (\n        <IconButtonGroup>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Code', editorRef)}\n            label={formatMessage({\n              id: 'components.Wysiwyg.blocks.code',\n              defaultMessage: 'Code',\n            })}\n            name={formatMessage({\n              id: 'components.Wysiwyg.blocks.code',\n              defaultMessage: 'Code',\n            })}\n          >\n            <Code />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => {\n              onToggleMediaLib();\n            }}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.image',\n              defaultMessage: 'Image',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.image',\n              defaultMessage: 'Image',\n            })}\n          >\n            <Image />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Link', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.popover.link',\n              defaultMessage: 'Link',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.popover.link',\n              defaultMessage: 'Link',\n            })}\n          >\n            <Link />\n          </IconButton>\n          <IconButton\n            disabled={isDisabled}\n            onClick={() => handleActionClick('Quote', editorRef)}\n            label={formatMessage({\n              id: 'components.Blocks.blocks.quote',\n              defaultMessage: 'Quote',\n            })}\n            name={formatMessage({\n              id: 'components.Blocks.blocks.quote',\n              defaultMessage: 'Quote',\n            })}\n          >\n            <Quotes />\n          </IconButton>\n        </IconButtonGroup>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <Menu.Item onSelect={() => handleActionClick('Code', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Code aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Wysiwyg.blocks.code',\n                defaultMessage: 'Code',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            startIcon={<Image />}\n            onSelect={() => {\n              onToggleMediaLib();\n            }}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <Image aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.image',\n                defaultMessage: 'Image',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item\n            startIcon={<Link />}\n            onSelect={() => handleActionClick('Link', editorRef)}\n            disabled={isDisabled}\n          >\n            <Flex tag=\"span\" gap={2}>\n              <Link aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.popover.link',\n                defaultMessage: 'Link',\n              })}\n            </Flex>\n          </Menu.Item>\n          <Menu.Item onSelect={() => handleActionClick('Quote', editorRef)} disabled={isDisabled}>\n            <Flex tag=\"span\" gap={2}>\n              <Quotes aria-hidden fill=\"neutral600\" />\n              {formatMessage({\n                id: 'components.Blocks.blocks.quote',\n                defaultMessage: 'Quote',\n              })}\n            </Flex>\n          </Menu.Item>\n        </>\n      ),\n      key: 'formatting-group-3',\n    },\n  ];\n\n  return (\n    <Flex\n      padding={2}\n      background=\"neutral100\"\n      justifyContent=\"space-between\"\n      borderRadius=\"0.4rem 0.4rem 0 0\"\n      width=\"100%\"\n      gap={4}\n    >\n      <Field.Root>\n        <SingleSelect\n          disabled={isDisabled}\n          placeholder={formatMessage({\n            id: 'components.Wysiwyg.selectOptions.title',\n            defaultMessage: 'Headings',\n          })}\n          aria-label={formatMessage({\n            id: 'components.Wysiwyg.selectOptions.title',\n            defaultMessage: 'Headings',\n          })}\n          // @ts-expect-error – DS v2 will only allow strings.\n          onChange={(value) => handleActionClick(value, editorRef)}\n          size=\"S\"\n        >\n          <SingleSelectOption value=\"h1\" startIcon={<HeadingOne fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H1',\n              defaultMessage: 'Heading 1',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h2\" startIcon={<HeadingTwo fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H2',\n              defaultMessage: 'Heading 2',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h3\" startIcon={<HeadingThree fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H3',\n              defaultMessage: 'Heading 3',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h4\" startIcon={<HeadingFour fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H4',\n              defaultMessage: 'Heading 4',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h5\" startIcon={<HeadingFive fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H5',\n              defaultMessage: 'Heading 5',\n            })}\n          </SingleSelectOption>\n          <SingleSelectOption value=\"h6\" startIcon={<HeadingSix fill=\"neutral600\" />}>\n            {formatMessage({\n              id: 'components.Wysiwyg.selectOptions.H6',\n              defaultMessage: 'Heading 6',\n            })}\n          </SingleSelectOption>\n        </SingleSelect>\n      </Field.Root>\n      <Flex width=\"100%\" justifyContent=\"space-between\" overflow=\"hidden\">\n        <Flex gap={2} overflow=\"hidden\" width=\"100%\">\n          <EditorToolbarObserver\n            menuTriggerVariant=\"tertiary\"\n            observedComponents={observedComponents}\n          />\n        </Flex>\n\n        {onTogglePreviewMode && (\n          <Button onClick={onTogglePreviewMode} variant=\"tertiary\" minWidth=\"132px\">\n            {isPreviewMode\n              ? formatMessage({\n                  id: 'components.Wysiwyg.ToggleMode.markdown-mode',\n                  defaultMessage: 'Markdown mode',\n                })\n              : formatMessage({\n                  id: 'components.Wysiwyg.ToggleMode.preview-mode',\n                  defaultMessage: 'Preview mode',\n                })}\n          </Button>\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { WysiwygNav };\nexport type { WysiwygNavProps };\n","import * as React from 'react';\n\nimport { useField, useStrapiApp, type InputProps } from '@strapi/admin/strapi-admin';\nimport { Field, Flex } from '@strapi/design-system';\nimport { EditorFromTextArea } from 'codemirror5';\n\nimport { prefixFileUrlWithBackendUrl } from '../../../../../utils/urls';\n\nimport { Editor, EditorApi } from './Editor';\nimport { EditorLayout } from './EditorLayout';\nimport { insertFile } from './utils/utils';\nimport { WysiwygFooter } from './WysiwygFooter';\nimport { WysiwygNav } from './WysiwygNav';\n\nimport type { Schema } from '@strapi/types';\n\ninterface WysiwygProps extends Omit<InputProps, 'type'> {\n  labelAction?: React.ReactNode;\n  type: Schema.Attribute.RichText['type'];\n}\n\nconst Wysiwyg = React.forwardRef<EditorApi, WysiwygProps>(\n  ({ hint, disabled, label, name, placeholder, required, labelAction }, forwardedRef) => {\n    const field = useField(name);\n    const textareaRef = React.useRef<HTMLTextAreaElement>(null);\n    const editorRef = React.useRef<EditorFromTextArea>(\n      null\n    ) as React.MutableRefObject<EditorFromTextArea>;\n    const [isPreviewMode, setIsPreviewMode] = React.useState(false);\n    const [mediaLibVisible, setMediaLibVisible] = React.useState(false);\n    const [isExpandMode, setIsExpandMode] = React.useState(false);\n    const components = useStrapiApp('ImageDialog', (state) => state.components);\n\n    const MediaLibraryDialog = components['media-library'];\n\n    const handleToggleMediaLib = () => setMediaLibVisible((prev) => !prev);\n    const handleTogglePreviewMode = () => setIsPreviewMode((prev) => !prev);\n    const handleToggleExpand = () => {\n      setIsPreviewMode(false);\n      setIsExpandMode((prev) => !prev);\n    };\n\n    const handleSelectAssets = (files: any[]) => {\n      const formattedFiles = files.map((f) => ({\n        alt: f.alternativeText || f.name,\n        url: prefixFileUrlWithBackendUrl(f.url),\n        mime: f.mime,\n      }));\n\n      insertFile(editorRef, formattedFiles);\n      setMediaLibVisible(false);\n    };\n\n    return (\n      <Field.Root name={name} hint={hint} error={field.error} required={required}>\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <Field.Label action={labelAction}>{label}</Field.Label>\n          <EditorLayout\n            isExpandMode={isExpandMode}\n            error={field.error}\n            previewContent={field.value}\n            onCollapse={handleToggleExpand}\n          >\n            <WysiwygNav\n              isExpandMode={isExpandMode}\n              editorRef={editorRef}\n              isPreviewMode={isPreviewMode}\n              onToggleMediaLib={handleToggleMediaLib}\n              onTogglePreviewMode={isExpandMode ? undefined : handleTogglePreviewMode}\n              disabled={disabled}\n            />\n\n            <Editor\n              disabled={disabled}\n              isExpandMode={isExpandMode}\n              editorRef={editorRef}\n              error={field.error}\n              isPreviewMode={isPreviewMode}\n              name={name}\n              onChange={field.onChange}\n              placeholder={placeholder}\n              textareaRef={textareaRef}\n              value={field.value}\n              ref={forwardedRef}\n            />\n\n            {!isExpandMode && <WysiwygFooter onToggleExpand={handleToggleExpand} />}\n          </EditorLayout>\n          <Field.Hint />\n          <Field.Error />\n        </Flex>\n        {mediaLibVisible && (\n          // @ts-expect-error – TODO: fix this way of injecting because it's not really typeable without a registry.\n          <MediaLibraryDialog onClose={handleToggleMediaLib} onSelectAssets={handleSelectAssets} />\n        )}\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedWysiwyg = React.memo(Wysiwyg);\n\nexport { MemoizedWysiwyg as Wysiwyg };\nexport type { WysiwygProps };\n","import { ReactNode, memo } from 'react';\n\nimport {\n  useStrapiApp,\n  useForm,\n  InputRenderer as FormInputRenderer,\n  useField,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\n\nimport { SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocLayout } from '../../../hooks/useDocumentLayout';\nimport { useLazyComponents } from '../../../hooks/useLazyComponents';\n\nimport { BlocksInput } from './FormInputs/BlocksInput/BlocksInput';\nimport { ComponentInput } from './FormInputs/Component/Input';\nimport { DynamicZone, useDynamicZone } from './FormInputs/DynamicZone/Field';\nimport { NotAllowedInput } from './FormInputs/NotAllowed';\nimport { RelationsInput, UnstableRelationsInput } from './FormInputs/Relations';\nimport { UIDInput } from './FormInputs/UID';\nimport { Wysiwyg } from './FormInputs/Wysiwyg/Field';\n\nimport type { EditFieldLayout } from '../../../hooks/useDocumentLayout';\nimport type { Schema } from '@strapi/types';\nimport type { DistributiveOmit } from 'react-redux';\n\ntype InputRendererProps = DistributiveOmit<EditFieldLayout, 'size'>;\n/**\n * @internal\n *\n * @description An abstraction around the regular form input renderer designed\n * specifically to be used in the EditView of the content-manager this understands\n * the complete EditFieldLayout and will handle RBAC conditions and rendering CM specific\n * components such as Blocks / Relations.\n */\nconst InputRenderer = ({ visible, hint: providedHint, ...props }: InputRendererProps) => {\n  const { id, document, collectionType } = useDoc();\n  const isFormDisabled = useForm('InputRenderer', (state) => state.disabled);\n\n  const isInDynamicZone = useDynamicZone('isInDynamicZone', (state) => state.isInDynamicZone);\n\n  const canCreateFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canCreateFields);\n  const canReadFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canReadFields);\n  const canUpdateFields = useDocumentRBAC('InputRenderer', (rbac) => rbac.canUpdateFields);\n  const canUserAction = useDocumentRBAC('InputRenderer', (rbac) => rbac.canUserAction);\n\n  let idToCheck = id;\n  if (collectionType === SINGLE_TYPES) {\n    idToCheck = document?.documentId;\n  }\n\n  const editableFields = idToCheck ? canUpdateFields : canCreateFields;\n  const readableFields = idToCheck ? canReadFields : canCreateFields;\n\n  /**\n   * Component fields are always readable and editable,\n   * however the fields within them may not be.\n   */\n  const canUserReadField = canUserAction(props.name, readableFields, props.type);\n  const canUserEditField = canUserAction(props.name, editableFields, props.type);\n\n  const fields = useStrapiApp('InputRenderer', (app) => app.fields);\n  const { lazyComponentStore } = useLazyComponents(\n    attributeHasCustomFieldProperty(props.attribute) ? [props.attribute.customField] : undefined\n  );\n\n  const hint = useFieldHint(providedHint, props.attribute);\n  const {\n    edit: { components },\n  } = useDocLayout();\n\n  // We pass field in case of Custom Fields to keep backward compatibility\n  const field = useField(props.name);\n\n  if (!visible) {\n    return null;\n  }\n\n  /**\n   * If the user can't read the field then we don't want to ever render it.\n   */\n  if (!canUserReadField && !isInDynamicZone) {\n    return <NotAllowedInput hint={hint} {...props} />;\n  }\n\n  const fieldIsDisabled =\n    (!canUserEditField && !isInDynamicZone) || props.disabled || isFormDisabled;\n\n  /**\n   * Because a custom field has a unique prop but the type could be confused with either\n   * the useField hook or the type of the field we need to handle it separately and first.\n   */\n  if (attributeHasCustomFieldProperty(props.attribute)) {\n    const CustomInput = lazyComponentStore[props.attribute.customField];\n\n    if (CustomInput) {\n      // @ts-expect-error – TODO: fix this type error in the useLazyComponents hook.\n      return <CustomInput {...props} {...field} hint={hint} disabled={fieldIsDisabled} />;\n    }\n\n    return (\n      <FormInputRenderer\n        {...props}\n        hint={hint}\n        // @ts-expect-error – this workaround lets us display that the custom field is missing.\n        type={props.attribute.customField}\n        disabled={fieldIsDisabled}\n      />\n    );\n  }\n\n  /**\n   * This is where we handle ONLY the fields from the `useLibrary` hook.\n   */\n  const addedInputTypes = Object.keys(fields);\n  if (!attributeHasCustomFieldProperty(props.attribute) && addedInputTypes.includes(props.type)) {\n    const CustomInput = fields[props.type];\n    // @ts-expect-error – TODO: fix this type error in the useLibrary hook.\n    return <CustomInput {...props} hint={hint} disabled={fieldIsDisabled} />;\n  }\n\n  /**\n   * These include the content-manager specific fields, failing that we fall back\n   * to the more generic form input renderer.\n   */\n  switch (props.type) {\n    case 'blocks':\n      return <BlocksInput {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\n    case 'component':\n      return (\n        <ComponentInput\n          {...props}\n          hint={hint}\n          layout={components[props.attribute.component].layout}\n          disabled={fieldIsDisabled}\n        >\n          {(inputProps) => <InputRenderer {...inputProps} />}\n        </ComponentInput>\n      );\n    case 'dynamiczone':\n      return <DynamicZone {...props} hint={hint} disabled={fieldIsDisabled} />;\n    case 'relation':\n      if (window.strapi.future.isEnabled('unstableRelationsOnTheFly')) {\n        return <UnstableRelationsInput {...props} hint={hint} disabled={fieldIsDisabled} />;\n      }\n      return <RelationsInput {...props} hint={hint} disabled={fieldIsDisabled} />;\n    case 'richtext':\n      return <Wysiwyg {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\n    case 'uid':\n      return <UIDInput {...props} hint={hint} type={props.type} disabled={fieldIsDisabled} />;\n    /**\n     * Enumerations are a special case because they require options.\n     */\n    case 'enumeration':\n      return (\n        <FormInputRenderer\n          {...props}\n          hint={hint}\n          options={props.attribute.enum.map((value) => ({ value }))}\n          // @ts-expect-error – Temp workaround so we don't forget custom-fields don't work!\n          type={props.customField ? 'custom-field' : props.type}\n          disabled={fieldIsDisabled}\n        />\n      );\n    default:\n      // These props are not needed for the generic form input renderer.\n      const { unique: _unique, mainField: _mainField, ...restProps } = props;\n      return (\n        <FormInputRenderer\n          {...restProps}\n          hint={hint}\n          // @ts-expect-error – Temp workaround so we don't forget custom-fields don't work!\n          type={props.customField ? 'custom-field' : props.type}\n          disabled={fieldIsDisabled}\n        />\n      );\n  }\n};\n\nconst attributeHasCustomFieldProperty = (\n  attribute: Schema.Attribute.AnyAttribute\n): attribute is Schema.Attribute.AnyAttribute & Schema.Attribute.CustomField<string> =>\n  'customField' in attribute && typeof attribute.customField === 'string';\n\nconst useFieldHint = (hint: ReactNode = undefined, attribute: Schema.Attribute.AnyAttribute) => {\n  const { formatMessage } = useIntl();\n\n  const { maximum, minimum } = getMinMax(attribute);\n\n  if (!maximum && !minimum) {\n    return hint;\n  }\n\n  const units = !['biginteger', 'integer', 'number', 'dynamiczone', 'component'].includes(\n    attribute.type\n  )\n    ? formatMessage(\n        {\n          id: 'content-manager.form.Input.hint.character.unit',\n          defaultMessage: '{maxValue, plural, one { character} other { characters}}',\n        },\n        {\n          maxValue: Math.max(minimum || 0, maximum || 0),\n        }\n      )\n    : null;\n\n  const hasMinAndMax = typeof minimum === 'number' && typeof maximum === 'number';\n\n  return formatMessage(\n    {\n      id: 'content-manager.form.Input.hint.text',\n      defaultMessage:\n        '{min, select, undefined {} other {min. {min}}}{divider}{max, select, undefined {} other {max. {max}}}{unit}{br}{description}',\n    },\n    {\n      min: minimum,\n      max: maximum,\n      description: hint,\n      unit: units,\n      divider: hasMinAndMax\n        ? formatMessage({\n            id: 'content-manager.form.Input.hint.minMaxDivider',\n            defaultMessage: ' / ',\n          })\n        : null,\n      br: <br />,\n    }\n  );\n};\n\nconst getMinMax = (attribute: Schema.Attribute.AnyAttribute) => {\n  if ('min' in attribute || 'max' in attribute) {\n    return {\n      maximum: !Number.isNaN(Number(attribute.max)) ? Number(attribute.max) : undefined,\n      minimum: !Number.isNaN(Number(attribute.min)) ? Number(attribute.min) : undefined,\n    };\n  } else if ('maxLength' in attribute || 'minLength' in attribute) {\n    return { maximum: attribute.maxLength, minimum: attribute.minLength };\n  } else {\n    return { maximum: undefined, minimum: undefined };\n  }\n};\n\nconst MemoizedInputRenderer = memo(InputRenderer);\n\nexport type { InputRendererProps };\nexport { MemoizedInputRenderer as InputRenderer, useFieldHint };\n","import { Box, Flex, Grid } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useDoc } from '../../../hooks/useDocument';\nimport { EditLayout } from '../../../hooks/useDocumentLayout';\n\nimport { InputRenderer } from './InputRenderer';\n\nexport const RESPONSIVE_CONTAINER_BREAKPOINTS = {\n  sm: '27.5rem', // 440px\n};\n\nexport const ResponsiveGridRoot = styled(Grid.Root)`\n  container-type: inline-size;\n`;\n\nexport const ResponsiveGridItem = styled(Grid.Item)`\n  grid-column: span 12;\n\n  @container (min-width: ${RESPONSIVE_CONTAINER_BREAKPOINTS.sm}) {\n    ${({ col }) => col && `grid-column: span ${col};`}\n  }\n`;\n\ninterface FormLayoutProps extends Pick<EditLayout, 'layout'> {\n  hasBackground?: boolean;\n}\n\nconst FormLayout = ({ layout, hasBackground = false }: FormLayoutProps) => {\n  const { formatMessage } = useIntl();\n  const { model } = useDoc();\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n      {layout.map((panel, index) => {\n        if (panel.some((row) => row.some((field) => field.type === 'dynamiczone'))) {\n          const [row] = panel;\n          const [field] = row;\n\n          const fieldWithTranslatedLabel = {\n            ...field,\n            label: formatMessage({\n              id: `content-manager.content-types.${model}.${field.name}`,\n              defaultMessage: field.label,\n            }),\n          };\n\n          return (\n            <Grid.Root key={field.name} gap={4}>\n              <Grid.Item col={12} s={12} xs={12} direction=\"column\" alignItems=\"stretch\">\n                <InputRenderer {...fieldWithTranslatedLabel} />\n              </Grid.Item>\n            </Grid.Root>\n          );\n        }\n\n        return (\n          <Box\n            key={index}\n            {...(!hasBackground && {\n              padding: 6,\n              borderColor: 'neutral150',\n              background: 'neutral0',\n              hasRadius: true,\n              shadow: 'tableShadow',\n            })}\n          >\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              {panel.map((row, gridRowIndex) => (\n                <ResponsiveGridRoot key={gridRowIndex} gap={4}>\n                  {row.map(({ size, ...field }) => {\n                    const fieldWithTranslatedLabel = {\n                      ...field,\n                      label: formatMessage({\n                        id: `content-manager.content-types.${model}.${field.name}`,\n                        defaultMessage: field.label,\n                      }),\n                    };\n                    return (\n                      <ResponsiveGridItem\n                        col={size}\n                        key={field.name}\n                        s={12}\n                        xs={12}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <InputRenderer {...fieldWithTranslatedLabel} />\n                      </ResponsiveGridItem>\n                    );\n                  })}\n                </ResponsiveGridRoot>\n              ))}\n            </Flex>\n          </Box>\n        );\n      })}\n    </Flex>\n  );\n};\n\nexport { FormLayout, FormLayoutProps };\n","import { useField } from '@strapi/admin/strapi-admin';\nimport { Box, Flex } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { ResponsiveGridItem, ResponsiveGridRoot } from '../../FormLayout';\nimport { ComponentProvider, useComponent } from '../ComponentContext';\n\nimport type { ComponentInputProps } from './Input';\n\ntype NonRepeatableComponentProps = Omit<ComponentInputProps, 'required' | 'label'>;\n\nconst NonRepeatableComponent = ({\n  attribute,\n  name,\n  children,\n  layout,\n}: NonRepeatableComponentProps) => {\n  const { formatMessage } = useIntl();\n  const { value } = useField(name);\n  const level = useComponent('NonRepeatableComponent', (state) => state.level);\n  const isNested = level > 0;\n\n  return (\n    <ComponentProvider id={value?.id} uid={attribute.component} level={level + 1} type=\"component\">\n      <Box\n        background={'neutral100'}\n        paddingLeft={6}\n        paddingRight={6}\n        paddingTop={6}\n        paddingBottom={6}\n        hasRadius={isNested}\n        borderColor={isNested ? 'neutral200' : undefined}\n      >\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n          {layout.map((row, index) => {\n            return (\n              <ResponsiveGridRoot gap={4} key={index}>\n                {row.map(({ size, ...field }) => {\n                  /**\n                   * Layouts are built from schemas so they don't understand the complete\n                   * schema tree, for components we append the parent name to the field name\n                   * because this is the structure for the data & permissions also understand\n                   * the nesting involved.\n                   */\n                  const completeFieldName = `${name}.${field.name}`;\n\n                  const translatedLabel = formatMessage({\n                    id: `content-manager.components.${attribute.component}.${field.name}`,\n                    defaultMessage: field.label,\n                  });\n\n                  return (\n                    <ResponsiveGridItem\n                      col={size}\n                      key={completeFieldName}\n                      s={12}\n                      xs={12}\n                      direction=\"column\"\n                      alignItems=\"stretch\"\n                    >\n                      {children({ ...field, label: translatedLabel, name: completeFieldName })}\n                    </ResponsiveGridItem>\n                  );\n                })}\n              </ResponsiveGridRoot>\n            );\n          })}\n        </Flex>\n      </Box>\n    </ComponentProvider>\n  );\n};\n\nexport { NonRepeatableComponent };\nexport type { NonRepeatableComponentProps };\n","import * as React from 'react';\n\nimport { useField, useNotification, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  TextButton,\n  VisuallyHidden,\n  Accordion,\n  IconButton,\n  useComposedRefs,\n  BoxComponent,\n} from '@strapi/design-system';\nimport { Plus, Drag, Trash } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { ItemTypes } from '../../../../../constants/dragAndDrop';\nimport { useDoc } from '../../../../../hooks/useDocument';\nimport { useDragAndDrop, type UseDragAndDropOptions } from '../../../../../hooks/useDragAndDrop';\nimport { usePrev } from '../../../../../hooks/usePrev';\nimport { getIn } from '../../../../../utils/objects';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { transformDocument } from '../../../utils/data';\nimport { createDefaultForm } from '../../../utils/forms';\nimport { ResponsiveGridItem, ResponsiveGridRoot } from '../../FormLayout';\nimport { ComponentProvider, useComponent } from '../ComponentContext';\n\nimport { Initializer } from './Initializer';\n\nimport type { ComponentInputProps } from './Input';\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * RepeatableComponent\n * -----------------------------------------------------------------------------------------------*/\n\ntype RepeatableComponentProps = Omit<ComponentInputProps, 'required' | 'label'>;\n\nconst RepeatableComponent = ({\n  attribute,\n  disabled,\n  name,\n  mainField,\n  children,\n  layout,\n}: RepeatableComponentProps) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { search: searchString } = useLocation();\n  const search = React.useMemo(() => new URLSearchParams(searchString), [searchString]);\n  const { components } = useDoc();\n\n  const {\n    value = [],\n    error,\n    rawError,\n  } = useField<Schema.Attribute.ComponentValue<`${string}.${string}`, true>>(name);\n  const addFieldRow = useForm('RepeatableComponent', (state) => state.addFieldRow);\n  const moveFieldRow = useForm('RepeatableComponent', (state) => state.moveFieldRow);\n  const removeFieldRow = useForm('RepeatableComponent', (state) => state.removeFieldRow);\n  const { max = Infinity } = attribute;\n\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string>('');\n  const [liveText, setLiveText] = React.useState('');\n\n  React.useEffect(() => {\n    const hasNestedErrors = rawError && Array.isArray(rawError) && rawError.length > 0;\n    const hasNestedValue = value && Array.isArray(value) && value.length > 0;\n\n    if (hasNestedErrors && hasNestedValue) {\n      const errorOpenItems = rawError\n        .map((_: unknown, idx: number) => {\n          return value[idx] ? value[idx].__temp_key__ : null;\n        })\n        .filter((value) => !!value);\n\n      if (errorOpenItems && errorOpenItems.length > 0) {\n        setCollapseToOpen((collapseToOpen) => {\n          if (!errorOpenItems.includes(collapseToOpen)) {\n            return errorOpenItems[0];\n          }\n\n          return collapseToOpen;\n        });\n      }\n    }\n  }, [rawError, value]);\n\n  /**\n   * Get the temp key of the component that has the field that is currently focussed\n   * as defined by the `field` query param. We can then force this specific component\n   * to be in its \"open\" state.\n   */\n  const componentTmpKeyWithFocussedField = React.useMemo(() => {\n    if (search.has('field')) {\n      const fieldParam = search.get('field');\n\n      if (!fieldParam) {\n        return undefined;\n      }\n\n      const [, path] = fieldParam.split(`${name}.`);\n\n      if (getIn(value, path, undefined) !== undefined) {\n        const [subpath] = path.split('.');\n\n        return getIn(value, subpath, undefined)?.__temp_key__;\n      }\n    }\n\n    return undefined;\n  }, [search, name, value]);\n\n  const prevValue = usePrev(value);\n\n  React.useEffect(() => {\n    /**\n     * When we add a new item to the array, we want to open the collapse.\n     */\n    if (prevValue && prevValue.length < value.length) {\n      setCollapseToOpen(value[value.length - 1].__temp_key__);\n    }\n  }, [value, prevValue]);\n\n  React.useEffect(() => {\n    if (typeof componentTmpKeyWithFocussedField === 'string') {\n      setCollapseToOpen(componentTmpKeyWithFocussedField);\n    }\n  }, [componentTmpKeyWithFocussedField]);\n\n  const toggleCollapses = () => {\n    setCollapseToOpen('');\n  };\n\n  const handleClick = () => {\n    if (value.length < max) {\n      const schema = components[attribute.component];\n      const form = createDefaultForm(schema, components);\n      const data = transformDocument(schema, components)(form);\n\n      addFieldRow(name, data);\n      // setCollapseToOpen(nextTempKey);\n    } else if (value.length >= max) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({\n          id: getTranslation('components.notification.info.maximum-requirement'),\n        }),\n      });\n    }\n  };\n\n  const handleMoveComponentField: ComponentProps['onMoveItem'] = (newIndex, currentIndex) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.reorder'),\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: `${name}.${currentIndex}`,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    moveFieldRow(name, currentIndex, newIndex);\n  };\n\n  const handleValueChange = (key: string) => {\n    setCollapseToOpen(key);\n  };\n\n  const getItemPos = (index: number) => `${index + 1} of ${value.length}`;\n\n  const handleCancel = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.cancel-item'),\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: `${name}.${index}`,\n        }\n      )\n    );\n  };\n\n  const handleGrabItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.grab-item'),\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropItem = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: getTranslation('dnd.drop-item'),\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: `${name}.${index}`,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const ariaDescriptionId = React.useId();\n\n  const level = useComponent('RepeatableComponent', (state) => state.level);\n\n  if (value.length === 0) {\n    return <Initializer disabled={disabled} name={name} onClick={handleClick} />;\n  }\n\n  return (\n    <Box hasRadius>\n      <VisuallyHidden id={ariaDescriptionId}>\n        {formatMessage({\n          id: getTranslation('dnd.instructions'),\n          defaultMessage: `Press spacebar to grab and re-order`,\n        })}\n      </VisuallyHidden>\n      <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>\n      <AccordionRoot\n        $error={error}\n        value={collapseToOpen}\n        onValueChange={handleValueChange}\n        aria-describedby={ariaDescriptionId}\n      >\n        {value.map(({ __temp_key__: key, id }, index) => {\n          const nameWithIndex = `${name}.${index}`;\n          return (\n            <ComponentProvider\n              key={key}\n              // id is always a number in a component\n              id={id as number}\n              uid={attribute.component}\n              level={level + 1}\n              type=\"repeatable\"\n            >\n              <Component\n                disabled={disabled}\n                name={nameWithIndex}\n                attribute={attribute}\n                index={index}\n                mainField={mainField}\n                onMoveItem={handleMoveComponentField}\n                onDeleteComponent={() => {\n                  removeFieldRow(name, index);\n                  toggleCollapses();\n                }}\n                toggleCollapses={toggleCollapses}\n                onCancel={handleCancel}\n                onDropItem={handleDropItem}\n                onGrabItem={handleGrabItem}\n                __temp_key__={key}\n              >\n                {layout.map((row, index) => {\n                  return (\n                    <ResponsiveGridRoot gap={4} key={index}>\n                      {row.map(({ size, ...field }) => {\n                        /**\n                         * Layouts are built from schemas so they don't understand the complete\n                         * schema tree, for components we append the parent name to the field name\n                         * because this is the structure for the data & permissions also understand\n                         * the nesting involved.\n                         */\n                        const completeFieldName = `${nameWithIndex}.${field.name}`;\n\n                        const translatedLabel = formatMessage({\n                          id: `content-manager.components.${attribute.component}.${field.name}`,\n                          defaultMessage: field.label,\n                        });\n\n                        return (\n                          <ResponsiveGridItem\n                            col={size}\n                            key={completeFieldName}\n                            s={12}\n                            xs={12}\n                            direction=\"column\"\n                            alignItems=\"stretch\"\n                          >\n                            {children({\n                              ...field,\n                              label: translatedLabel,\n                              name: completeFieldName,\n                            })}\n                          </ResponsiveGridItem>\n                        );\n                      })}\n                    </ResponsiveGridRoot>\n                  );\n                })}\n              </Component>\n            </ComponentProvider>\n          );\n        })}\n        <TextButtonCustom disabled={disabled} onClick={handleClick} startIcon={<Plus />}>\n          {formatMessage({\n            id: getTranslation('containers.EditView.add.new-entry'),\n            defaultMessage: 'Add an entry',\n          })}\n        </TextButtonCustom>\n      </AccordionRoot>\n    </Box>\n  );\n};\n\nconst AccordionRoot = styled(Accordion.Root)<{ $error?: string }>`\n  border: 1px solid\n    ${({ theme, $error }) => ($error ? theme.colors.danger600 : theme.colors.neutral200)};\n`;\n\nconst TextButtonCustom = styled(TextButton)`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral200};\n  padding-inline: ${(props) => props.theme.spaces[6]};\n  padding-block: ${(props) => props.theme.spaces[3]};\n\n  &:not([disabled]) {\n    cursor: pointer;\n\n    &:hover {\n      background-color: ${(props) => props.theme.colors.primary100};\n    }\n  }\n\n  span {\n    font-weight: 600;\n    font-size: 1.4rem;\n    line-height: 2.4rem;\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    transition: background-color 120ms ${(props) => props.theme.motion.easings.easeOutQuad};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Field\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ComponentProps\n  extends Pick<UseDragAndDropOptions, 'onGrabItem' | 'onDropItem' | 'onCancel' | 'onMoveItem'>,\n    Pick<RepeatableComponentProps, 'mainField'> {\n  attribute: Schema.Attribute.Component<`${string}.${string}`, boolean>;\n  disabled?: boolean;\n  index: number;\n  name: string;\n  onDeleteComponent?: React.MouseEventHandler<HTMLButtonElement>;\n  toggleCollapses: () => void;\n  children: React.ReactNode;\n  __temp_key__: string;\n}\n\nconst Component = ({\n  disabled,\n  index,\n  name,\n  mainField = {\n    name: 'id',\n    type: 'integer',\n  },\n  children,\n  onDeleteComponent,\n  toggleCollapses,\n  __temp_key__,\n  ...dragProps\n}: ComponentProps) => {\n  const { formatMessage } = useIntl();\n\n  const displayValue = useForm('RepeatableComponent', (state) => {\n    return getIn(state.values, [...name.split('.'), mainField.name]);\n  });\n\n  const accordionRef = React.useRef<HTMLButtonElement>(null!);\n\n  /**\n   * The last item in the fieldName array will be the index of this component.\n   * Drag and drop should be isolated to the parent component so nested repeatable\n   * components are not affected by the drag and drop of the parent component in\n   * their own re-ordering context.\n   */\n  const componentKey = name.split('.').slice(0, -1).join('.');\n\n  const [{ handlerId, isDragging, handleKeyDown }, boxRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(!disabled, {\n      type: `${ItemTypes.COMPONENT}_${componentKey}`,\n      index,\n      item: {\n        index,\n        displayedValue: displayValue,\n      },\n      onStart() {\n        // Close all collapses\n        toggleCollapses();\n      },\n      ...dragProps,\n    });\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  const composedAccordionRefs = useComposedRefs<HTMLButtonElement>(accordionRef, dragRef);\n  const composedBoxRefs = useComposedRefs<HTMLDivElement>(\n    boxRef as React.RefObject<HTMLDivElement>,\n    dropRef\n  );\n\n  return (\n    <>\n      {isDragging ? (\n        <Preview />\n      ) : (\n        <Accordion.Item ref={composedBoxRefs} value={__temp_key__}>\n          <Accordion.Header>\n            <Accordion.Trigger>{displayValue}</Accordion.Trigger>\n            <Accordion.Actions>\n              <IconButton\n                variant=\"ghost\"\n                onClick={onDeleteComponent}\n                label={formatMessage({\n                  id: getTranslation('containers.Edit.delete'),\n                  defaultMessage: 'Delete',\n                })}\n              >\n                <Trash />\n              </IconButton>\n              <IconButton\n                ref={composedAccordionRefs}\n                variant=\"ghost\"\n                onClick={(e) => e.stopPropagation()}\n                data-handler-id={handlerId}\n                label={formatMessage({\n                  id: getTranslation('components.DragHandle-label'),\n                  defaultMessage: 'Drag',\n                })}\n                onKeyDown={handleKeyDown}\n              >\n                <Drag />\n              </IconButton>\n            </Accordion.Actions>\n          </Accordion.Header>\n          <Accordion.Content>\n            <Flex\n              direction=\"column\"\n              alignItems=\"stretch\"\n              background=\"neutral100\"\n              padding={6}\n              gap={6}\n            >\n              {children}\n            </Flex>\n          </Accordion.Content>\n        </Accordion.Item>\n      )}\n    </>\n  );\n};\n\nconst Preview = () => {\n  return <StyledSpan tag=\"span\" padding={6} background=\"primary100\" />;\n};\n\nconst StyledSpan = styled<BoxComponent<'span'>>(Box)`\n  display: block;\n  outline: 1px dashed ${({ theme }) => theme.colors.primary500};\n  outline-offset: -1px;\n`;\n\nexport { RepeatableComponent };\nexport type { RepeatableComponentProps };\n","import * as React from 'react';\n\nimport { InputProps, useField } from '@strapi/admin/strapi-admin';\nimport { Field, Flex, IconButton } from '@strapi/design-system';\nimport { Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../../hooks/useDocument';\nimport { EditFieldLayout } from '../../../../../hooks/useDocumentLayout';\nimport { getTranslation } from '../../../../../utils/translations';\nimport { transformDocument } from '../../../utils/data';\nimport { createDefaultForm } from '../../../utils/forms';\nimport { type InputRendererProps } from '../../InputRenderer';\n\nimport { Initializer } from './Initializer';\nimport { NonRepeatableComponent } from './NonRepeatable';\nimport { RepeatableComponent } from './Repeatable';\n\ninterface ComponentInputProps\n  extends Omit<Extract<EditFieldLayout, { type: 'component' }>, 'size' | 'hint'>,\n    Pick<InputProps, 'hint'> {\n  labelAction?: React.ReactNode;\n  children: (props: InputRendererProps) => React.ReactNode;\n  /**\n   * We need layout to come from the props, and not via a hook, because Content History needs\n   * a way to modify the normal component layout to add hidden fields.\n   */\n  layout: EditFieldLayout[][];\n}\n\nconst ComponentInput = ({\n  label,\n  required,\n  name,\n  attribute,\n  disabled,\n  labelAction,\n  ...props\n}: ComponentInputProps) => {\n  const { formatMessage } = useIntl();\n  const field = useField(name);\n\n  const showResetComponent = !attribute.repeatable && field.value && !disabled;\n\n  const { components } = useDoc();\n\n  const handleInitialisationClick = () => {\n    const schema = components[attribute.component];\n    const form = createDefaultForm(schema, components);\n    const data = transformDocument(schema, components)(form);\n\n    field.onChange(name, data);\n  };\n\n  return (\n    <Field.Root error={field.error} required={required}>\n      <Flex justifyContent=\"space-between\">\n        <Field.Label action={labelAction}>\n          {label}\n          {attribute.repeatable && (\n            <>&nbsp;({Array.isArray(field.value) ? field.value.length : 0})</>\n          )}\n        </Field.Label>\n\n        {showResetComponent && (\n          <IconButton\n            label={formatMessage({\n              id: getTranslation('components.reset-entry'),\n              defaultMessage: 'Reset Entry',\n            })}\n            variant=\"ghost\"\n            onClick={() => {\n              field.onChange(name, null);\n            }}\n          >\n            <Trash />\n          </IconButton>\n        )}\n      </Flex>\n      {/**\n       * if the field isn't repeatable then we display a button to start the field\n       * TODO: should this just live in the `NonRepeatableComponent`?\n       */}\n      {!attribute.repeatable && !field.value && (\n        <Initializer disabled={disabled} name={name} onClick={handleInitialisationClick} />\n      )}\n      {!attribute.repeatable && field.value ? (\n        <NonRepeatableComponent attribute={attribute} name={name} disabled={disabled} {...props}>\n          {props.children}\n        </NonRepeatableComponent>\n      ) : null}\n      {attribute.repeatable && (\n        <RepeatableComponent attribute={attribute} name={name} disabled={disabled} {...props}>\n          {props.children}\n        </RepeatableComponent>\n      )}\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\nconst MemoizedComponentInput = React.memo(ComponentInput);\n\nexport { MemoizedComponentInput as ComponentInput };\nexport type { ComponentInputProps };\n"],"names":["componentStore","Map","useLazyComponents","componentUids","lazyComponentStore","setLazyComponentStore","useState","Object","fromEntries","newUids","filter","uid","get","loading","setLoading","length","getCustomField","useStrapiApp","state","customFields","useEffect","setStore","store","lazyLoadComponents","uids","components","modules","Promise","all","forEach","index","set","default","componentPromises","reduce","arrayOfPromises","customField","push","Input","cleanup","useCallback","clear","isLazyLoading","codeLanguages","value","label","decorate","baseHandleConvert","editor","attributesToSet","_","lastNodePath","Editor","last","Transforms","unwrapNodes","match","node","isEditor","type","split","at","selection","updatedLastNodePath","entry","above","element","elementPath","setNodes","getAttributesToClear","children","_children","_type","extra","attributesToClear","keys","currentAttributes","key","isText","Node","isNode","pressEnterTwiceToExit","nodeEntry","includes","nodePath","isNodeEnd","isEnd","anchor","lastTextNode","isEmptyLine","text","endsWith","delete","distance","unit","reverse","insertNodes","insertText","modifier","removeMark","decorateCode","path","ranges","Element","isElement","string","language","find","lang","decorateKey","selectedLanguage","Prism","languages","tokens","tokenize","start","token","end","offset","focus","className","CodeBlock","styled","pre","theme","borderRadius","colors","neutral100","spaces","neutral800","CodeEditor","props","useBlocksEditorContext","editorIsFocused","useFocused","imageIsSelected","useSelected","formatMessage","useIntl","isSelectOpen","setIsSelectOpen","React","shouldDisplayLanguageSelect","_jsxs","Box","position","width","_jsx","attributes","code","background","borderColor","borderStyle","borderWidth","shadow","top","marginTop","right","padding","hasRadius","SingleSelect","onChange","open","toString","onOpenChange","ReactEditor","onCloseAutoFocus","e","preventDefault","aria-label","id","defaultMessage","map","SingleSelectOption","codeBlocks","renderElement","icon","CodeBlockIcon","matchNode","isInBlocksSelector","handleConvert","handleEnterKey","snippets","H1","Typography","attrs","tag","lineHeights","H2","H3","H4","H5","H6","handleConvertToHeading","level","headingBlocks","HeadingOne","dragHandleTopMargin","HeadingTwo","HeadingThree","HeadingFour","HeadingFive","HeadingSix","ImageWrapper","Flex","$isFocused","css","primary600","IMAGE_SCHEMA_FIELDS","pick","object","entries","isImage","Image","url","alternativeText","height","image","contentEditable","justifyContent","img","src","alt","ImageDialog","isOpen","setIsOpen","MediaLibraryDialog","insertImages","images","nodeEntryBeingReplaced","isInlineNode","pathToInsert","removeNodes","nodesToInsert","imageNode","select","handleSelectAssets","formattedImages","expectedImage","nodeImage","name","prefixFileUrlWithBackendUrl","allowedTypes","onClose","onSelectAssets","imageBlocks","Picture","handleBackspaceKey","removeLink","SlateElement","insertLink","linkNodes","Array","from","nodes","Range","isCollapsed","link","wrapNodes","editLink","linkEntry","linkPath","linkNodeChildrens","childPath","concat","getEntries","getKeys","isLinkNode","isListNode","StyledLink","RemoveButton","Button","$visible","LinkContent","forwardRef","forwardedRef","findPath","popoverOpen","setPopoverOpen","lastInsertedLinkPath","Path","equals","elementText","child","join","linkText","setLinkText","linkUrl","setLinkUrl","linkInputRef","useRef","isLastInsertedLink","isSaveDisabled","setIsSaveDisabled","onLinkChange","target","URL","startsWith","error","handleSave","stopPropagation","parentPath","parent","handleClose","current","inputNotDirty","Popover","Root","Trigger","ref","href","onClick","color","Content","onPointerDownOutside","direction","gap","Field","alignItems","Label","placeholder","variant","disabled","Boolean","Link","linkBlocks","listStyle","Orderedlist","ol","$listStyleType","Unorderedlist","ul","orderedStyles","unorderedStyles","List","listStyles","format","nextIndex","indentLevel","listStyleType","replaceListWithEmptyBlock","currentListPath","handleBackspaceKeyOnList","event","currentListItem","currentListItemPath","currentList","isListEmpty","isListItemEmpty","isFocusAtTheBeginningOfAChild","parentListEntry","liftNodes","previousEntry","previous","nextEntry","next","previousList","nextList","mergeNodes","handleEnterKeyOnList","currentListItemEntry","currentNode","updatedPath","slice","previousIndentLevel","parentListNodeEntry","modifiedPath","moveNodes","to","createdParagraphPath","splitNodes","handleConvertToList","convertedPath","handleTabOnList","currentListItemIndex","findIndex","item","previousNode","insertAtPath","listBlocks","NumberList","handleTab","BulletList","paragraphBlocks","paragraph","Paragraph","anchorPathInitialPosition","always","parentBlockEntry","parentBlockPath","fragmentedNode","hasNextNode","Blockquote","blockquote","role","fontWeights","regular","neutral200","neutral600","quoteBlocks","quote","div","Quotes","ObservedToolbarComponent","lastVisibleIndex","setLastVisibleIndex","rootRef","isVisible","containerRef","useElementOnScreen","prev","Math","max","threshold","root","style","visibility","EditorToolbarObserver","observedComponents","menuTriggerVariant","toolbarRef","hasHiddenItems","menuIndex","setOpen","isMenuOpenWithContent","menuTriggerRef","component","toolbar","toSpliced","Menu","defaultOpen","paddingLeft","paddingRight","IconButton","More","maxHeight","minWidth","popoverPlacement","Fragment","menu","ToolbarWrapper","neutral150","ToolbarSeparator","Toolbar","Separator","FlexButton","primary100","SelectWrapper","useConversionModal","modalElement","setModalComponent","handleConversionResult","renderModal","cloneElement","Date","now","ToolbarButton","Icon","isActive","handleClick","labelMessage","enabledColor","Tooltip","ToggleItem","data-state","onMouseDown","aria-disabled","asChild","fill","BlocksDropdown","blocks","blockKeysToInclude","currentKeys","block","blockSelected","setBlockSelected","handleSelect","optionKey","isSelectorBlockKey","editorIsEmpty","isEmpty","currentListEntry","maybeRenderModal","preventSelectFocus","selectedNode","anchorNode","edge","depth","anchorBlockKey","blockKey","_Fragment","startIcon","BlockOption","isSelected","ListButton","location","isListActive","isListDisabled","anchorNodeEntry","focusNodeEntry","toggleList","StyledMenuItem","onSelect","LinkButton","isLinkActive","unhangRange","isLinkDisabled","addLink","shouldSaveLinkPath","Item","BlocksToolbar","modifiers","checkButtonDisabled","isButtonDisabled","checkIsActive","handleToggle","ToggleGroup","grow","overflow","StyledEditable","Editable","isExpandedMode","Wrapper","isOverDropTarget","DropPlaceholder","dragDirection","placeholderMargin","DIRECTIONS","UPWARD","DOWNWARD","DragItem","$dragVisibility","DragIconButton","$dragHandleTopMargin","neutral500","DragAndDropElement","setDragDirection","setLiveText","dragVisibility","setDragVisibility","handleMoveBlock","newIndex","currentIndex","currentIndexPosition","newIndexPosition","getTranslation","handlerId","isDragging","blockRef","dropRef","dragRef","useDragAndDrop","ItemTypes","BLOCKS","displayedValue","onDropItem","composedBoxRefs","useComposedRefs","marginLeft","as","CloneDragItem","data-handler-id","onDragStart","currentTarget","getAttribute","opacity","onDragEnd","onMouseMove","onMouseLeave","tabIndex","withTooltip","draggable","Drag","baseRenderLeaf","wrappedChildren","currentChildren","modifierEntry","leaf","renderLeaf","span","baseRenderElement","blockMatch","values","BlocksContent","ariaLabelId","blocksRef","handleMoveBlocks","checkSnippet","textNode","textNodePath","blockMatchingSnippet","handleEnter","selectedBlock","shiftKey","handleBackspaceEvent","handleKeyboardShortcuts","isCtrlOrCmd","metaKey","ctrlKey","isValidEventKey","handleKeyDown","blur","handleScrollSelectionIntoView","domRange","toDOMRange","domRect","getBoundingClientRect","blocksInput","editorRect","bottom","scrollBy","behavior","fontSize","lineHeight","paddingTop","paddingBottom","aria-labelledby","readOnly","onKeyDown","scrollSelectionIntoView","onDrop","CollapseIconButton","ExpandWrapper","EditorLayout","onCollapse","ariaDescriptionId","document","body","classList","add","remove","Portal","aria-modal","FocusTrap","onEscape","left","zIndex","aria-describedby","Collapse","InputWrapper","$disabled","$hasError","danger600","neutral0","undefined","stylesToInherit","BoldText","fontWeight","ItalicText","UnderlineText","textDecoration","StrikeThroughText","InlineCode","baseCheckIsActive","marks","baseHandleToggle","endOfEditor","addMark","bold","Bold","italic","Italic","underline","Underline","strikethrough","StrikeThrough","Code","withImages","isVoid","withLinks","isInline","apply","insertData","operation","hasPrevious","transform","linksInSelection","selectionIsInLink","selectionIsAtEndOfLink","Point","data","pastedText","getData","withStrapiSchema","normalizeNode","selectorBlockKeys","BlocksEditorProvider","usePartialBlocksEditorContext","createContext","consumerName","context","useSlate","EditorDivider","Divider","ExpandIconButton","shadows","filterShadow","useResetKey","slateUpdatesCount","valueUpdatesCount","setKey","previousKey","incrementSlateUpdatesCount","pipe","fns","fn","BlocksEditor","contentProps","withHistory","withReact","createEditor","liveText","useId","setIsExpandedMode","handleToggleExpand","useImperativeHandle","handleSlateChange","isAstChange","operations","some","op","VisuallyHidden","aria-live","Slate","initialValue","Expand","BlocksInput","required","hint","labelAction","editorProps","field","useField","action","Hint","Error","MemoizedBlocksInput","memo","Initializer","cursor","PlusCircle","textColor","AddComponentButton","hasError","isDisabled","StyledButton","StyledAddIcon","aria-hidden","$isOpen","danger200","ComponentCategory","category","onAddComponent","Accordion","Header","ResponsiveAccordionContent","Grid","displayName","ComponentBox","shrink","ComponentIcon","RESPONSIVE_CONTAINER_BREAKPOINTS","sm","motion","easings","easeOutQuad","primary200","ComponentPicker","dynamicComponentsByCategory","onClickAddComponent","handleAddComponentToDz","componentUid","defaultValue","DynamicComponent","onRemoveComponentClick","onMoveComponent","onGrabItem","onCancel","formValues","useForm","edit","useDocLayout","title","useMemo","mainField","settings","mainFieldValue","getIn","String","trim","mainValue","boxRef","dragPreviewRef","DYNAMIC_ZONE","onMoveItem","getEmptyImage","captureDraggingState","accordionValue","rawError","collapseToOpen","setCollapseToOpen","accordionActions","Trash","size","endIcon","focusable","SubRoot","SubTrigger","SubContent","MenuItem","accordionTitle","ComponentContainer","Rectangle","StyledBox","Preview","onValueChange","COMPONENT_ICONS","dashboard","Actions","AccordionContentRadius","layout","row","rowInd","col","s","xs","ResponsiveGridRoot","fieldName","fieldWithTranslatedLabel","ResponsiveGridItem","InputRenderer","tableShadow","primary500","DynamicZoneLabel","numberOfComponents","maxWidth","ellipsis","DynamicZoneProvider","useDynamicZone","isInDynamicZone","DynamicZone","attribute","disabledProp","Infinity","min","addComponentIsOpen","setAddComponentIsOpen","isLoading","useDoc","addFieldRow","removeFieldRow","moveFieldRow","acc","info","toggleNotification","useNotification","dynamicDisplayedComponentsLength","handleAddComponent","schema","form","createDefaultForm","transformations","transformDocument","__component","handleClickOpenPicker","message","handleMoveComponent","getItemPos","handleCancel","handleGrabItem","handleDropItem","handleRemoveComponent","renderButtonLabel","number","componentName","useComponent","ComponentProvider","__temp_key__","NotAllowedInput","TextInput","startAction","EyeStriked","uidApi","contentManagerApi","injectEndpoints","endpoints","builder","getDefaultUID","query","params","method","config","transformResponse","response","generateUID","mutation","getAvailability","providesTags","_res","_error","contentTypeUID","useGenerateUIDMutation","useGetDefaultUIDQuery","useGetAvailabilityQuery","UID_REGEX","UIDInput","model","allFormValues","availability","setAvailability","showRegenerate","setShowRegenerate","isCloning","useMatch","CLONE_PATH","debouncedValue","useDebounce","hasChanged","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","useQueryParams","buildValidParams","defaultGeneratedUID","isGeneratingDefaultUID","apiError","skip","isGeneratingUID","handleRegenerateClick","res","err","availabilityData","isCheckingAvailability","availabilityError","test","timer","isAvailable","window","setTimeout","clearTimeout","fieldRef","useFocusInputField","composedRefs","shouldShowAvailability","endAction","TextValidation","$available","data-not-here-outer","pointerEvents","CheckCircle","WarningCircle","FieldActionWrapper","onMouseEnter","LoadingWrapper","data-testid","Loader","ArrowClockwise","Action","neutral400","success600","rotation","keyframes","MemoizedUIDInput","md","Markdown","html","xhtmlOut","breaks","langPrefix","linkify","typographer","highlight","str","getLanguage","utils","escapeHtml","toLowerCase","result","highlightAuto","use","abbr","container","deflist","emoji","footnote","ins","mark","sub","sup","renderer","rules","footnote_ref","idx","options","env","slf","caption","footnote_caption","footnote_anchor","PreviewWysiwyg","sanitizeHtml","render","replaceAll","defaults","allowedTags","allowedAttributes","source","dangerouslySetInnerHTML","__html","listRE","emptyListRE","unorderedListRE","newlineAndIndentContinueMarkdownList","cm","getOption","CodeMirror","Pass","listSelections","replacements","i","pos","head","eolState","getStateAfter","line","inList","list","inQuote","getLine","exec","cursorBeforeBullet","ch","empty","execCommand","endOfQuote","endOfList","replaceRange","indent","after","numbered","indexOf","bullet","parseInt","replace","incrementRemainingMarkdownListNumbers","replaceSelections","startLine","lookAhead","skipCount","startItem","startIndent","nextLineNumber","nextLine","nextItem","nextIndent","newNumber","nextNumber","itemNumber","isNaN","editorRef","isPreviewMode","isExpandMode","textareaRef","onChangeRef","toTextArea","fromTextArea","lineWrapping","extraKeys","Enter","Tab","smartIndent","spellcheck","inputStyle","commands","on","doc","getValue","hasFocus","setValue","setOption","getInputField","scrollIntoView","args","EditorAndPreviewWrapper","EditorStylesContainer","$isExpandMode","textarea","previewContent","BoxWithBorder","flex","ExpandButton","floor","padStart","neutral700","replaceText","markdownName","textToChange","editedText","insertListOrTitle","markdown","textToInsert","markdownHandler","markdownType","textToEdit","getSelection","replaceSelection","getCursor","endSelection","startSelection","setSelection","listHandler","listType","getDoc","insertion","somethingSelected","selections","sort","lineInsertion","currentLine","listToInsert","lineContent","titleHandler","titleType","titleToInsert","lineWithNoTitle","newLastLineLength","setCursor","insertFile","files","file","contentLength","mime","insertWithTextToEdit","contentToMove","getRange","newLine","insertWithoutTextToEdit","quoteAndCodeHandler","IconButtonGroup","WysiwygFooter","onToggleExpand","WysiwygNav","onToggleMediaLib","onTogglePreviewMode","handleActionClick","currentEditorRef","Wysiwyg","setIsPreviewMode","mediaLibVisible","setMediaLibVisible","setIsExpandMode","handleToggleMediaLib","handleTogglePreviewMode","formattedFiles","f","MemoizedWysiwyg","visible","providedHint","collectionType","isFormDisabled","canCreateFields","useDocumentRBAC","rbac","canReadFields","canUpdateFields","canUserAction","idToCheck","SINGLE_TYPES","documentId","editableFields","readableFields","canUserReadField","canUserEditField","fields","app","attributeHasCustomFieldProperty","useFieldHint","fieldIsDisabled","CustomInput","FormInputRenderer","addedInputTypes","ComponentInput","inputProps","strapi","future","isEnabled","UnstableRelationsInput","RelationsInput","enum","unique","_unique","_mainField","restProps","maximum","minimum","getMinMax","units","maxValue","hasMinAndMax","description","divider","br","Number","maxLength","minLength","MemoizedInputRenderer","FormLayout","hasBackground","panel","gridRowIndex","NonRepeatableComponent","isNested","completeFieldName","translatedLabel","RepeatableComponent","search","searchString","useLocation","URLSearchParams","hasNestedErrors","isArray","hasNestedValue","errorOpenItems","componentTmpKeyWithFocussedField","has","fieldParam","subpath","prevValue","usePrev","toggleCollapses","handleMoveComponentField","handleValueChange","AccordionRoot","$error","nameWithIndex","Component","onDeleteComponent","TextButtonCustom","Plus","TextButton","dragProps","displayValue","accordionRef","componentKey","COMPONENT","onStart","composedAccordionRefs","StyledSpan","showResetComponent","repeatable","handleInitialisationClick","MemoizedComponentInput"],"mappings":"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"}