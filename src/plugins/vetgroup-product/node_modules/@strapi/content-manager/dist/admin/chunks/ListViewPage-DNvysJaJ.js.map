{"version":3,"file":"ListViewPage-DNvysJaJ.js","sources":["../../../admin/src/pages/ListView/components/Filters.tsx","../../../admin/src/pages/ListView/components/TableCells/CellValue.tsx","../../../admin/src/pages/ListView/components/TableCells/Components.tsx","../../../admin/src/pages/ListView/components/TableCells/Media.tsx","../../../admin/src/pages/ListView/components/TableCells/Relations.tsx","../../../admin/src/pages/ListView/components/TableCells/CellContent.tsx","../../../admin/src/pages/ListView/components/ViewSettingsMenu.tsx","../../../admin/src/pages/ListView/ListViewPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Filters,\n  useField,\n  useAuth,\n  useTracking,\n  useQueryParams,\n  useAdminUsers,\n} from '@strapi/admin/strapi-admin';\nimport { Combobox, ComboboxOption, useCollator } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { CREATOR_FIELDS } from '../../../constants/attributes';\nimport { useContentTypeSchema } from '../../../hooks/useContentTypeSchema';\nimport { useDebounce } from '../../../hooks/useDebounce';\nimport { Schema } from '../../../hooks/useDocument';\nimport { useGetContentTypeConfigurationQuery } from '../../../services/contentTypes';\nimport { getMainField } from '../../../utils/attributes';\nimport { getDisplayName } from '../../../utils/users';\n\n/**\n * If new attributes are added, this list needs to be updated.\n */\nconst NOT_ALLOWED_FILTERS = [\n  'json',\n  'component',\n  'media',\n  'richtext',\n  'dynamiczone',\n  'password',\n  'blocks',\n];\nconst DEFAULT_ALLOWED_FILTERS = ['createdAt', 'updatedAt'];\nconst USER_FILTER_ATTRIBUTES = [...CREATOR_FIELDS, 'strapi_assignee'];\n\n/* -------------------------------------------------------------------------------------------------\n * Filters\n * -----------------------------------------------------------------------------------------------*/\ninterface FiltersProps {\n  disabled?: boolean;\n  schema: Schema;\n}\n\nconst FiltersImpl = ({ disabled, schema }: FiltersProps) => {\n  const { attributes, uid: model, options } = schema;\n  const { formatMessage, locale } = useIntl();\n  const { trackUsage } = useTracking();\n  const allPermissions = useAuth('FiltersImpl', (state) => state.permissions);\n  const [{ query }] = useQueryParams<Filters.Query>();\n  const { schemas } = useContentTypeSchema();\n\n  const canReadAdminUsers = React.useMemo(\n    () =>\n      allPermissions.filter(\n        (permission) => permission.action === 'admin::users.read' && permission.subject === null\n      ).length > 0,\n    [allPermissions]\n  );\n\n  const selectedUserIds = (query?.filters?.$and ?? []).reduce<string[]>((acc, filter) => {\n    const [key, value] = Object.entries(filter)[0];\n    if (typeof value.id !== 'object') {\n      return acc;\n    }\n\n    const id = value.id.$eq || value.id.$ne;\n\n    if (id && USER_FILTER_ATTRIBUTES.includes(key) && !acc.includes(id)) {\n      acc.push(id);\n    }\n\n    return acc;\n  }, []);\n\n  const { data: userData, isLoading: isLoadingAdminUsers } = useAdminUsers(\n    { filters: { id: { $in: selectedUserIds } } },\n    {\n      // fetch the list of admin users only if the filter contains users and the\n      // current user has permissions to display users\n      skip: selectedUserIds.length === 0 || !canReadAdminUsers,\n    }\n  );\n\n  const { users = [] } = userData ?? {};\n\n  const { metadata } = useGetContentTypeConfigurationQuery(model, {\n    selectFromResult: ({ data }) => ({ metadata: data?.contentType.metadatas ?? {} }),\n  });\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const displayedFilters = React.useMemo(() => {\n    const [{ properties: { fields = [] } = { fields: [] } }] = allPermissions.filter(\n      (permission) =>\n        permission.action === 'plugin::content-manager.explorer.read' &&\n        permission.subject === model\n    );\n\n    const allowedFields = fields.filter((field) => {\n      const attribute = attributes[field] ?? {};\n\n      return attribute.type && !NOT_ALLOWED_FILTERS.includes(attribute.type);\n    });\n\n    return (\n      [\n        'id',\n        ...allowedFields,\n        ...DEFAULT_ALLOWED_FILTERS,\n        ...(canReadAdminUsers ? CREATOR_FIELDS : []),\n      ]\n        .map((name) => {\n          const attribute = attributes[name];\n\n          if (NOT_ALLOWED_FILTERS.includes(attribute.type)) {\n            return null;\n          }\n\n          const { mainField: mainFieldName = '', label } = metadata[name].list;\n\n          let filter: Filters.Filter = {\n            name,\n            label: label ?? '',\n            mainField: getMainField(attribute, mainFieldName, { schemas, components: {} }),\n            // @ts-expect-error â€“ TODO: this is filtered out above in the `allowedFields` call but TS complains, is there a better way to solve this?\n            type: attribute.type,\n          };\n\n          if (\n            attribute.type === 'relation' &&\n            'target' in attribute &&\n            attribute.target === 'admin::user'\n          ) {\n            filter = {\n              ...filter,\n              input: AdminUsersFilter,\n              options: users.map((user) => ({\n                label: getDisplayName(user),\n                value: user.id.toString(),\n              })),\n              operators: [\n                {\n                  label: formatMessage({\n                    id: 'components.FilterOptions.FILTER_TYPES.$eq',\n                    defaultMessage: 'is',\n                  }),\n                  value: '$eq',\n                },\n                {\n                  label: formatMessage({\n                    id: 'components.FilterOptions.FILTER_TYPES.$ne',\n                    defaultMessage: 'is not',\n                  }),\n                  value: '$ne',\n                },\n              ],\n              mainField: {\n                name: 'id',\n                type: 'integer',\n              },\n            };\n          }\n\n          if (attribute.type === 'enumeration') {\n            filter = {\n              ...filter,\n              options: attribute.enum.map((value) => ({\n                label: value,\n                value,\n              })),\n            };\n          }\n\n          return filter;\n        })\n        .filter(Boolean) as Filters.Filter[]\n    ).toSorted((a, b) => formatter.compare(a.label, b.label));\n  }, [\n    allPermissions,\n    canReadAdminUsers,\n    model,\n    attributes,\n    metadata,\n    schemas,\n    users,\n    formatMessage,\n    formatter,\n  ]);\n\n  const onOpenChange = (isOpen: boolean) => {\n    if (isOpen) {\n      trackUsage('willFilterEntries');\n    }\n  };\n\n  const handleFilterChange: Filters.Props['onChange'] = (data) => {\n    const attribute = attributes[data.name];\n\n    if (attribute) {\n      trackUsage('didFilterEntries', {\n        useRelation: attribute.type === 'relation',\n      });\n    }\n  };\n\n  return (\n    <Filters.Root\n      disabled={disabled}\n      options={displayedFilters}\n      onOpenChange={onOpenChange}\n      onChange={handleFilterChange}\n    >\n      <Filters.Trigger />\n      <Filters.Popover />\n      <Filters.List />\n    </Filters.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AdminUsersFilter\n * -----------------------------------------------------------------------------------------------*/\n\nconst AdminUsersFilter = ({ name }: Filters.ValueInputProps) => {\n  const [pageSize, setPageSize] = React.useState(10);\n  const [search, setSearch] = React.useState('');\n  const { formatMessage } = useIntl();\n\n  const debouncedSearch = useDebounce(search, 300);\n\n  const { data, isLoading } = useAdminUsers({\n    pageSize,\n    _q: debouncedSearch,\n  });\n  const field = useField(name);\n\n  const handleOpenChange = (isOpen?: boolean) => {\n    if (!isOpen) {\n      setPageSize(10);\n    }\n  };\n\n  const { users = [], pagination } = data ?? {};\n  const { pageCount = 1, page = 1 } = pagination ?? {};\n\n  return (\n    <Combobox\n      value={field.value}\n      aria-label={formatMessage({\n        id: 'content-manager.components.Filters.usersSelect.label',\n        defaultMessage: 'Search and select a user to filter',\n      })}\n      onOpenChange={handleOpenChange}\n      onChange={(value) => field.onChange(name, value)}\n      loading={isLoading}\n      onLoadMore={() => setPageSize(pageSize + 10)}\n      hasMoreItems={page < pageCount}\n      onInputChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        setSearch(e.currentTarget.value);\n      }}\n    >\n      {users.map((user) => {\n        return (\n          <ComboboxOption key={user.id} value={user.id.toString()}>\n            {getDisplayName(user)}\n          </ComboboxOption>\n        );\n      })}\n    </Combobox>\n  );\n};\n\nexport { FiltersImpl as Filters };\nexport type { FiltersProps };\n","import parseISO from 'date-fns/parseISO';\nimport toString from 'lodash/toString';\nimport { useIntl } from 'react-intl';\n\nimport type { Schema } from '@strapi/types';\n\ninterface CellValueProps {\n  type: Schema.Attribute.Kind | 'custom';\n  value: any;\n}\n\nconst CellValue = ({ type, value }: CellValueProps) => {\n  const { formatDate, formatTime, formatNumber } = useIntl();\n  let formattedValue = value;\n\n  if (type === 'date') {\n    formattedValue = formatDate(parseISO(value), { dateStyle: 'full' });\n  }\n\n  if (type === 'datetime') {\n    formattedValue = formatDate(value, { dateStyle: 'full', timeStyle: 'short' });\n  }\n\n  if (type === 'time') {\n    const [hour, minute, second] = value.split(':');\n    const date = new Date();\n    date.setHours(hour);\n    date.setMinutes(minute);\n    date.setSeconds(second);\n\n    formattedValue = formatTime(date, {\n      timeStyle: 'short',\n    });\n  }\n\n  if (['float', 'decimal'].includes(type)) {\n    formattedValue = formatNumber(value, {\n      // Should be kept in sync with the corresponding value\n      // in the design-system/NumberInput: https://github.com/strapi/design-system/blob/main/packages/strapi-design-system/src/NumberInput/NumberInput.js#L53\n      maximumFractionDigits: 20,\n    });\n  }\n\n  if (['integer', 'biginteger'].includes(type)) {\n    formattedValue = formatNumber(value, { maximumFractionDigits: 0 });\n  }\n\n  return toString(formattedValue);\n};\n\nexport { CellValue };\nexport type { CellValueProps };\n","import { Badge, Tooltip, Typography, Menu } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { CellContentProps } from './CellContent';\nimport { CellValue } from './CellValue';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * SingleComponent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SingleComponentProps extends Pick<CellContentProps, 'mainField'> {\n  content: Schema.Attribute.Value<Schema.Attribute.Component<`${string}.${string}`, false>>;\n}\n\nconst SingleComponent = ({ content, mainField }: SingleComponentProps) => {\n  if (!mainField) {\n    return null;\n  }\n\n  return (\n    <Tooltip label={content[mainField.name]}>\n      <Typography maxWidth=\"25rem\" textColor=\"neutral800\" ellipsis>\n        <CellValue type={mainField.type} value={content[mainField.name]} />\n      </Typography>\n    </Tooltip>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * RepeatableComponent\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RepeatableComponentProps extends Pick<CellContentProps, 'mainField'> {\n  content: Schema.Attribute.Value<Schema.Attribute.Component<`${string}.${string}`, true>>;\n}\n\nconst RepeatableComponent = ({ content, mainField }: RepeatableComponentProps) => {\n  const { formatMessage } = useIntl();\n\n  if (!mainField) {\n    return null;\n  }\n\n  return (\n    <Menu.Root>\n      <Menu.Trigger onClick={(e) => e.stopPropagation()}>\n        <Badge>{content.length}</Badge>\n        {formatMessage(\n          {\n            id: 'content-manager.containers.list.items',\n            defaultMessage: '{number, plural, =0 {items} one {item} other {items}}',\n          },\n          { number: content.length }\n        )}\n      </Menu.Trigger>\n      <Menu.Content>\n        {content.map((item) => (\n          <Menu.Item key={item.id} disabled>\n            <Typography maxWidth=\"50rem\" ellipsis>\n              <CellValue type={mainField.type} value={item[mainField.name]} />\n            </Typography>\n          </Menu.Item>\n        ))}\n      </Menu.Content>\n    </Menu.Root>\n  );\n};\n\nexport { SingleComponent, RepeatableComponent };\nexport type { SingleComponentProps, RepeatableComponentProps };\n","import * as React from 'react';\n\nimport { Avatar, Flex, Tooltip, Typography, TypographyComponent } from '@strapi/design-system';\nimport { styled } from 'styled-components';\n\nimport { prefixFileUrlWithBackendUrl } from '../../../../utils/urls';\n\nimport type { Data } from '@strapi/types';\n\ninterface MediaFile {\n  id?: Data.ID;\n  alternativeText?: string;\n  ext: string;\n  formats: {\n    thumbnail?: {\n      url?: string;\n    };\n  };\n  mime: string;\n  name: string;\n  url: string;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Media\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MediaSingleProps extends MediaFile {}\n\nconst getFileExtension = (ext: string) => (ext && ext[0] === '.' ? ext.substring(1) : ext);\n\nconst MediaSingle = ({ url, mime, alternativeText, name, ext, formats }: MediaSingleProps) => {\n  const fileURL = prefixFileUrlWithBackendUrl(url)!;\n\n  if (mime.includes('image')) {\n    const thumbnail = formats?.thumbnail?.url;\n    const mediaURL = prefixFileUrlWithBackendUrl(thumbnail) || fileURL;\n\n    return (\n      <Avatar.Item\n        src={mediaURL}\n        alt={alternativeText || name}\n        fallback={alternativeText || name}\n        preview\n      />\n    );\n  }\n\n  const fileExtension = getFileExtension(ext);\n  const fileName = name.length > 100 ? `${name.substring(0, 100)}...` : name;\n\n  return (\n    <Tooltip description={fileName}>\n      <FileWrapper>{fileExtension}</FileWrapper>\n    </Tooltip>\n  );\n};\n\nconst FileWrapper = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <Flex\n      tag=\"span\"\n      position=\"relative\"\n      borderRadius=\"50%\"\n      width=\"26px\"\n      height=\"26px\"\n      borderColor=\"neutral200\"\n      background=\"neutral150\"\n      paddingLeft=\"1px\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      <FileTypography variant=\"sigma\" textColor=\"neutral600\">\n        {children}\n      </FileTypography>\n    </Flex>\n  );\n};\n\nconst FileTypography = styled<TypographyComponent>(Typography)`\n  font-size: 0.9rem;\n  line-height: 0.9rem;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * MediaMultiple\n * -----------------------------------------------------------------------------------------------*/\n\ninterface MediaMultipleProps {\n  content: MediaFile[];\n}\n\nconst MediaMultiple = ({ content }: MediaMultipleProps) => {\n  return (\n    <Avatar.Group>\n      {content.map((file, index) => {\n        const key = `${file.id}${index}`;\n\n        if (index === 3) {\n          const remainingFiles = `+${content.length - 3}`;\n\n          return <FileWrapper key={key}>{remainingFiles}</FileWrapper>;\n        }\n\n        if (index > 3) {\n          return null;\n        }\n\n        return <MediaSingle key={key} {...file} />;\n      })}\n    </Avatar.Group>\n  );\n};\n\nexport { MediaMultiple, MediaSingle };\nexport type { MediaMultipleProps, MediaSingleProps };\n","import * as React from 'react';\n\nimport { Typography, Loader, useNotifyAT, Menu } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useGetRelationsQuery } from '../../../../services/relations';\nimport { getRelationLabel } from '../../../../utils/relations';\nimport { getTranslation } from '../../../../utils/translations';\n\nimport type { CellContentProps } from './CellContent';\n\n/* -------------------------------------------------------------------------------------------------\n * RelationSingle\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RelationSingleProps extends Pick<CellContentProps, 'mainField' | 'content'> {}\n\nconst RelationSingle = ({ mainField, content }: RelationSingleProps) => {\n  return (\n    <Typography maxWidth=\"50rem\" textColor=\"neutral800\" ellipsis>\n      {getRelationLabel(content, mainField)}\n    </Typography>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * RelationMultiple\n * -----------------------------------------------------------------------------------------------*/\n\ninterface RelationMultipleProps\n  extends Pick<CellContentProps, 'mainField' | 'content' | 'name' | 'rowId'> {}\n\n/**\n * TODO: fix this component â€“ tracking issue https://strapi-inc.atlassian.net/browse/CONTENT-2184\n */\nconst RelationMultiple = ({ mainField, content, rowId, name }: RelationMultipleProps) => {\n  const { model } = useDoc();\n  const { formatMessage } = useIntl();\n  const { notifyStatus } = useNotifyAT();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const [targetField] = name.split('.');\n\n  const { data, isLoading } = useGetRelationsQuery(\n    {\n      model,\n      id: rowId,\n      targetField,\n    },\n    {\n      skip: !isOpen,\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const contentCount = Array.isArray(content) ? content.length : content.count;\n\n  React.useEffect(() => {\n    if (data) {\n      notifyStatus(\n        formatMessage({\n          id: getTranslation('DynamicTable.relation-loaded'),\n          defaultMessage: 'Relations have been loaded',\n        })\n      );\n    }\n  }, [data, formatMessage, notifyStatus]);\n\n  return (\n    <Menu.Root onOpenChange={(isOpen) => setIsOpen(isOpen)}>\n      <Menu.Trigger onClick={(e) => e.stopPropagation()}>\n        <Typography style={{ cursor: 'pointer' }} textColor=\"neutral800\" fontWeight=\"regular\">\n          {contentCount > 0\n            ? formatMessage(\n                {\n                  id: 'content-manager.containers.list.items',\n                  defaultMessage: '{number} {number, plural, =0 {items} one {item} other {items}}',\n                },\n                { number: contentCount }\n              )\n            : '-'}\n        </Typography>\n      </Menu.Trigger>\n      <Menu.Content>\n        {isLoading && (\n          <Menu.Item disabled>\n            <Loader small>\n              {formatMessage({\n                id: getTranslation('ListViewTable.relation-loading'),\n                defaultMessage: 'Relations are loading',\n              })}\n            </Loader>\n          </Menu.Item>\n        )}\n        {data?.results && (\n          <>\n            {data.results.map((entry) => (\n              <Menu.Item key={entry.documentId} disabled>\n                <Typography maxWidth=\"50rem\" ellipsis>\n                  {getRelationLabel(entry, mainField)}\n                </Typography>\n              </Menu.Item>\n            ))}\n\n            {data?.pagination && data?.pagination.total > 10 && (\n              <Menu.Item\n                aria-disabled\n                aria-label={formatMessage({\n                  id: getTranslation('ListViewTable.relation-more'),\n                  defaultMessage: 'This relation contains more entities than displayed',\n                })}\n              >\n                <Typography>â€¦</Typography>\n              </Menu.Item>\n            )}\n          </>\n        )}\n      </Menu.Content>\n    </Menu.Root>\n  );\n};\n\nexport { RelationSingle, RelationMultiple };\nexport type { RelationSingleProps, RelationMultipleProps };\n","import { Tooltip, Typography } from '@strapi/design-system';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { CellValue } from './CellValue';\nimport { SingleComponent, RepeatableComponent } from './Components';\nimport { MediaSingle, MediaMultiple } from './Media';\nimport { RelationMultiple, RelationSingle } from './Relations';\n\nimport type { ListFieldLayout } from '../../../../hooks/useDocumentLayout';\nimport type { Schema, Data } from '@strapi/types';\n\ninterface CellContentProps extends Omit<ListFieldLayout, 'cellFormatter'> {\n  content: Schema.Attribute.Value<Schema.Attribute.AnyAttribute>;\n  rowId: Data.ID;\n}\n\nconst CellContent = ({ content, mainField, attribute, rowId, name }: CellContentProps) => {\n  if (!hasContent(content, mainField, attribute)) {\n    return (\n      <Typography\n        textColor=\"neutral800\"\n        paddingLeft={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\n        paddingRight={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\n      >\n        -\n      </Typography>\n    );\n  }\n\n  switch (attribute.type) {\n    case 'media':\n      if (!attribute.multiple) {\n        return <MediaSingle {...content} />;\n      }\n\n      return <MediaMultiple content={content} />;\n\n    case 'relation': {\n      if (isSingleRelation(attribute.relation)) {\n        return <RelationSingle mainField={mainField} content={content} />;\n      }\n\n      return <RelationMultiple rowId={rowId} mainField={mainField} content={content} name={name} />;\n    }\n\n    case 'component':\n      if (attribute.repeatable) {\n        return <RepeatableComponent mainField={mainField} content={content} />;\n      }\n\n      return <SingleComponent mainField={mainField} content={content} />;\n\n    case 'string':\n      return (\n        <Tooltip description={content}>\n          <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\n            <CellValue type={attribute.type} value={content} />\n          </Typography>\n        </Tooltip>\n      );\n\n    default:\n      return (\n        <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\n          <CellValue type={attribute.type} value={content} />\n        </Typography>\n      );\n  }\n};\n\nconst hasContent = (\n  content: CellContentProps['content'],\n  mainField: CellContentProps['mainField'],\n  attribute: CellContentProps['attribute']\n) => {\n  if (attribute.type === 'component') {\n    // Repeatable fields show the ID as fallback, in case the mainField\n    // doesn't have any content\n    if (attribute.repeatable || !mainField) {\n      return content?.length > 0;\n    }\n\n    const value = content?.[mainField.name];\n\n    // relations, media ... show the id as fallback\n    if (mainField.name === 'id' && ![undefined, null].includes(value)) {\n      return true;\n    }\n\n    return !isEmpty(value);\n  }\n\n  if (attribute.type === 'relation') {\n    if (isSingleRelation(attribute.relation)) {\n      return !isEmpty(content);\n    }\n\n    if (Array.isArray(content)) {\n      return content.length > 0;\n    }\n\n    return content?.count > 0;\n  }\n\n  /*\n      Biginteger fields need to be treated as strings, as `isNumber`\n      doesn't deal with them.\n  */\n  if (['integer', 'decimal', 'float', 'number'].includes(attribute.type)) {\n    return typeof content === 'number';\n  }\n\n  if (attribute.type === 'boolean') {\n    return content !== null;\n  }\n\n  return !isEmpty(content);\n};\n\nconst isSingleRelation = (\n  type: Extract<CellContentProps['attribute'], { type: 'relation' }>['relation']\n) => ['oneToOne', 'manyToOne', 'oneToOneMorph'].includes(type);\n\nexport { CellContent };\nexport type { CellContentProps };\n","import * as React from 'react';\n\nimport { useTracking, useRBAC, useQueryParams } from '@strapi/admin/strapi-admin';\nimport {\n  Flex,\n  IconButton,\n  Popover,\n  Checkbox,\n  TextButton,\n  Typography,\n  useCollator,\n  LinkButton,\n} from '@strapi/design-system';\nimport { Cog, ListPlus } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentLayout } from '../../../hooks/useDocumentLayout';\nimport { useTypedSelector } from '../../../modules/hooks';\nimport { checkIfAttributeIsDisplayable } from '../../../utils/attributes';\n\ninterface ViewSettingsMenuProps extends FieldPickerProps {}\n\nconst ViewSettingsMenu = (props: ViewSettingsMenuProps) => {\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.contentManager?.collectionTypesConfigurations ?? []\n  );\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const { formatMessage } = useIntl();\n  const {\n    allowedActions: { canConfigureView },\n  } = useRBAC(permissions);\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <IconButton\n          label={formatMessage({\n            id: 'components.ViewSettings.tooltip',\n            defaultMessage: 'View Settings',\n          })}\n        >\n          <Cog />\n        </IconButton>\n      </Popover.Trigger>\n      <Popover.Content side=\"bottom\" align=\"end\" sideOffset={4}>\n        <Flex alignItems=\"stretch\" direction=\"column\" padding={3} gap={3}>\n          {canConfigureView ? (\n            <LinkButton\n              size=\"S\"\n              startIcon={<ListPlus />}\n              variant=\"secondary\"\n              tag={NavLink}\n              to={{\n                pathname: 'configurations/list',\n                search: query.plugins\n                  ? stringify({ plugins: query.plugins }, { encode: false })\n                  : '',\n              }}\n            >\n              {formatMessage({\n                id: 'app.links.configure-view',\n                defaultMessage: 'Configure the view',\n              })}\n            </LinkButton>\n          ) : null}\n          <FieldPicker {...props} />\n        </Flex>\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n\ninterface FieldPickerProps {\n  headers?: string[];\n  setHeaders: (headers: string[]) => void;\n  resetHeaders: () => void;\n}\n\nconst FieldPicker = ({ headers = [], resetHeaders, setHeaders }: FieldPickerProps) => {\n  const { trackUsage } = useTracking();\n  const { formatMessage, locale } = useIntl();\n\n  const { schema, model } = useDoc();\n  const { list } = useDocumentLayout(model);\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const attributes = schema?.attributes ?? {};\n\n  const columns = Object.keys(attributes)\n    .filter((name) => checkIfAttributeIsDisplayable(attributes[name]))\n    .map((name) => ({\n      name,\n      label: list.metadatas[name]?.label ?? '',\n    }))\n    .sort((a, b) => formatter.compare(a.label, b.label));\n\n  const handleChange = (name: string) => {\n    trackUsage('didChangeDisplayedFields');\n\n    /**\n     * create an array of the new headers, if the new name exists it should be removed,\n     * otherwise it should be added\n     */\n    const newHeaders = headers.includes(name)\n      ? headers.filter((header) => header !== name)\n      : [...headers, name];\n\n    setHeaders(newHeaders);\n  };\n\n  const handleReset = () => {\n    resetHeaders();\n  };\n\n  return (\n    <Flex\n      tag=\"fieldset\"\n      direction=\"column\"\n      alignItems=\"stretch\"\n      gap={3}\n      borderWidth={0}\n      maxHeight={'240px'}\n      overflow={'scroll'}\n    >\n      <Flex justifyContent=\"space-between\">\n        <Typography tag=\"legend\" variant=\"pi\" fontWeight=\"bold\">\n          {formatMessage({\n            id: 'containers.list.displayedFields',\n            defaultMessage: 'Displayed fields',\n          })}\n        </Typography>\n\n        <TextButton onClick={handleReset}>\n          {formatMessage({\n            id: 'app.components.Button.reset',\n            defaultMessage: 'Reset',\n          })}\n        </TextButton>\n      </Flex>\n\n      <Flex direction=\"column\" alignItems=\"stretch\">\n        {columns.map((header) => {\n          const isActive = headers.includes(header.name);\n\n          return (\n            <Flex\n              wrap=\"wrap\"\n              gap={2}\n              background={isActive ? 'primary100' : 'transparent'}\n              hasRadius\n              padding={2}\n              key={header.name}\n            >\n              <Checkbox\n                onCheckedChange={() => handleChange(header.name)}\n                checked={isActive}\n                name={header.name}\n              >\n                <Typography fontSize={1}>{header.label}</Typography>\n              </Checkbox>\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n\nexport { ViewSettingsMenu };\nexport type { ViewSettingsMenuProps, FieldPickerProps };\n","import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  SearchInput,\n  Table,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useTracking,\n  useAPIErrorHandler,\n  useQueryParams,\n  useRBAC,\n  Layouts,\n  useTable,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Typography, ButtonProps } from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport isEqual from 'lodash/isEqual';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, Link as ReactRouterLink, useParams } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { InjectionZone } from '../../components/InjectionZone';\nimport { HOOKS } from '../../constants/hooks';\nimport { PERMISSIONS } from '../../constants/plugin';\nimport { DocumentRBAC, useDocumentRBAC } from '../../features/DocumentRBAC';\nimport { useDoc } from '../../hooks/useDocument';\nimport {\n  ListFieldLayout,\n  convertListLayoutToFieldLayouts,\n  useDocumentLayout,\n} from '../../hooks/useDocumentLayout';\nimport { usePrev } from '../../hooks/usePrev';\nimport { useGetAllDocumentsQuery } from '../../services/documents';\nimport { buildValidParams } from '../../utils/api';\nimport { getTranslation } from '../../utils/translations';\nimport { getDisplayName } from '../../utils/users';\nimport { DocumentStatus } from '../EditView/components/DocumentStatus';\n\nimport { BulkActionsRenderer } from './components/BulkActions/Actions';\nimport { Filters } from './components/Filters';\nimport { TableActions } from './components/TableActions';\nimport { CellContent } from './components/TableCells/CellContent';\nimport { ViewSettingsMenu } from './components/ViewSettingsMenu';\n\nimport type { Modules } from '@strapi/types';\n\nconst { INJECT_COLUMN_IN_TABLE } = HOOKS;\n\n/* -------------------------------------------------------------------------------------------------\n * ListViewPage\n * -----------------------------------------------------------------------------------------------*/\nconst LayoutsHeaderCustom = styled(Layouts.Header)`\n  overflow-wrap: anywhere;\n`;\n\nconst ListViewPage = () => {\n  const { trackUsage } = useTracking();\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n\n  const { collectionType, model, schema } = useDoc();\n  const { list } = useDocumentLayout(model);\n\n  const [displayedHeaders, setDisplayedHeaders] = React.useState<ListFieldLayout[]>([]);\n\n  const listLayout = usePrev(list.layout);\n  React.useEffect(() => {\n    /**\n     * ONLY update the displayedHeaders if the document\n     * layout has actually changed in value.\n     */\n    if (!isEqual(listLayout, list.layout)) {\n      setDisplayedHeaders(list.layout);\n    }\n  }, [list.layout, listLayout]);\n\n  const handleSetHeaders = (headers: string[]) => {\n    setDisplayedHeaders(\n      convertListLayoutToFieldLayouts(headers, schema!.attributes, list.metadatas)\n    );\n  };\n\n  const [{ query }] = useQueryParams<{\n    plugins?: Record<string, unknown>;\n    page?: string;\n    pageSize?: string;\n    sort?: string;\n  }>({\n    page: '1',\n    pageSize: list.settings.pageSize.toString(),\n    sort: list.settings.defaultSortBy\n      ? `${list.settings.defaultSortBy}:${list.settings.defaultSortOrder}`\n      : '',\n  });\n\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const { data, error, isFetching } = useGetAllDocumentsQuery({\n    model,\n    params,\n  });\n\n  /**\n   * If the API returns an error, display a notification\n   */\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  const { results = [], pagination } = data ?? {};\n\n  React.useEffect(() => {\n    if (pagination && pagination.pageCount > 0 && pagination.page > pagination.pageCount) {\n      navigate(\n        {\n          search: stringify({\n            ...query,\n            page: pagination.pageCount,\n          }),\n        },\n        { replace: true }\n      );\n    }\n  }, [pagination, formatMessage, query, navigate]);\n\n  const { canCreate } = useDocumentRBAC('ListViewPage', ({ canCreate }) => ({\n    canCreate,\n  }));\n\n  const runHookWaterfall = useStrapiApp('ListViewPage', ({ runHookWaterfall }) => runHookWaterfall);\n  /**\n   * Run the waterfall and then inject our additional table headers.\n   */\n  const tableHeaders = React.useMemo(() => {\n    const headers = runHookWaterfall(INJECT_COLUMN_IN_TABLE, {\n      displayedHeaders,\n      layout: list,\n    });\n\n    const formattedHeaders = headers.displayedHeaders.map<ListFieldLayout>((header) => {\n      /**\n       * When the header label is a string, it is an attribute on the current content-type:\n       * Use the attribute name value to compute the translation.\n       * Otherwise, it should be a  translation object coming from a plugin that injects into the table (ie i18n, content-releases, review-workflows):\n       * Use the translation object as is.\n       */\n      const translation =\n        typeof header.label === 'string'\n          ? {\n              id: `content-manager.content-types.${model}.${header.name}`,\n              defaultMessage: header.label,\n            }\n          : header.label;\n\n      return {\n        ...header,\n        label: formatMessage(translation),\n        name: `${header.name}${header.mainField?.name ? `.${header.mainField.name}` : ''}`,\n      };\n    });\n\n    if (schema?.options?.draftAndPublish) {\n      formattedHeaders.push({\n        attribute: {\n          type: 'custom',\n        },\n        name: 'status',\n        label: formatMessage({\n          id: getTranslation(`containers.list.table-headers.status`),\n          defaultMessage: 'status',\n        }),\n        searchable: false,\n        sortable: false,\n      } satisfies ListFieldLayout);\n    }\n\n    return formattedHeaders;\n  }, [\n    displayedHeaders,\n    formatMessage,\n    list,\n    runHookWaterfall,\n    schema?.options?.draftAndPublish,\n    model,\n  ]);\n\n  if (isFetching) {\n    return <Page.Loading />;\n  }\n\n  if (error) {\n    return <Page.Error />;\n  }\n\n  const contentTypeTitle = schema?.info.displayName\n    ? formatMessage({ id: schema.info.displayName, defaultMessage: schema.info.displayName })\n    : formatMessage({\n        id: 'content-manager.containers.untitled',\n        defaultMessage: 'Untitled',\n      });\n\n  const handleRowClick = (id: Modules.Documents.ID) => () => {\n    trackUsage('willEditEntryFromList');\n    navigate({\n      pathname: id.toString(),\n      search: stringify({ plugins: query.plugins }),\n    });\n  };\n\n  return (\n    <Page.Main>\n      <Page.Title>{`${contentTypeTitle}`}</Page.Title>\n      <LayoutsHeaderCustom\n        primaryAction={canCreate ? <CreateButton /> : null}\n        subtitle={formatMessage(\n          {\n            id: getTranslation('pages.ListView.header-subtitle'),\n            defaultMessage:\n              '{number, plural, =0 {# entries} one {# entry} other {# entries}} found',\n          },\n          { number: pagination?.total }\n        )}\n        title={contentTypeTitle}\n        navigationAction={<BackButton />}\n      />\n      <Layouts.Action\n        endActions={\n          <>\n            <InjectionZone area=\"listView.actions\" />\n            <ViewSettingsMenu\n              setHeaders={handleSetHeaders}\n              resetHeaders={() => setDisplayedHeaders(list.layout)}\n              headers={displayedHeaders.map((header) => header.name)}\n            />\n          </>\n        }\n        startActions={\n          <>\n            {list.settings.searchable && (\n              <SearchInput\n                disabled={results.length === 0}\n                label={formatMessage(\n                  { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                  { target: contentTypeTitle }\n                )}\n                placeholder={formatMessage({\n                  id: 'global.search',\n                  defaultMessage: 'Search',\n                })}\n                trackedEvent=\"didSearch\"\n              />\n            )}\n            {list.settings.filterable && schema ? (\n              <Filters disabled={results.length === 0} schema={schema} />\n            ) : null}\n          </>\n        }\n      />\n      <Layouts.Content>\n        <Flex gap={4} direction=\"column\" alignItems=\"stretch\">\n          <Table.Root rows={results} headers={tableHeaders} isLoading={isFetching}>\n            <TableActionsBar />\n            <Table.Content>\n              <Table.Head>\n                <Table.HeaderCheckboxCell />\n                {tableHeaders.map((header: ListFieldLayout) => (\n                  <Table.HeaderCell key={header.name} {...header} />\n                ))}\n              </Table.Head>\n              <Table.Loading />\n              <Table.Empty action={canCreate ? <CreateButton variant=\"secondary\" /> : null} />\n              <Table.Body>\n                {results.map((row) => {\n                  return (\n                    <Table.Row\n                      cursor=\"pointer\"\n                      key={row.id}\n                      onClick={handleRowClick(row.documentId)}\n                    >\n                      <Table.CheckboxCell id={row.id} />\n                      {tableHeaders.map(({ cellFormatter, ...header }) => {\n                        if (header.name === 'status') {\n                          const { status } = row;\n\n                          return (\n                            <Table.Cell key={header.name}>\n                              <DocumentStatus status={status} maxWidth={'min-content'} />\n                            </Table.Cell>\n                          );\n                        }\n                        if (['createdBy', 'updatedBy'].includes(header.name.split('.')[0])) {\n                          // Display the users full name\n                          // Some entries doesn't have a user assigned as creator/updater (ex: entries created through content API)\n                          // In this case, we display a dash\n                          return (\n                            <Table.Cell key={header.name}>\n                              <Typography textColor=\"neutral800\">\n                                {row[header.name.split('.')[0]]\n                                  ? getDisplayName(row[header.name.split('.')[0]])\n                                  : '-'}\n                              </Typography>\n                            </Table.Cell>\n                          );\n                        }\n                        if (typeof cellFormatter === 'function') {\n                          return (\n                            <Table.Cell key={header.name}>\n                              {/* @ts-expect-error â€“ TODO: fix this TS error */}\n                              {cellFormatter(row, header, { collectionType, model })}\n                            </Table.Cell>\n                          );\n                        }\n                        return (\n                          <Table.Cell key={header.name}>\n                            <CellContent\n                              content={row[header.name.split('.')[0]]}\n                              rowId={row.documentId}\n                              {...header}\n                            />\n                          </Table.Cell>\n                        );\n                      })}\n                      {/* we stop propagation here to allow the menu to trigger it's events without triggering the row redirect */}\n                      <ActionsCell onClick={(e) => e.stopPropagation()}>\n                        <TableActions document={row} />\n                      </ActionsCell>\n                    </Table.Row>\n                  );\n                })}\n              </Table.Body>\n            </Table.Content>\n          </Table.Root>\n          <Pagination.Root\n            {...pagination}\n            onPageSizeChange={() => trackUsage('willChangeNumberOfEntriesPerPage')}\n          >\n            <Pagination.PageSize />\n            <Pagination.Links />\n          </Pagination.Root>\n        </Flex>\n      </Layouts.Content>\n    </Page.Main>\n  );\n};\n\nconst ActionsCell = styled(Table.Cell)`\n  display: flex;\n  justify-content: flex-end;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * TableActionsBar\n * -----------------------------------------------------------------------------------------------*/\n\nconst TableActionsBar = () => {\n  const selectRow = useTable('TableActionsBar', (state) => state.selectRow);\n  const [{ query }] = useQueryParams<{ plugins: { i18n: { locale: string } } }>();\n  const locale = query?.plugins?.i18n?.locale;\n  const prevLocale = usePrev(locale);\n\n  // TODO: find a better way to reset the selected rows when the locale changes across all the app\n  React.useEffect(() => {\n    if (prevLocale !== locale) {\n      selectRow([]);\n    }\n  }, [selectRow, prevLocale, locale]);\n\n  return (\n    <Table.ActionBar>\n      <BulkActionsRenderer />\n    </Table.ActionBar>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * CreateButton\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CreateButtonProps extends Pick<ButtonProps, 'variant'> {}\n\nconst CreateButton = ({ variant }: CreateButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const [{ query }] = useQueryParams<{ plugins: object }>();\n\n  return (\n    <Button\n      variant={variant}\n      tag={ReactRouterLink}\n      onClick={() => {\n        trackUsage('willCreateEntry', { status: 'draft' });\n      }}\n      startIcon={<Plus />}\n      style={{ textDecoration: 'none' }}\n      to={{\n        pathname: 'create',\n        search: stringify({ plugins: query.plugins }),\n      }}\n      minWidth=\"max-content\"\n      marginLeft={2}\n    >\n      {formatMessage({\n        id: getTranslation('HeaderLayout.button.label-add-entry'),\n        defaultMessage: 'Create new entry',\n      })}\n    </Button>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListViewPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListViewPage = () => {\n  const { slug = '' } = useParams<{\n    slug: string;\n  }>();\n  const {\n    permissions = [],\n    isLoading,\n    error,\n  } = useRBAC(\n    PERMISSIONS.map((action) => ({\n      action,\n      subject: slug,\n    }))\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  if (error || !slug) {\n    return <Page.Error />;\n  }\n\n  return (\n    <Page.Protect permissions={permissions}>\n      {({ permissions }) => (\n        <DocumentRBAC permissions={permissions}>\n          <ListViewPage />\n        </DocumentRBAC>\n      )}\n    </Page.Protect>\n  );\n};\n\nexport { ListViewPage, ProtectedListViewPage };\n"],"names":["NOT_ALLOWED_FILTERS","DEFAULT_ALLOWED_FILTERS","USER_FILTER_ATTRIBUTES","CREATOR_FIELDS","FiltersImpl","disabled","schema","attributes","uid","model","options","formatMessage","locale","useIntl","trackUsage","useTracking","allPermissions","useAuth","state","permissions","query","useQueryParams","schemas","useContentTypeSchema","canReadAdminUsers","React","useMemo","filter","permission","action","subject","length","selectedUserIds","filters","$and","reduce","acc","key","value","Object","entries","id","$eq","$ne","includes","push","data","userData","isLoading","isLoadingAdminUsers","useAdminUsers","$in","skip","users","metadata","useGetContentTypeConfigurationQuery","selectFromResult","contentType","metadatas","formatter","useCollator","sensitivity","displayedFilters","properties","fields","allowedFields","field","attribute","type","map","name","mainField","mainFieldName","label","list","getMainField","components","target","input","AdminUsersFilter","user","getDisplayName","toString","operators","defaultMessage","enum","Boolean","toSorted","a","b","compare","onOpenChange","isOpen","handleFilterChange","useRelation","_jsxs","Filters","Root","onChange","_jsx","Trigger","Popover","List","pageSize","setPageSize","useState","search","setSearch","debouncedSearch","useDebounce","_q","useField","handleOpenChange","pagination","pageCount","page","Combobox","aria-label","loading","onLoadMore","hasMoreItems","onInputChange","e","currentTarget","ComboboxOption","CellValue","formatDate","formatTime","formatNumber","formattedValue","parseISO","dateStyle","timeStyle","hour","minute","second","split","date","Date","setHours","setMinutes","setSeconds","maximumFractionDigits","SingleComponent","content","Tooltip","Typography","maxWidth","textColor","ellipsis","RepeatableComponent","Menu","onClick","stopPropagation","Badge","number","Content","item","Item","getFileExtension","ext","substring","MediaSingle","url","mime","alternativeText","formats","fileURL","prefixFileUrlWithBackendUrl","thumbnail","mediaURL","Avatar","src","alt","fallback","preview","fileExtension","fileName","description","FileWrapper","children","Flex","tag","position","borderRadius","width","height","borderColor","background","paddingLeft","justifyContent","alignItems","FileTypography","variant","styled","MediaMultiple","Group","file","index","remainingFiles","RelationSingle","getRelationLabel","RelationMultiple","rowId","useDoc","notifyStatus","useNotifyAT","setIsOpen","targetField","useGetRelationsQuery","refetchOnMountOrArgChange","contentCount","Array","isArray","count","useEffect","getTranslation","style","cursor","fontWeight","Loader","small","results","_Fragment","entry","documentId","total","aria-disabled","CellContent","hasContent","paddingRight","multiple","isSingleRelation","relation","repeatable","undefined","isEmpty","ViewSettingsMenu","props","useTypedSelector","admin_app","contentManager","collectionTypesConfigurations","allowedActions","canConfigureView","useRBAC","IconButton","Cog","side","align","sideOffset","direction","padding","gap","LinkButton","size","startIcon","ListPlus","NavLink","to","pathname","plugins","stringify","encode","FieldPicker","headers","resetHeaders","setHeaders","useDocumentLayout","columns","keys","checkIfAttributeIsDisplayable","sort","handleChange","newHeaders","header","handleReset","borderWidth","maxHeight","overflow","TextButton","isActive","wrap","hasRadius","Checkbox","onCheckedChange","checked","fontSize","INJECT_COLUMN_IN_TABLE","HOOKS","LayoutsHeaderCustom","Layouts","Header","ListViewPage","navigate","useNavigate","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","collectionType","displayedHeaders","setDisplayedHeaders","listLayout","usePrev","layout","isEqual","handleSetHeaders","convertListLayoutToFieldLayouts","settings","defaultSortBy","defaultSortOrder","params","buildValidParams","error","isFetching","useGetAllDocumentsQuery","message","replace","canCreate","useDocumentRBAC","runHookWaterfall","useStrapiApp","tableHeaders","formattedHeaders","translation","draftAndPublish","searchable","sortable","Page","Loading","Error","contentTypeTitle","info","displayName","handleRowClick","Main","Title","primaryAction","CreateButton","subtitle","title","navigationAction","BackButton","Action","endActions","InjectionZone","area","startActions","SearchInput","placeholder","trackedEvent","filterable","Table","rows","TableActionsBar","Head","HeaderCheckboxCell","HeaderCell","Empty","Body","row","Row","CheckboxCell","cellFormatter","status","Cell","DocumentStatus","ActionsCell","TableActions","document","Pagination","onPageSizeChange","PageSize","Links","selectRow","useTable","i18n","prevLocale","ActionBar","BulkActionsRenderer","Button","ReactRouterLink","Plus","textDecoration","minWidth","marginLeft","ProtectedListViewPage","slug","useParams","PERMISSIONS","Protect","DocumentRBAC"],"mappings":"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"}