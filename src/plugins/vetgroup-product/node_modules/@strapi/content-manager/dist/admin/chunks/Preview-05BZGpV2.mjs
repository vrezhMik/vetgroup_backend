import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import * as React from 'react';
import { useStrapiApp, useQueryParams, useNotification, useClipboard, DescriptionComponentRenderer, useHistory, createContext, useRBAC, Page, Form } from '@strapi/admin/strapi-admin';
import { Box, Typography, Tabs, Flex, IconButton, Grid, Portal, FocusTrap } from '@strapi/design-system';
import { Link, Cross, ArrowLineLeft } from '@strapi/icons';
import { useIntl } from 'react-intl';
import { Link as Link$1, useParams, useLocation } from 'react-router-dom';
import { styled } from 'styled-components';
import { I as InjectionZone, N as DocumentActionButton, D as DocumentStatus, l as DocumentRBAC, d as buildValidParams, C as COLLECTION_TYPES, O as useGetPreviewUrlQuery, M as useDocument, h as useDocumentLayout, i as createYupSchema } from './index-CcJLBLNf.mjs';
import { F as FormLayout } from './Input-BMLRZBE3.mjs';
import { stringify } from 'qs';
import { getDocumentStatus } from './EditViewPage-BAI2r49P.mjs';
import 'lodash/fp/mapValues';
import 'yup';
import 'fractional-indexing';
import 'lodash/fp/pipe';
import 'date-fns';
import '@reduxjs/toolkit';
import 'prismjs';
import 'slate';
import 'slate-history';
import 'slate-react';
import 'prismjs/themes/prism-solarizedlight.css';
import 'prismjs/components/prism-asmatmel';
import 'prismjs/components/prism-bash';
import 'prismjs/components/prism-basic';
import 'prismjs/components/prism-c';
import 'prismjs/components/prism-clojure';
import 'prismjs/components/prism-cobol';
import 'prismjs/components/prism-cpp';
import 'prismjs/components/prism-csharp';
import 'prismjs/components/prism-dart';
import 'prismjs/components/prism-docker';
import 'prismjs/components/prism-elixir';
import 'prismjs/components/prism-erlang';
import 'prismjs/components/prism-fortran';
import 'prismjs/components/prism-fsharp';
import 'prismjs/components/prism-go';
import 'prismjs/components/prism-graphql';
import 'prismjs/components/prism-groovy';
import 'prismjs/components/prism-haskell';
import 'prismjs/components/prism-haxe';
import 'prismjs/components/prism-ini';
import 'prismjs/components/prism-java';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-jsx';
import 'prismjs/components/prism-json';
import 'prismjs/components/prism-julia';
import 'prismjs/components/prism-kotlin';
import 'prismjs/components/prism-latex';
import 'prismjs/components/prism-lua';
import 'prismjs/components/prism-markdown';
import 'prismjs/components/prism-matlab';
import 'prismjs/components/prism-makefile';
import 'prismjs/components/prism-objectivec';
import 'prismjs/components/prism-perl';
import 'prismjs/components/prism-php';
import 'prismjs/components/prism-powershell';
import 'prismjs/components/prism-python';
import 'prismjs/components/prism-r';
import 'prismjs/components/prism-ruby';
import 'prismjs/components/prism-rust';
import 'prismjs/components/prism-sas';
import 'prismjs/components/prism-scala';
import 'prismjs/components/prism-scheme';
import 'prismjs/components/prism-sql';
import 'prismjs/components/prism-stata';
import 'prismjs/components/prism-swift';
import 'prismjs/components/prism-typescript';
import 'prismjs/components/prism-tsx';
import 'prismjs/components/prism-vbnet';
import 'prismjs/components/prism-yaml';
import './usePrev-Bjw2dhmq.mjs';
import './useDragAndDrop-HYwNDExe.mjs';
import 'react-dnd';
import '@radix-ui/react-toolbar';
import 'react-dnd-html5-backend';
import './objects-wl73iEma.mjs';
import 'lodash/clone';
import 'lodash/toPath';
import './Relations-CiOfFNxW.mjs';
import 'react-window';
import './relations-D1R7vM_e.mjs';
import './ComponentIcon-BZcTc4rj.mjs';
import '@strapi/icons/symbols';
import 'codemirror5';
import 'sanitize-html';
import 'highlight.js';
import 'markdown-it';
import 'markdown-it-abbr';
import 'markdown-it-container';
import 'markdown-it-deflist';
import 'markdown-it-emoji';
import 'markdown-it-footnote';
import 'markdown-it-ins';
import 'markdown-it-mark';
import 'markdown-it-sub';
import 'markdown-it-sup';
import 'highlight.js/styles/solarized-dark.css';
import 'codemirror5/addon/display/placeholder';

const PreviewContent = ()=>{
    const previewUrl = usePreviewContext('PreviewContent', (state)=>state.url);
    const { formatMessage } = useIntl();
    return /*#__PURE__*/ jsx(Box, {
        src: previewUrl,
        title: formatMessage({
            id: 'content-manager.preview.panel.title',
            defaultMessage: 'Preview'
        }),
        width: "100%",
        height: "100%",
        borderWidth: 0,
        tag: "iframe"
    }, previewUrl);
};

/* -------------------------------------------------------------------------------------------------
 * ClosePreviewButton
 * -----------------------------------------------------------------------------------------------*/ const ClosePreviewButton = ()=>{
    const [{ query }] = useQueryParams();
    const { formatMessage } = useIntl();
    const canGoBack = useHistory('BackButton', (state)=>state.canGoBack);
    const goBack = useHistory('BackButton', (state)=>state.goBack);
    const history = useHistory('BackButton', (state)=>state.history);
    const locationIndex = useHistory('BackButton', (state)=>state.currentLocationIndex);
    /**
   * Get the link destination from the history.
   * Rely on a fallback (the parent edit view page) if there's no page to go back .
   */ const historyTo = canGoBack ? history.at(locationIndex - 2) : undefined;
    const fallback = {
        pathname: '..',
        search: stringify(query, {
            encode: false
        })
    };
    const toWithFallback = historyTo ?? fallback;
    const handleClick = (e)=>{
        if (canGoBack) {
            // Prevent normal link behavior, go back in the history stack instead
            e.preventDefault();
            goBack();
            return;
        }
    // Otherwise rely on native link behavior to go back to the edit view. We don't use navigate()
    // here in order to get the relative="path" functionality from the Link component.
    };
    return /*#__PURE__*/ jsx(IconButton, {
        variant: "ghost",
        tag: Link$1,
        relative: "path",
        to: toWithFallback,
        onClick: handleClick,
        label: formatMessage({
            id: 'content-manager.preview.header.close',
            defaultMessage: 'Close preview'
        }),
        children: /*#__PURE__*/ jsx(Cross, {})
    });
};
/* -------------------------------------------------------------------------------------------------
 * Status
 * -----------------------------------------------------------------------------------------------*/ const Status = ()=>{
    // Get status
    const document = usePreviewContext('PreviewHeader', (state)=>state.document);
    const schema = usePreviewContext('PreviewHeader', (state)=>state.schema);
    const meta = usePreviewContext('PreviewHeader', (state)=>state.meta);
    const hasDraftAndPublished = schema?.options?.draftAndPublish ?? false;
    if (!hasDraftAndPublished) {
        return null;
    }
    const status = getDocumentStatus(document, meta);
    return /*#__PURE__*/ jsx(DocumentStatus, {
        status: status,
        size: "XS"
    });
};
const PreviewTabs = ()=>{
    const { formatMessage } = useIntl();
    // URL query params
    const [{ query }, setQuery] = useQueryParams();
    // Get status
    const document = usePreviewContext('PreviewHeader', (state)=>state.document);
    const schema = usePreviewContext('PreviewHeader', (state)=>state.schema);
    const meta = usePreviewContext('PreviewHeader', (state)=>state.meta);
    const hasDraftAndPublish = schema?.options?.draftAndPublish ?? false;
    const documentStatus = getDocumentStatus(document, meta);
    const handleTabChange = (status)=>{
        if (status === 'published' || status === 'draft') {
            setQuery({
                status
            }, 'push', true);
        }
    };
    if (!hasDraftAndPublish) {
        return null;
    }
    return /*#__PURE__*/ jsx(Tabs.Root, {
        variant: "simple",
        value: query.status || 'draft',
        onValueChange: handleTabChange,
        children: /*#__PURE__*/ jsxs(Tabs.List, {
            "aria-label": formatMessage({
                id: 'preview.tabs.label',
                defaultMessage: 'Document status'
            }),
            children: [
                /*#__PURE__*/ jsx(StatusTab, {
                    value: "draft",
                    children: formatMessage({
                        id: 'content-manager.containers.List.draft',
                        defaultMessage: 'draft'
                    })
                }),
                /*#__PURE__*/ jsx(StatusTab, {
                    value: "published",
                    disabled: documentStatus === 'draft',
                    children: formatMessage({
                        id: 'content-manager.containers.List.published',
                        defaultMessage: 'published'
                    })
                })
            ]
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * PreviewHeader
 * -----------------------------------------------------------------------------------------------*/ const UnstablePreviewHeader = ()=>{
    const title = usePreviewContext('PreviewHeader', (state)=>state.title);
    const document = usePreviewContext('PreviewHeader', (state)=>state.document);
    const schema = usePreviewContext('PreviewHeader', (state)=>state.schema);
    const meta = usePreviewContext('PreviewHeader', (state)=>state.meta);
    const plugins = useStrapiApp('PreviewHeader', (state)=>state.plugins);
    const iframeRef = usePreviewContext('PreviewHeader', (state)=>state.iframeRef);
    const [{ query }] = useQueryParams();
    const { formatMessage } = useIntl();
    const { toggleNotification } = useNotification();
    const { copy } = useClipboard();
    const handleCopyLink = ()=>{
        copy(window.location.href);
        toggleNotification({
            message: formatMessage({
                id: 'content-manager.preview.copy.success',
                defaultMessage: 'Copied preview link'
            }),
            type: 'success'
        });
    };
    const hasDraftAndPublish = schema.options?.draftAndPublish ?? false;
    const documentActionProps = {
        activeTab: query.status ?? null,
        collectionType: schema.kind === 'collectionType' ? 'collection-types' : 'single-types',
        model: schema.uid,
        documentId: document.documentId,
        document,
        meta,
        onPreview: ()=>{
            iframeRef?.current?.contentWindow?.postMessage({
                type: 'strapiUpdate'
            }, // The iframe origin is safe to use since it must be provided through the allowedOrigins config
            new URL(iframeRef.current.src).origin);
        }
    };
    return /*#__PURE__*/ jsxs(Flex, {
        height: "48px",
        gap: 4,
        background: "neutral0",
        borderColor: "neutral150",
        tag: "header",
        children: [
            /*#__PURE__*/ jsxs(TitleContainer, {
                height: "100%",
                paddingLeft: 2,
                paddingRight: 4,
                children: [
                    /*#__PURE__*/ jsx(ClosePreviewButton, {}),
                    /*#__PURE__*/ jsx(PreviewTitle, {
                        tag: "h1",
                        title: title,
                        maxWidth: "200px",
                        fontSize: 2,
                        paddingLeft: 2,
                        paddingRight: 3,
                        fontWeight: 600,
                        children: title
                    }),
                    /*#__PURE__*/ jsx(Status, {})
                ]
            }),
            /*#__PURE__*/ jsxs(Flex, {
                flex: 1,
                paddingRight: 2,
                gap: 2,
                justifyContent: hasDraftAndPublish ? 'space-between' : 'flex-end',
                children: [
                    /*#__PURE__*/ jsx(Flex, {
                        flex: "1 1 70%",
                        children: /*#__PURE__*/ jsx(PreviewTabs, {})
                    }),
                    /*#__PURE__*/ jsxs(Flex, {
                        gap: 2,
                        children: [
                            /*#__PURE__*/ jsx(IconButton, {
                                type: "button",
                                label: formatMessage({
                                    id: 'preview.copy.label',
                                    defaultMessage: 'Copy preview link'
                                }),
                                onClick: handleCopyLink,
                                children: /*#__PURE__*/ jsx(Link, {})
                            }),
                            /*#__PURE__*/ jsx(InjectionZone, {
                                area: "preview.actions"
                            }),
                            /*#__PURE__*/ jsx(DescriptionComponentRenderer, {
                                props: documentActionProps,
                                descriptions: plugins['content-manager'].apis.getDocumentActions('preview'),
                                children: (actions)=>{
                                    const filteredActions = actions.filter((action)=>[
                                            action.position
                                        ].flat().includes('preview'));
                                    const [primaryAction, secondaryAction] = filteredActions;
                                    if (!primaryAction && !secondaryAction) return null;
                                    // Both actions are available when draft and publish enabled
                                    if (primaryAction && secondaryAction) {
                                        return /*#__PURE__*/ jsxs(Fragment, {
                                            children: [
                                                /*#__PURE__*/ jsx(DocumentActionButton, {
                                                    ...secondaryAction,
                                                    variant: secondaryAction.variant || 'secondary'
                                                }),
                                                /*#__PURE__*/ jsx(DocumentActionButton, {
                                                    ...primaryAction,
                                                    variant: primaryAction.variant || 'default'
                                                })
                                            ]
                                        });
                                    }
                                    // Otherwise we just have the save action
                                    return /*#__PURE__*/ jsx(DocumentActionButton, {
                                        ...primaryAction,
                                        variant: primaryAction.variant || 'secondary'
                                    });
                                }
                            })
                        ]
                    })
                ]
            })
        ]
    });
};
const PreviewHeader = ()=>{
    // Get the document title
    const title = usePreviewContext('PreviewHeader', (state)=>state.title);
    const { formatMessage } = useIntl();
    const { toggleNotification } = useNotification();
    const { copy } = useClipboard();
    const handleCopyLink = ()=>{
        copy(window.location.href);
        toggleNotification({
            message: formatMessage({
                id: 'content-manager.preview.copy.success',
                defaultMessage: 'Copied preview link'
            }),
            type: 'success'
        });
    };
    return /*#__PURE__*/ jsxs(Grid.Root, {
        gap: 3,
        gridCols: 3,
        paddingLeft: 2,
        paddingRight: 2,
        background: "neutral0",
        borderColor: "neutral150",
        tag: "header",
        children: [
            /*#__PURE__*/ jsxs(Grid.Item, {
                xs: 1,
                paddingTop: 2,
                paddingBottom: 2,
                gap: 3,
                children: [
                    /*#__PURE__*/ jsx(ClosePreviewButton, {}),
                    /*#__PURE__*/ jsx(PreviewTitle, {
                        tag: "h1",
                        fontWeight: 600,
                        fontSize: 2,
                        maxWidth: "200px",
                        title: title,
                        children: title
                    }),
                    /*#__PURE__*/ jsx(Status, {})
                ]
            }),
            /*#__PURE__*/ jsx(Grid.Item, {
                xs: 1,
                marginBottom: "-1px",
                alignItems: "end",
                margin: "auto",
                children: /*#__PURE__*/ jsx(PreviewTabs, {})
            }),
            /*#__PURE__*/ jsx(Grid.Item, {
                xs: 1,
                justifyContent: "end",
                paddingTop: 2,
                paddingBottom: 2,
                children: /*#__PURE__*/ jsx(IconButton, {
                    type: "button",
                    label: formatMessage({
                        id: 'preview.copy.label',
                        defaultMessage: 'Copy preview link'
                    }),
                    onClick: handleCopyLink,
                    children: /*#__PURE__*/ jsx(Link, {})
                })
            })
        ]
    });
};
const PreviewTitle = styled(Typography)`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const StatusTab = styled(Tabs.Trigger)`
  text-transform: uppercase;
`;
const TitleContainer = styled(Flex)`
  border-right: 1px solid ${({ theme })=>theme.colors.neutral150};
`;

const [PreviewProvider, usePreviewContext] = createContext('PreviewPage');
/* -------------------------------------------------------------------------------------------------
 * PreviewPage
 * -----------------------------------------------------------------------------------------------*/ const AnimatedArrow = styled(ArrowLineLeft)`
  will-change: transform;
  rotate: ${(props)=>props.isSideEditorOpen ? '0deg' : '180deg'};
  transition: rotate 0.2s ease-in-out;
`;
const PreviewPage = ()=>{
    const location = useLocation();
    const { formatMessage } = useIntl();
    const iframeRef = React.useRef(null);
    const [isSideEditorOpen, setIsSideEditorOpen] = React.useState(true);
    // Read all the necessary data from the URL to find the right preview URL
    const { slug: model, id: documentId, collectionType } = useParams();
    const [{ query }] = useQueryParams();
    const params = React.useMemo(()=>buildValidParams(query), [
        query
    ]);
    if (!collectionType) {
        throw new Error('Could not find collectionType in url params');
    }
    if (!model) {
        throw new Error('Could not find model in url params');
    }
    // Only collection types must have a documentId
    if (collectionType === COLLECTION_TYPES && !documentId) {
        throw new Error('Could not find documentId in url params');
    }
    const previewUrlResponse = useGetPreviewUrlQuery({
        params: {
            contentType: model
        },
        query: {
            documentId,
            locale: params.locale,
            status: params.status
        }
    });
    const documentResponse = useDocument({
        model,
        collectionType,
        documentId,
        params
    });
    const documentLayoutResponse = useDocumentLayout(model);
    const isLoading = previewUrlResponse.isLoading || documentLayoutResponse.isLoading || documentResponse.isLoading;
    if (isLoading && !documentResponse.document?.documentId) {
        return /*#__PURE__*/ jsx(Page.Loading, {});
    }
    const initialValues = documentResponse.getInitialFormValues();
    if (previewUrlResponse.error || documentLayoutResponse.error || !documentResponse.document || !documentResponse.meta || !documentResponse.schema || !initialValues) {
        return /*#__PURE__*/ jsx(Page.Error, {});
    }
    if (!previewUrlResponse.data?.data?.url) {
        return /*#__PURE__*/ jsx(Page.NoData, {});
    }
    const documentTitle = documentResponse.getTitle(documentLayoutResponse.edit.settings.mainField);
    const validateSync = (values, options)=>{
        const yupSchema = createYupSchema(documentResponse.schema?.attributes, documentResponse.components, {
            status: documentResponse.document?.status,
            ...options
        });
        return yupSchema.validateSync(values, {
            abortEarly: false
        });
    };
    const previewUrl = previewUrlResponse.data.data.url;
    return /*#__PURE__*/ jsxs(Fragment, {
        children: [
            /*#__PURE__*/ jsx(Page.Title, {
                children: formatMessage({
                    id: 'content-manager.preview.page-title',
                    defaultMessage: '{contentType} preview'
                }, {
                    contentType: documentTitle
                })
            }),
            /*#__PURE__*/ jsx(PreviewProvider, {
                url: previewUrl,
                document: documentResponse.document,
                title: documentTitle,
                meta: documentResponse.meta,
                schema: documentResponse.schema,
                layout: documentLayoutResponse.edit,
                iframeRef: iframeRef,
                children: /*#__PURE__*/ jsx(Form, {
                    method: "PUT",
                    disabled: query.status === 'published' && documentResponse && documentResponse.document.status !== 'draft',
                    initialValues: documentResponse.getInitialFormValues(),
                    initialErrors: location?.state?.forceValidation ? validateSync(initialValues, {}) : {},
                    height: "100%",
                    validate: (values, options)=>{
                        const yupSchema = createYupSchema(documentResponse.schema?.attributes, documentResponse.components, {
                            status: documentResponse.document?.status,
                            ...options
                        });
                        return yupSchema.validate(values, {
                            abortEarly: false
                        });
                    },
                    children: /*#__PURE__*/ jsx(Flex, {
                        direction: "column",
                        height: "100%",
                        alignItems: "stretch",
                        children: window.strapi.future.isEnabled('unstablePreviewSideEditor') ? /*#__PURE__*/ jsxs(Fragment, {
                            children: [
                                /*#__PURE__*/ jsx(UnstablePreviewHeader, {}),
                                /*#__PURE__*/ jsxs(Flex, {
                                    flex: 1,
                                    overflow: "auto",
                                    alignItems: "stretch",
                                    children: [
                                        /*#__PURE__*/ jsx(Box, {
                                            overflow: "auto",
                                            width: isSideEditorOpen ? '50%' : 0,
                                            borderWidth: "0 1px 0 0",
                                            borderColor: "neutral150",
                                            paddingTop: 6,
                                            paddingBottom: 6,
                                            // Remove horizontal padding when the editor is closed or it won't fully disappear
                                            paddingLeft: isSideEditorOpen ? 6 : 0,
                                            paddingRight: isSideEditorOpen ? 6 : 0,
                                            transition: "all 0.2s ease-in-out",
                                            children: /*#__PURE__*/ jsx(FormLayout, {
                                                layout: documentLayoutResponse.edit.layout,
                                                hasBackground: true
                                            })
                                        }),
                                        /*#__PURE__*/ jsxs(Box, {
                                            position: "relative",
                                            flex: 1,
                                            height: "100%",
                                            overflow: "hidden",
                                            children: [
                                                /*#__PURE__*/ jsx(Box, {
                                                    "data-testid": "preview-iframe",
                                                    ref: iframeRef,
                                                    src: previewUrl,
                                                    title: formatMessage({
                                                        id: 'content-manager.preview.panel.title',
                                                        defaultMessage: 'Preview'
                                                    }),
                                                    width: "100%",
                                                    height: "100%",
                                                    borderWidth: 0,
                                                    tag: "iframe"
                                                }, previewUrl),
                                                /*#__PURE__*/ jsx(IconButton, {
                                                    variant: "tertiary",
                                                    label: formatMessage(isSideEditorOpen ? {
                                                        id: 'content-manager.preview.content.close-editor',
                                                        defaultMessage: 'Close editor'
                                                    } : {
                                                        id: 'content-manager.preview.content.open-editor',
                                                        defaultMessage: 'Open editor'
                                                    }),
                                                    onClick: ()=>setIsSideEditorOpen((prev)=>!prev),
                                                    position: "absolute",
                                                    top: 2,
                                                    left: 2,
                                                    children: /*#__PURE__*/ jsx(AnimatedArrow, {
                                                        isSideEditorOpen: isSideEditorOpen
                                                    })
                                                })
                                            ]
                                        })
                                    ]
                                })
                            ]
                        }) : /*#__PURE__*/ jsxs(Fragment, {
                            children: [
                                /*#__PURE__*/ jsx(PreviewHeader, {}),
                                /*#__PURE__*/ jsx(PreviewContent, {})
                            ]
                        })
                    })
                })
            })
        ]
    });
};
/* -------------------------------------------------------------------------------------------------
 * ProtectedPreviewPage
 * -----------------------------------------------------------------------------------------------*/ const ProtectedPreviewPageImpl = ()=>{
    const { slug: model } = useParams();
    const { permissions = [], isLoading, error } = useRBAC([
        {
            action: 'plugin::content-manager.explorer.read',
            subject: model
        },
        {
            action: 'plugin::content-manager.explorer.update',
            subject: model
        },
        {
            action: 'plugin::content-manager.explorer.publish',
            subject: model
        }
    ]);
    if (isLoading) {
        return /*#__PURE__*/ jsx(Page.Loading, {});
    }
    if (error || !model) {
        return /*#__PURE__*/ jsx(Box, {
            height: "100vh",
            width: "100vw",
            position: "fixed",
            top: 0,
            left: 0,
            zIndex: 2,
            background: "neutral0",
            children: /*#__PURE__*/ jsx(Page.Error, {})
        });
    }
    return /*#__PURE__*/ jsx(Box, {
        height: "100vh",
        width: "100vw",
        position: "fixed",
        top: 0,
        left: 0,
        zIndex: 2,
        background: "neutral0",
        children: /*#__PURE__*/ jsx(Page.Protect, {
            permissions: permissions.filter((permission)=>permission.action.includes('explorer.read')),
            children: /*#__PURE__*/ jsx(DocumentRBAC, {
                permissions: permissions,
                children: /*#__PURE__*/ jsx(PreviewPage, {})
            })
        })
    });
};
const ProtectedPreviewPage = ()=>{
    return /*#__PURE__*/ jsx(Portal, {
        children: /*#__PURE__*/ jsx(FocusTrap, {
            children: /*#__PURE__*/ jsx(ProtectedPreviewPageImpl, {})
        })
    });
};

export { ProtectedPreviewPage, usePreviewContext };
//# sourceMappingURL=Preview-05BZGpV2.mjs.map
