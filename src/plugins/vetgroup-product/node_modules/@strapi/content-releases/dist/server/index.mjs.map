{"version":3,"file":"index.mjs","sources":["../../server/src/constants.ts","../../server/src/utils/index.ts","../../server/src/migrations/index.ts","../../server/src/migrations/database/5.0.0-document-id-in-actions.ts","../../server/src/register.ts","../../server/src/middlewares/documents.ts","../../server/src/bootstrap.ts","../../server/src/destroy.ts","../../server/src/content-types/release/schema.ts","../../server/src/content-types/release/index.ts","../../server/src/content-types/release-action/schema.ts","../../server/src/content-types/release-action/index.ts","../../server/src/content-types/index.ts","../../server/src/services/release.ts","../../server/src/services/release-action.ts","../../server/src/services/validation.ts","../../server/src/services/scheduling.ts","../../server/src/services/settings.ts","../../server/src/services/index.ts","../../server/src/controllers/validation/release.ts","../../server/src/controllers/release.ts","../../server/src/controllers/validation/release-action.ts","../../server/src/controllers/release-action.ts","../../server/src/controllers/validation/settings.ts","../../server/src/controllers/settings.ts","../../server/src/controllers/index.ts","../../server/src/routes/release.ts","../../server/src/routes/release-action.ts","../../server/src/routes/settings.ts","../../server/src/routes/index.ts","../../server/src/index.ts"],"sourcesContent":["export const RELEASE_MODEL_UID = 'plugin::content-releases.release';\nexport const RELEASE_ACTION_MODEL_UID = 'plugin::content-releases.release-action';\n\nexport const ACTIONS = [\n  {\n    section: 'plugins',\n    displayName: 'Read',\n    uid: 'read',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Create',\n    uid: 'create',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Edit',\n    uid: 'update',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Delete',\n    uid: 'delete',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Publish',\n    uid: 'publish',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Remove an entry from a release',\n    uid: 'delete-action',\n    pluginName: 'content-releases',\n  },\n  {\n    section: 'plugins',\n    displayName: 'Add an entry to a release',\n    uid: 'create-action',\n    pluginName: 'content-releases',\n  },\n\n  // Settings\n  {\n    uid: 'settings.read',\n    section: 'settings',\n    displayName: 'Read',\n    category: 'content releases',\n    subCategory: 'options',\n    pluginName: 'content-releases',\n  },\n\n  {\n    uid: 'settings.update',\n    section: 'settings',\n    displayName: 'Edit',\n    category: 'content releases',\n    subCategory: 'options',\n    pluginName: 'content-releases',\n  },\n];\n\nexport const ALLOWED_WEBHOOK_EVENTS = {\n  RELEASES_PUBLISH: 'releases.publish',\n};\n","import type { UID, Data, Core } from '@strapi/types';\n\nimport type { SettingsService } from '../services/settings';\nimport type { ReleaseService } from '../services/release';\nimport type { ReleaseActionService } from '../services/release-action';\n\ntype Services = {\n  release: ReleaseService;\n  'release-validation': any;\n  scheduling: any;\n  'release-action': ReleaseActionService;\n  'event-manager': any;\n  settings: SettingsService;\n};\n\ninterface Action {\n  contentType: UID.ContentType;\n  documentId?: Data.DocumentID;\n  locale?: string;\n}\n\nexport const getService = <TName extends keyof Services>(\n  name: TName,\n  { strapi }: { strapi: Core.Strapi }\n): Services[TName] => {\n  return strapi.plugin('content-releases').service(name);\n};\n\nexport const getDraftEntryValidStatus = async (\n  { contentType, documentId, locale }: Action,\n  { strapi }: { strapi: Core.Strapi }\n) => {\n  const populateBuilderService = strapi.plugin('content-manager').service('populate-builder');\n  // @ts-expect-error - populateBuilderService should be a function but is returning service\n  const populate = await populateBuilderService(contentType).populateDeep(Infinity).build();\n\n  const entry = await getEntry({ contentType, documentId, locale, populate }, { strapi });\n\n  return isEntryValid(contentType, entry, { strapi });\n};\n\nexport const isEntryValid = async (\n  contentTypeUid: string,\n  entry: any,\n  { strapi }: { strapi: Core.Strapi }\n) => {\n  try {\n    // @TODO: When documents service has validateEntityCreation method, use it instead\n    await strapi.entityValidator.validateEntityCreation(\n      strapi.getModel(contentTypeUid as UID.ContentType),\n      entry,\n      undefined,\n      // @ts-expect-error - FIXME: entity here is unnecessary\n      entry\n    );\n\n    const workflowsService = strapi.plugin('review-workflows').service('workflows');\n    const workflow = await workflowsService.getAssignedWorkflow(contentTypeUid, {\n      populate: 'stageRequiredToPublish',\n    });\n\n    if (workflow?.stageRequiredToPublish) {\n      return entry.strapi_stage.id === workflow.stageRequiredToPublish.id;\n    }\n\n    return true;\n  } catch {\n    return false;\n  }\n};\n\nexport const getEntry = async (\n  {\n    contentType,\n    documentId,\n    locale,\n    populate,\n    status = 'draft',\n  }: Action & { status?: 'draft' | 'published'; populate: any },\n  { strapi }: { strapi: Core.Strapi }\n) => {\n  if (documentId) {\n    // Try to get an existing draft or published document\n    const entry = await strapi\n      .documents(contentType)\n      .findOne({ documentId, locale, populate, status });\n\n    // The document isn't published yet, but the action is to publish it, fetch the draft\n    if (status === 'published' && !entry) {\n      return strapi\n        .documents(contentType)\n        .findOne({ documentId, locale, populate, status: 'draft' });\n    }\n\n    return entry;\n  }\n\n  return strapi.documents(contentType).findFirst({ locale, populate, status });\n};\n\nexport const getEntryStatus = async (contentType: UID.ContentType, entry: Data.ContentType) => {\n  if (entry.publishedAt) {\n    return 'published';\n  }\n\n  const publishedEntry = await strapi.documents(contentType).findOne({\n    documentId: entry.documentId,\n    locale: entry.locale,\n    status: 'published',\n    fields: ['updatedAt'],\n  });\n\n  if (!publishedEntry) {\n    return 'draft';\n  }\n\n  const entryUpdatedAt = new Date(entry.updatedAt).getTime();\n  const publishedEntryUpdatedAt = new Date(publishedEntry.updatedAt).getTime();\n\n  if (entryUpdatedAt > publishedEntryUpdatedAt) {\n    return 'modified';\n  }\n\n  return 'published';\n};\n","import type { Schema, UID } from '@strapi/types';\nimport { contentTypes as contentTypesUtils, async } from '@strapi/utils';\nimport isEqual from 'lodash/isEqual';\n\nimport { difference, keys } from 'lodash';\nimport { RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID } from '../constants';\nimport { getDraftEntryValidStatus, getService } from '../utils';\nimport { Release } from '../../../shared/contracts/releases';\nimport { ReleaseAction } from '../../../shared/contracts/release-actions';\n\ninterface Input {\n  oldContentTypes: Record<string, Schema.ContentType>;\n  contentTypes: Record<string, Schema.ContentType>;\n}\n\nexport async function deleteActionsOnDisableDraftAndPublish({\n  oldContentTypes,\n  contentTypes,\n}: Input) {\n  if (!oldContentTypes) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    if (\n      contentTypesUtils.hasDraftAndPublish(oldContentType) &&\n      !contentTypesUtils.hasDraftAndPublish(contentType)\n    ) {\n      await strapi.db\n        ?.queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .delete()\n        .where({ contentType: uid })\n        .execute();\n    }\n  }\n}\n\nexport async function deleteActionsOnDeleteContentType({ oldContentTypes, contentTypes }: Input) {\n  const deletedContentTypes = difference(keys(oldContentTypes), keys(contentTypes)) ?? [];\n\n  if (deletedContentTypes.length) {\n    await async.map(deletedContentTypes, async (deletedContentTypeUID: unknown) => {\n      return strapi.db\n        ?.queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .delete()\n        .where({ contentType: deletedContentTypeUID })\n        .execute();\n    });\n  }\n}\n\nexport async function migrateIsValidAndStatusReleases() {\n  const releasesWithoutStatus = (await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      status: null,\n      releasedAt: null,\n    },\n    populate: {\n      actions: {\n        populate: {\n          entry: true,\n        },\n      },\n    },\n  })) as Release[];\n\n  async.map(releasesWithoutStatus, async (release: Release) => {\n    const actions = release.actions;\n\n    const notValidatedActions = actions.filter((action) => action.isEntryValid === null);\n\n    for (const action of notValidatedActions) {\n      // We need to check the Action is related to a valid entry because we can't assume this is gonna be always the case\n      // example: users could make changes directly to their database, or data could be lost\n      if (action.entry) {\n        const isEntryValid = getDraftEntryValidStatus(\n          {\n            contentType: action.contentType,\n            documentId: action.entryDocumentId,\n            locale: action.locale,\n          },\n          { strapi }\n        );\n\n        await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n          where: {\n            id: action.id,\n          },\n          data: {\n            isEntryValid,\n          },\n        });\n      }\n    }\n\n    return getService('release', { strapi }).updateReleaseStatus(release.id);\n  });\n\n  const publishedReleases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      status: null,\n      releasedAt: {\n        $notNull: true,\n      },\n    },\n  });\n\n  async.map(publishedReleases, async (release: Release) => {\n    return strapi.db.query(RELEASE_MODEL_UID).update({\n      where: {\n        id: release.id,\n      },\n      data: {\n        status: 'done',\n      },\n    });\n  });\n}\n\nexport async function revalidateChangedContentTypes({ oldContentTypes, contentTypes }: Input) {\n  if (oldContentTypes !== undefined && contentTypes !== undefined) {\n    const contentTypesWithDraftAndPublish = Object.keys(oldContentTypes).filter(\n      (uid) => oldContentTypes[uid]?.options?.draftAndPublish\n    );\n    const releasesAffected = new Set();\n\n    async\n      .map(contentTypesWithDraftAndPublish, async (contentTypeUID: UID.ContentType) => {\n        const oldContentType = oldContentTypes[contentTypeUID];\n        const contentType = contentTypes[contentTypeUID];\n\n        // If attributes have changed, we need to revalidate actions because maybe validations rules are different\n        if (!isEqual(oldContentType?.attributes, contentType?.attributes)) {\n          const actions = await strapi.db.query(RELEASE_ACTION_MODEL_UID).findMany({\n            where: {\n              contentType: contentTypeUID,\n            },\n            populate: {\n              entry: true,\n              release: true,\n            },\n          });\n\n          await async.map(actions, async (action: ReleaseAction) => {\n            if (action.entry && action.release && action.type === 'publish') {\n              const isEntryValid = await getDraftEntryValidStatus(\n                {\n                  contentType: contentTypeUID,\n                  documentId: action.entryDocumentId,\n                  locale: action.locale,\n                },\n                { strapi }\n              );\n\n              releasesAffected.add(action.release.id);\n\n              await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n                where: {\n                  id: action.id,\n                },\n                data: {\n                  isEntryValid,\n                },\n              });\n            }\n          });\n        }\n      })\n      .then(() => {\n        // We need to update the status of the releases affected\n        async.map(releasesAffected, async (releaseId: Release['id']) => {\n          return getService('release', { strapi }).updateReleaseStatus(releaseId);\n        });\n      });\n  }\n}\n\nexport async function disableContentTypeLocalized({ oldContentTypes, contentTypes }: Input) {\n  if (!oldContentTypes) {\n    return;\n  }\n\n  const i18nPlugin = strapi.plugin('i18n');\n  if (!i18nPlugin) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    const { isLocalizedContentType } = i18nPlugin.service('content-types');\n\n    // if i18N is disabled remove non default locales before sync\n    if (isLocalizedContentType(oldContentType) && !isLocalizedContentType(contentType)) {\n      await strapi.db\n        .queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .update({\n          locale: null,\n        })\n        .where({ contentType: uid })\n        .execute();\n    }\n  }\n}\n\nexport async function enableContentTypeLocalized({ oldContentTypes, contentTypes }: Input) {\n  if (!oldContentTypes) {\n    return;\n  }\n\n  const i18nPlugin = strapi.plugin('i18n');\n  if (!i18nPlugin) {\n    return;\n  }\n\n  for (const uid in contentTypes) {\n    if (!oldContentTypes[uid]) {\n      continue;\n    }\n\n    const oldContentType = oldContentTypes[uid];\n    const contentType = contentTypes[uid];\n\n    const { isLocalizedContentType } = i18nPlugin.service('content-types');\n    const { getDefaultLocale } = i18nPlugin.service('locales');\n\n    // if i18N is enabled remove non default locales before sync\n    if (!isLocalizedContentType(oldContentType) && isLocalizedContentType(contentType)) {\n      const defaultLocale = await getDefaultLocale();\n\n      await strapi.db\n        .queryBuilder(RELEASE_ACTION_MODEL_UID)\n        .update({\n          locale: defaultLocale,\n        })\n        .where({ contentType: uid })\n        .execute();\n    }\n  }\n}\n","import { async } from '@strapi/utils';\n\nimport type { Migration, Database } from '@strapi/database';\n\ntype Knex = Parameters<Migration['up']>[0];\n\n/**\n * On v4, release actions are linked with entries using the built in Polymorphic relations.\n *\n * On v5, we are going to save entryDocumentId on the release action and make the link manually.\n * This because entryId is not a reliable way to link documents, as it can change.\n */\nexport const addEntryDocumentToReleaseActions: Migration = {\n  name: 'content-releases::5.0.0-add-entry-document-id-to-release-actions',\n  async up(trx: Knex, db: Database) {\n    // Check if the table exists\n    const hasTable = await trx.schema.hasTable('strapi_release_actions');\n\n    if (!hasTable) {\n      return;\n    }\n\n    const hasPolymorphicColumn = await trx.schema.hasColumn('strapi_release_actions', 'target_id');\n\n    // If user has PolymorphicColumn means that is coming from v4\n    if (hasPolymorphicColumn) {\n      // First time coming from v4 user doesn't have entryDocumentId\n      // but we double check to avoid errors\n      const hasEntryDocumentIdColumn = await trx.schema.hasColumn(\n        'strapi_release_actions',\n        'entry_document_id'\n      );\n\n      if (!hasEntryDocumentIdColumn) {\n        await trx.schema.alterTable('strapi_release_actions', (table) => {\n          table.string('entry_document_id');\n        });\n      }\n\n      const releaseActions = await trx.select('*').from('strapi_release_actions');\n\n      async.map(releaseActions, async (action: any) => {\n        const { target_type, target_id } = action;\n\n        const entry = await db.query(target_type).findOne({ where: { id: target_id } });\n\n        if (entry) {\n          await trx('strapi_release_actions')\n            .update({ entry_document_id: entry.documentId })\n            .where('id', action.id);\n        }\n      });\n    }\n  },\n  async down() {\n    throw new Error('not implemented');\n  },\n};\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport type { Core } from '@strapi/types';\n\nimport { ACTIONS, RELEASE_MODEL_UID, RELEASE_ACTION_MODEL_UID } from './constants';\nimport {\n  deleteActionsOnDeleteContentType,\n  deleteActionsOnDisableDraftAndPublish,\n  migrateIsValidAndStatusReleases,\n  revalidateChangedContentTypes,\n  disableContentTypeLocalized,\n  enableContentTypeLocalized,\n} from './migrations';\nimport { addEntryDocumentToReleaseActions } from './migrations/database/5.0.0-document-id-in-actions';\n\nexport const register = async ({ strapi }: { strapi: Core.Strapi }) => {\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    await strapi.service('admin::permission').actionProvider.registerMany(ACTIONS);\n\n    strapi.db.migrations.providers.internal.register(addEntryDocumentToReleaseActions);\n\n    strapi\n      .hook('strapi::content-types.beforeSync')\n      .register(disableContentTypeLocalized)\n      .register(deleteActionsOnDisableDraftAndPublish);\n\n    strapi\n      .hook('strapi::content-types.afterSync')\n      .register(deleteActionsOnDeleteContentType)\n      .register(enableContentTypeLocalized)\n      .register(revalidateChangedContentTypes)\n      .register(migrateIsValidAndStatusReleases);\n  }\n\n  if (strapi.plugin('graphql')) {\n    const graphqlExtensionService = strapi.plugin('graphql').service('extension');\n    // Exclude the release and release action models from the GraphQL schema\n    graphqlExtensionService.shadowCRUD(RELEASE_MODEL_UID).disable();\n    graphqlExtensionService.shadowCRUD(RELEASE_ACTION_MODEL_UID).disable();\n  }\n};\n","import type { Modules, UID } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\nimport { RELEASE_MODEL_UID, RELEASE_ACTION_MODEL_UID } from '../constants';\nimport { getService, isEntryValid } from '../utils';\n\ntype Middleware = Modules.Documents.Middleware.Middleware;\n\ninterface ReleaseActionsParams {\n  contentType: UID.ContentType;\n  entryDocumentId?: Modules.Documents.ID;\n  locale?: string;\n}\n\nconst updateActionsStatusAndUpdateReleaseStatus = async (\n  contentType: UID.ContentType,\n  entry: Modules.Documents.AnyDocument\n) => {\n  const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      releasedAt: null,\n      actions: {\n        contentType,\n        entryDocumentId: entry.documentId,\n        locale: entry.locale,\n      },\n    },\n  });\n\n  const entryStatus = await isEntryValid(contentType, entry, { strapi });\n\n  await strapi.db.query(RELEASE_ACTION_MODEL_UID).updateMany({\n    where: {\n      contentType,\n      entryDocumentId: entry.documentId,\n      locale: entry.locale,\n    },\n    data: {\n      isEntryValid: entryStatus,\n    },\n  });\n\n  for (const release of releases) {\n    getService('release', { strapi }).updateReleaseStatus(release.id);\n  }\n};\n\nconst deleteActionsAndUpdateReleaseStatus = async (params: ReleaseActionsParams) => {\n  const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      actions: params,\n    },\n  });\n\n  await strapi.db.query(RELEASE_ACTION_MODEL_UID).deleteMany({\n    where: params,\n  });\n\n  for (const release of releases) {\n    getService('release', { strapi }).updateReleaseStatus(release.id);\n  }\n};\n\nconst deleteActionsOnDelete: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'delete') {\n    return next();\n  }\n\n  if (!contentTypes.hasDraftAndPublish(ctx.contentType)) {\n    return next();\n  }\n\n  const contentType = ctx.contentType.uid;\n  const { documentId, locale } = ctx.params;\n\n  const result = await next();\n\n  if (!result) {\n    return result;\n  }\n\n  try {\n    deleteActionsAndUpdateReleaseStatus({\n      contentType,\n      entryDocumentId: documentId,\n      ...(locale !== '*' && { locale }),\n    });\n  } catch (error) {\n    strapi.log.error('Error while deleting release actions after delete', {\n      error,\n    });\n  }\n\n  return result;\n};\n\nconst updateActionsOnUpdate: Middleware = async (ctx, next) => {\n  if (ctx.action !== 'update') {\n    return next();\n  }\n\n  if (!contentTypes.hasDraftAndPublish(ctx.contentType)) {\n    return next();\n  }\n\n  const contentType = ctx.contentType.uid;\n\n  const result = (await next()) as Modules.Documents.AnyDocument;\n\n  if (!result) {\n    return result;\n  }\n\n  try {\n    updateActionsStatusAndUpdateReleaseStatus(contentType, result);\n  } catch (error) {\n    strapi.log.error('Error while updating release actions after update', {\n      error,\n    });\n  }\n\n  return result;\n};\n\nexport { deleteActionsOnDelete, updateActionsOnUpdate };\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport type { Core, UID, Modules } from '@strapi/types';\n\nimport { RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID, ALLOWED_WEBHOOK_EVENTS } from './constants';\nimport { getService } from './utils';\nimport { deleteActionsOnDelete, updateActionsOnUpdate } from './middlewares/documents';\n\ninterface DeleteManyParams {\n  contentType: UID.ContentType;\n  locale: string | null;\n  entryDocumentId?: Modules.Documents.ID;\n}\n\nconst deleteReleasesActionsAndUpdateReleaseStatus = async (params: DeleteManyParams) => {\n  const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n    where: {\n      actions: params,\n    },\n  });\n\n  await strapi.db.query(RELEASE_ACTION_MODEL_UID).deleteMany({\n    where: params,\n  });\n\n  // We update the status of each release after delete the actions\n  for (const release of releases) {\n    getService('release', { strapi }).updateReleaseStatus(release.id);\n  }\n};\n\nexport const bootstrap = async ({ strapi }: { strapi: Core.Strapi }) => {\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    const contentTypesWithDraftAndPublish = Object.keys(strapi.contentTypes).filter(\n      (uid: any) => strapi.contentTypes[uid]?.options?.draftAndPublish\n    );\n\n    strapi.db.lifecycles.subscribe({\n      models: contentTypesWithDraftAndPublish,\n\n      /**\n       * deleteMany is still used outside documents service, for example when deleting a locale\n       */\n      async afterDeleteMany(event) {\n        try {\n          const model = strapi.getModel(event.model.uid as UID.Schema);\n          // @ts-expect-error TODO: lifecycles types looks like are not 100% finished\n          if (model.kind === 'collectionType' && model.options?.draftAndPublish) {\n            const { where } = event.params;\n\n            deleteReleasesActionsAndUpdateReleaseStatus({\n              contentType: model.uid,\n              locale: where?.locale ?? null,\n              ...(where?.documentId && { entryDocumentId: where.documentId }),\n            });\n          }\n        } catch (error) {\n          // If an error happens we don't want to block the delete entry flow, but we log the error\n          strapi.log.error('Error while deleting release actions after entry deleteMany', {\n            error,\n          });\n        }\n      },\n    });\n\n    // We register middleware to handle ReleaseActions when changes on documents are made\n    strapi.documents.use(deleteActionsOnDelete);\n    strapi.documents.use(updateActionsOnUpdate);\n\n    getService('scheduling', { strapi })\n      .syncFromDatabase()\n      .catch((err: Error) => {\n        strapi.log.error(\n          'Error while syncing scheduled jobs from the database in the content-releases plugin. This could lead to errors in the releases scheduling.'\n        );\n\n        throw err;\n      });\n\n    Object.entries(ALLOWED_WEBHOOK_EVENTS).forEach(([key, value]) => {\n      strapi.get('webhookStore').addAllowedEvent(key, value);\n    });\n  }\n};\n","import { Job } from 'node-schedule';\nimport type { Core } from '@strapi/types';\n\nimport { Release } from '../../shared/contracts/releases';\nimport { getService } from './utils';\n\nexport const destroy = async ({ strapi }: { strapi: Core.Strapi }) => {\n  const scheduledJobs: Map<Release['id'], Job> = getService('scheduling', {\n    strapi,\n  }).getAll();\n\n  for (const [, job] of scheduledJobs) {\n    job.cancel();\n  }\n};\n","import { RELEASE_ACTION_MODEL_UID } from '../../constants';\n\nexport default {\n  collectionName: 'strapi_releases',\n  info: {\n    singularName: 'release',\n    pluralName: 'releases',\n    displayName: 'Release',\n  },\n  options: {\n    draftAndPublish: false,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    name: {\n      type: 'string',\n      required: true,\n    },\n    releasedAt: {\n      type: 'datetime',\n    },\n    scheduledAt: {\n      type: 'datetime',\n    },\n    timezone: {\n      type: 'string',\n    },\n    status: {\n      type: 'enumeration',\n      enum: ['ready', 'blocked', 'failed', 'done', 'empty'],\n      required: true,\n    },\n    actions: {\n      type: 'relation',\n      relation: 'oneToMany',\n      target: RELEASE_ACTION_MODEL_UID,\n      mappedBy: 'release',\n    },\n  },\n};\n","import schema from './schema';\n\nexport const release = {\n  schema,\n};\n","import { RELEASE_MODEL_UID } from '../../constants';\n\nexport default {\n  collectionName: 'strapi_release_actions',\n  info: {\n    singularName: 'release-action',\n    pluralName: 'release-actions',\n    displayName: 'Release Action',\n  },\n  options: {\n    draftAndPublish: false,\n  },\n  pluginOptions: {\n    'content-manager': {\n      visible: false,\n    },\n    'content-type-builder': {\n      visible: false,\n    },\n  },\n  attributes: {\n    type: {\n      type: 'enumeration',\n      enum: ['publish', 'unpublish'],\n      required: true,\n    },\n    contentType: {\n      type: 'string',\n      required: true,\n    },\n    entryDocumentId: {\n      type: 'string',\n    },\n    locale: {\n      type: 'string',\n    },\n    release: {\n      type: 'relation',\n      relation: 'manyToOne',\n      target: RELEASE_MODEL_UID,\n      inversedBy: 'actions',\n    },\n    isEntryValid: {\n      type: 'boolean',\n    },\n  },\n};\n","import schema from './schema';\n\nexport const releaseAction = {\n  schema,\n};\n","import { release } from './release';\nimport { releaseAction } from './release-action';\n\nexport const contentTypes = {\n  release,\n  'release-action': releaseAction,\n};\n","import { setCreatorFields, errors } from '@strapi/utils';\n\nimport type { Core, Struct, UID, Data } from '@strapi/types';\n\nimport { ALLOWED_WEBHOOK_EVENTS, RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID } from '../constants';\nimport type {\n  GetReleases,\n  CreateRelease,\n  UpdateRelease,\n  PublishRelease,\n  GetRelease,\n  Release,\n  DeleteRelease,\n} from '../../../shared/contracts/releases';\nimport type { ReleaseAction } from '../../../shared/contracts/release-actions';\nimport type { UserInfo } from '../../../shared/types';\nimport { getService } from '../utils';\n\nconst createReleaseService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const dispatchWebhook = (\n    event: string,\n    { isPublished, release, error }: { isPublished: boolean; release?: any; error?: unknown }\n  ) => {\n    strapi.eventHub.emit(event, {\n      isPublished,\n      error,\n      release,\n    });\n  };\n\n  /**\n   * Given a release id, it returns the actions formatted ready to be used to publish them.\n   * We split them by contentType and type (publish/unpublish) and extract only the documentIds and locales.\n   */\n  const getFormattedActions = async (releaseId: Release['id']) => {\n    const actions = (await strapi.db.query(RELEASE_ACTION_MODEL_UID).findMany({\n      where: {\n        release: {\n          id: releaseId,\n        },\n      },\n    })) as ReleaseAction[];\n\n    if (actions.length === 0) {\n      throw new errors.ValidationError('No entries to publish');\n    }\n\n    /**\n     * We separate publish and unpublish actions, grouping them by contentType and extracting only their documentIds and locales.\n     */\n    const formattedActions: {\n      [key: UID.ContentType]: {\n        publish: { documentId: ReleaseAction['entryDocumentId']; locale?: string }[];\n        unpublish: { documentId: ReleaseAction['entryDocumentId']; locale?: string }[];\n      };\n    } = {};\n\n    for (const action of actions) {\n      const contentTypeUid: UID.ContentType = action.contentType;\n\n      if (!formattedActions[contentTypeUid]) {\n        formattedActions[contentTypeUid] = {\n          publish: [],\n          unpublish: [],\n        };\n      }\n\n      formattedActions[contentTypeUid][action.type].push({\n        documentId: action.entryDocumentId,\n        locale: action.locale,\n      });\n    }\n\n    return formattedActions;\n  };\n\n  return {\n    async create(releaseData: CreateRelease.Request['body'], { user }: { user: UserInfo }) {\n      const releaseWithCreatorFields = await setCreatorFields({ user })(releaseData);\n\n      const {\n        validatePendingReleasesLimit,\n        validateUniqueNameForPendingRelease,\n        validateScheduledAtIsLaterThanNow,\n      } = getService('release-validation', { strapi });\n\n      await Promise.all([\n        validatePendingReleasesLimit(),\n        validateUniqueNameForPendingRelease(releaseWithCreatorFields.name),\n        validateScheduledAtIsLaterThanNow(releaseWithCreatorFields.scheduledAt),\n      ]);\n\n      const release = await strapi.db.query(RELEASE_MODEL_UID).create({\n        data: {\n          ...releaseWithCreatorFields,\n          status: 'empty',\n        },\n      });\n\n      if (releaseWithCreatorFields.scheduledAt) {\n        const schedulingService = getService('scheduling', { strapi });\n\n        await schedulingService.set(release.id, release.scheduledAt);\n      }\n\n      strapi.telemetry.send('didCreateContentRelease');\n\n      return release;\n    },\n\n    async findOne(id: GetRelease.Request['params']['id'], query = {}) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_MODEL_UID, query);\n      const release = await strapi.db.query(RELEASE_MODEL_UID).findOne({\n        ...dbQuery,\n        where: { id },\n      });\n\n      return release;\n    },\n\n    findPage(query?: GetReleases.Request['query']) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_MODEL_UID, query ?? {});\n\n      return strapi.db.query(RELEASE_MODEL_UID).findPage({\n        ...dbQuery,\n        populate: {\n          actions: {\n            count: true,\n          },\n        },\n      });\n    },\n\n    findMany(query?: any) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_MODEL_UID, query ?? {});\n\n      return strapi.db.query(RELEASE_MODEL_UID).findMany({\n        ...dbQuery,\n      });\n    },\n\n    async update(\n      id: Data.ID,\n      releaseData: UpdateRelease.Request['body'],\n      { user }: { user: UserInfo }\n    ) {\n      const releaseWithCreatorFields = await setCreatorFields({ user, isEdition: true })(\n        releaseData\n      );\n\n      const { validateUniqueNameForPendingRelease, validateScheduledAtIsLaterThanNow } = getService(\n        'release-validation',\n        { strapi }\n      );\n\n      await Promise.all([\n        validateUniqueNameForPendingRelease(releaseWithCreatorFields.name, id),\n        validateScheduledAtIsLaterThanNow(releaseWithCreatorFields.scheduledAt),\n      ]);\n\n      const release = await strapi.db.query(RELEASE_MODEL_UID).findOne({ where: { id } });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${id}`);\n      }\n\n      if (release.releasedAt) {\n        throw new errors.ValidationError('Release already published');\n      }\n\n      const updatedRelease = await strapi.db.query(RELEASE_MODEL_UID).update({\n        where: { id },\n        data: releaseWithCreatorFields,\n      });\n\n      const schedulingService = getService('scheduling', { strapi });\n\n      if (releaseData.scheduledAt) {\n        // set function always cancel the previous job if it exists, so we can call it directly\n        await schedulingService.set(id, releaseData.scheduledAt);\n      } else if (release.scheduledAt) {\n        // When user don't send a scheduledAt and we have one on the release, means that user want to unschedule it\n        schedulingService.cancel(id);\n      }\n\n      this.updateReleaseStatus(id);\n\n      strapi.telemetry.send('didUpdateContentRelease');\n\n      return updatedRelease;\n    },\n\n    async getAllComponents() {\n      const contentManagerComponentsService = strapi\n        .plugin('content-manager')\n        .service('components');\n\n      const components = await contentManagerComponentsService.findAllComponents();\n\n      const componentsMap = components.reduce(\n        (\n          acc: { [key: Struct.ComponentSchema['uid']]: Struct.ComponentSchema },\n          component: Struct.ComponentSchema\n        ) => {\n          acc[component.uid] = component;\n\n          return acc;\n        },\n        {}\n      );\n\n      return componentsMap;\n    },\n\n    async delete(releaseId: DeleteRelease.Request['params']['id']) {\n      const release: Release = await strapi.db.query(RELEASE_MODEL_UID).findOne({\n        where: { id: releaseId },\n        populate: {\n          actions: {\n            select: ['id'],\n          },\n        },\n      });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      if (release.releasedAt) {\n        throw new errors.ValidationError('Release already published');\n      }\n\n      // Only delete the release and its actions is you in fact can delete all the actions and the release\n      // Otherwise, if the transaction fails it throws an error\n      await strapi.db.transaction(async () => {\n        await strapi.db.query(RELEASE_ACTION_MODEL_UID).deleteMany({\n          where: {\n            id: {\n              $in: release.actions.map((action) => action.id),\n            },\n          },\n        });\n\n        await strapi.db.query(RELEASE_MODEL_UID).delete({\n          where: {\n            id: releaseId,\n          },\n        });\n      });\n\n      if (release.scheduledAt) {\n        const schedulingService = getService('scheduling', { strapi });\n        await schedulingService.cancel(release.id);\n      }\n\n      strapi.telemetry.send('didDeleteContentRelease');\n\n      return release;\n    },\n\n    async publish(releaseId: PublishRelease.Request['params']['id']) {\n      const {\n        release,\n        error,\n      }: { release: Pick<Release, 'id' | 'releasedAt' | 'status'> | null; error: unknown | null } =\n        await strapi.db.transaction(async ({ trx }) => {\n          /**\n           * We lock the release in this transaction, so any other process trying to publish it will wait until this transaction is finished\n           * In this transaction we don't care about rollback, becasue we want to persist the lock until the end and if it fails we want to change the release status to failed\n           */\n          const lockedRelease = (await strapi.db\n            ?.queryBuilder(RELEASE_MODEL_UID)\n            .where({ id: releaseId })\n            .select(['id', 'name', 'releasedAt', 'status'])\n            .first()\n            .transacting(trx)\n            .forUpdate()\n            .execute()) as Pick<Release, 'id' | 'name' | 'releasedAt' | 'status'> | undefined;\n\n          if (!lockedRelease) {\n            throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n          }\n\n          if (lockedRelease.releasedAt) {\n            throw new errors.ValidationError('Release already published');\n          }\n\n          if (lockedRelease.status === 'failed') {\n            throw new errors.ValidationError('Release failed to publish');\n          }\n\n          try {\n            strapi.log.info(`[Content Releases] Starting to publish release ${lockedRelease.name}`);\n\n            const formattedActions = await getFormattedActions(releaseId);\n\n            await strapi.db.transaction(async () =>\n              Promise.all(\n                Object.keys(formattedActions).map(async (contentTypeUid) => {\n                  const contentType = contentTypeUid as UID.ContentType;\n                  const { publish, unpublish } = formattedActions[contentType];\n\n                  return Promise.all([\n                    ...publish.map((params) => strapi.documents(contentType).publish(params)),\n                    ...unpublish.map((params) => strapi.documents(contentType).unpublish(params)),\n                  ]);\n                })\n              )\n            );\n\n            const release = await strapi.db.query(RELEASE_MODEL_UID).update({\n              where: {\n                id: releaseId,\n              },\n              data: {\n                status: 'done',\n                releasedAt: new Date(),\n              },\n            });\n\n            dispatchWebhook(ALLOWED_WEBHOOK_EVENTS.RELEASES_PUBLISH, {\n              isPublished: true,\n              release,\n            });\n\n            strapi.telemetry.send('didPublishContentRelease');\n\n            return { release, error: null };\n          } catch (error) {\n            dispatchWebhook(ALLOWED_WEBHOOK_EVENTS.RELEASES_PUBLISH, {\n              isPublished: false,\n              error,\n            });\n\n            // We need to run the update in the same transaction because the release is locked\n            await strapi.db\n              ?.queryBuilder(RELEASE_MODEL_UID)\n              .where({ id: releaseId })\n              .update({\n                status: 'failed',\n              })\n              .transacting(trx)\n              .execute();\n\n            // At this point, we don't want to throw the error because if that happen we rollback the change in the release status\n            // We want to throw the error after the transaction is finished, so we return the error\n            return {\n              release: null,\n              error,\n            };\n          }\n        });\n\n      // Now the first transaction is commited, we can safely throw the error if it exists\n      if (error instanceof Error) {\n        throw error;\n      }\n\n      return release;\n    },\n\n    async updateReleaseStatus(releaseId: Release['id']) {\n      const releaseActionService = getService('release-action', { strapi });\n\n      const [totalActions, invalidActions] = await Promise.all([\n        releaseActionService.countActions({\n          filters: {\n            release: releaseId,\n          },\n        }),\n        releaseActionService.countActions({\n          filters: {\n            release: releaseId,\n            isEntryValid: false,\n          },\n        }),\n      ]);\n\n      if (totalActions > 0) {\n        if (invalidActions > 0) {\n          return strapi.db.query(RELEASE_MODEL_UID).update({\n            where: {\n              id: releaseId,\n            },\n            data: {\n              status: 'blocked',\n            },\n          });\n        }\n\n        return strapi.db.query(RELEASE_MODEL_UID).update({\n          where: {\n            id: releaseId,\n          },\n          data: {\n            status: 'ready',\n          },\n        });\n      }\n\n      return strapi.db.query(RELEASE_MODEL_UID).update({\n        where: {\n          id: releaseId,\n        },\n        data: {\n          status: 'empty',\n        },\n      });\n    },\n  };\n};\n\nexport type ReleaseService = ReturnType<typeof createReleaseService>;\n\nexport default createReleaseService;\n","import { errors, async } from '@strapi/utils';\n\nimport type { Core, Internal, Modules, UID, Data } from '@strapi/types';\n\nimport _ from 'lodash/fp';\n\nimport { RELEASE_ACTION_MODEL_UID, RELEASE_MODEL_UID } from '../constants';\n\nimport type {\n  CreateReleaseAction,\n  GetReleaseActions,\n  ReleaseAction,\n  ReleaseActionGroupBy,\n  UpdateReleaseAction,\n  DeleteReleaseAction,\n} from '../../../shared/contracts/release-actions';\nimport type { Entity } from '../../../shared/types';\nimport { getService, getDraftEntryValidStatus, getEntry, getEntryStatus } from '../utils';\n\nconst getGroupName = (queryValue: string) => {\n  switch (queryValue) {\n    case 'contentType':\n      return 'contentType.displayName';\n    case 'type':\n      return 'type';\n    case 'locale':\n      return _.getOr('No locale', 'locale.name');\n    default:\n      return 'contentType.displayName';\n  }\n};\n\nexport interface Locale extends Entity {\n  name: string;\n  code: string;\n}\n\ntype LocaleDictionary = {\n  [key: Locale['code']]: Pick<Locale, 'name' | 'code'>;\n};\n\nconst createReleaseActionService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const getLocalesDataForActions = async () => {\n    if (!strapi.plugin('i18n')) {\n      return {};\n    }\n\n    const allLocales: Locale[] = (await strapi.plugin('i18n').service('locales').find()) || [];\n    return allLocales.reduce<LocaleDictionary>((acc, locale) => {\n      acc[locale.code] = { name: locale.name, code: locale.code };\n\n      return acc;\n    }, {});\n  };\n\n  const getContentTypesDataForActions = async (\n    contentTypesUids: ReleaseAction['contentType'][]\n  ) => {\n    const contentManagerContentTypeService = strapi\n      .plugin('content-manager')\n      .service('content-types');\n\n    const contentTypesData: Record<\n      Internal.UID.ContentType,\n      { mainField: string; displayName: string }\n    > = {};\n    for (const contentTypeUid of contentTypesUids) {\n      const contentTypeConfig = await contentManagerContentTypeService.findConfiguration({\n        uid: contentTypeUid,\n      });\n\n      contentTypesData[contentTypeUid] = {\n        mainField: contentTypeConfig.settings.mainField,\n        displayName: strapi.getModel(contentTypeUid).info.displayName,\n      };\n    }\n\n    return contentTypesData;\n  };\n\n  return {\n    async create(\n      releaseId: CreateReleaseAction.Request['params']['releaseId'],\n      action: CreateReleaseAction.Request['body'],\n      { disableUpdateReleaseStatus = false }: { disableUpdateReleaseStatus?: boolean } = {}\n    ) {\n      const { validateEntryData, validateUniqueEntry } = getService('release-validation', {\n        strapi,\n      });\n\n      await Promise.all([\n        validateEntryData(action.contentType, action.entryDocumentId),\n        validateUniqueEntry(releaseId, action),\n      ]);\n\n      // If we are adding a singleType, we need to append the documentId of that singleType\n      const model = strapi.contentType(action.contentType);\n      if (model.kind === 'singleType') {\n        const document = await strapi.db.query(model.uid).findOne({ select: ['documentId'] });\n\n        if (!document) {\n          throw new errors.NotFoundError(`No entry found for contentType ${action.contentType}`);\n        }\n\n        action.entryDocumentId = document.documentId;\n      }\n\n      const release = await strapi.db\n        .query(RELEASE_MODEL_UID)\n        .findOne({ where: { id: releaseId } });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      if (release.releasedAt) {\n        throw new errors.ValidationError('Release already published');\n      }\n\n      // If the action is a publish, check if the entry is valid\n      // If the action is an unpublish, skip the validation\n      const actionStatus =\n        action.type === 'publish'\n          ? await getDraftEntryValidStatus(\n              {\n                contentType: action.contentType,\n                documentId: action.entryDocumentId,\n                locale: action.locale,\n              },\n              {\n                strapi,\n              }\n            )\n          : true;\n\n      const releaseAction = await strapi.db.query(RELEASE_ACTION_MODEL_UID).create({\n        data: {\n          ...action,\n          release: release.id,\n          isEntryValid: actionStatus,\n        },\n        populate: { release: { select: ['id'] } },\n      });\n\n      if (!disableUpdateReleaseStatus) {\n        getService('release', { strapi }).updateReleaseStatus(release.id);\n      }\n\n      return releaseAction;\n    },\n\n    async findPage(\n      releaseId: GetReleaseActions.Request['params']['releaseId'],\n      query?: GetReleaseActions.Request['query']\n    ) {\n      const release = await strapi.db.query(RELEASE_MODEL_UID).findOne({\n        where: { id: releaseId },\n        select: ['id'],\n      });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      const dbQuery = strapi.get('query-params').transform(RELEASE_ACTION_MODEL_UID, query ?? {});\n      const { results: actions, pagination } = await strapi.db\n        .query(RELEASE_ACTION_MODEL_UID)\n        .findPage({\n          ...dbQuery,\n          where: {\n            release: releaseId,\n          },\n        });\n\n      // For each contentType on the release, we create a custom populate object for nested relations\n      const populateBuilderService = strapi.plugin('content-manager').service('populate-builder');\n\n      const actionsWithEntry = await async.map(actions, async (action: ReleaseAction) => {\n        // @ts-expect-error - Core.Service type is not a function\n        const populate = await populateBuilderService(action.contentType)\n          .populateDeep(Infinity)\n          .build();\n\n        const entry = await getEntry(\n          {\n            contentType: action.contentType,\n            documentId: action.entryDocumentId,\n            locale: action.locale,\n            populate,\n            status: action.type === 'publish' ? 'draft' : 'published',\n          },\n          { strapi }\n        );\n\n        return {\n          ...action,\n          entry,\n          status: entry ? await getEntryStatus(action.contentType, entry) : null,\n        };\n      });\n\n      return {\n        results: actionsWithEntry,\n        pagination,\n      };\n    },\n\n    async groupActions(actions: ReleaseAction[], groupBy: ReleaseActionGroupBy) {\n      const contentTypeUids = actions.reduce<ReleaseAction['contentType'][]>((acc, action) => {\n        if (!acc.includes(action.contentType)) {\n          acc.push(action.contentType);\n        }\n\n        return acc;\n      }, []);\n      const allReleaseContentTypesDictionary = await getContentTypesDataForActions(contentTypeUids);\n      const allLocalesDictionary = await getLocalesDataForActions();\n\n      const formattedData = actions.map((action: ReleaseAction) => {\n        const { mainField, displayName } = allReleaseContentTypesDictionary[action.contentType];\n\n        return {\n          ...action,\n          locale: action.locale ? allLocalesDictionary[action.locale] : null,\n          contentType: {\n            displayName,\n            mainFieldValue: action.entry[mainField],\n            uid: action.contentType,\n          },\n        };\n      });\n\n      const groupName = getGroupName(groupBy);\n      return _.groupBy(groupName)(formattedData);\n    },\n\n    async getContentTypeModelsFromActions(actions: ReleaseAction[]) {\n      const contentTypeUids = actions.reduce<ReleaseAction['contentType'][]>((acc, action) => {\n        if (!acc.includes(action.contentType)) {\n          acc.push(action.contentType);\n        }\n\n        return acc;\n      }, []);\n\n      const workflowsService = strapi.plugin('review-workflows').service('workflows');\n\n      const contentTypeModelsMap = await async.reduce(contentTypeUids)(\n        async (\n          accPromise: Promise<GetReleaseActions.Response['meta']['contentTypes']>,\n          contentTypeUid: ReleaseAction['contentType']\n        ) => {\n          const acc = await accPromise;\n          const contentTypeModel = strapi.getModel(contentTypeUid);\n\n          const workflow = await workflowsService.getAssignedWorkflow(contentTypeUid, {\n            populate: 'stageRequiredToPublish',\n          });\n\n          acc[contentTypeUid] = {\n            ...contentTypeModel,\n            hasReviewWorkflow: !!workflow,\n            stageRequiredToPublish: workflow?.stageRequiredToPublish,\n          };\n\n          return acc;\n        },\n        {}\n      );\n\n      return contentTypeModelsMap;\n    },\n\n    async countActions(\n      query: Modules.EntityService.Params.Pick<typeof RELEASE_ACTION_MODEL_UID, 'filters'>\n    ) {\n      const dbQuery = strapi.get('query-params').transform(RELEASE_ACTION_MODEL_UID, query ?? {});\n\n      return strapi.db.query(RELEASE_ACTION_MODEL_UID).count(dbQuery);\n    },\n\n    async update(\n      actionId: UpdateReleaseAction.Request['params']['actionId'],\n      releaseId: UpdateReleaseAction.Request['params']['releaseId'],\n      update: UpdateReleaseAction.Request['body']\n    ) {\n      const action = await strapi.db.query(RELEASE_ACTION_MODEL_UID).findOne({\n        where: {\n          id: actionId,\n          release: {\n            id: releaseId,\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n      });\n\n      if (!action) {\n        throw new errors.NotFoundError(\n          `Action with id ${actionId} not found in release with id ${releaseId} or it is already published`\n        );\n      }\n\n      const actionStatus =\n        update.type === 'publish'\n          ? await getDraftEntryValidStatus(\n              {\n                contentType: action.contentType,\n                documentId: action.entryDocumentId,\n                locale: action.locale,\n              },\n              {\n                strapi,\n              }\n            )\n          : true;\n\n      const updatedAction = await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n        where: {\n          id: actionId,\n          release: {\n            id: releaseId,\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n        data: {\n          ...update,\n          isEntryValid: actionStatus,\n        },\n      });\n\n      getService('release', { strapi }).updateReleaseStatus(releaseId);\n\n      return updatedAction;\n    },\n\n    async delete(\n      actionId: DeleteReleaseAction.Request['params']['actionId'],\n      releaseId: DeleteReleaseAction.Request['params']['releaseId']\n    ) {\n      const deletedAction = await strapi.db.query(RELEASE_ACTION_MODEL_UID).delete({\n        where: {\n          id: actionId,\n          release: {\n            id: releaseId,\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n      });\n\n      if (!deletedAction) {\n        throw new errors.NotFoundError(\n          `Action with id ${actionId} not found in release with id ${releaseId} or it is already published`\n        );\n      }\n\n      getService('release', { strapi }).updateReleaseStatus(releaseId);\n\n      return deletedAction;\n    },\n\n    async validateActionsByContentTypes(contentTypeUids: UID.ContentType[]) {\n      const actions = await strapi.db.query(RELEASE_ACTION_MODEL_UID).findMany({\n        where: {\n          contentType: {\n            $in: contentTypeUids,\n          },\n          // We only want to validate actions that are going to be published\n          type: 'publish',\n          release: {\n            releasedAt: {\n              $null: true,\n            },\n          },\n        },\n        populate: { release: true },\n      });\n\n      const releasesUpdated: Data.ID[] = [];\n\n      await async.map(actions, async (action: ReleaseAction) => {\n        const isValid = await getDraftEntryValidStatus(\n          {\n            contentType: action.contentType,\n            documentId: action.entryDocumentId,\n            locale: action.locale,\n          },\n          { strapi }\n        );\n\n        await strapi.db.query(RELEASE_ACTION_MODEL_UID).update({\n          where: {\n            id: action.id,\n          },\n          data: {\n            isEntryValid: isValid,\n          },\n        });\n\n        if (!releasesUpdated.includes(action.release.id)) {\n          releasesUpdated.push(action.release.id);\n        }\n\n        return {\n          id: action.id,\n          isEntryValid: isValid,\n        };\n      });\n\n      if (releasesUpdated.length > 0) {\n        await async.map(releasesUpdated, async (releaseId: number) => {\n          await getService('release', { strapi }).updateReleaseStatus(releaseId);\n        });\n      }\n    },\n  };\n};\n\nexport type ReleaseActionService = ReturnType<typeof createReleaseActionService>;\n\nexport default createReleaseActionService;\n","import { errors, contentTypes } from '@strapi/utils';\nimport type { Core, UID } from '@strapi/types';\nimport type { Release, CreateRelease, UpdateRelease } from '../../../shared/contracts/releases';\nimport type { CreateReleaseAction } from '../../../shared/contracts/release-actions';\nimport { RELEASE_MODEL_UID } from '../constants';\n\nexport class AlreadyOnReleaseError extends errors.ApplicationError<'AlreadyOnReleaseError'> {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AlreadyOnReleaseError';\n  }\n}\n\nconst createReleaseValidationService = ({ strapi }: { strapi: Core.Strapi }) => ({\n  async validateUniqueEntry(\n    releaseId: CreateReleaseAction.Request['params']['releaseId'],\n    releaseActionArgs: CreateReleaseAction.Request['body']\n  ) {\n    /**\n     * Asserting the type, otherwise TS complains: 'release.actions' is of type 'unknown', even though the types come through for non-populated fields...\n     * Possibly related to the comment on GetValues: https://github.com/strapi/strapi/blob/main/packages/core/types/src/modules/entity-service/result.ts\n     */\n    const release = (await strapi.db.query(RELEASE_MODEL_UID).findOne({\n      where: {\n        id: releaseId,\n      },\n      populate: {\n        actions: true,\n      },\n    })) as Release | null;\n\n    if (!release) {\n      throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n    }\n\n    const isEntryInRelease = release.actions.some(\n      (action) =>\n        action.entryDocumentId === releaseActionArgs.entryDocumentId &&\n        action.contentType === releaseActionArgs.contentType &&\n        (releaseActionArgs.locale ? action.locale === releaseActionArgs.locale : true)\n    );\n\n    if (isEntryInRelease) {\n      throw new AlreadyOnReleaseError(\n        `Entry with documentId ${releaseActionArgs.entryDocumentId}${releaseActionArgs.locale ? `( ${releaseActionArgs.locale})` : ''} and contentType ${releaseActionArgs.contentType} already exists in release with id ${releaseId}`\n      );\n    }\n  },\n  validateEntryData(\n    contentTypeUid: CreateReleaseAction.Request['body']['contentType'],\n    entryDocumentId: CreateReleaseAction.Request['body']['entryDocumentId']\n  ) {\n    const contentType = strapi.contentType(contentTypeUid as UID.ContentType);\n\n    if (!contentType) {\n      throw new errors.NotFoundError(`No content type found for uid ${contentTypeUid}`);\n    }\n\n    if (!contentTypes.hasDraftAndPublish(contentType)) {\n      throw new errors.ValidationError(\n        `Content type with uid ${contentTypeUid} does not have draftAndPublish enabled`\n      );\n    }\n\n    if (contentType.kind === 'collectionType' && !entryDocumentId) {\n      throw new errors.ValidationError('Document id is required for collection type');\n    }\n  },\n  async validatePendingReleasesLimit() {\n    // Use the maximum releases option if it exists, otherwise default to 3\n    const featureCfg = strapi.ee.features.get('cms-content-releases');\n\n    const maximumPendingReleases =\n      (typeof featureCfg === 'object' && featureCfg?.options?.maximumReleases) || 3;\n\n    const [, pendingReleasesCount] = await strapi.db.query(RELEASE_MODEL_UID).findWithCount({\n      filters: {\n        releasedAt: {\n          $null: true,\n        },\n      },\n    });\n\n    // Unlimited is a number that will never be reached like 9999\n    if (pendingReleasesCount >= maximumPendingReleases) {\n      throw new errors.ValidationError('You have reached the maximum number of pending releases');\n    }\n  },\n  async validateUniqueNameForPendingRelease(\n    name: CreateRelease.Request['body']['name'],\n    id?: UpdateRelease.Request['params']['id']\n  ) {\n    const pendingReleases = (await strapi.db.query(RELEASE_MODEL_UID).findMany({\n      where: {\n        releasedAt: {\n          $null: true,\n        },\n        name,\n        ...(id && { id: { $ne: id } }),\n      },\n    })) as Release[];\n\n    const isNameUnique = pendingReleases.length === 0;\n\n    if (!isNameUnique) {\n      throw new errors.ValidationError(`Release with name ${name} already exists`);\n    }\n  },\n  async validateScheduledAtIsLaterThanNow(\n    scheduledAt: CreateRelease.Request['body']['scheduledAt']\n  ) {\n    if (scheduledAt && new Date(scheduledAt) <= new Date()) {\n      throw new errors.ValidationError('Scheduled at must be later than now');\n    }\n  },\n});\n\nexport default createReleaseValidationService;\n","import { scheduleJob, Job } from 'node-schedule';\nimport type { Core } from '@strapi/types';\n\nimport { errors } from '@strapi/utils';\nimport { Release } from '../../../shared/contracts/releases';\nimport { getService } from '../utils';\nimport { RELEASE_MODEL_UID } from '../constants';\n\nconst createSchedulingService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const scheduledJobs = new Map<Release['id'], Job>();\n\n  return {\n    async set(releaseId: Release['id'], scheduleDate: Date) {\n      const release = await strapi.db\n        .query(RELEASE_MODEL_UID)\n        .findOne({ where: { id: releaseId, releasedAt: null } });\n\n      if (!release) {\n        throw new errors.NotFoundError(`No release found for id ${releaseId}`);\n      }\n\n      const job = scheduleJob(scheduleDate, async () => {\n        try {\n          await getService('release', { strapi }).publish(releaseId);\n          // @TODO: Trigger webhook with success message\n        } catch (error) {\n          // @TODO: Trigger webhook with error message\n        }\n\n        this.cancel(releaseId);\n      });\n\n      if (scheduledJobs.has(releaseId)) {\n        this.cancel(releaseId);\n      }\n\n      scheduledJobs.set(releaseId, job);\n\n      return scheduledJobs;\n    },\n\n    cancel(releaseId: Release['id']) {\n      if (scheduledJobs.has(releaseId)) {\n        scheduledJobs.get(releaseId)!.cancel();\n        scheduledJobs.delete(releaseId);\n      }\n\n      return scheduledJobs;\n    },\n\n    getAll() {\n      return scheduledJobs;\n    },\n\n    /**\n     * On bootstrap, we can use this function to make sure to sync the scheduled jobs from the database that are not yet released\n     * This is useful in case the server was restarted and the scheduled jobs were lost\n     * This also could be used to sync different Strapi instances in case of a cluster\n     */\n    async syncFromDatabase() {\n      const releases = await strapi.db.query(RELEASE_MODEL_UID).findMany({\n        where: {\n          scheduledAt: {\n            $gte: new Date(),\n          },\n          releasedAt: null,\n        },\n      });\n\n      for (const release of releases) {\n        this.set(release.id, release.scheduledAt);\n      }\n\n      return scheduledJobs;\n    },\n  };\n};\n\nexport default createSchedulingService;\n","import type { Core } from '@strapi/types';\n\nimport type { Settings } from '../../../shared/contracts/settings';\n\nconst DEFAULT_SETTINGS = {\n  defaultTimezone: null,\n} satisfies Settings;\n\nconst createSettingsService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const getStore = async () => strapi.store({ type: 'core', name: 'content-releases' });\n\n  return {\n    async update({ settings }: { settings: Settings }): Promise<Settings> {\n      const store = await getStore();\n      store.set({ key: 'settings', value: settings });\n      return settings;\n    },\n    async find(): Promise<Settings> {\n      const store = await getStore();\n      const settings = (await store.get({ key: 'settings' })) as Settings | undefined;\n\n      return {\n        ...DEFAULT_SETTINGS,\n        ...(settings || {}),\n      };\n    },\n  };\n};\n\nexport type SettingsService = ReturnType<typeof createSettingsService>;\n\nexport default createSettingsService;\n","import release from './release';\nimport releaseAction from './release-action';\nimport releaseValidation from './validation';\nimport scheduling from './scheduling';\nimport settings from './settings';\n\nexport const services = {\n  release,\n  'release-action': releaseAction,\n  'release-validation': releaseValidation,\n  scheduling,\n  settings,\n};\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nexport const RELEASE_SCHEMA = yup\n  .object()\n  .shape({\n    name: yup.string().trim().required(),\n    scheduledAt: yup.string().nullable(),\n    timezone: yup.string().when('scheduledAt', {\n      is: (value: any) => value !== null && value !== undefined,\n      then: yup.string().required(),\n      otherwise: yup.string().nullable(),\n    }),\n  })\n  .required()\n  .noUnknown();\n\nconst FIND_BY_DOCUMENT_ATTACHED_PARAMS_SCHEMA = yup\n  .object()\n  .shape({\n    contentType: yup.string().required(),\n    entryDocumentId: yup.string().nullable(),\n    hasEntryAttached: yup.string().nullable(),\n    locale: yup.string().nullable(),\n  })\n  .required()\n  .noUnknown();\n\nexport const validateRelease = validateYupSchema(RELEASE_SCHEMA);\n\nexport const validatefindByDocumentAttachedParams = validateYupSchema(\n  FIND_BY_DOCUMENT_ATTACHED_PARAMS_SCHEMA\n);\n","import type Koa from 'koa';\nimport { errors } from '@strapi/utils';\nimport type { Schema } from '@strapi/types';\nimport { RELEASE_MODEL_UID } from '../constants';\nimport { validateRelease, validatefindByDocumentAttachedParams } from './validation/release';\nimport type {\n  CreateRelease,\n  UpdateRelease,\n  PublishRelease,\n  GetRelease,\n  Release,\n  DeleteRelease,\n  GetReleases,\n  MapEntriesToReleases,\n} from '../../../shared/contracts/releases';\nimport type { UserInfo } from '../../../shared/types';\nimport { getService } from '../utils';\n\ntype ReleaseWithPopulatedActions = Release & { actions: { count: number } };\n\nconst releaseController = {\n  /**\n   * Find releases based on documents attached or not to the release.\n   * If `hasEntryAttached` is true, it will return all releases that have the entry attached.\n   * If `hasEntryAttached` is false, it will return all releases that don't have the entry attached.\n   */\n  async findByDocumentAttached(ctx: Koa.Context) {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n    await permissionsManager.validateQuery(ctx.query);\n    const releaseService = getService('release', { strapi });\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    await validatefindByDocumentAttachedParams(query);\n\n    // If entry is a singleType, we need to manually add the entryDocumentId to the query\n    const model = strapi.getModel(query.contentType) as Schema.ContentType;\n    if (model.kind && model.kind === 'singleType') {\n      const document = await strapi.db.query(model.uid).findOne({ select: ['documentId'] });\n\n      if (!document) {\n        throw new errors.NotFoundError(`No entry found for contentType ${query.contentType}`);\n      }\n\n      query.entryDocumentId = document.documentId;\n    }\n\n    const { contentType, hasEntryAttached, entryDocumentId, locale } = query;\n    const isEntryAttached =\n      typeof hasEntryAttached === 'string' ? Boolean(JSON.parse(hasEntryAttached)) : false;\n\n    if (isEntryAttached) {\n      const releases = await releaseService.findMany({\n        where: {\n          releasedAt: null,\n          actions: {\n            contentType,\n            entryDocumentId: entryDocumentId ?? null,\n            locale: locale ?? null,\n          },\n        },\n        populate: {\n          actions: {\n            fields: ['type'],\n            filters: {\n              contentType,\n              entryDocumentId: entryDocumentId ?? null,\n              locale: locale ?? null,\n            },\n          },\n        },\n      });\n\n      ctx.body = { data: releases };\n    } else {\n      const relatedReleases = await releaseService.findMany({\n        where: {\n          releasedAt: null,\n          actions: {\n            contentType,\n            entryDocumentId: entryDocumentId ?? null,\n            locale: locale ?? null,\n          },\n        },\n      });\n\n      const releases = await releaseService.findMany({\n        where: {\n          $or: [\n            {\n              id: {\n                $notIn: relatedReleases.map((release: any) => release.id),\n              },\n            },\n            {\n              actions: null,\n            },\n          ],\n          releasedAt: null,\n        },\n      });\n      ctx.body = { data: releases };\n    }\n  },\n\n  async findPage(ctx: Koa.Context) {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n\n    const releaseService = getService('release', { strapi });\n\n    const query: GetReleases.Request['query'] = await permissionsManager.sanitizeQuery(ctx.query);\n    const { results, pagination } = await releaseService.findPage(query);\n\n    const data = results.map((release: ReleaseWithPopulatedActions) => {\n      const { actions, ...releaseData } = release;\n\n      return {\n        ...releaseData,\n        actions: {\n          meta: {\n            count: actions.count,\n          },\n        },\n      };\n    });\n\n    const pendingReleasesCount = await strapi.db.query(RELEASE_MODEL_UID).count({\n      where: {\n        releasedAt: null,\n      },\n    });\n\n    ctx.body = { data, meta: { pagination, pendingReleasesCount } };\n  },\n\n  async findOne(ctx: Koa.Context) {\n    const id: GetRelease.Request['params']['id'] = ctx.params.id;\n\n    const releaseService = getService('release', { strapi });\n    const releaseActionService = getService('release-action', { strapi });\n    const release = await releaseService.findOne(id, { populate: ['createdBy'] });\n    if (!release) {\n      throw new errors.NotFoundError(`Release not found for id: ${id}`);\n    }\n\n    const count = await releaseActionService.countActions({\n      filters: {\n        release: id,\n      },\n    });\n    const sanitizedRelease = {\n      ...release,\n      createdBy: release.createdBy\n        ? strapi.service('admin::user').sanitizeUser(release.createdBy)\n        : null,\n    };\n\n    // Format the data object\n    const data = {\n      ...sanitizedRelease,\n      actions: {\n        meta: {\n          count,\n        },\n      },\n    };\n\n    ctx.body = { data };\n  },\n\n  async mapEntriesToReleases(ctx: Koa.Context) {\n    const { contentTypeUid, documentIds, locale } = ctx.query;\n\n    if (!contentTypeUid || !documentIds) {\n      throw new errors.ValidationError('Missing required query parameters');\n    }\n\n    const releaseService = getService('release', { strapi });\n\n    const releasesWithActions = await releaseService.findMany({\n      where: {\n        releasedAt: null,\n        actions: {\n          contentType: contentTypeUid,\n          entryDocumentId: {\n            $in: documentIds,\n          },\n          locale,\n        },\n      },\n      populate: {\n        actions: true,\n      },\n    });\n\n    const mappedEntriesInReleases = releasesWithActions.reduce(\n      (acc: MapEntriesToReleases.Response['data'], release: Release) => {\n        release.actions.forEach((action) => {\n          if (action.contentType !== contentTypeUid) {\n            return;\n          }\n\n          if (locale && action.locale !== locale) {\n            return;\n          }\n\n          if (!acc[action.entryDocumentId]) {\n            acc[action.entryDocumentId] = [{ id: release.id, name: release.name }];\n          } else {\n            acc[action.entryDocumentId].push({ id: release.id, name: release.name });\n          }\n        });\n\n        return acc;\n      },\n      {} as MapEntriesToReleases.Response['data']\n    );\n\n    ctx.body = {\n      data: mappedEntriesInReleases,\n    };\n  },\n\n  async create(ctx: Koa.Context) {\n    const user: UserInfo = ctx.state.user;\n    const releaseArgs = ctx.request.body as CreateRelease.Request['body'];\n\n    await validateRelease(releaseArgs);\n\n    const releaseService = getService('release', { strapi });\n    const release = await releaseService.create(releaseArgs, { user });\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n\n    ctx.created({\n      data: await permissionsManager.sanitizeOutput(release),\n    });\n  },\n\n  async update(ctx: Koa.Context) {\n    const user: UserInfo = ctx.state.user;\n    const releaseArgs = ctx.request.body as UpdateRelease.Request['body'];\n    const id: UpdateRelease.Request['params']['id'] = ctx.params.id;\n\n    await validateRelease(releaseArgs);\n\n    const releaseService = getService('release', { strapi });\n    const release = await releaseService.update(id, releaseArgs, { user });\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_MODEL_UID,\n    });\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(release),\n    };\n  },\n\n  async delete(ctx: Koa.Context) {\n    const id: DeleteRelease.Request['params']['id'] = ctx.params.id;\n\n    const releaseService = getService('release', { strapi });\n    const release = await releaseService.delete(id);\n\n    ctx.body = {\n      data: release,\n    };\n  },\n\n  async publish(ctx: Koa.Context) {\n    const id: PublishRelease.Request['params']['id'] = ctx.params.id;\n\n    const releaseService = getService('release', { strapi });\n    const releaseActionService = getService('release-action', { strapi });\n    const release = await releaseService.publish(id);\n\n    const [countPublishActions, countUnpublishActions] = await Promise.all([\n      releaseActionService.countActions({\n        filters: {\n          release: id,\n          type: 'publish',\n        },\n      }),\n      releaseActionService.countActions({\n        filters: {\n          release: id,\n          type: 'unpublish',\n        },\n      }),\n    ]);\n\n    ctx.body = {\n      data: release,\n      meta: {\n        totalEntries: countPublishActions + countUnpublishActions,\n        totalPublishedEntries: countPublishActions,\n        totalUnpublishedEntries: countUnpublishActions,\n      },\n    };\n  },\n};\n\nexport default releaseController;\n","import { yup, validateYupSchema } from '@strapi/utils';\n\nconst RELEASE_ACTION_SCHEMA = yup.object().shape({\n  contentType: yup.string().required(),\n  entryDocumentId: yup.strapiID(),\n  locale: yup.string(),\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\n});\n\nconst RELEASE_ACTION_UPDATE_SCHEMA = yup.object().shape({\n  type: yup.string().oneOf(['publish', 'unpublish']).required(),\n});\n\nconst FIND_MANY_ACTIONS_PARAMS = yup.object().shape({\n  groupBy: yup.string().oneOf(['action', 'contentType', 'locale']),\n});\n\nexport const validateReleaseAction = validateYupSchema(RELEASE_ACTION_SCHEMA);\nexport const validateReleaseActionUpdateSchema = validateYupSchema(RELEASE_ACTION_UPDATE_SCHEMA);\nexport const validateFindManyActionsParams = validateYupSchema(FIND_MANY_ACTIONS_PARAMS);\n","import type Koa from 'koa';\n\nimport { async } from '@strapi/utils';\nimport {\n  validateReleaseAction,\n  validateReleaseActionUpdateSchema,\n  validateFindManyActionsParams,\n} from './validation/release-action';\nimport type {\n  CreateReleaseAction,\n  CreateManyReleaseActions,\n  GetReleaseActions,\n  UpdateReleaseAction,\n  DeleteReleaseAction,\n} from '../../../shared/contracts/release-actions';\nimport { getService } from '../utils';\nimport { RELEASE_ACTION_MODEL_UID } from '../constants';\nimport { AlreadyOnReleaseError } from '../services/validation';\n\nconst releaseActionController = {\n  async create(ctx: Koa.Context) {\n    const releaseId: CreateReleaseAction.Request['params']['releaseId'] = ctx.params.releaseId;\n    const releaseActionArgs = ctx.request.body as CreateReleaseAction.Request['body'];\n\n    await validateReleaseAction(releaseActionArgs);\n\n    const releaseActionService = getService('release-action', { strapi });\n    const releaseAction = await releaseActionService.create(releaseId, releaseActionArgs);\n\n    ctx.created({\n      data: releaseAction,\n    });\n  },\n\n  async createMany(ctx: Koa.Context) {\n    const releaseId: CreateManyReleaseActions.Request['params']['releaseId'] = ctx.params.releaseId;\n    const releaseActionsArgs = ctx.request.body as CreateManyReleaseActions.Request['body'];\n\n    await Promise.all(\n      releaseActionsArgs.map((releaseActionArgs) => validateReleaseAction(releaseActionArgs))\n    );\n\n    const releaseActionService = getService('release-action', { strapi });\n    const releaseService = getService('release', { strapi });\n\n    const releaseActions = await strapi.db.transaction(async () => {\n      const releaseActions = await Promise.all(\n        releaseActionsArgs.map(async (releaseActionArgs) => {\n          try {\n            const action = await releaseActionService.create(releaseId, releaseActionArgs, {\n              disableUpdateReleaseStatus: true,\n            });\n            return action;\n          } catch (error) {\n            // If the entry is already in the release, we don't want to throw an error, so we catch and ignore it\n            if (error instanceof AlreadyOnReleaseError) {\n              return null;\n            }\n            throw error;\n          }\n        })\n      );\n      return releaseActions;\n    });\n\n    const newReleaseActions = releaseActions.filter((action) => action !== null);\n\n    if (newReleaseActions.length > 0) {\n      releaseService.updateReleaseStatus(releaseId);\n    }\n\n    ctx.created({\n      data: newReleaseActions,\n      meta: {\n        entriesAlreadyInRelease: releaseActions.length - newReleaseActions.length,\n        totalEntries: releaseActions.length,\n      },\n    });\n  },\n\n  async findMany(ctx: Koa.Context) {\n    const releaseId: GetReleaseActions.Request['params']['releaseId'] = ctx.params.releaseId;\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: RELEASE_ACTION_MODEL_UID,\n    });\n\n    await validateFindManyActionsParams(ctx.query);\n\n    if (ctx.query.groupBy) {\n      if (!['action', 'contentType', 'locale'].includes(ctx.query.groupBy as string)) {\n        ctx.badRequest('Invalid groupBy parameter');\n      }\n    }\n\n    ctx.query.sort = ctx.query.groupBy === 'action' ? 'type' : ctx.query.groupBy;\n    delete ctx.query.groupBy;\n\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    const releaseActionService = getService('release-action', { strapi });\n    const { results, pagination } = await releaseActionService.findPage(releaseId, {\n      ...query,\n    });\n\n    /**\n     * Release actions can be related to entries of different content types.\n     * We need to sanitize the entry output according to that content type.\n     * So, we group the sanitized output function by content type.\n     */\n    const contentTypeOutputSanitizers = results.reduce((acc: Record<string, any>, action: any) => {\n      if (acc[action.contentType]) {\n        return acc;\n      }\n\n      const contentTypePermissionsManager = strapi\n        .service('admin::permission')\n        .createPermissionsManager({\n          ability: ctx.state.userAbility,\n          model: action.contentType,\n        });\n\n      acc[action.contentType] = contentTypePermissionsManager.sanitizeOutput;\n\n      return acc;\n    }, {});\n\n    /**\n     * sanitizeOutput doesn't work if you use it directly on the Release Action model, it doesn't sanitize the entries\n     * So, we need to sanitize manually each entry inside a Release Action\n     */\n    const sanitizedResults = await async.map(results, async (action: any) => ({\n      ...action,\n      entry: action.entry\n        ? await contentTypeOutputSanitizers[action.contentType](action.entry)\n        : {},\n    }));\n\n    const groupedData = await releaseActionService.groupActions(sanitizedResults, query.sort);\n\n    const contentTypes = await releaseActionService.getContentTypeModelsFromActions(results);\n\n    const releaseService = getService('release', { strapi });\n    const components = await releaseService.getAllComponents();\n\n    ctx.body = {\n      data: groupedData,\n      meta: {\n        pagination,\n        contentTypes,\n        components,\n      },\n    };\n  },\n\n  async update(ctx: Koa.Context) {\n    const actionId: UpdateReleaseAction.Request['params']['actionId'] = ctx.params.actionId;\n    const releaseId: UpdateReleaseAction.Request['params']['releaseId'] = ctx.params.releaseId;\n    const releaseActionUpdateArgs = ctx.request.body as UpdateReleaseAction.Request['body'];\n\n    await validateReleaseActionUpdateSchema(releaseActionUpdateArgs);\n\n    const releaseActionService = getService('release-action', { strapi });\n\n    const updatedAction = await releaseActionService.update(\n      actionId,\n      releaseId,\n      releaseActionUpdateArgs\n    );\n\n    ctx.body = {\n      data: updatedAction,\n    };\n  },\n\n  async delete(ctx: Koa.Context) {\n    const actionId: DeleteReleaseAction.Request['params']['actionId'] = ctx.params.actionId;\n    const releaseId: DeleteReleaseAction.Request['params']['releaseId'] = ctx.params.releaseId;\n\n    const releaseActionService = getService('release-action', { strapi });\n\n    const deletedReleaseAction = await releaseActionService.delete(actionId, releaseId);\n\n    ctx.body = {\n      data: deletedReleaseAction,\n    };\n  },\n};\n\nexport default releaseActionController;\n","import { validateYupSchema } from '@strapi/utils';\nimport * as yup from 'yup';\n\nexport const SETTINGS_SCHEMA = yup\n  .object()\n  .shape({\n    defaultTimezone: yup.string().nullable().default(null),\n  })\n  .required()\n  .noUnknown();\n\nexport const validateSettings = validateYupSchema(SETTINGS_SCHEMA);\n","/**\n * Used to store user configurations related to releases.\n * E.g the default timezone for the release schedule.\n */\nimport type Koa from 'koa';\n\nimport type { GetSettings, UpdateSettings, Settings } from '../../../shared/contracts/settings';\nimport { getService } from '../utils';\nimport { validateSettings } from './validation/settings';\n\nconst settingsController = {\n  async find(ctx: Koa.Context) {\n    // Get settings\n    const settingsService = getService('settings', { strapi });\n    const settings = await settingsService.find();\n\n    // Response\n    ctx.body = { data: settings } satisfies GetSettings.Response;\n  },\n\n  async update(ctx: Koa.Context) {\n    // Data validation\n    const settingsBody = ctx.request.body;\n    const settings = (await validateSettings(settingsBody)) as Settings;\n\n    // Update\n    const settingsService = getService('settings', { strapi });\n    const updatedSettings = await settingsService.update({ settings });\n\n    // Response\n    ctx.body = { data: updatedSettings } satisfies UpdateSettings.Response;\n  },\n};\n\nexport default settingsController;\n","import release from './release';\nimport releaseAction from './release-action';\nimport settings from './settings';\n\nexport const controllers = {\n  release,\n  'release-action': releaseAction,\n  settings,\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/mapEntriesToReleases',\n      handler: 'release.mapEntriesToReleases',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/getByDocumentAttached',\n      handler: 'release.findByDocumentAttached',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/',\n      handler: 'release.create',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.create'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/',\n      handler: 'release.findPage',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/:id',\n      handler: 'release.findOne',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/:id',\n      handler: 'release.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/:id',\n      handler: 'release.delete',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.delete'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/:id/publish',\n      handler: 'release.publish',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.publish'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'POST',\n      path: '/:releaseId/actions',\n      handler: 'release-action.create',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.create-action'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'POST',\n      path: '/:releaseId/actions/bulk',\n      handler: 'release-action.createMany',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.create-action'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'GET',\n      path: '/:releaseId/actions',\n      handler: 'release-action.findMany',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.read'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'PUT',\n      path: '/:releaseId/actions/:actionId',\n      handler: 'release-action.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.update'],\n            },\n          },\n        ],\n      },\n    },\n    {\n      method: 'DELETE',\n      path: '/:releaseId/actions/:actionId',\n      handler: 'release-action.delete',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.delete-action'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","export default {\n  type: 'admin',\n  routes: [\n    {\n      method: 'GET',\n      path: '/settings',\n      handler: 'settings.find',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.settings.read'],\n            },\n          },\n        ],\n      },\n    },\n\n    {\n      method: 'PUT',\n      path: '/settings',\n      handler: 'settings.update',\n      config: {\n        policies: [\n          'admin::isAuthenticatedAdmin',\n          {\n            name: 'admin::hasPermissions',\n            config: {\n              actions: ['plugin::content-releases.settings.update'],\n            },\n          },\n        ],\n      },\n    },\n  ],\n};\n","import release from './release';\nimport releaseAction from './release-action';\nimport settings from './settings';\n\nexport const routes = {\n  settings,\n  release,\n  'release-action': releaseAction,\n};\n","/* eslint-disable @typescript-eslint/no-var-requires */\nimport { register } from './register';\nimport { bootstrap } from './bootstrap';\nimport { destroy } from './destroy';\nimport { contentTypes } from './content-types';\nimport { services } from './services';\nimport { controllers } from './controllers';\nimport { routes } from './routes';\n\nconst getPlugin = () => {\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    return {\n      register,\n      bootstrap,\n      destroy,\n      contentTypes,\n      services,\n      controllers,\n      routes,\n    };\n  }\n\n  return {\n    // Always return register, it handles its own feature check\n    register,\n    // Always return contentTypes to avoid losing data when the feature is disabled\n    contentTypes,\n  };\n};\n\nexport default getPlugin();\n"],"names":["RELEASE_MODEL_UID","RELEASE_ACTION_MODEL_UID","ACTIONS","section","displayName","uid","pluginName","category","subCategory","ALLOWED_WEBHOOK_EVENTS","RELEASES_PUBLISH","getService","name","strapi","plugin","service","getDraftEntryValidStatus","contentType","documentId","locale","populateBuilderService","populate","populateDeep","Infinity","build","entry","getEntry","isEntryValid","contentTypeUid","entityValidator","validateEntityCreation","getModel","undefined","workflowsService","workflow","getAssignedWorkflow","stageRequiredToPublish","strapi_stage","id","status","documents","findOne","findFirst","getEntryStatus","publishedAt","publishedEntry","fields","entryUpdatedAt","Date","updatedAt","getTime","publishedEntryUpdatedAt","deleteActionsOnDisableDraftAndPublish","oldContentTypes","contentTypes","oldContentType","contentTypesUtils","hasDraftAndPublish","db","queryBuilder","delete","where","execute","deleteActionsOnDeleteContentType","deletedContentTypes","difference","keys","length","async","map","deletedContentTypeUID","migrateIsValidAndStatusReleases","releasesWithoutStatus","query","findMany","releasedAt","actions","release","notValidatedActions","filter","action","entryDocumentId","update","data","updateReleaseStatus","publishedReleases","$notNull","revalidateChangedContentTypes","contentTypesWithDraftAndPublish","Object","options","draftAndPublish","releasesAffected","Set","contentTypeUID","isEqual","attributes","type","add","then","releaseId","disableContentTypeLocalized","i18nPlugin","isLocalizedContentType","enableContentTypeLocalized","getDefaultLocale","defaultLocale","addEntryDocumentToReleaseActions","up","trx","hasTable","schema","hasPolymorphicColumn","hasColumn","hasEntryDocumentIdColumn","alterTable","table","string","releaseActions","select","from","target_type","target_id","entry_document_id","down","Error","register","ee","features","isEnabled","actionProvider","registerMany","migrations","providers","internal","hook","graphqlExtensionService","shadowCRUD","disable","updateActionsStatusAndUpdateReleaseStatus","releases","entryStatus","updateMany","deleteActionsAndUpdateReleaseStatus","params","deleteMany","deleteActionsOnDelete","ctx","next","result","error","log","updateActionsOnUpdate","deleteReleasesActionsAndUpdateReleaseStatus","bootstrap","lifecycles","subscribe","models","afterDeleteMany","event","model","kind","use","syncFromDatabase","catch","err","entries","forEach","key","value","get","addAllowedEvent","destroy","scheduledJobs","getAll","job","cancel","collectionName","info","singularName","pluralName","pluginOptions","visible","required","scheduledAt","timezone","enum","relation","target","mappedBy","inversedBy","releaseAction","createReleaseService","dispatchWebhook","isPublished","eventHub","emit","getFormattedActions","errors","ValidationError","formattedActions","publish","unpublish","push","create","releaseData","user","releaseWithCreatorFields","setCreatorFields","validatePendingReleasesLimit","validateUniqueNameForPendingRelease","validateScheduledAtIsLaterThanNow","Promise","all","schedulingService","set","telemetry","send","dbQuery","transform","findPage","count","isEdition","NotFoundError","updatedRelease","getAllComponents","contentManagerComponentsService","components","findAllComponents","componentsMap","reduce","acc","component","transaction","$in","lockedRelease","first","transacting","forUpdate","releaseActionService","totalActions","invalidActions","countActions","filters","getGroupName","queryValue","_","getOr","createReleaseActionService","getLocalesDataForActions","allLocales","find","code","getContentTypesDataForActions","contentTypesUids","contentManagerContentTypeService","contentTypesData","contentTypeConfig","findConfiguration","mainField","settings","disableUpdateReleaseStatus","validateEntryData","validateUniqueEntry","document","actionStatus","results","pagination","actionsWithEntry","groupActions","groupBy","contentTypeUids","includes","allReleaseContentTypesDictionary","allLocalesDictionary","formattedData","mainFieldValue","groupName","getContentTypeModelsFromActions","contentTypeModelsMap","accPromise","contentTypeModel","hasReviewWorkflow","actionId","$null","updatedAction","deletedAction","validateActionsByContentTypes","releasesUpdated","isValid","AlreadyOnReleaseError","ApplicationError","constructor","message","createReleaseValidationService","releaseActionArgs","isEntryInRelease","some","featureCfg","maximumPendingReleases","maximumReleases","pendingReleasesCount","findWithCount","pendingReleases","$ne","isNameUnique","createSchedulingService","Map","scheduleDate","scheduleJob","has","$gte","DEFAULT_SETTINGS","defaultTimezone","createSettingsService","getStore","store","services","releaseValidation","scheduling","RELEASE_SCHEMA","yup","object","shape","trim","nullable","when","is","otherwise","noUnknown","FIND_BY_DOCUMENT_ATTACHED_PARAMS_SCHEMA","hasEntryAttached","validateRelease","validateYupSchema","validatefindByDocumentAttachedParams","releaseController","findByDocumentAttached","permissionsManager","createPermissionsManager","ability","state","userAbility","validateQuery","releaseService","sanitizeQuery","isEntryAttached","Boolean","JSON","parse","body","relatedReleases","$or","$notIn","meta","sanitizedRelease","createdBy","sanitizeUser","mapEntriesToReleases","documentIds","releasesWithActions","mappedEntriesInReleases","releaseArgs","request","created","sanitizeOutput","countPublishActions","countUnpublishActions","totalEntries","totalPublishedEntries","totalUnpublishedEntries","RELEASE_ACTION_SCHEMA","strapiID","oneOf","RELEASE_ACTION_UPDATE_SCHEMA","FIND_MANY_ACTIONS_PARAMS","validateReleaseAction","validateReleaseActionUpdateSchema","validateFindManyActionsParams","releaseActionController","createMany","releaseActionsArgs","newReleaseActions","entriesAlreadyInRelease","badRequest","sort","contentTypeOutputSanitizers","contentTypePermissionsManager","sanitizedResults","groupedData","releaseActionUpdateArgs","deletedReleaseAction","SETTINGS_SCHEMA","default","validateSettings","settingsController","settingsService","settingsBody","updatedSettings","controllers","routes","method","path","handler","config","policies","getPlugin"],"mappings":"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"}